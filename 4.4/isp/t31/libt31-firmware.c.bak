#include "libt31-firmware.a.h"



void tx_isp_release_device(void)

{
  return;
}



int **pop_buffer_fifo(int **param_1) {
    int **ppiVar1;
    int *piVar2;
    int iVar3;

    ppiVar1 = (int **)*param_1;
    if (param_1 != ppiVar1) {
        piVar2 = ppiVar1[1];
        iVar3 = (int)*ppiVar1;
        *(int **)(iVar3 + 4) = piVar2;
        *piVar2 = iVar3;
        *ppiVar1 = (int *)0x100100;
        ppiVar1[1] = (int *)0x200200;
        return ppiVar1;
    }
    return NULL;
}

int tx_isp_vic_start(int param_1)

{
  bool bVar1;
  int iVar2;
  char *puVar3;
  unsigned int uVar4;
  int uVar5;
  int *puVar6;
  int iVar7;
  unsigned int uVar8;
  char *pcVar9;
  int uVar10;
  
  iVar2 = *(int *)(*(int *)(param_1 + 0x110) + 0x14);
  if (iVar2 == 1) {
    if (*(int *)(*(int *)(param_1 + 0x110) + 0x18) == 1) {
      isp_printf(1,"sensor type is SONY_MIPI!\n");
      *(int *)(*(int *)(param_1 + 0xb8) + 0x10) = 0x20000;
      iVar2 = *(int *)(param_1 + 0xb8);
      puVar3 = (char *)0x100010;
    }
    else {
      isp_printf(0,"sensor type is OTHER_MIPI!\n");
      iVar2 = *(int *)(param_1 + 0xb8);
      puVar3 = &DAT_000a000a;
    }
    *(char **)(iVar2 + 0x1a4) = puVar3;
    iVar7 = *(int *)(*(int *)(param_1 + 0x110) + 0x7c);
    iVar2 = 8;
    if ((((iVar7 != 0) && (iVar2 = 10, iVar7 != 1)) && (iVar2 = 0xc, iVar7 != 2)) &&
       (iVar2 = 0x10, iVar7 != 7)) {
      iVar2 = 0;
    }
    uVar4 = iVar2 * *(int *)(*(int *)(param_1 + 0x110) + 0x2c);
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x100) = (uVar4 >> 5) + (uint)((uVar4 & 0x1f) != 0);
    *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 2;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x14) =
         *(int *)(*(int *)(param_1 + 0x110) + 0x7c);
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
         *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
    iVar2 = *(int *)(param_1 + 0x110);
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x10c) =
         *(int *)(iVar2 + 0x40) << 0x19 | *(int *)(iVar2 + 0x44) << 0x18 | *(unsigned int *)(iVar2 + 0x78) |
         *(int *)(iVar2 + 0x48) << 0x17 | *(int *)(iVar2 + 0x5c) << 0x16 |
         *(int *)(iVar2 + 0x60) << 0x14 | *(int *)(iVar2 + 100) << 0x12 |
         *(int *)(iVar2 + 0x68) << 0xc | *(int *)(iVar2 + 0x6c) << 8 | *(int *)(iVar2 + 0x74) << 4 |
         *(int *)(iVar2 + 0x70) << 2;
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x110) =
         *(int *)(*(int *)(param_1 + 0x110) + 0x2c) << 0x10 |
         (uint)*(ushort *)(*(int *)(param_1 + 0x110) + 0x4c);
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x114) =
         (uint)*(ushort *)(*(int *)(param_1 + 0x110) + 0x50);
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x118) =
         (uint)*(ushort *)(*(int *)(param_1 + 0x110) + 0x54);
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x11c) =
         (uint)*(ushort *)(*(int *)(param_1 + 0x110) + 0x58);
    iVar2 = *(int *)(*(int *)(param_1 + 0x110) + 0x74);
    if (iVar2 == 0) {
      iVar2 = *(int *)(param_1 + 0xb8);
      uVar5 = 0x4440;
LAB_0001028c:
      *(int *)(iVar2 + 0x1ac) = uVar5;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x1a8) = uVar5;
      iVar2 = *(int *)(param_1 + 0xb8);
    }
    else {
      if (iVar2 == 1) {
        iVar2 = *(int *)(param_1 + 0xb8);
        uVar5 = 0x4140;
        goto LAB_0001028c;
      }
      if (iVar2 == 2) {
        iVar2 = *(int *)(param_1 + 0xb8);
        uVar5 = 0x4240;
        goto LAB_0001028c;
      }
      isp_printf(2,"Can not support this frame mode!!!\n");
      iVar2 = *(int *)(param_1 + 0xb8);
    }
    *(int *)(iVar2 + 0x1b0) = 0x10;
    **(int **)(param_1 + 0xb8) = 2;
    **(int **)(param_1 + 0xb8) = 4;
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x1a0) =
         *(int *)(*(int *)(param_1 + 0x110) + 0x74) << 4 |
         *(unsigned int *)(*(int *)(param_1 + 0x110) + 0x78);
    do {
    } while (**(int **)(param_1 + 0xb8) != 0);
    (*(int **)(param_1 + 0xb8))[0x41] =
         CONCAT22(*(short *)(*(int *)(param_1 + 0x110) + 0x52),
                  *(short *)(*(int *)(param_1 + 0x110) + 0x4e));
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x108) =
         CONCAT22(*(short *)(*(int *)(param_1 + 0x110) + 0x5a),
                  *(short *)(*(int *)(param_1 + 0x110) + 0x56));
    puVar6 = *(int **)(param_1 + 0xb8);
LAB_00010620:
    *puVar6 = 1;
  }
  else {
    if (iVar2 != 5) {
      if (iVar2 == 4) {
        isp_printf(0,"sensor type is BT656!\n");
        *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 0;
        if (*(int *)(*(int *)(param_1 + 0x110) + 0x18) != 0) goto LAB_000103e4;
        *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
             *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
        *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 0;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x10) = 0x800c0000;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x18) = *(int *)(param_1 + 0xdc) << 1;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1a4) = 0x100010;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1ac) = 0x4440;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1d0) = 0x200;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1d4) = 0x200;
        puVar6 = *(int **)(param_1 + 0xb8);
        goto LAB_000104a8;
      }
      if (iVar2 != 3) {
        if (iVar2 != 2) {
          isp_printf(1,"%s[%d] do not support this interface\n","tx_isp_vic_start",0x1d6);
          return 0xffffffff;
        }
        *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 3;
        uVar4 = *(unsigned int *)(param_1 + 0xe4);
        if (0x300f < uVar4) {
          if (0x310f < uVar4) {
            if (0x31ff < uVar4) {
              if (uVar4 < 0x3210) goto LAB_00010778;
              if (uVar4 - 0x3300 < 0x10) {
                iVar2 = *(int *)(param_1 + 0x110);
                goto LAB_000107f0;
              }
            }
            goto LAB_00010808;
          }
          if (uVar4 < 0x3100) {
            if (uVar4 < 0x3013) {
              iVar2 = *(int *)(param_1 + 0x110);
LAB_000107f0:
              uVar8 = 0x40000;
              if (*(int *)(iVar2 + 0x1c) == 2) {
                uVar8 = 0x50000;
              }
              goto LAB_00010854;
            }
            bVar1 = uVar4 < 0x3015;
LAB_00010708:
            if (!bVar1) goto LAB_00010808;
            iVar2 = *(int *)(param_1 + 0x110);
          }
          else {
            iVar2 = *(int *)(param_1 + 0x110);
          }
          uVar8 = 0;
          if (*(int *)(iVar2 + 0x18) != 3) {
            if (*(int *)(iVar2 + 0x18) != 4) {
              uVar5 = 0x154;
              pcVar9 = "%s[%d] VIC failed to config DVP mode!(8bits-sensor)\n";
              goto LAB_000107d8;
            }
            uVar8 = 0x100000;
          }
          goto LAB_00010854;
        }
        if (uVar4 < 0x300e) {
          uVar8 = 0xc0000;
          if (uVar4 == 0x2011) goto LAB_00010854;
          if (0x2011 < uVar4) {
            if (uVar4 == 0x3007) goto LAB_00010778;
            if (uVar4 < 0x3008) {
              bVar1 = uVar4 - 0x3001 < 2;
              goto LAB_00010708;
            }
            if (uVar4 == 0x3008) {
              iVar2 = *(int *)(param_1 + 0x110);
              goto LAB_000107f0;
            }
            if (uVar4 != 0x300a) goto LAB_00010808;
            iVar2 = *(int *)(param_1 + 0x110);
            goto LAB_0001077c;
          }
          uVar8 = 0x80000;
          if (uVar4 == 0x1008) goto LAB_00010854;
          if (0x1008 < uVar4) {
            if (uVar4 - 0x2002 < 4) {
              uVar8 = 0xc0000;
              goto LAB_00010854;
            }
LAB_00010808:
            isp_printf(1,"%s[%d] VIC do not support this format %d\n","tx_isp_vic_start",0x1a8,uVar4
                      );
            goto LAB_00010830;
          }
          uVar8 = 0xa0000;
          uVar5 = 0;
          if (uVar4 != 0x1006) goto LAB_00010808;
        }
        else {
LAB_00010778:
          iVar2 = *(int *)(param_1 + 0x110);
LAB_0001077c:
          iVar7 = *(int *)(iVar2 + 0x18);
          if (*(int *)(iVar2 + 0x1c) == 2) {
            uVar8 = 0x30000;
            if (iVar7 != 0) {
              if (iVar7 != 1) {
                uVar5 = 0x172;
                pcVar9 = "%s[%d] VIC failed to config DVP SONY mode!(10bits-sensor)\n";
LAB_000107d8:
                isp_printf(1,pcVar9,"tx_isp_vic_start",uVar5);
LAB_00010830:
                uVar8 = 0;
                uVar5 = 0xffffffff;
                goto LAB_00010858;
              }
              uVar8 = 0x130000;
            }
          }
          else {
            uVar8 = 0x20000;
            if (iVar7 != 0) {
              if (iVar7 != 1) {
                uVar5 = 0x17b;
                pcVar9 = "%s[%d] VIC failed to config DVP mode!(10bits-sensor)\n";
                goto LAB_000107d8;
              }
              uVar8 = 0x120000;
            }
          }
LAB_00010854:
          uVar5 = 0;
        }
LAB_00010858:
        iVar2 = *(int *)(param_1 + 0x110);
        if (*(char *)(iVar2 + 0x24) == '\x02') {
          uVar8 = uVar8 | 2;
        }
        if (*(char *)(iVar2 + 0x25) == '\x02') {
          uVar8 = uVar8 | 1;
        }
        if (*(ushort *)(iVar2 + 0x22) != 0) {
          *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x18) =
               (uint)*(ushort *)(iVar2 + 0x22) * 0x10000 + *(int *)(param_1 + 0xdc);
        }
        uVar4 = (uint)*(ushort *)(*(int *)(param_1 + 0x110) + 0x20);
        if (uVar4 == 0) {
          iVar2 = *(int *)(param_1 + 0x110);
        }
        else {
          *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x3c) = uVar4;
          iVar2 = *(int *)(param_1 + 0x110);
        }
        *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x18) =
             (uint)*(ushort *)(iVar2 + 0x22) * 0x10000 + *(int *)(param_1 + 0xdc);
        *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x10) =
             *(int *)(*(int *)(param_1 + 0x110) + 0x28) << 0x1f | uVar8;
        *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
             *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
        **(int **)(param_1 + 0xb8) = 2;
        **(int **)(param_1 + 0xb8) = 4;
        do {
        } while (**(int **)(param_1 + 0xb8) != 0);
        **(int **)(param_1 + 0xb8) = 1;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1a4) = 0x100010;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1ac) = 0x4210;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1b0) = 0x10;
        *(int *)(*(int *)(param_1 + 0xb8) + 0x1b4) = 0;
        iVar2 = *(int *)(param_1 + 0x110);
        goto LAB_0001098c;
      }
      isp_printf(0,"sensor type is BT601!\n");
      *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 1;
      iVar2 = *(int *)(*(int *)(param_1 + 0x110) + 0x18);
      if (iVar2 == 0) {
        *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
             *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
        *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 1;
        iVar2 = *(int *)(param_1 + 0xb8);
        uVar5 = 0x800c8000;
      }
      else {
        if (iVar2 != 1) goto LAB_000103e4;
        *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
             *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
        *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 1;
        iVar2 = *(int *)(param_1 + 0xb8);
        uVar5 = 0x88060820;
      }
      *(int *)(iVar2 + 0x10) = uVar5;
      *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x18) = *(int *)(param_1 + 0xdc) << 1 | 0x100000;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x3c) = 0x30;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x1c) = 0x1b8;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x30) = 0x1402d0;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x34) = 0x50014;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x38) = 0x2d00014;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x1a0) = 0;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x1a4) = 0x100010;
      *(int *)(*(int *)(param_1 + 0xb8) + 0x1ac) = 0x4440;
      **(int **)(param_1 + 0xb8) = 2;
      isp_printf(0,"VIC_CTRL : %08x\n",**(int **)(param_1 + 0xb8));
      puVar6 = *(int **)(param_1 + 0xb8);
      goto LAB_00010620;
    }
    isp_printf(0,"sensor type is BT1120!\n");
    *(int *)(*(int *)(param_1 + 0xb8) + 0xc) = 4;
    if (*(int *)(*(int *)(param_1 + 0x110) + 0x18) != 0) {
LAB_000103e4:
      isp_printf(0,"not support the gpio mode!\n");
      return 0xffffffff;
    }
    *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
         *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
    *(int *)(*(int *)(param_1 + 0xb8) + 0x10) = 0x800c0000;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x18) = *(int *)(param_1 + 0xdc) << 1;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x1a4) = 0x100010;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x1ac) = 0x4440;
    puVar6 = *(int **)(param_1 + 0xb8);
LAB_000104a8:
    *puVar6 = 2;
    isp_printf(0,"VIC_CTRL : %08x\n",**(int **)(param_1 + 0xb8));
    **(int **)(param_1 + 0xb8) = 1;
  }
  uVar5 = 0;
  iVar2 = *(int *)(param_1 + 0x110);
LAB_0001098c:
  if (*(int *)(iVar2 + 0x90) == 0) {
    uVar10 = 0x1e2;
    pcVar9 = "%s:%d::linear mode\n";
  }
  else {
    uVar10 = 0x1e5;
    pcVar9 = "%s:%d::wdr mode\n";
  }
  isp_printf(0,pcVar9,"tx_isp_vic_start",uVar10);
  vic_start_ok = 1;
  return uVar5;
}



int ispvic_frame_channel_qbuf(unsigned int param_1,int *param_2)

{
  int **ppiVar1;
  int iVar2;
  int *piVar3;
  code *pcVar4;
  char *pcVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int local_18 [2];
  
  iVar7 = 0;
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    iVar7 = *(int *)(param_1 + 0xd4);
  }
  iVar8 = iVar7 + 500;
  local_18[0] = 0;
  __private_spin_lock_irqsave(iVar8,local_18);
  ppiVar1 = *(int ***)(iVar7 + 0x1f8);
  *(int **)(iVar7 + 0x1f8) = param_2;
  *param_2 = iVar8;
  param_2[1] = (int)ppiVar1;
  *ppiVar1 = param_2;
  iVar6 = iVar7 + 0x1fc;
  if (iVar6 == *(int *)(iVar7 + 0x1fc)) {
    pcVar5 = "bank no free\n";
  }
  else {
    if (iVar8 != *(int *)(iVar7 + 500)) {
      pcVar4 = pop_buffer_fifo;
      iVar2 = pop_buffer_fifo(iVar8);
      piVar3 = (int *)(*pcVar4)(iVar6);
      iVar6 = *(int *)(iVar2 + 8);
      piVar3[2] = iVar6;
      *(int *)(*(int *)(iVar7 + 0xb8) + (piVar3[4] + 0xc6) * 4) = iVar6;
      ppiVar1 = *(int ***)(iVar7 + 0x208);
      *(int **)(iVar7 + 0x208) = piVar3;
      *piVar3 = iVar7 + 0x204;
      piVar3[1] = (int)ppiVar1;
      *ppiVar1 = piVar3;
      *(int *)(iVar7 + 0x218) = *(int *)(iVar7 + 0x218) + 1;
      goto LAB_00010af8;
    }
    pcVar5 = "qbuffer null\n";
  }
  isp_printf(0,pcVar5);
LAB_00010af8:
  private_spin_unlock_irqrestore(iVar8,local_18[0]);
  return 0;
}



int ispvic_frame_channel_clearbuf(unsigned int param_1)

{
  int *piVar1;
  int *piVar2;
  int iVar3;
  int iVar4;
  int *piVar5;
  int local_18 [3];
  
  iVar4 = 0;
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    iVar4 = *(int *)(param_1 + 0xd4);
  }
  piVar5 = (int *)(iVar4 + 500);
  local_18[0] = 0;
  __private_spin_lock_irqsave(piVar5,local_18);
  while( true ) {
    piVar1 = *(int **)(iVar4 + 500);
    if (piVar5 == piVar1) break;
    piVar2 = (int *)piVar1[1];
    iVar3 = *piVar1;
    *(int **)(iVar3 + 4) = piVar2;
    *piVar2 = iVar3;
    *piVar1 = 0x100100;
    piVar1[1] = 0x200200;
  }
  *(int *)(iVar4 + 0x210) = 0;
  *(int *)(iVar4 + 0x214) = 0;
  private_spin_unlock_irqrestore(piVar5,local_18[0]);
  return 0;
}



int tx_isp_vic_probe(int param_1)

{
  void *__s;
  int iVar1;
  int uVar2;
  int iVar3;
  
  __s = (void *)private_kmalloc(0x21c,0xd0);
  if (__s == (void *)0x0) {
    isp_printf(2,"Failed to allocate vic device\n");
    uVar2 = 0xffffffff;
  }
  else {
    memset(__s,0,0x21c);
    iVar3 = *(int *)(param_1 + 0x58);
    iVar1 = tx_isp_subdev_init(param_1,__s,vic_subdev_ops);
    if (iVar1 == 0) {
      private_platform_set_drvdata(param_1,__s);
      *(char **)((int)__s + 0x34) = isp_vic_frd_fops;
      private_spin_lock_init((int)__s + 0x130);
      private_raw_mutex_init((int)__s + 0x130,"&vsd->mlock",0x10000);
      private_raw_mutex_init((int)__s + 0x154,"&vsd->snap_mlock",0x10000);
      private_init_completion((int)__s + 0x148);
      *(int *)((int)__s + 0x128) = 1;
      dump_vsd = __s;
      *(void **)((int)__s + 0xd4) = __s;
      test_addr = (int)__s + 0x80;
      uVar2 = 0;
    }
    else {
      isp_printf(2,"Failed to init isp module(%d.%d)\n",*(char *)(iVar3 + 2),
                 *(char *)(iVar3 + 3));
      private_kfree(__s);
      uVar2 = 0xfffffff4;
    }
  }
  return uVar2;
}



void dump_isp_vic_frd_open(int param_1,int param_2)

{
  int uVar1;
  
  uVar1 = PDE_DATA();
                    // WARNING: Could not recover jumptable at 0x000194d4. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x170))(param_2,isp_vic_frd_show,uVar1,0x400);
  return;
}



int isp_vic_frd_show(int param_1)

{
  unsigned int uVar1;
  int iVar2;
  int *piVar3;
  int iVar4;
  
  uVar1 = *(unsigned int *)(param_1 + 0x3c);
  if ((uVar1 != 0) && (uVar1 < 0xfffff001)) {
    uVar1 = *(unsigned int *)(uVar1 + 0xd4);
    if ((uVar1 != 0) && (uVar1 < 0xfffff001)) {
      *(int *)(uVar1 + 0x164) = 0;
      iVar2 = 0;
      iVar4 = 0;
      do {
        piVar3 = (int *)((int)&vic_err + iVar2);
        iVar2 = iVar2 + 4;
        iVar4 = iVar4 + *piVar3;
      } while (iVar2 != 0x34);
      *(int *)(uVar1 + 0x164) = iVar4;
      iVar2 = private_seq_printf(param_1," %d, %d\n",*(int *)(uVar1 + 0x160));
      iVar4 = private_seq_printf(param_1,"%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n",
                                 vic_err,DAT_000b2134,DAT_000b2138,DAT_000b213c,DAT_000b2140,
                                 DAT_000b2144,DAT_000b2148,DAT_000b214c,DAT_000b2150,DAT_000b2154,
                                 DAT_000b2158,DAT_000b215c,DAT_000b2160);
      return iVar2 + iVar4;
    }
  }
  isp_printf(2,"The parameter is invalid!\n");
  return 0;
}



int tx_isp_vic_activate_subdev(unsigned int param_1)

{
  int uVar1;
  unsigned int uVar2;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar2 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
      private_mutex_lock(uVar2 + 0x130);
      if (*(int *)(uVar2 + 0x128) == 1) {
        *(int *)(uVar2 + 0x128) = 2;
      }
      private_mutex_unlock(uVar2 + 0x130);
      uVar1 = 0;
    }
  }
  return uVar1;
}



int vic_sensor_ops_ioctl(unsigned int param_1,int param_2,short *param_3)

{
  short sVar1;
  int uVar2;
  int *puVar3;
  int iVar4;
  unsigned int uVar5;
  int iVar6;
  short *psVar7;
  char acStack_38 [28];
  
  if (param_1 == 0) {
    return 0;
  }
  if (0xfffff000 < param_1) {
    return 0;
  }
  uVar5 = *(unsigned int *)(param_1 + 0xd4);
  if (uVar5 == 0) {
    return 0;
  }
  if (0xfffff000 < uVar5) {
    return 0;
  }
  switch(param_2) {
  case 0x200000c:
  case 0x200000f:
    uVar2 = tx_isp_vic_start();
    break;
  default:
switchD_00010fe4_caseD_200000d:
    uVar2 = 0;
    break;
  case 0x200000e:
    puVar3 = *(int **)(uVar5 + 0xb8);
    uVar2 = 0x10;
    goto LAB_00011020;
  case 0x2000013:
    uVar2 = 4;
    **(int **)(uVar5 + 0xb8) = 0;
    puVar3 = *(int **)(uVar5 + 0xb8);
LAB_00011020:
    *puVar3 = uVar2;
    uVar2 = 0;
    break;
  case 0x2000017:
    if (param_3[0x14] == 0) {
      iVar6 = 0;
      do {
        if (*param_3 == 0xff) goto switchD_00010fe4_caseD_200000d;
        snprintf(acStack_38,0x14,"vic_done_gpio%d");
        iVar4 = private_gpio_request(*param_3,acStack_38);
        if ((iVar4 == 0) && (iVar4 = private_gpio_direction_output(*param_3,param_3[10]), iVar4 < 0)
           ) {
          return 0xffffffff;
        }
        iVar6 = iVar6 + 1;
        param_3 = param_3 + 1;
      } while (iVar6 != 10);
      uVar2 = 0;
    }
    else {
      psVar7 = param_3 + 10;
      sVar1 = *param_3;
      while (uVar2 = 0, sVar1 != 0xff) {
        param_3 = param_3 + 1;
        private_gpio_free();
        if (param_3 == psVar7) {
          return 0;
        }
        sVar1 = *param_3;
      }
    }
    break;
  case 0x2000018:
    gpio_switch_state = 1;
    memcpy(&gpio_info,param_3,0x2a);
    uVar2 = 0;
  }
  return uVar2;
}



int vic_sensor_ops_sync_sensor_attr(unsigned int param_1,int param_2)

{
  code *pcVar1;
  unsigned int uVar2;
  
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    uVar2 = *(unsigned int *)(param_1 + 0xd4);
    if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
      if (param_2 == 0) {
        pcVar1 = memset;
      }
      else {
        pcVar1 = memcpy;
      }
      (*pcVar1)(uVar2 + 0xdc,param_2,0x4c);
      return 0;
    }
  }
  isp_printf(2,"The parameter is invalid!\n");
  return 0xffffffea;
}



void dump_vic_reg(int param_1)

{
  int iVar1;
  int iVar2;
  
  iVar1 = *(int *)(param_1 + 0xb8);
  iVar2 = 0;
  while( true ) {
    isp_printf(1,"register is 0x%x, value is 0x%x\n",iVar2,*(int *)(iVar1 + iVar2));
    if (iVar2 + 4 == 0x1b4) break;
    iVar1 = *(int *)(param_1 + 0xb8);
    iVar2 = iVar2 + 4;
  }
  return;
}



void check_vic_error(void)

{
  do {
    dump_vic_reg(dump_vsd);
  } while( true );
}



void tx_vic_enable_irq(void)

{
  unsigned int uVar1;
  int local_18 [3];
  
  uVar1 = 0;
  if ((dump_vsd != 0) && (uVar1 = dump_vsd, 0xfffff000 < dump_vsd)) {
    uVar1 = 0;
  }
  local_18[0] = 0;
  if ((uVar1 != 0) && (uVar1 < 0xfffff001)) {
    __private_spin_lock_irqsave(dump_vsd + 0x130,local_18);
    if (*(int *)(dump_vsd + 0x13c) == 0) {
      *(int *)(dump_vsd + 0x13c) = 1;
      if (*(code **)(uVar1 + 0x84) != (code *)0x0) {
        (**(code **)(uVar1 + 0x84))(uVar1 + 0x80);
      }
    }
    private_spin_unlock_irqrestore(dump_vsd + 0x130,local_18[0]);
  }
  return;
}



void tx_vic_disable_irq(void)

{
  unsigned int uVar1;
  int local_18;
  int local_14;
  
  uVar1 = 0;
  if ((dump_vsd != 0) && (uVar1 = dump_vsd, 0xfffff000 < dump_vsd)) {
    uVar1 = 0;
  }
  local_14 = 0;
  local_18 = 0;
  if ((uVar1 != 0) && (uVar1 < 0xfffff001)) {
    __private_spin_lock_irqsave(dump_vsd + 0x130,&local_18);
    if ((local_14 == 0) && (*(int *)(dump_vsd + 0x13c) != 0)) {
      *(int *)(dump_vsd + 0x13c) = 0;
      if (*(code **)(uVar1 + 0x88) != (code *)0x0) {
        (**(code **)(uVar1 + 0x88))(uVar1 + 0x80);
      }
    }
    private_spin_unlock_irqrestore(dump_vsd + 0x130,local_18);
  }
  return;
}



int vic_core_s_stream(unsigned int param_1,int param_2)

{
  int uVar1;
  unsigned int uVar2;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar2 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
      if (param_2 == 0) {
        uVar1 = 0;
        if (*(int *)(uVar2 + 0x128) == 4) {
          *(int *)(uVar2 + 0x128) = 3;
        }
      }
      else {
        uVar1 = 0;
        if (*(int *)(uVar2 + 0x128) != 4) {
          tx_vic_disable_irq(0x5310000);
          uVar1 = tx_isp_vic_start(uVar2);
          *(int *)(uVar2 + 0x128) = 4;
          tx_vic_enable_irq(0x5310000);
        }
      }
    }
  }
  return uVar1;
}



int vic_core_ops_init(unsigned int param_1,int param_2)

{
  int iVar1;
  code *pcVar2;
  int uVar3;
  int iVar4;
  int uVar5;
  
  if ((param_1 == 0) || (0xfffff000 < param_1)) {
    isp_printf(2,"The parameter is invalid!\n");
    uVar3 = 0xffffffea;
  }
  else {
    iVar4 = *(int *)(param_1 + 0xd4);
    iVar1 = *(int *)(iVar4 + 0x128);
    if (param_2 == 0) {
      uVar5 = 2;
      if (iVar1 == 2) {
        return 0;
      }
      pcVar2 = tx_vic_disable_irq;
    }
    else {
      uVar5 = 3;
      if (iVar1 == 3) {
        return 0;
      }
      pcVar2 = tx_vic_enable_irq;
    }
    uVar3 = 0;
    (*pcVar2)(0x5310000);
    *(int *)(iVar4 + 0x128) = uVar5;
  }
  return uVar3;
}



int tx_isp_vic_slake_subdev(unsigned int param_1)

{
  int uVar1;
  int iVar2;
  unsigned int uVar3;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar3 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if ((uVar3 != 0) && (uVar3 < 0xfffff001)) {
      iVar2 = *(int *)(uVar3 + 0x128);
      if (iVar2 == 4) {
        vic_core_s_stream(param_1,0);
        iVar2 = *(int *)(uVar3 + 0x128);
      }
      if (iVar2 == 3) {
        vic_core_ops_init(param_1,0);
      }
      private_mutex_lock(uVar3 + 0x130);
      if (*(int *)(uVar3 + 0x128) == 2) {
        *(int *)(uVar3 + 0x128) = 1;
      }
      private_mutex_unlock(uVar3 + 0x130);
      uVar1 = 0;
    }
  }
  return uVar1;
}



void vic_mdma_enable(int param_1,int param_2,int param_3,unsigned int param_4,int param_5,
                    char param_6)

{
  int iVar1;
  unsigned int uVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  unsigned int uVar6;
  int iVar7;
  
  uVar6 = (uint)param_6;
  iVar4 = *(int *)(param_1 + 0xdc);
  if (uVar6 != 7) {
    iVar4 = *(int *)(param_1 + 0xdc) << 1;
  }
  vic_mdma_ch0_set_buff_index = 4;
  vic_mdma_ch1_set_buff_index = 4;
  iVar3 = iVar4 * *(int *)(param_1 + 0xe0);
  if (param_3 != 0) {
    vic_mdma_ch1_sub_get_num = param_4;
  }
  vic_mdma_ch0_sub_get_num = param_4;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x308) = 1;
  *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x304) =
       *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
  *(int *)(*(int *)(param_1 + 0xb8) + 0x310) = iVar4;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x314) = iVar4;
  iVar4 = iVar3 * 2;
  iVar5 = iVar3 + param_5;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x318) = param_5;
  if (param_3 == 0) {
    *(int *)(*(int *)(param_1 + 0xb8) + 0x31c) = iVar5;
    *(int *)(*(int *)(param_1 + 0xb8) + 800) = iVar3 + iVar5;
    iVar1 = iVar3 + iVar3 + iVar5;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x324) = iVar1;
    iVar3 = iVar3 + iVar1;
  }
  else {
    *(int *)(*(int *)(param_1 + 0xb8) + 0x31c) = param_5 + iVar4;
    iVar3 = iVar4 + param_5 + iVar4;
    *(int *)(*(int *)(param_1 + 0xb8) + 800) = iVar3;
    iVar3 = iVar4 + iVar3;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x324) = iVar3;
    iVar3 = iVar4 + iVar3;
  }
  iVar7 = iVar5 + iVar4;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x328) = iVar3;
  iVar1 = iVar7 + iVar4;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x340) = iVar5;
  iVar3 = iVar1 + iVar4;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x344) = iVar7;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x348) = iVar1;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x34c) = iVar3;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x350) = iVar3 + iVar4;
  if (uVar6 == 7) {
    *(int *)(*(int *)(param_1 + 0xb8) + 0x32c) = iVar5;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x330) = iVar7;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x334) = iVar1;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x338) = iVar3;
    *(int *)(*(int *)(param_1 + 0xb8) + 0x33c) = iVar3 + iVar4;
  }
  if (param_4 < 8) {
    uVar2 = param_4 << 0x10 | 0x80000020;
  }
  else {
    uVar2 = 0x80080020;
  }
  *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x300) = uVar6 | uVar2;
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: register

unsigned int isp_vic_cmd_set(int param_1,int param_2,unsigned int param_3)

{
  char cVar1;
  char cVar2;
  unsigned int uVar3;
  char *puVar4;
  int iVar5;
  int iVar6;
  code *pcVar7;
  char *pcVar8;
  char *puVar9;
  char *pcVar10;
  int iVar11;
  char cVar12;
  int uVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  int iVar16;
  int uVar17;
  char acStack_90 [64];
  int local_50;
  unsigned int local_4c;
  char *local_48;
  unsigned int local_44;
  code *local_40;
  int local_3c;
  char *local_38;
  char *local_34;
  code *local_30;
  int local_2c;
  
  iVar16 = *(int *)(param_1 + 0x70);
  uVar3 = *(unsigned int *)(iVar16 + 0x3c);
  uVar14 = 0;
  if ((uVar3 != 0) && (uVar3 < 0xfffff001)) {
    uVar14 = *(unsigned int *)(uVar3 + 0xd4);
  }
  isp_printf(0,"count is %d\n",param_3);
  if ((uVar14 == 0) || (0xfffff000 < uVar14)) {
    pcVar10 = "Can\'t ops the node!\n";
    pcVar7 = seq_printf;
    goto LAB_00011848;
  }
  local_44 = (uint)(param_3 < 0x21);
  if (local_44 == 0) {
    puVar4 = (char *)private_kmalloc(param_3 + 1,0xd0);
    if (puVar4 == (char *)0x0) {
      return 0xfffffff4;
    }
  }
  else {
    puVar4 = vic_cmd_buf;
  }
  iVar5 = private_copy_from_user(puVar4,param_2,param_3);
  if (iVar5 != 0) {
    param_3 = 0xfffffff2;
    goto LAB_00011fc8;
  }
  iVar5 = 7;
  pcVar8 = "snapraw";
  iVar11 = 7;
  pcVar10 = puVar4;
  while( true ) {
    cVar1 = *pcVar10;
    cVar2 = *pcVar8;
    cVar12 = cVar2;
    if (iVar11 == 0) break;
    iVar11 = iVar11 + -1;
    pcVar10 = pcVar10 + 1;
    cVar12 = cVar1;
    if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar12 = cVar2, cVar1 == '\0')) break;
  }
  if (cVar12 == cVar2) {
    uVar3 = simple_strtoull(puVar4 + 8,0);
    if (uVar3 < 2) {
      uVar3 = 1;
    }
    else if (param_3 == 8) {
      uVar3 = 1;
    }
    iVar5 = *(int *)(uVar14 + 0xdc);
    uVar15 = iVar5 * 2;
    if (*(int *)(*(int *)(uVar14 + 0x110) + 0x7c) == 7) {
      uVar15 = (uint)(iVar5 * 3) >> 1;
    }
    iVar11 = uVar15 * *(int *)(uVar14 + 0xe0);
    isp_printf(1,"width is %d, height is %d, imagesize is %d\n, snap num is %d, buf size is %d",
               iVar5,*(int *)(uVar14 + 0xe0),iVar11,uVar3,uVar3 * iVar11);
    if (0xa80 < *(unsigned int *)(uVar14 + 0xdc)) {
LAB_00011c90:
      uVar3 = private_seq_printf(iVar16,"Can\'t output the width(%d)!\n");
      return uVar3;
    }
    if (*(int *)(uVar14 + 0x140) == 0) {
      iVar5 = isp_malloc_buffer(uVar3 * iVar11);
      *(int *)(uVar14 + 0x140) = iVar5;
      if (iVar5 == 0) goto LAB_00011fc8;
      *(int *)(uVar14 + 0x144) = iVar5 + -0x80000000;
      if (*(int *)(*(int *)(uVar14 + 0x110) + 0x7c) == 7) {
        uVar17 = 7;
      }
      else {
        uVar17 = 0;
        if (*(int *)(*(int *)(uVar14 + 0x110) + 0x90) != 0) {
          uVar13 = 1;
          goto LAB_000119cc;
        }
      }
      uVar13 = 0;
LAB_000119cc:
      vic_mdma_enable(uVar14,0,uVar13,uVar3,iVar5,uVar17);
      iVar5 = 600;
      local_4c = 0x20000;
LAB_00011a10:
      iVar6 = (*(code *)(local_4c - 0x6c28))(uVar14 + 0x148);
      if (iVar6 < 0) goto LAB_00011a04;
      local_4c = 0x80000;
      uVar15 = 0;
      local_48 = &_LC32;
      iVar16 = 0;
      do {
        puVar9 = local_48;
        if (*(int *)(*(int *)(uVar14 + 0x110) + 0x7c) != 7) {
          puVar9 = &_LC33;
        }
        snprintf(acStack_90,0x40,(char *)(local_4c - 0x2050),uVar15,puVar9);
        iVar5 = private_filp_open(acStack_90,0x301,0x1f6);
        private_get_fs(&local_50);
        local_3c = local_50;
        local_40 = private_set_fs;
        private_set_fs(0);
        private_vfs_write(iVar5,*(int *)(uVar14 + 0x144) + iVar16,iVar11,iVar5 + 0x28);
        private_filp_close(iVar5,0);
        uVar15 = uVar15 + 1;
        (*local_40)(local_3c);
        iVar16 = iVar16 + iVar11;
      } while (uVar15 != uVar3);
      goto LAB_00011fa4;
    }
LAB_00011cb4:
    pcVar10 = "The node is busy!\n";
    pcVar7 = private_seq_printf;
LAB_00011848:
    uVar3 = (*pcVar7)(iVar16,pcVar10);
    return uVar3;
  }
  pcVar8 = "saveraw";
  pcVar10 = puVar4;
  while( true ) {
    cVar1 = *pcVar10;
    cVar2 = *pcVar8;
    cVar12 = cVar2;
    if (iVar5 == 0) break;
    iVar5 = iVar5 + -1;
    pcVar10 = pcVar10 + 1;
    cVar12 = cVar1;
    if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar12 = cVar2, cVar1 == '\0')) break;
  }
  if (cVar12 == cVar2) {
    local_4c = system_reg_read(0x7810);
    local_3c = system_reg_read(0x7814);
    uVar3 = system_reg_read(0x7804);
    iVar5 = system_reg_read(0x7820);
    system_reg_write(0x7810,local_4c & 0x11110111);
    system_reg_write(0x7814,0);
    local_48 = (char *)(uVar3 | 1);
    system_reg_write(0x7804,local_48);
    for (iVar11 = 10; iVar11 != 0; iVar11 = iVar11 + -1) {
      __udelay(1000);
    }
    uVar3 = simple_strtoull(puVar4 + 8,0,0);
    if (uVar3 < 2) {
      uVar3 = 1;
    }
    else if (param_3 == 8) {
      uVar3 = 1;
    }
    iVar11 = *(int *)(uVar14 + 0xdc);
    uVar15 = iVar11 * 2;
    if (*(int *)(*(int *)(uVar14 + 0x110) + 0x7c) == 7) {
      uVar15 = (uint)(iVar11 * 3) >> 1;
    }
    iVar6 = uVar15 * *(int *)(uVar14 + 0xe0);
    isp_printf(1,"width is %d, height is %d, imagesize is %d\n, save num is %d, buf size is %d",
               iVar11,*(int *)(uVar14 + 0xe0),iVar6,uVar3,uVar3 * iVar6);
    if (0xa80 < *(unsigned int *)(uVar14 + 0xdc)) goto LAB_00011c90;
    if (*(int *)(uVar14 + 0x140) != 0) goto LAB_00011cb4;
    *(int *)(uVar14 + 0x140) = iVar5;
    if (iVar5 != 0) {
      *(int *)(uVar14 + 0x144) = iVar5 + -0x80000000;
      if (*(int *)(*(int *)(uVar14 + 0x110) + 0x7c) == 7) {
        uVar17 = 7;
      }
      else {
        uVar17 = 0;
        if (*(int *)(*(int *)(uVar14 + 0x110) + 0x90) != 0) {
          uVar13 = 1;
          goto LAB_00011d3c;
        }
      }
      uVar13 = 0;
LAB_00011d3c:
      vic_mdma_enable(uVar14,0,uVar13,uVar3,iVar5,uVar17);
      iVar5 = 600;
      local_38 = (char *)(uVar14 + 0x148);
      local_40 = (code *)0x20000;
LAB_00011d80:
      iVar11 = (*(local_40 + -0x6c28))(local_38);
      if (iVar11 < 0) goto LAB_00011d74;
      local_40 = (code *)0x80000;
      local_38 = &_LC33;
      uVar15 = 0;
      local_34 = &_LC32;
      iVar16 = 0;
      do {
        puVar9 = local_38;
        if (*(int *)(*(int *)(uVar14 + 0x110) + 0x7c) == 7) {
          puVar9 = local_34;
        }
        snprintf(acStack_90,0x40,(char *)(local_40 + -0x2050),uVar15,puVar9);
        iVar5 = private_filp_open(acStack_90,0x301,0x1f6);
        private_get_fs(&local_50);
        local_2c = local_50;
        local_30 = private_set_fs;
        private_set_fs(0);
        private_vfs_write(iVar5,*(int *)(uVar14 + 0x144) + iVar16,iVar6,iVar5 + 0x28);
        private_filp_close(iVar5,0);
        uVar15 = uVar15 + 1;
        (*local_30)(local_2c);
        iVar16 = iVar16 + iVar6;
      } while (uVar3 != uVar15);
    }
    system_reg_write(0x7810,local_4c & 0x11111111);
    system_reg_write(0x7814,local_3c);
    system_reg_write(0x7804,local_48);
    iVar16 = *(int *)(uVar14 + 0x140);
  }
  else {
    pcVar8 = "help";
    iVar16 = 4;
    pcVar10 = puVar4;
    while( true ) {
      cVar1 = *pcVar10;
      cVar2 = *pcVar8;
      cVar12 = cVar2;
      if (iVar16 == 0) break;
      iVar16 = iVar16 + -1;
      pcVar10 = pcVar10 + 1;
      cVar12 = cVar1;
      if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar12 = cVar2, cVar1 == '\0')) break;
    }
    if (cVar12 == cVar2) {
      isp_printf(1,&_LC37);
      isp_printf(1,"help:\n");
      isp_printf(1,"\t cmd:\n");
      isp_printf(1,"\t\t snapraw\n");
      isp_printf(1,"\t\t\t use cmd \" snapraw\" you should set ispmem first!!!!!\n");
      isp_printf(1,
                 "\t\t\t please use this cmd: \n\t\"echo snapraw savenum > /proc/jz/isp/isp-w02\"\n"
                );
      isp_printf(1,"\t\t\t \"snapraw\"  is cmd; \n");
      isp_printf(1,"\t\t\t \"savenum\" is the num of you save raw picture.\n ");
      isp_printf(1,"\t\t saveraw\n");
      isp_printf(1,
                 "\t\t\t please use this cmd: \n\t\"echo saveraw savenum > /proc/jz/isp/isp-w02\"\n"
                );
      isp_printf(1,"\t\t\t \"saveraw\"  is cmd; \n");
      isp_printf(1,"\t\t\t \"savenum\" is the num of you save raw picture.\n ");
      isp_printf(1,&_LC37);
LAB_00011fa4:
      iVar16 = *(int *)(uVar14 + 0x140);
    }
    else {
      iVar16 = *(int *)(uVar14 + 0x140);
    }
  }
LAB_00011fa8:
  if (iVar16 != 0) {
    isp_free_buffer();
    *(int *)(uVar14 + 0x140) = 0;
  }
LAB_00011fc8:
  if (local_44 == 0) {
    local_4c = param_3;
    private_kfree(puVar4);
    param_3 = local_4c;
  }
  return param_3;
LAB_00011d74:
  iVar5 = iVar5 + -1;
  if (iVar5 == 0) goto LAB_00011ffc;
  goto LAB_00011d80;
LAB_00011a04:
  iVar5 = iVar5 + -1;
  if (iVar5 == 0) goto LAB_00011ffc;
  goto LAB_00011a10;
LAB_00011ffc:
  private_seq_printf(iVar16,"snapraw timeout!\n");
  iVar16 = *(int *)(uVar14 + 0x140);
  goto LAB_00011fa8;
}



void vic_pipo_mdma_enable(int param_1)

{
  int iVar1;
  
  iVar1 = *(int *)(param_1 + 0xdc);
  *(int *)(*(int *)(param_1 + 0xb8) + 0x308) = 1;
  iVar1 = iVar1 << 1;
  *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x304) =
       *(int *)(param_1 + 0xdc) << 0x10 | *(unsigned int *)(param_1 + 0xe0);
  *(int *)(*(int *)(param_1 + 0xb8) + 0x310) = iVar1;
  *(int *)(*(int *)(param_1 + 0xb8) + 0x314) = iVar1;
  return;
}



int ispvic_frame_channel_s_stream(unsigned int param_1,int param_2)

{
  int uVar1;
  char *pcVar2;
  int iVar3;
  int local_18 [2];
  
  iVar3 = 0;
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    iVar3 = *(int *)(param_1 + 0xd4);
  }
  local_18[0] = 0;
  if (param_1 == 0) {
    isp_printf(2,"%s[%d]: invalid parameter\n","ispvic_frame_channel_s_stream",0x47e);
    uVar1 = 0xffffffea;
  }
  else {
    if (param_2 == 0) {
      pcVar2 = "streamoff";
    }
    else {
      pcVar2 = "streamon";
    }
    isp_printf(0,"%s[%d]: %s\n","ispvic_frame_channel_s_stream",0x482,pcVar2);
    uVar1 = 0;
    if (param_2 != *(int *)(iVar3 + 0x210)) {
      __private_spin_lock_irqsave(iVar3 + 500,local_18);
      if (param_2 == 0) {
        *(int *)(*(int *)(iVar3 + 0xb8) + 0x300) = 0;
        *(int *)(iVar3 + 0x210) = 0;
      }
      else {
        vic_pipo_mdma_enable(iVar3);
        *(unsigned int *)(*(int *)(iVar3 + 0xb8) + 0x300) = *(int *)(iVar3 + 0x218) << 0x10 | 0x80000020;
        *(int *)(iVar3 + 0x210) = 1;
      }
      private_spin_unlock_irqrestore(iVar3 + 500,local_18[0]);
      uVar1 = 0;
    }
  }
  return uVar1;
}



void vic_framedone_irq_function(int param_1)

{
  bool bVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  int iVar5;
  short *psVar6;
  
  if (*(int *)(param_1 + 0x214) != 0) {
    if (*(int *)(param_1 + 0x210) == 0) {
      return;
    }
    iVar5 = *(int *)(param_1 + 0xb8);
    iVar3 = 0;
    iVar2 = 0;
    bVar1 = false;
    for (piVar4 = *(int **)(param_1 + 0x204); piVar4 != (int *)(param_1 + 0x204);
        piVar4 = (int *)*piVar4) {
      iVar2 = iVar2 + (uint)bVar1;
      iVar3 = iVar3 + 1;
      if (piVar4[2] == *(int *)(iVar5 + 0x380)) {
        bVar1 = true;
      }
    }
    if (!bVar1) {
      iVar2 = iVar3;
    }
    *(unsigned int *)(iVar5 + 0x300) = iVar2 << 0x10 | *(unsigned int *)(iVar5 + 0x300) & 0xfff0ffff;
  }
  if (gpio_switch_state != 0) {
    psVar6 = &gpio_info;
    gpio_switch_state = 0;
    iVar2 = 0;
    do {
      if (*psVar6 == 0xff) {
        return;
      }
      iVar3 = private_gpio_direction_output(*psVar6,psVar6[10]);
      if (iVar3 < 0) {
        isp_printf(1,"%s[%d] SET ERR GPIO(%d),STATE(%d),%d","vic_framedone_irq_function",0x269,
                   (&gpio_info)[iVar2],*(short *)((iVar2 + 8) * 2 + 0xb20c4),iVar3);
        return;
      }
      iVar2 = iVar2 + 1;
      psVar6 = psVar6 + 1;
    } while (iVar2 != 10);
  }
  return;
}



void vic_mdma_irq_function(int param_1,int param_2)

{
  int *piVar1;
  int **ppiVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  
  if (*(int *)(param_1 + 0x214) != 0) {
    if (*(int *)(param_1 + 0x210) == 0) {
      return;
    }
    iVar6 = param_1 + 0x204;
    iVar7 = *(int *)(*(int *)(param_1 + 0xb8) + 0x380);
    iVar4 = param_1 + 0x1fc;
    piVar1 = (int *)pop_buffer_fifo(iVar6);
    iVar3 = raw_pipe;
    if (piVar1 == (int *)0x0) {
      isp_printf(1,"busy_buf null; busy_buf_count= %d\n");
    }
    else {
      *(int *)(param_1 + 0x218) = *(int *)(param_1 + 0x218) + -1;
      (**(code **)(iVar3 + 4))(*(int *)(iVar3 + 0x14),piVar1);
      ppiVar2 = *(int ***)(param_1 + 0x200);
      *(int **)(param_1 + 0x200) = piVar1;
      piVar1[1] = (int)ppiVar2;
      *piVar1 = iVar4;
      *ppiVar2 = piVar1;
      if (piVar1[2] != iVar7) {
        iVar3 = *(int *)(param_1 + 0x218);
        iVar5 = 0;
        while (iVar5 != iVar3) {
          piVar1 = (int *)pop_buffer_fifo(iVar6);
          if (piVar1 == (int *)0x0) {
            isp_printf(1,"line = %d, i=%d ;num = %d;busy_buf_count %d\n",0x29c,iVar5,iVar3,
                       *(int *)(param_1 + 0x218));
            iVar5 = iVar5 + 1;
          }
          else {
            *(int *)(param_1 + 0x218) = *(int *)(param_1 + 0x218) + -1;
            isp_printf(1,"line : %d; bank_addr:0x%x; addr:0x%x\n",0x296,iVar7,piVar1[2]);
            (**(code **)(raw_pipe + 4))(*(int *)(raw_pipe + 0x14),piVar1);
            ppiVar2 = *(int ***)(param_1 + 0x200);
            *(int **)(param_1 + 0x200) = piVar1;
            piVar1[1] = (int)ppiVar2;
            *piVar1 = iVar4;
            *ppiVar2 = piVar1;
            if (piVar1[2] == iVar7) {
              iVar3 = *(int *)(param_1 + 0x1fc);
              goto LAB_00012504;
            }
            iVar5 = iVar5 + 1;
          }
        }
        isp_printf(2,"function: %s ; vic dma addrrss error!!!\n","vic_mdma_irq_function");
        isp_printf(2,"VIC_ADDR_DMA_CONTROL : 0x%x\n",
                   *(int *)(*(int *)(param_1 + 0xb8) + 0x300));
        iVar3 = *(int *)(param_1 + 0x1fc);
        goto LAB_00012504;
      }
    }
    iVar3 = *(int *)(param_1 + 0x1fc);
LAB_00012504:
    if (iVar3 == iVar4) {
      return;
    }
    if (param_1 + 500 == *(int *)(param_1 + 500)) {
      return;
    }
    iVar3 = pop_buffer_fifo();
    piVar1 = (int *)pop_buffer_fifo(iVar4);
    piVar1[2] = *(int *)(iVar3 + 8);
    ppiVar2 = *(int ***)(param_1 + 0x208);
    *(int **)(param_1 + 0x208) = piVar1;
    *piVar1 = iVar6;
    piVar1[1] = (int)ppiVar2;
    *ppiVar2 = piVar1;
    *(int *)(param_1 + 0x218) = *(int *)(param_1 + 0x218) + 1;
    *(int *)(*(int *)(param_1 + 0xb8) + (piVar1[4] + 0xc6) * 4) = piVar1[2];
    return;
  }
  iVar3 = *(int *)(param_1 + 0xdc);
  iVar4 = *(int *)(param_1 + 0xe0);
  isp_printf(1,"Info[VIC_MDAM_IRQ] : channel[%d] frame done\n",param_2);
  iVar3 = iVar3 * iVar4 * 2;
  if (param_2 == 0) {
    if (vic_mdma_ch0_sub_get_num == 0) goto LAB_000125c0;
    iVar4 = vic_mdma_ch0_set_buff_index + 0xc6;
    vic_mdma_ch0_set_buff_index = (vic_mdma_ch0_set_buff_index + 1) % 5;
    *(int *)(*(int *)(param_1 + 0xb8) + (vic_mdma_ch0_set_buff_index + 0xc6) * 4) =
         iVar3 + *(int *)(*(int *)(param_1 + 0xb8) + iVar4 * 4);
    vic_mdma_ch0_sub_get_num = vic_mdma_ch0_sub_get_num + -1;
    if (vic_mdma_ch0_sub_get_num == 7) {
      *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x300) =
           *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0x300) & 0xfff0ffff | 0x70000;
      return;
    }
  }
  else if ((param_2 == 1) && (vic_mdma_ch1_sub_get_num != 0)) {
    iVar4 = vic_mdma_ch1_set_buff_index + 0xc6;
    vic_mdma_ch1_set_buff_index = (vic_mdma_ch1_set_buff_index + 1) % 5;
    *(int *)(*(int *)(param_1 + 0xb8) + (vic_mdma_ch1_set_buff_index + 0xc6) * 4) =
         iVar3 + *(int *)(*(int *)(param_1 + 0xb8) + iVar4 * 4);
    vic_mdma_ch1_sub_get_num = vic_mdma_ch1_sub_get_num + -1;
  }
  if (vic_mdma_ch0_sub_get_num != 0) {
    return;
  }
LAB_000125c0:
  if (vic_mdma_ch1_sub_get_num != 0) {
    return;
  }
                    // WARNING: Could not recover jumptable at 0x000193d0. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x13c))(param_1 + 0x148);
  return;
}



int isp_vic_interrupt_service_routine(unsigned int param_1)

{
  int iVar1;
  int *piVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    uVar5 = *(unsigned int *)(param_1 + 0xd4);
    if ((uVar5 != 0) && (uVar5 < 0xfffff001)) {
      iVar1 = *(int *)(param_1 + 0xb8);
      uVar3 = ~*(unsigned int *)(iVar1 + 0x1e8) & *(unsigned int *)(iVar1 + 0x1e0);
      uVar4 = ~*(unsigned int *)(iVar1 + 0x1ec) & *(unsigned int *)(iVar1 + 0x1e4);
      *(unsigned int *)(iVar1 + 0x1f0) = uVar3;
      *(unsigned int *)(*(int *)(param_1 + 0xb8) + 500) = uVar4;
      if (vic_start_ok != '\0') {
        if ((uVar3 & 1) != 0) {
          *(int *)(uVar5 + 0x160) = *(int *)(uVar5 + 0x160) + 1;
          vic_framedone_irq_function(uVar5,0);
        }
        if ((uVar3 & 0x200) != 0) {
          DAT_000b215c = DAT_000b215c + 1;
          isp_printf(1,"Err [VIC_INT] : frame asfifo ovf!!!!!\n");
        }
        if ((uVar3 & 0x400) != 0) {
          vic_err = vic_err + 1;
          isp_printf(1,"Err [VIC_INT] : hor err ch0 !!!!! 0x3a8 = 0x%08x\n",
                     *(int *)(*(int *)(param_1 + 0xb8) + 0x3a8));
        }
        if ((uVar3 & 0x800) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : hor err ch1 !!!!!\n");
        }
        if ((uVar3 & 0x1000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : hor err ch2 !!!!!\n");
        }
        if ((uVar3 & 0x2000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : hor err ch3 !!!!!\n");
        }
        if ((uVar3 & 0x4000) != 0) {
          DAT_000b2134 = DAT_000b2134 + 1;
          isp_printf(1,"Err [VIC_INT] : ver err ch0 !!!!!\n");
        }
        if ((uVar3 & 0x8000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : ver err ch1 !!!!!\n");
        }
        if ((uVar3 & 0x10000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : ver err ch2 !!!!!\n");
        }
        if ((uVar3 & 0x20000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : ver err ch3 !!!!!\n");
        }
        if ((uVar3 & 0x40000) != 0) {
          DAT_000b2138 = DAT_000b2138 + 1;
          isp_printf(1,"Err [VIC_INT] : hvf err !!!!!\n");
        }
        if ((uVar3 & 0x80000) != 0) {
          DAT_000b213c = DAT_000b213c + 1;
          isp_printf(1,"Err [VIC_INT] : dvp hcomp err!!!!\n");
        }
        if ((uVar3 & 0x100000) != 0) {
          DAT_000b2140 = DAT_000b2140 + 1;
          isp_printf(1,"Err [VIC_INT] : dma syfifo ovf!!!\n");
        }
        if ((uVar3 & 0x200000) != 0) {
          DAT_000b2144 = DAT_000b2144 + 1;
          isp_printf(1,"Err [VIC_INT] : control limit err!!!\n");
        }
        if ((uVar3 & 0x400000) != 0) {
          DAT_000b2148 = DAT_000b2148 + 1;
          isp_printf(1,"Err [VIC_INT] : image syfifo ovf !!!\n");
        }
        if ((uVar3 & 0x800000) != 0) {
          DAT_000b214c = DAT_000b214c + 1;
          isp_printf(1,"Err [VIC_INT] : mipi fid asfifo ovf!!!\n");
        }
        if ((uVar3 & 0x1000000) != 0) {
          DAT_000b2150 = DAT_000b2150 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch0 hcomp err !!!\n");
        }
        if ((uVar3 & 0x2000000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch1 hcomp err !!!\n");
        }
        if ((uVar3 & 0x4000000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch2 hcomp err !!!\n");
        }
        if ((uVar3 & 0x8000000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch3 hcomp err !!!\n");
        }
        if ((uVar3 & 0x10000000) != 0) {
          DAT_000b2154 = DAT_000b2154 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch0 vcomp err !!!\n");
        }
        if ((uVar3 & 0x20000000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch1 vcomp err !!!\n");
        }
        if ((uVar3 & 0x40000000) != 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch2 vcomp err !!!\n");
        }
        if ((int)uVar3 < 0) {
          DAT_000b2160 = DAT_000b2160 + 1;
          isp_printf(1,"Err [VIC_INT] : mipi ch3 vcomp err !!!\n");
        }
        if ((uVar4 & 1) != 0) {
          vic_mdma_irq_function(uVar5,0);
        }
        if ((uVar4 & 2) != 0) {
          vic_mdma_irq_function(uVar5,1);
        }
        if ((uVar4 & 4) != 0) {
          isp_printf(1,"Err [VIC_INT] : dma arb trans done ovf!!!\n");
        }
        if ((uVar4 & 8) != 0) {
          DAT_000b2158 = DAT_000b2158 + 1;
          isp_printf(1,"Err [VIC_INT] : dma chid ovf  !!!\n");
        }
        if (((uVar3 & 0xde00) != 0) && (vic_start_ok == '\x01')) {
          isp_printf(1,"error handler!!!\n");
          **(int **)(uVar5 + 0xb8) = 4;
          piVar2 = *(int **)(uVar5 + 0xb8);
          while (*piVar2 != 0) {
            isp_printf(1,"addr ctl is 0x%x\n",*piVar2);
            piVar2 = *(int **)(uVar5 + 0xb8);
          }
          piVar2[0x41] = piVar2[0x41];
          *(int *)(*(int *)(uVar5 + 0xb8) + 0x108) =
               *(int *)(*(int *)(uVar5 + 0xb8) + 0x108);
          **(int **)(uVar5 + 0xb8) = 1;
        }
      }
    }
    return 1;
  }
  return 1;
}



int tx_isp_subdev_pipo(code *param_1,code **param_2)

{
  code **ppcVar1;
  int *piVar2;
  int iVar3;
  int **ppiVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  
  iVar6 = 0;
  if ((param_1 != (code *)0x0) && (param_1 < (code *)0xfffff001)) {
    iVar6 = *(int *)(param_1 + 0xd4);
  }
  *(int *)(iVar6 + 0x20c) = 1;
  raw_pipe = param_2;
  if (param_2 == (code **)0x0) {
    *(int *)(iVar6 + 0x214) = 0;
  }
  else {
    iVar7 = iVar6 + 0x1fc;
    *(int *)(iVar6 + 0x204) = iVar6 + 0x204;
    *(int *)(iVar6 + 0x208) = iVar6 + 0x204;
    *(int *)(iVar6 + 500) = iVar6 + 500;
    *(int *)(iVar6 + 0x1f8) = iVar6 + 500;
    *(int *)(iVar6 + 0x1fc) = iVar7;
    *(int *)(iVar6 + 0x200) = iVar7;
    private_spin_lock_init();
    *raw_pipe = ispvic_frame_channel_qbuf;
    ppcVar1 = raw_pipe;
    raw_pipe[2] = ispvic_frame_channel_clearbuf;
    ppcVar1[3] = ispvic_frame_channel_s_stream;
    ppcVar1[4] = param_1;
    iVar3 = 0;
    piVar2 = (int *)(iVar6 + 0x168);
    do {
      piVar2[4] = iVar3;
      ppiVar4 = *(int ***)(iVar6 + 0x200);
      *(int **)(iVar6 + 0x200) = piVar2;
      piVar2[1] = (int)ppiVar4;
      *piVar2 = iVar7;
      *ppiVar4 = piVar2;
      iVar5 = iVar3 + 0xc6;
      iVar3 = iVar3 + 1;
      *(int *)(*(int *)(iVar6 + 0xb8) + iVar5 * 4) = 0;
      piVar2 = piVar2 + 7;
    } while (iVar3 != 5);
    *(int *)(iVar6 + 0x214) = 1;
  }
  return 0;
}



int vic_core_ops_ioctl(int param_1,int param_2,int *param_3)

{
  code *pcVar1;
  int iVar2;
  
  if (param_2 == 0x1000001) {
    if (param_1 == 0) {
      return -0x13;
    }
    iVar2 = *(int *)(*(int *)(param_1 + 0xc4) + 0xc);
    if (iVar2 == 0) {
      return 0;
    }
    pcVar1 = *(code **)(iVar2 + 4);
    if (pcVar1 == (code *)0x0) {
      return 0;
    }
  }
  else {
    if (param_2 == 0x3000009) {
      iVar2 = tx_isp_subdev_pipo();
      goto LAB_00013074;
    }
    if (param_2 != 0x1000000) {
      return 0;
    }
    if (param_1 == 0) {
      return -0x13;
    }
    if (**(int **)(param_1 + 0xc4) == 0) {
      return 0;
    }
    pcVar1 = *(code **)(**(int **)(param_1 + 0xc4) + 4);
    if (pcVar1 == (code *)0x0) {
      return 0;
    }
    param_3 = (int *)*param_3;
  }
  iVar2 = (*pcVar1)(param_1,param_3);
LAB_00013074:
  if (iVar2 == -0x203) {
    iVar2 = 0;
  }
  return iVar2;
}



int vic_core_ops_ioctl(int param_1,int param_2,int *param_3)

{
  code *pcVar1;
  int iVar2;
  
  if ((((param_2 == 0x1000000) && (iVar2 = *(int *)(param_1 + 0xe4), iVar2 != 0)) &&
      (**(int **)(iVar2 + 0xc4) != 0)) &&
     (pcVar1 = *(code **)(**(int **)(iVar2 + 0xc4) + 4), pcVar1 != (code *)0x0)) {
    iVar2 = (*pcVar1)(iVar2,*param_3);
    if (iVar2 == -0x203) {
      iVar2 = 0;
    }
    return iVar2;
  }
  return 0;
}



int vin_s_stream(int param_1,int param_2)

{
  int uVar1;
  code **ppcVar2;
  code *pcVar3;
  int iVar4;
  
  if (param_2 == 0) {
    if (*(int *)(param_1 + 0xf4) != 4) {
      return 0;
    }
  }
  else if (*(int *)(param_1 + 0xf4) == 4) {
    return 0;
  }
  iVar4 = *(int *)(param_1 + 0xe4);
  if (iVar4 != 0) {
    ppcVar2 = *(code ***)(*(int *)(iVar4 + 0xc4) + 4);
    if (ppcVar2 == (code **)0x0) {
      return -0x203;
    }
    pcVar3 = *ppcVar2;
    if (pcVar3 == (code *)0x0) {
      return -0x203;
    }
    iVar4 = (*pcVar3)(iVar4,param_2);
    if (iVar4 != 0) {
      return iVar4;
    }
  }
  uVar1 = 4;
  if (param_2 == 0) {
    uVar1 = 3;
  }
  *(int *)(param_1 + 0xf4) = uVar1;
  return 0;
}



int tx_isp_vin_activate_subdev(int param_1)

{
  private_mutex_lock(param_1 + 0xe8);
  if (*(int *)(param_1 + 0xf4) == 1) {
    *(int *)(param_1 + 0xf4) = 2;
  }
  private_mutex_unlock(param_1 + 0xe8);
  *(int *)(param_1 + 0xf8) = *(int *)(param_1 + 0xf8) + 1;
  return 0;
}



int tx_isp_vin_init(int param_1,int param_2)

{
  int iVar1;
  code *pcVar2;
  int uVar3;
  
  if (*(int *)(param_1 + 0xe4) == 0) {
    isp_printf(1,"[%d] Don\'t have active sensor!\n",0x158);
    iVar1 = -1;
  }
  else {
    iVar1 = **(int **)(*(int *)(param_1 + 0xe4) + 0xc4);
    if (iVar1 == 0) {
      iVar1 = 0;
    }
    else {
      pcVar2 = *(code **)(iVar1 + 4);
      if (pcVar2 == (code *)0x0) {
        iVar1 = 0;
      }
      else {
        iVar1 = (*pcVar2)();
        if (iVar1 == -0x203) {
          iVar1 = 0;
        }
      }
    }
  }
  uVar3 = 3;
  if (param_2 == 0) {
    uVar3 = 2;
  }
  *(int *)(param_1 + 0xf4) = uVar3;
  return iVar1;
}



int subdev_sensor_ops_set_input(int param_1,unsigned int *param_2)

{
  int iVar1;
  int uVar2;
  int iVar3;
  int *piVar4;
  int local_20 [3];
  
  local_20[0] = 0;
  if (param_1 == 0) {
    return -0x16;
  }
  if (param_2 == (unsigned int *)0x0) {
    return -0x16;
  }
  iVar3 = *(int *)(param_1 + 0xe4);
  if (iVar3 == 0) {
LAB_000132e8:
    if (*param_2 == 0xffffffff) {
      return 0;
    }
    private_mutex_lock(param_1 + 0xe8);
    for (piVar4 = *(int **)(param_1 + 0xdc);
        (iVar3 = (int)(piVar4 + -0x39), piVar4 != (int *)(param_1 + 0xdc) &&
        (piVar4[-2] != *param_2)); piVar4 = (int *)*piVar4) {
    }
    private_mutex_unlock(param_1 + 0xe8);
    if (piVar4[-2] != *param_2) {
      isp_printf(2,"Failed to the set input sensor(%d) that .\n");
      return -0x16;
    }
    *(int *)(param_1 + 0xe4) = iVar3;
    if (iVar3 == 0) {
      return -2;
    }
    if ((code *)piVar4[-0x1a] != (code *)0x0) {
      iVar1 = (*(code *)piVar4[-0x1a])(iVar3,0x1000001,piVar4 + 0x54);
      if (iVar1 != 0) {
        return iVar1;
      }
      local_20[0] = 1;
      if ((code *)piVar4[-0x1a] == (code *)0x0) {
        iVar3 = -0x203;
        uVar2 = piVar4[0x16];
      }
      else {
        iVar3 = (*(code *)piVar4[-0x1a])(iVar3,0x1000000,local_20);
        if (iVar3 == 0) {
          *param_2 = piVar4[0x62] << 0x10 | (uint)*(ushort *)(piVar4 + 99);
          return 0;
        }
        uVar2 = piVar4[0x16];
      }
      isp_printf(1,"Failed to deinit the pipeline of %s.\n",uVar2);
      return iVar3;
    }
LAB_000134d8:
    iVar1 = -0x203;
  }
  else {
    if (*param_2 == *(unsigned int *)(iVar3 + 0xdc)) {
      return 0;
    }
    if (*(int *)(param_1 + 0xf4) == 4) {
      isp_printf(1,"Please, streamoff sensor firstly!\n");
      return -1;
    }
    if (*(code **)(param_1 + 0x7c) == (code *)0x0) {
      iVar1 = -0x203;
      uVar2 = *(int *)(iVar3 + 0x13c);
    }
    else {
      iVar1 = (**(code **)(param_1 + 0x7c))(param_1,0x1000000,local_20);
      if (iVar1 == 0) {
        *(int *)(param_1 + 0xe4) = 0;
        if (*(code **)(iVar3 + 0x7c) != (code *)0x0) {
          iVar3 = (**(code **)(iVar3 + 0x7c))(iVar3,0x1000001,0);
          if (iVar3 != 0) {
            return iVar3;
          }
          goto LAB_000132e8;
        }
        goto LAB_000134d8;
      }
      uVar2 = *(int *)(iVar3 + 0x13c);
    }
    isp_printf(1,"Failed to deinit the pipeline of %s.\n",uVar2);
  }
  return iVar1;
}



int tx_isp_vin_reset(int param_1)

{
  code *pcVar1;
  int iVar2;
  
  if (*(int *)(param_1 + 0xe4) == 0) {
    isp_printf(1,"[%d] Don\'t have active sensor!\n",0x16c);
    iVar2 = -1;
  }
  else {
    iVar2 = **(int **)(*(int *)(param_1 + 0xe4) + 0xc4);
    if (iVar2 == 0) {
      iVar2 = 0;
    }
    else {
      pcVar1 = *(code **)(iVar2 + 8);
      if (pcVar1 == (code *)0x0) {
        iVar2 = 0;
      }
      else {
        iVar2 = (*pcVar1)();
        if (iVar2 == -0x203) {
          iVar2 = 0;
        }
      }
    }
  }
  return iVar2;
}



int tx_isp_vin_probe(int param_1)

{
  void *__s;
  int uVar1;
  int iVar2;
  int iVar3;
  
  __s = (void *)private_kmalloc(0xfc,0xd0);
  if (__s == (void *)0x0) {
    isp_printf(2,"Failed to allocate sensor subdev\n");
    uVar1 = 0xfffffff4;
  }
  else {
    memset(__s,0,0xfc);
    private_raw_mutex_init((int)__s + 0xe8,"&vin->mlock",0x10000);
    *(int *)((int)__s + 0xdc) = (int)__s + 0xdc;
    *(int *)((int)__s + 0xe0) = (int)__s + 0xdc;
    *(int *)((int)__s + 0xf8) = 0;
    *(int *)((int)__s + 0xe4) = 0;
    iVar3 = *(int *)(param_1 + 0x58);
    iVar2 = tx_isp_subdev_init(param_1,__s,vin_subdev_ops);
    if (iVar2 == 0) {
      *(void **)((int)__s + 0xd8) = __s;
      private_platform_set_drvdata(param_1,__s);
      *(char **)((int)__s + 0x34) = video_input_cmd_fops;
      *(int *)((int)__s + 0xf4) = 1;
      uVar1 = 0;
    }
    else {
      isp_printf(2,"Failed to init isp module(%d.%d)\n",*(char *)(iVar3 + 2),
                 *(char *)(iVar3 + 3));
      private_kfree(__s);
      uVar1 = 0xfffffff4;
    }
  }
  return uVar1;
}



void video_input_cmd_open(int param_1,int param_2)

{
  int uVar1;
  
  uVar1 = PDE_DATA();
                    // WARNING: Could not recover jumptable at 0x000194d4. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x170))(param_2,video_input_cmd_show,uVar1,0x200);
  return;
}



unsigned int video_input_cmd_set(int param_1,unsigned int param_2,unsigned int param_3)

{
  char cVar1;
  char cVar2;
  unsigned int uVar3;
  char *__s;
  int iVar4;
  int uVar5;
  code *pcVar6;
  int uVar7;
  char *pcVar8;
  char *pcVar9;
  char cVar10;
  int iVar11;
  unsigned int uVar12;
  int iVar13;
  unsigned int uVar14;
  int unaff_gp;
  int local_48 [2];
  int local_40;
  int local_3c;
  int local_38;
  int local_34;
  int local_30 [2];
  
  iVar13 = *(int *)(param_1 + 0x70);
  uVar3 = *(unsigned int *)(iVar13 + 0x3c);
  if ((uVar3 == 0) || (0xfffff000 < uVar3)) {
LAB_0001376c:
    uVar3 = private_seq_printf(iVar13,"don\'t have active sensor, please set sensor firstly!\n");
    return uVar3;
  }
  uVar3 = *(unsigned int *)(uVar3 + 0xd8);
  if ((uVar3 == 0) || (0xfffff000 < uVar3)) goto LAB_0001376c;
  uVar3 = *(unsigned int *)(uVar3 + 0xe4);
  if ((uVar3 == 0) || (0xfffff000 < uVar3)) goto LAB_0001376c;
  if (param_3 < 0x81) {
    __s = video_input_cmd_buf;
  }
  else {
    __s = (char *)private_kmalloc(param_3 + 1,0xd0);
    if (__s == (char *)0x0) {
      return 0xfffffff4;
    }
    memset(__s,0,param_3 + 1);
  }
  uVar12 = param_3;
  if (((param_3 | param_2 | param_3 + param_2) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
    __might_sleep("include/linux/kernel.h",0xc9,0);
    __copy_user(__s,param_2);
  }
  uVar14 = 0xfffffff2;
  if (uVar12 != 0) goto LAB_00013b6c;
  iVar4 = 9;
  pcVar8 = "r sen_reg";
  iVar11 = 9;
  pcVar9 = __s;
  while( true ) {
    cVar1 = *pcVar9;
    cVar2 = *pcVar8;
    cVar10 = cVar2;
    if (iVar11 == 0) break;
    iVar11 = iVar11 + -1;
    pcVar9 = pcVar9 + 1;
    cVar10 = cVar1;
    if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
  }
  uVar14 = param_3;
  if (cVar10 == cVar2) {
    uVar5 = private_simple_strtoull(__s + 10,0);
    local_48[0] = uVar3 + 0x8c;
    local_3c = 0;
    local_40 = uVar5;
    if (((**(int **)(uVar3 + 0xc4) == 0) ||
        (pcVar6 = *(code **)(**(int **)(uVar3 + 0xc4) + 0xc), pcVar6 == (code *)0x0)) ||
       (iVar4 = (*pcVar6)(uVar3,local_48), iVar4 != 0)) {
      isp_printf(2,"##### err %s.%d\n","video_input_cmd_set",0x270);
    }
    private_seq_printf(iVar13,"isp: sensor reg read 0x%x(0x%x)\n",uVar5,local_38);
    sprintf(video_input_cmd_buf,"0x%x\n");
    goto LAB_00013b6c;
  }
  pcVar8 = "r list";
  iVar11 = 6;
  pcVar9 = __s;
  while( true ) {
    cVar1 = *pcVar9;
    cVar2 = *pcVar8;
    cVar10 = cVar2;
    if (iVar11 == 0) break;
    iVar11 = iVar11 + -1;
    pcVar9 = pcVar9 + 1;
    cVar10 = cVar1;
    if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
  }
  if (cVar10 == cVar2) {
    local_48[0] = uVar3 + 0x8c;
    if (**(int **)(uVar3 + 0xc4) != 0) {
      pcVar6 = *(code **)(**(int **)(uVar3 + 0xc4) + 0x10);
      if (pcVar6 != (code *)0x0) {
        iVar13 = (*pcVar6)(uVar3,local_48);
        if (iVar13 == 0) goto LAB_00013b6c;
        uVar5 = 0x27a;
        goto LAB_00013a10;
      }
    }
    uVar5 = 0x27a;
  }
  else {
    pcVar8 = "r all";
    iVar11 = 5;
    pcVar9 = __s;
    while( true ) {
      cVar1 = *pcVar9;
      cVar2 = *pcVar8;
      cVar10 = cVar2;
      if (iVar11 == 0) break;
      iVar11 = iVar11 + -1;
      pcVar9 = pcVar9 + 1;
      cVar10 = cVar1;
      if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
    }
    if (cVar10 != cVar2) {
      pcVar8 = "w sen_reg";
      pcVar9 = __s;
      while( true ) {
        cVar1 = *pcVar9;
        cVar2 = *pcVar8;
        cVar10 = cVar2;
        if (iVar4 == 0) break;
        iVar4 = iVar4 + -1;
        pcVar9 = pcVar9 + 1;
        cVar10 = cVar1;
        if ((cVar2 != cVar1) || (pcVar8 = pcVar8 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
      }
      if (cVar10 == cVar2) {
        local_30[0] = 0;
        uVar5 = private_simple_strtoull(__s + 10,local_30,0);
        uVar7 = private_simple_strtoull(local_30[0] + 1,0,0);
        private_seq_printf(iVar13,"isp: sensor reg write 0x%x(0x%x)\n",uVar5,uVar7);
        local_48[0] = uVar3 + 0x8c;
        local_3c = 0;
        local_34 = 0;
        local_40 = uVar5;
        local_38 = uVar7;
        if (**(int **)(uVar3 + 0xc4) != 0) {
          pcVar6 = *(code **)(**(int **)(uVar3 + 0xc4) + 0x18);
          if (pcVar6 != (code *)0x0) {
            (*pcVar6)(uVar3,local_48);
          }
        }
        sprintf(video_input_cmd_buf,"%s\n");
      }
      else {
        sprintf(video_input_cmd_buf,"null");
      }
      goto LAB_00013b6c;
    }
    local_48[0] = uVar3 + 0x8c;
    if (**(int **)(uVar3 + 0xc4) != 0) {
      pcVar6 = *(code **)(**(int **)(uVar3 + 0xc4) + 0x14);
      if (pcVar6 != (code *)0x0) {
        iVar13 = (*pcVar6)(uVar3,local_48);
        if (iVar13 == 0) goto LAB_00013b6c;
        uVar5 = 0x281;
        goto LAB_00013a10;
      }
    }
    uVar5 = 0x281;
  }
LAB_00013a10:
  isp_printf(2,"##### err %s.%d\n","video_input_cmd_set",uVar5);
LAB_00013b6c:
  if (param_3 < 0x81) {
    return uVar14;
  }
  private_kfree(__s);
  return uVar14;
}



void video_input_cmd_show(int param_1,int param_2,char *param_3,int param_4)

{
  int iVar1;
  unsigned int uVar2;
  char *puStackX_8;
  int uStackX_c;
  char *pcStack_18;
  int **ppuStack_14;
  char **appuStack_10 [3];
  
  uVar2 = *(unsigned int *)(param_1 + 0x3c);
  iVar1 = 0;
  if (uVar2 != 0) {
    if (uVar2 < 0xfffff001) {
      iVar1 = *(int *)(uVar2 + 0xd8);
    }
    else {
      iVar1 = 0;
    }
  }
  if (*(int *)(iVar1 + 0xf4) < 4) {
    pcStack_18 = "sensor doesn\'t work, please enable sensor\n";
  }
  else {
    param_3 = video_input_cmd_buf;
    pcStack_18 = "%s\n";
  }
  appuStack_10[0] = &puStackX_8;
  ppuStack_14 = appuStack_10;
  puStackX_8 = param_3;
  uStackX_c = param_4;
  (**(code **)(pfaces + 0x17c))(param_1,&_LC0,&pcStack_18);
  return;
}



int subdev_sensor_ops_release_all_sensor(int param_1)

{
  int uVar1;
  int *piVar2;
  int *piVar3;
  int iVar4;
  
  if (param_1 == 0) {
    return 0xffffffea;
  }
  if (*(int *)(param_1 + 0xf4) == 1) {
    isp_printf(2,"the devnode does\'t have been opened.\n");
    uVar1 = 0xffffffff;
  }
  else {
    piVar2 = *(int **)(param_1 + 0xdc);
    while (piVar2 != (int *)(param_1 + 0xdc)) {
      piVar3 = (int *)piVar2[1];
      iVar4 = *piVar2;
      *(int **)(iVar4 + 4) = piVar3;
      *piVar3 = iVar4;
      piVar2[1] = 0x200200;
      *piVar2 = 0x100100;
      if (piVar2[10] == 1) {
        iVar4 = piVar2[-4];
        if (*(int *)(iVar4 + 0x18) != 0) {
          private_i2c_put_adapter();
        }
        private_i2c_unregister_device(iVar4);
        piVar2 = *(int **)(param_1 + 0xdc);
      }
      else {
        if (piVar2[10] != 2) {
          isp_printf(2,"%s[%d] the type of sensor SBUS hasn\'t been defined.\n",
                     "subdev_sensor_ops_release_all_sensor",0xcf);
          return 0xffffffea;
        }
        piVar2 = *(int **)(param_1 + 0xdc);
      }
    }
    uVar1 = 0;
  }
  return uVar1;
}



int tx_isp_vin_slake_subdev(int param_1)

{
  int iVar1;
  int local_18 [3];
  
  iVar1 = *(int *)(param_1 + 0xf8);
  if (iVar1 != 0) {
    *(int *)(param_1 + 0xf8) = iVar1 + -1;
    iVar1 = *(int *)(param_1 + 0xf8);
  }
  if (iVar1 == 0) {
    if (*(int *)(param_1 + 0xf4) == 4) {
      vin_s_stream(param_1,0);
    }
    if (*(int *)(param_1 + 0xf4) == 3) {
      tx_isp_vin_init(param_1,0);
      iVar1 = *(int *)(param_1 + 0xe4);
    }
    else {
      iVar1 = *(int *)(param_1 + 0xe4);
    }
    if (iVar1 != 0) {
      local_18[0] = 0xffffffff;
      subdev_sensor_ops_set_input(param_1,local_18);
    }
    if (*(int *)(param_1 + 0xdc) != param_1 + 0xdc) {
      subdev_sensor_ops_release_all_sensor(param_1);
    }
    private_mutex_lock(param_1 + 0xe8);
    if (*(int *)(param_1 + 0xf4) == 2) {
      *(int *)(param_1 + 0xf4) = 1;
    }
    private_mutex_unlock(param_1 + 0xe8);
    return 0;
  }
  return 0;
}



int isp_i2c_new_subdev_board(int param_1,int param_2)

{
  int iVar1;
  int iVar2;
  
  private_request_module(1);
  if ((*(short *)(param_2 + 0x16) != 0) &&
     (iVar1 = private_i2c_new_device(param_1,param_2), iVar1 != 0)) {
    if ((*(int *)(iVar1 + 0x1c) != 0) &&
       (iVar2 = private_try_module_get(*(int *)(*(int *)(iVar1 + 0x1c) + 0x2c)), iVar2 != 0))
    {
      iVar2 = private_i2c_get_clientdata(iVar1);
      private_module_put(*(int *)(*(int *)(iVar1 + 0x1c) + 0x2c));
      if (iVar2 != 0) {
        return iVar2;
      }
    }
    private_i2c_unregister_device(iVar1);
  }
  return 0;
}



int subdev_sensor_ops_enum_input(int param_1,int *param_2)

{
  bool bVar1;
  char cVar2;
  int iVar3;
  int *piVar4;
  int uVar5;
  char *pcVar6;
  int *piVar7;
  
  if ((param_1 == 0) || (param_2 == (int *)0x0)) {
    return 0xffffffea;
  }
  private_mutex_lock(param_1 + 0xe8);
  iVar3 = 0;
  for (piVar7 = *(int **)(param_1 + 0xdc); piVar7 != (int *)(param_1 + 0xdc);
      piVar7 = (int *)*piVar7) {
    piVar7[-2] = iVar3;
    bVar1 = iVar3 == *param_2;
    iVar3 = iVar3 + 1;
    if (bVar1) {
      pcVar6 = (char *)(piVar7 + 2);
      param_2[9] = piVar7[-1];
      iVar3 = 0x20;
      piVar4 = param_2 + 1;
      goto LAB_00013fb0;
    }
  }
  goto LAB_00013fe4;
  while (pcVar6 = pcVar6 + 1, iVar3 != 0) {
LAB_00013fb0:
    cVar2 = *pcVar6;
    iVar3 = iVar3 + -1;
    *(char *)piVar4 = cVar2;
    piVar4 = (int *)((int)piVar4 + 1);
    if (cVar2 == '\0') break;
  }
LAB_00013fe4:
  private_mutex_unlock(param_1 + 0xe8);
  if (piVar7[-2] == *param_2) {
    uVar5 = 0;
  }
  else {
    uVar5 = 0xffffffea;
  }
  return uVar5;
}



int subdev_sensor_ops_ioctl(int param_1,int param_2,int *param_3)

{
  bool bVar1;
  char cVar2;
  char cVar3;
  int iVar4;
  code *pcVar5;
  int iVar6;
  int **ppiVar7;
  int *puVar8;
  unsigned int uVar9;
  int *piVar10;
  char cVar11;
  int uVar12;
  char *pcVar13;
  int **ppiVar14;
  int *piVar15;
  char auStack_40 [22];
  short local_2a;
  
  uVar9 = *(unsigned int *)(param_1 + 0xe4);
  switch(param_2) {
  case 0x2000000:
    if (param_1 == 0) {
      return -0x16;
    }
    if (param_3 == (int *)0x0) {
      return -0x16;
    }
    if (*(int *)(param_1 + 0xf4) == 1) goto LAB_000141d4;
    if (param_3[8] == 1) {
      iVar4 = private_i2c_get_adapter(param_3[0xf]);
      if (iVar4 == 0) {
        puVar8 = (int *)param_3[0xf];
        pcVar13 = "Failed to get I2C adapter %d, deferring probe\n";
LAB_0001444c:
        isp_printf(2,pcVar13,puVar8);
        return -0x16;
      }
      memset(auStack_40,0,0x28);
      puVar8 = param_3 + 9;
      memcpy(auStack_40,puVar8,0x14);
      local_2a = (short)param_3[0xe];
      uVar9 = isp_i2c_new_subdev_board(iVar4,auStack_40,0);
      if ((uVar9 == 0) || (0xfffff000 < uVar9)) {
        private_i2c_put_adapter(iVar4);
        pcVar13 = "Failed to acquire subdev %s, deferring probe\n";
        goto LAB_0001444c;
      }
      iVar4 = *(int *)(uVar9 + 0xd8);
    }
    else {
      uVar9 = 0;
      iVar4 = iRam000000d8;
      if (param_3[8] != 2) {
        uVar12 = 100;
        pcVar13 = "subdev_sensor_ops_register_sensor";
LAB_00014410:
        isp_printf(1,"%s[%d] the type of sensor SBUS hasn\'t been defined.\n",pcVar13,uVar12);
        return -0x16;
      }
    }
    memcpy((void *)(iVar4 + 0xec),param_3,0x50);
    if (uVar9 != 0) {
      if ((code **)**(int **)(uVar9 + 0xc4) == (code **)0x0) {
        iVar4 = param_3[8];
        goto LAB_000142d4;
      }
      pcVar5 = *(code **)**(int **)(uVar9 + 0xc4);
      if ((pcVar5 != (code *)0x0) && (iVar6 = (*pcVar5)(uVar9,uVar9 + 0x8c), iVar6 == 0)) {
        private_mutex_lock(param_1 + 0xe8);
        piVar15 = *(int **)(param_1 + 0xe0);
        *(int *)(param_1 + 0xe0) = iVar4 + 0xe4;
        *(int *)(iVar4 + 0xe4) = param_1 + 0xdc;
        *(int **)(iVar4 + 0xe8) = piVar15;
        *piVar15 = iVar4 + 0xe4;
        private_mutex_unlock(param_1 + 0xe8);
        *(int *)(uVar9 + 0x78) = *(int *)(param_1 + 0x78);
        isp_printf(0,"Registered sensor subdevice %s\n",*(int *)(uVar9 + 8));
        return 0;
      }
    }
    iVar4 = param_3[8];
LAB_000142d4:
    if (iVar4 == 1) {
      iVar4 = *(int *)(uVar9 + 0xd4);
      if (*(int *)(iVar4 + 0x18) != 0) {
        private_i2c_put_adapter();
      }
      private_i2c_unregister_device(iVar4);
    }
    tx_isp_subdev_deinit(uVar9);
    return -0x16;
  case 0x2000001:
    if (param_1 == 0) {
      return -0x16;
    }
    if (param_3 == (int *)0x0) {
      return -0x16;
    }
    piVar15 = (int *)(param_1 + 0xe8);
    if (*(int *)(param_1 + 0xf4) != 1) {
      private_mutex_lock(piVar15);
      ppiVar14 = *(int ***)(param_1 + 0xdc);
      do {
        if (ppiVar14 == (int **)(param_1 + 0xdc)) {
LAB_000144ec:
          pcVar5 = private_mutex_unlock;
LAB_00014558:
          (*pcVar5)(piVar15);
          return 0;
        }
        ppiVar7 = ppiVar14 + 2;
        cVar2 = *(char *)ppiVar7;
        puVar8 = param_3;
        do {
          cVar3 = *(char *)puVar8;
          ppiVar7 = (int **)((int)ppiVar7 + 1);
          puVar8 = (int *)((int)puVar8 + 1);
          cVar11 = cVar2;
          if (cVar3 != cVar2) break;
          bVar1 = cVar2 != '\0';
          cVar2 = *(char *)ppiVar7;
          cVar11 = cVar3;
        } while (bVar1);
        if (cVar11 == cVar3) {
          if (ppiVar14 != (int **)0xe4) {
            if (ppiVar14 + -0x39 == *(int ***)(param_1 + 0xe4)) {
              private_mutex_unlock(piVar15);
              isp_printf(1,"the sensor is active, please stop it firstly.\n");
              return -0x16;
            }
            ppiVar7 = (int **)ppiVar14[1];
            piVar10 = *ppiVar14;
            piVar10[1] = (int)ppiVar7;
            *ppiVar7 = piVar10;
            *ppiVar14 = (int *)0x100100;
            ppiVar14[1] = (int *)0x200200;
            private_mutex_unlock(piVar15);
            if (ppiVar14[10] != (int *)0x1) {
              if (ppiVar14[10] == (int *)0x2) {
                return 0;
              }
              uVar12 = 0xb1;
              pcVar13 = "subdev_sensor_ops_release_sensor";
              goto LAB_00014410;
            }
            piVar15 = ppiVar14[-4];
            if (piVar15[6] != 0) {
              private_i2c_put_adapter();
            }
            pcVar5 = private_i2c_unregister_device;
            goto LAB_00014558;
          }
          goto LAB_000144ec;
        }
        ppiVar14 = (int **)*ppiVar14;
      } while( true );
    }
LAB_000141d4:
    isp_printf(2,"the devnode does\'t have been opened.\n");
    return -1;
  case 0x2000002:
    pcVar5 = subdev_sensor_ops_enum_input;
    break;
  case 0x2000003:
    if (param_1 == 0) {
      return -0x16;
    }
    if (param_3 != (int *)0x0) {
      uVar12 = 0xffffffff;
      if (uVar9 != 0) {
        if (uVar9 < 0xfffff001) {
          uVar12 = *(int *)(uVar9 + 0xdc);
        }
        else {
          uVar12 = 0xffffffff;
        }
      }
      *param_3 = uVar12;
      return 0;
    }
    return -0x16;
  case 0x2000004:
    pcVar5 = subdev_sensor_ops_set_input;
    break;
  default:
    if (uVar9 == 0) {
      uVar12 = 0x21f;
LAB_00014104:
      isp_printf(1,"[%d] Don\'t have active sensor!\n",uVar12);
      return -1;
    }
    iVar4 = *(int *)(*(int *)(uVar9 + 0xc4) + 0xc);
    if (iVar4 == 0) {
      return 0;
    }
    pcVar5 = *(code **)(iVar4 + 8);
    if (pcVar5 == (code *)0x0) {
      return 0;
    }
    iVar4 = (*pcVar5)(uVar9,param_2,param_3);
    goto LAB_00014188;
  case 0x2000011:
    uVar12 = 0x19f;
    if (uVar9 == 0) goto LAB_00014104;
    if (**(int **)(uVar9 + 0xc4) == 0) {
      return 0;
    }
    pcVar5 = *(code **)(**(int **)(uVar9 + 0xc4) + 0x18);
    goto LAB_00014140;
  case 0x2000012:
    uVar12 = 400;
    if (uVar9 == 0) goto LAB_00014104;
    if (**(int **)(uVar9 + 0xc4) == 0) {
      return 0;
    }
    pcVar5 = *(code **)(**(int **)(uVar9 + 0xc4) + 0xc);
LAB_00014140:
    if (pcVar5 == (code *)0x0) {
      return 0;
    }
    iVar4 = (*pcVar5)(uVar9,param_3,uVar12);
    goto LAB_00014188;
  }
  iVar4 = (*pcVar5)(param_1,param_3);
LAB_00014188:
  if (iVar4 == -0x203) {
    iVar4 = 0;
  }
  return iVar4;
}



int tx_isp_csi_probe(int param_1)

{
  void *__s;
  int iVar1;
  int *piVar2;
  int iVar3;
  int uVar4;
  
  __s = (void *)private_kmalloc(0x148,0xd0);
  if (__s == (void *)0x0) {
    isp_printf(2,"Failed to allocate csi device\n");
    uVar4 = 0xfffffff4;
  }
  else {
    memset(__s,0,0x148);
    iVar3 = *(int *)(param_1 + 0x58);
    iVar1 = tx_isp_subdev_init(param_1,__s,csi_subdev_ops);
    if (iVar1 == 0) {
      piVar2 = (int *)private_request_mem_region(0x10022000,0x1000,"mipi-phy");
      if (piVar2 == (int *)0x0) {
        isp_printf(2,"%s[%d] Not enough memory for resources\n","tx_isp_csi_probe",0x1bd);
        uVar4 = 0xfffffff0;
      }
      else {
        uVar4 = private_ioremap(*piVar2,(piVar2[1] + 1) - *piVar2);
        *(int *)((int)__s + 0x13c) = uVar4;
        if (*(int *)((int)__s + 0xb8) != 0) {
          *(char **)((int)__s + 0x34) = isp_csi_fops;
          *(int **)((int)__s + 0x138) = piVar2;
          private_raw_mutex_init((int)__s + 300,"&csd->mlock",0x10000);
          private_platform_set_drvdata(param_1,__s);
          *(int *)((int)__s + 0x128) = 1;
          dump_csd = __s;
          *(void **)((int)__s + 0xd4) = __s;
          return 0;
        }
        isp_printf(2,"%s[%d] Unable to ioremap registers\n","tx_isp_csi_probe",0x1c4);
        private_release_mem_region(*piVar2,(piVar2[1] + 1) - *piVar2);
        uVar4 = 0xfffffffa;
      }
      tx_isp_subdev_deinit(__s);
    }
    else {
      isp_printf(2,"Failed to init isp module(%d.%d)\n",*(char *)(iVar3 + 2),
                 *(char *)(iVar3 + 3));
      uVar4 = 0xfffffff4;
    }
    private_kfree(__s);
  }
  return uVar4;
}



void dump_isp_csi_open(int param_1,int param_2)

{
  int uVar1;
  
  uVar1 = PDE_DATA();
                    // WARNING: Could not recover jumptable at 0x000194d4. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x170))(param_2,isp_csi_show,uVar1,0x400);
  return;
}



int isp_csi_show(int param_1)

{
  unsigned int uVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  uVar1 = *(unsigned int *)(param_1 + 0x3c);
  if ((((uVar1 == 0) || (0xfffff000 < uVar1)) || (uVar1 = *(unsigned int *)(uVar1 + 0xd4), uVar1 == 0)) ||
     (0xfffff000 < uVar1)) {
    isp_printf(2,"The parameter is invalid!\n");
    iVar5 = 0;
  }
  else {
    iVar4 = *(int *)(*(int *)(uVar1 + 0xb8) + 0x20);
    iVar5 = 0;
    iVar2 = *(int *)(*(int *)(uVar1 + 0xb8) + 0x24);
    if (iVar4 != 0) {
      iVar5 = seq_printf(param_1,"0x0020 is  0x%08x\n",iVar4);
    }
    if (iVar2 != 0) {
      iVar3 = seq_printf(param_1,"0x0024 is  0x%08x\n",iVar2);
      iVar5 = iVar5 + iVar3;
    }
    if (iVar4 == 0) {
      if (iVar2 == 0) {
        return iVar5;
      }
      iVar2 = *(int *)(uVar1 + 0xb8);
    }
    else {
      iVar2 = *(int *)(uVar1 + 0xb8);
    }
    iVar2 = seq_printf(param_1,"0x0014 is  0x%08x\n",*(int *)(iVar2 + 0x14));
    iVar5 = iVar5 + iVar2;
  }
  return iVar5;
}



int csi_core_ops_init(unsigned int param_1,int param_2)

{
  int uVar1;
  int *puVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  int iVar5;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar4 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if (((uVar4 != 0) && (uVar4 < 0xfffff001)) && (uVar1 = 0, 1 < *(int *)(uVar4 + 0x128))) {
      if (param_2 == 0) {
        isp_printf(0,"csi is close!\n");
        *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 8) = *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 8) & 0xfffffffe;
        *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 0xc) =
             *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 0xc) & 0xfffffffe;
        *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 0x10) =
             *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 0x10) & 0xfffffffe;
        uVar1 = 2;
      }
      else {
        iVar5 = *(int *)(*(int *)(uVar4 + 0x110) + 0x14);
        if (iVar5 == 1) {
          *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 4) = *(char *)(*(int *)(uVar4 + 0x110) + 0x24) - 1;
          *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 8) = *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 8) & 0xfffffffe
          ;
          *(int *)(*(int *)(uVar4 + 0xb8) + 0xc) = 0;
          private_msleep(1);
          *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 0x10) =
               *(unsigned int *)(*(int *)(uVar4 + 0xb8) + 0x10) & 0xfffffffe;
          private_msleep(1);
          *(int *)(*(int *)(uVar4 + 0xb8) + 0xc) = 1;
          private_msleep(1);
          if (*(int *)(*(int *)(uVar4 + 0x110) + 0x3c) == 0) {
            iVar5 = *(int *)(*(int *)(uVar4 + 0x110) + 0x1c);
            if (iVar5 - 0x50U < 0x1e) {
              iVar5 = *(int *)(uVar4 + 0x13c);
              uVar3 = 0;
            }
            else {
              uVar3 = 1;
              if ((((0x27 < iVar5 - 0x6eU) && (uVar3 = 2, 0x31 < iVar5 - 0x96U)) &&
                  ((uVar3 = 3, 0x31 < iVar5 - 200U &&
                   ((uVar3 = 4, 0x31 < iVar5 - 0xfaU && (uVar3 = 5, 99 < iVar5 - 300U)))))) &&
                 ((uVar3 = 6, 99 < iVar5 - 400U &&
                  ((((uVar3 = 7, 99 < iVar5 - 500U && (uVar3 = 8, 99 < iVar5 - 600U)) &&
                    (uVar3 = 9, 99 < iVar5 - 700U)) && (uVar3 = 10, 199 < iVar5 - 800U)))))) {
                uVar3 = 0xb;
              }
              iVar5 = *(int *)(uVar4 + 0x13c);
            }
            uVar3 = *(unsigned int *)(iVar5 + 0x160) & 0xfffffff0 | uVar3;
            *(unsigned int *)(iVar5 + 0x160) = uVar3;
            *(unsigned int *)(*(int *)(uVar4 + 0x13c) + 0x1e0) = uVar3;
            *(unsigned int *)(*(int *)(uVar4 + 0x13c) + 0x260) = uVar3;
            puVar2 = *(int **)(uVar4 + 0x13c);
          }
          else {
            puVar2 = *(int **)(uVar4 + 0x13c);
          }
          *puVar2 = 0x7d;
          *(int *)(*(int *)(uVar4 + 0x13c) + 0x128) = 0x3f;
          *(int *)(*(int *)(uVar4 + 0xb8) + 0x10) = 1;
          private_msleep(10);
          uVar1 = 3;
        }
        else if (iVar5 == 2) {
          *(int *)(*(int *)(uVar4 + 0xb8) + 0xc) = 0;
          *(int *)(*(int *)(uVar4 + 0xb8) + 0xc) = 1;
          **(int **)(uVar4 + 0x13c) = 0x7d;
          *(int *)(*(int *)(uVar4 + 0x13c) + 0x80) = 0x3e;
          *(int *)(*(int *)(uVar4 + 0x13c) + 0x2cc) = 1;
          uVar1 = 3;
        }
        else {
          isp_printf(1,"The sensor dbus_type is %d\n",iVar5);
          uVar1 = 3;
        }
      }
      *(int *)(uVar4 + 0x128) = uVar1;
      uVar1 = 0;
    }
  }
  return uVar1;
}



int csi_sensor_ops_ioctl(unsigned int param_1,int param_2)

{
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    if (param_2 == 0x200000e) {
      if (*(int *)(*(int *)(param_1 + 0x110) + 0x14) == 1) {
        *(int *)(param_1 + 0x128) = 3;
      }
    }
    else if (param_2 == 0x200000f) {
      if (*(int *)(*(int *)(param_1 + 0x110) + 0x14) == 1) {
        *(int *)(param_1 + 0x128) = 4;
      }
    }
    else if (param_2 == 0x200000c) {
      csi_core_ops_init(param_1,1);
      return 0;
    }
  }
  return 0;
}



int csi_sensor_ops_sync_sensor_attr(unsigned int param_1,int param_2)

{
  int uVar1;
  code *pcVar2;
  
  if ((param_1 == 0) || (0xfffff000 < param_1)) {
    isp_printf(2,"The parameter is invalid!\n");
    uVar1 = 0xffffffea;
  }
  else {
    if (param_2 == 0) {
      pcVar2 = memset;
    }
    else {
      pcVar2 = memcpy;
    }
    (*pcVar2)(param_1 + 0xdc,param_2,0x4c);
    uVar1 = 0;
  }
  return uVar1;
}



int tx_isp_csi_activate_subdev(unsigned int param_1)

{
  int uVar1;
  unsigned int uVar2;
  int *puVar3;
  unsigned int uVar4;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar2 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
      private_mutex_lock(uVar2 + 300);
      if (*(int *)(uVar2 + 0x128) == 1) {
        *(int *)(uVar2 + 0x128) = 2;
        puVar3 = *(int **)(param_1 + 0xbc);
        if ((puVar3 != (int *)0x0) && (uVar4 = 0, puVar3 < (int *)0xfffff001)) {
          for (; uVar4 < *(unsigned int *)(param_1 + 0xc0); uVar4 = uVar4 + 1) {
            private_clk_enable(*puVar3);
            puVar3 = puVar3 + 1;
          }
        }
      }
      private_mutex_unlock(uVar2 + 300);
      uVar1 = 0;
    }
  }
  return uVar1;
}



int csi_video_s_stream(unsigned int param_1,int param_2)

{
  int uVar1;
  
  if ((param_1 == 0) || (0xfffff000 < param_1)) {
    isp_printf(2,"The parameter is invalid!\n");
    uVar1 = 0xffffffea;
  }
  else if (*(int *)(*(int *)(param_1 + 0x110) + 0x14) == 1) {
    uVar1 = 4;
    if (param_2 == 0) {
      uVar1 = 3;
    }
    *(int *)(param_1 + 0x128) = uVar1;
    uVar1 = 0;
  }
  else {
    uVar1 = 0;
  }
  return uVar1;
}



int tx_isp_csi_slake_subdev(unsigned int param_1)

{
  int uVar1;
  unsigned int uVar2;
  int iVar3;
  unsigned int uVar4;
  int *puVar5;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar4 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if ((uVar4 != 0) && (uVar4 < 0xfffff001)) {
      iVar3 = *(int *)(uVar4 + 0x128);
      if (iVar3 == 4) {
        csi_video_s_stream(param_1,0);
        iVar3 = *(int *)(uVar4 + 0x128);
      }
      if (iVar3 == 3) {
        csi_core_ops_init(param_1,0);
      }
      private_mutex_lock(uVar4 + 300);
      if (*(int *)(uVar4 + 0x128) == 2) {
        *(int *)(uVar4 + 0x128) = 1;
        uVar2 = *(unsigned int *)(param_1 + 0xbc);
        if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
          iVar3 = *(int *)(param_1 + 0xc0);
          puVar5 = (int *)(uVar2 + iVar3 * 4);
          while( true ) {
            iVar3 = iVar3 + -1;
            puVar5 = puVar5 + -1;
            if (iVar3 < 0) break;
            private_clk_disable(*puVar5);
          }
        }
      }
      private_mutex_unlock(uVar4 + 300);
      uVar1 = 0;
    }
  }
  return uVar1;
}



int dump_csi_reg(int param_1)

{
  isp_printf(0,"****>>>>> dump csi reg <<<<<******\n");
  isp_printf(0,"**********VERSION =%08x\n",**(int **)(param_1 + 0xb8));
  isp_printf(0,"**********N_LANES =%08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 4));
  isp_printf(0,"**********PHY_SHUTDOWNZ = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 8));
  isp_printf(0,"**********DPHY_RSTZ = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0xc));
  isp_printf(0,"**********CSI2_RESETN =%08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x10));
  isp_printf(0,"**********PHY_STATE = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x14));
  isp_printf(0,"**********DATA_IDS_1 = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x18));
  isp_printf(0,"**********DATA_IDS_2 = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x1c));
  isp_printf(0,"**********ERR1 = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x20));
  isp_printf(0,"**********ERR2 = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x24));
  isp_printf(0,"**********MASK1 =%08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x28));
  isp_printf(0,"**********MASK2 =%08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x2c));
  isp_printf(0,"**********PHY_TST_CTRL0 = %08x\n",*(int *)(*(int *)(param_1 + 0xb8) + 0x30));
  return 0;
}



void check_csi_error(void)

{
  int iVar1;
  
  do {
    do {
      dump_csi_reg(dump_csd);
      iVar1 = *(int *)(*(int *)(dump_csd + 0xb8) + 0x24);
      if (*(int *)(*(int *)(dump_csd + 0xb8) + 0x20) != 0) {
        isp_printf(0,"error-------- 1:0x%08x\n");
      }
    } while (iVar1 == 0);
    isp_printf(0,"error-------- 2:0x%08x\n",iVar1);
  } while( true );
}



int csi_set_on_lanes(int param_1,unsigned int param_2)

{
  isp_printf(0,"%s:----------> lane num: %d\n","csi_set_on_lanes",param_2 & 0xff);
  *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) =
       (param_2 & 0xff) - 1 & 3 | *(unsigned int *)(*(int *)(param_1 + 0xb8) + 4) & 0xfffffffc;
  return 0;
}



int isp_core_tunning_open(int param_1,int param_2)

{
  int uVar1;
  int iVar2;
  
  iVar2 = *(int *)(*(int *)(*(int *)(param_2 + 0x70) + 200) + 0x1bc);
  uVar1 = 0xffffffff;
  if (*(int *)(iVar2 + 0x40c4) == 2) {
    frame_done_cnt = 0;
    DAT_000b220c = 0;
    *(int *)(iVar2 + 0x40c4) = 3;
    *(int *)(iVar2 + 0x40ac) = 0;
    uVar1 = 0;
  }
  return uVar1;
}



int isp_core_tunning_release(int param_1,int param_2)

{
  int iVar1;
  
  iVar1 = *(int *)(*(int *)(*(int *)(param_2 + 0x70) + 200) + 0x1bc);
  isp_printf(0,"##### %s %d #####\n","isp_core_tunning_release",0xacc);
  if (*(int *)(iVar1 + 0x40c4) != 2) {
    if (*(int *)(iVar1 + 0x40ac) == 0) {
      *(int *)(iVar1 + 0x40c4) = 2;
    }
    else {
      isp_free_buffer();
      *(int *)(iVar1 + 0x40c4) = 2;
    }
  }
  return 0;
}



int apical_isp_hvflip_update(int param_1,unsigned int param_2)

{
  int uVar1;
  int uVar2;
  
  if (*(int *)(param_1 + 0x134) != 1) {
    param_2 = param_2 & 0xff;
    goto LAB_00015378;
  }
  uVar2 = 1;
  if (param_2 == 1) {
    uVar1 = 0;
  }
  else {
    uVar2 = 0;
    if (param_2 != 2) {
      if (param_2 != 3) {
        uVar1 = 0;
        goto LAB_00015358;
      }
      uVar2 = 1;
    }
    uVar1 = 1;
  }
LAB_00015358:
  tisp_lsc_hvflip(*(int *)(param_1 + 0x124),*(int *)(param_1 + 0x128),uVar1,uVar2);
  *(unsigned int *)(param_1 + 0x1ac) = param_2;
  *(int *)(param_1 + 0x1a8) = 1;
  param_2 = param_2 & 0xfd;
LAB_00015378:
  tisp_s_mscaler_hvflip_mask(param_2);
  tisp_hv_flip_enable(param_2);
  return 0;
}



int apical_isp_mask_s_attr_isra_29(int param_1)

{
  unsigned int uVar1;
  char local_158 [160];
  int local_b8;
  int local_b4;
  int local_b0;
  int local_ac;
  char local_a8 [164];
  
  private_copy_from_user(&local_b8,param_1,0xac);
  for (uVar1 = 0; uVar1 < 0x9c; uVar1 = uVar1 + 1) {
    local_158[uVar1] = local_a8[uVar1];
  }
  tisp_s_mscaler_mask_attr(local_b8,local_b4,local_b0,local_ac);
  return 0;
}



int apical_isp_gamma_s_attr_isra_34(int param_1)

{
  int iVar1;
  int iVar2;
  short *puVar3;
  short *puVar4;
  short local_210 [130];
  short local_10c [130];
  
  iVar1 = -1;
  if (param_1 != 0) {
    private_copy_from_user(local_10c,param_1,0x102);
    iVar1 = 0;
    do {
      puVar4 = (short *)((int)local_10c + iVar1);
      puVar3 = (short *)((int)local_210 + iVar1);
      iVar1 = iVar1 + 2;
      *puVar3 = *puVar4;
    } while (iVar1 != 0x102);
    iVar2 = tisp_s_Gamma(local_210);
    iVar1 = 0;
    if (iVar2 != 0) {
      isp_printf(1,"%s:%d set control failed!!!\n","apical_isp_gamma_s_attr",0x22c);
      iVar1 = iVar2;
    }
  }
  return iVar1;
}



int apical_isp_expr_s_ctrl_isra_35(int param_1,int param_2)

{
  unsigned int uVar1;
  char *pcVar2;
  int uVar3;
  int iVar4;
  int local_108;
  unsigned int local_98;
  int local_94;
  int local_90;
  int local_8c;
  char local_88 [32];
  int local_68;
  int local_18;
  int local_14;
  ushort local_10;
  
  iVar4 = *(int *)(*(int *)(param_1 + 0xd4) + 0x120);
  private_copy_from_user(&local_18,param_2,0xc);
  if (local_18 == 0) {
    local_68 = 0;
  }
  else {
    if (local_18 != 1) {
      uVar3 = 0x48a;
      pcVar2 = "Err:%s,%d can not support this mode\n";
LAB_00015584:
      isp_printf(1,pcVar2,"apical_isp_expr_s_ctrl",uVar3);
      return 0xffffffff;
    }
    local_68 = local_18;
    if (local_14 == 1) {
      local_98 = (uint)*(ushort *)(iVar4 + 0xbc);
      if (local_98 == 0) {
        local_108 = 0;
        isp_printf(1,"err: %s,%d one_line_expr_in_us = %d \n","apical_isp_expr_s_ctrl",0x47f);
        return 0xffffffff;
      }
      local_98 = local_10 / local_98;
    }
    else {
      if (local_14 != 0) {
        uVar3 = 0x485;
        pcVar2 = "Err:%s,%d can not support this unit\n";
        goto LAB_00015584;
      }
      local_98 = (uint)local_10;
    }
  }
  for (uVar1 = 0; uVar1 < 0x70; uVar1 = uVar1 + 1) {
    *(char *)((int)&local_108 + uVar1) = local_88[uVar1];
  }
  tisp_s_ae_attr(local_98,local_94,local_90,local_8c);
  return 0;
}



int apical_isp_ae_s_roi_isra_36(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  char local_f8 [236];
  
  iVar1 = private_kmalloc(900,0xd0);
  if (iVar1 == 0) {
    isp_printf(1,"Failed to private_kmalloc roi_weight\n");
    iVar6 = -1;
  }
  else {
    iVar6 = -1;
    if (*param_1 != 0) {
      private_copy_from_user(local_f8,*param_1,0xe1);
      iVar6 = 0;
      iVar5 = 0;
      do {
        iVar2 = 0;
        do {
          iVar3 = iVar2 + iVar6;
          iVar4 = iVar2 * 4;
          if (8 < local_f8[iVar3]) {
            isp_printf(1,"%s:%d::ae weight overflow!!!\n","apical_isp_ae_s_roi",0x247);
            iVar6 = -1;
            goto LAB_00015738;
          }
          iVar2 = iVar2 + 1;
          *(unsigned int *)(iVar1 + iVar4 + iVar5) = (uint)local_f8[iVar3];
        } while (iVar2 != 0xf);
        iVar6 = iVar6 + 0xf;
        iVar5 = iVar6 * 4;
      } while (iVar6 != 0xe1);
      iVar6 = tisp_s_aeroi_weight(iVar1);
      if (iVar6 != 0) {
        isp_printf(1,"%s:%d set control failed!!!\n","apical_isp_ae_s_roi",0x251);
      }
    }
LAB_00015738:
    private_kfree(iVar1);
  }
  return iVar6;
}



int apical_isp_ae_zone_weight_s_attr_isra_47(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  char local_f8 [236];
  
  iVar1 = private_kmalloc(900,0xd0);
  if (iVar1 == 0) {
    isp_printf(1,"Failed to kmalloc ae_zone_weight\n");
    iVar6 = -1;
  }
  else {
    iVar6 = -1;
    if (*param_1 != 0) {
      private_copy_from_user(local_f8,*param_1,0xe1);
      iVar6 = 0;
      iVar5 = 0;
      do {
        iVar2 = 0;
        do {
          iVar3 = iVar2 + iVar6;
          iVar4 = iVar2 * 4;
          if (8 < local_f8[iVar3]) {
            isp_printf(1,"%s:%d::ae zone weight overflow!!!\n","apical_isp_ae_zone_weight_s_attr",
                       0x4d0);
            iVar6 = -1;
            goto LAB_00015888;
          }
          iVar2 = iVar2 + 1;
          *(unsigned int *)(iVar1 + iVar4 + iVar5) = (uint)local_f8[iVar3];
        } while (iVar2 != 0xf);
        iVar6 = iVar6 + 0xf;
        iVar5 = iVar6 * 4;
      } while (iVar6 != 0xe1);
      iVar6 = tisp_s_aezone_weight(iVar1);
      if (iVar6 != 0) {
        isp_printf(1,"%s:%d set control failed!!!\n","apical_isp_ae_zone_weight_s_attr",0x4da);
      }
    }
LAB_00015888:
    private_kfree(iVar1);
  }
  return iVar6;
}



int apical_isp_af_hist_s_attr_isra_50(int param_1)

{
  unsigned int uVar1;
  char local_100 [72];
  int local_b8;
  int local_b4;
  int local_b0;
  int local_ac;
  char local_a8 [2];
  short local_a6;
  short local_a4;
  short local_a2;
  short local_a0;
  short local_9e;
  char local_9c;
  char local_9b;
  char local_9a;
  char local_99;
  char local_97;
  char local_96;
  char local_95;
  char local_94;
  char local_92;
  char local_91;
  short local_90;
  char local_8e;
  char local_8d;
  char local_8c;
  short local_8a;
  char local_88;
  char local_86;
  char local_85;
  short local_84;
  char local_82;
  char local_81;
  char local_80;
  short local_7e;
  char local_7c;
  char local_7a;
  char local_79;
  short local_78;
  char local_76;
  char local_75;
  char local_74;
  short local_72;
  char local_70;
  char local_6e;
  char local_6d;
  short local_6c;
  char local_6a;
  char local_69;
  char local_68;
  short local_66;
  char local_64;
  char auStack_60 [16];
  char local_50;
  char local_4f;
  short local_4e;
  short local_4c;
  short local_4a;
  short local_48;
  short local_46;
  char local_44;
  char local_43;
  char local_42;
  char local_41;
  char local_3f;
  char local_3e;
  char local_3d;
  char local_3c;
  char local_3a;
  char local_39;
  short local_38;
  char local_36;
  char local_35;
  char local_34;
  short local_32;
  char local_30;
  char local_2e;
  char local_2d;
  short local_2c;
  char local_2a;
  char local_29;
  char local_28;
  short local_26;
  char local_24;
  char local_22;
  char local_21;
  short local_20;
  char local_1e;
  char local_1d;
  char local_1c;
  short local_1a;
  char local_18;
  char local_16;
  char local_15;
  short local_14;
  char local_12;
  char local_11;
  char local_10;
  short local_e;
  char local_c;
  
  private_copy_from_user(auStack_60,param_1,0x58);
  if (local_44 == '\0') {
    local_44 = '\x01';
  }
  if (local_43 < 3) {
    local_43 = 3;
  }
  if (((local_42 < 0x10) && (4 < local_42)) && (local_41 - 5 < 0xb)) {
    local_9a = local_42;
    local_a8[0] = local_50;
    local_97 = local_3f;
    local_92 = local_3a;
    local_96 = local_3e;
    local_95 = local_3d;
    local_99 = local_41;
    local_94 = local_3c;
    local_91 = local_39;
    local_a8[1] = local_4f;
    local_a6 = local_4e;
    local_a4 = local_4c;
    local_a2 = local_4a;
    local_a0 = local_48;
    local_9e = local_46;
    local_9c = local_44;
    local_9b = local_43;
    local_90 = local_38;
    local_8e = local_36;
    local_8d = local_35;
    local_8c = local_34;
    local_8a = local_32;
    local_88 = local_30;
    local_86 = local_2e;
    local_85 = local_2d;
    local_84 = local_2c;
    local_82 = local_2a;
    local_81 = local_29;
    local_80 = local_28;
    local_7e = local_26;
    local_7c = local_24;
    local_7a = local_22;
    local_79 = local_21;
    local_78 = local_20;
    local_76 = local_1e;
    local_75 = local_1d;
    local_74 = local_1c;
    local_72 = local_1a;
    local_70 = local_18;
    local_6e = local_16;
    local_6d = local_15;
    local_6c = local_14;
    local_6a = local_12;
    local_69 = local_11;
    local_68 = local_10;
    local_66 = local_e;
    local_64 = local_c;
    for (uVar1 = 0; uVar1 < 0x48; uVar1 = uVar1 + 1) {
      local_100[uVar1] = local_a8[uVar1];
    }
    tisp_s_af_attr(local_b8,local_b4,local_b0,local_ac);
    return 0;
  }
  isp_printf(1,"%s:%d: node must be 5~15!!!\n","apical_isp_af_hist_s_attr",0x3b4);
  return 0xffffffff;
}



int apical_isp_af_weight_s_attr_isra_51(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  char local_f8 [236];
  
  iVar1 = private_kmalloc(900,0xd0);
  if (iVar1 == 0) {
    isp_printf(1,"Failed to kmalloc ae_weight\n");
    iVar6 = -1;
  }
  else {
    iVar6 = -1;
    if (*param_1 != 0) {
      private_copy_from_user(local_f8,*param_1,0xe1);
      iVar6 = 0;
      iVar5 = 0;
      do {
        iVar2 = 0;
        do {
          iVar3 = iVar2 + iVar6;
          iVar4 = iVar2 * 4;
          if (8 < local_f8[iVar3]) {
            isp_printf(1,"%s:%d::ae weight overflow!!!\n","apical_isp_af_weight_s_attr",0x28e);
            iVar6 = -1;
            goto LAB_00015c3c;
          }
          iVar2 = iVar2 + 1;
          *(unsigned int *)(iVar1 + iVar4 + iVar5) = (uint)local_f8[iVar3];
        } while (iVar2 != 0xf);
        iVar6 = iVar6 + 0xf;
        iVar5 = iVar6 * 4;
      } while (iVar6 != 0xe1);
      iVar6 = tisp_s_af_weight(iVar1);
      if (iVar6 != 0) {
        isp_printf(1,"%s:%d set control failed!!!\n","apical_isp_af_weight_s_attr",0x298);
      }
    }
LAB_00015c3c:
    private_kfree(iVar1);
  }
  return iVar6;
}



// WARNING: Type propagation algorithm not settling

int apical_isp_core_ops_s_ctrl(int *param_1,unsigned int *param_2)

{
  char bVar1;
  unsigned int uVar2;
  code *pcVar3;
  int *******pppppppuVar4;
  unsigned int uVar5;
  int iVar6;
  int uVar7;
  char *pcVar8;
  char *pcVar9;
  int iVar10;
  int local_4d0;
  int local_4cc;
  int local_4c8;
  int *******local_b0;
  unsigned int local_ac;
  unsigned int local_a8;
  int local_a4;
  int local_a0;
  int local_9c;
  int local_98;
  unsigned int local_18;
  ushort local_14;
  ushort local_12;
  
  uVar5 = *param_2;
  if (uVar5 == 0x8000039) {
    private_copy_from_user(&local_b0,param_2[1],1);
    pcVar3 = tisp_set_defog_strength;
    goto LAB_00016cc8;
  }
  if (uVar5 < 0x800003a) {
    if (uVar5 == 0x800000d) {
      local_b0 = *(int ********)param_2[1];
      iVar6 = tisp_s_wb_ct(&local_b0);
      if (iVar6 == 0) {
        return 0;
      }
      iVar10 = 0x7a9;
      pcVar8 = "%s:%d set wb ct failed!!!\n";
      pcVar9 = "tiziano_isp_awb_ct_s_ctrl";
      goto LAB_00016c64;
    }
    if (uVar5 < 0x800000e) {
      if (uVar5 == 0x9a0914) {
        return 0;
      }
      if (0x9a0914 < uVar5) {
        if (uVar5 < 0x8000008) {
          if (0x8000005 < uVar5) {
            return 0;
          }
          if (0x8000002 < uVar5) {
            if (uVar5 == 0x8000004) {
              private_copy_from_user(&local_18,param_2[1],8);
              switch(local_18) {
              case 0:
                local_b0 = (int *******)0x0;
                break;
              case 1:
                local_b0 = (int *******)0x1;
                break;
              case 2:
                local_b0 = (int *******)0x2;
                break;
              case 3:
                local_b0 = (int *******)0x3;
                break;
              case 4:
                local_b0 = (int *******)0x4;
                break;
              case 5:
                local_b0 = (int *******)0x5;
                break;
              case 6:
                local_b0 = (int *******)0x6;
                break;
              case 7:
                local_b0 = (int *******)0x7;
                break;
              case 8:
                local_b0 = (int *******)0x8;
                break;
              case 9:
                local_b0 = (int *******)0x9;
                break;
              default:
                isp_printf(1,"%s:%d::Can not support this mode!!!\n","apical_isp_wb_s_ctrl",0x52d);
                return -1;
              }
              local_ac = (uint)local_14;
              local_4d0 = local_a0;
              local_a8 = (uint)local_12;
              local_4cc = local_9c;
              local_4c8 = local_98;
              tisp_s_wb_attr();
              return 0;
            }
            return -1;
          }
          if (0x8000000 < uVar5) {
            return 0;
          }
          uVar2 = 0x9a091a;
LAB_00015da4:
          if (uVar5 == uVar2) {
            return 0;
          }
          return -1;
        }
        if (uVar5 == 0x800000a) {
          private_copy_from_user(&local_b0,param_2[1],8);
          tisp_s_awb_start(local_b0,local_ac);
          return 0;
        }
        if (uVar5 != 0x800000c) {
          if (uVar5 != 0x8000008) {
            return 0xffffffff;
          }
          private_copy_from_user(&local_b0,param_2[1],6);
          pcVar3 = tisp_s_rgb_coefft;
          local_b0 = &local_b0;
          goto LAB_00016aec;
        }
        iVar6 = tisp_s_awb_algo(param_2[1]);
        if (iVar6 == 0) {
          return 0;
        }
        iVar10 = 0x792;
        pcVar8 = "%s:%d set wb algo failed!!!\n";
        pcVar9 = "tiziano_isp_wb_algo_s_ctrl";
        goto LAB_00016c64;
      }
      if (uVar5 == 0x980914) {
        uVar5 = param_2[1];
        iVar6 = *(int *)(*param_1 + 0xd4);
        param_1[0x3ad] = uVar5;
        uVar2 = *(unsigned int *)(iVar6 + 0x168);
        *(unsigned int *)(iVar6 + 0x170) = uVar5;
      }
      else {
        if (uVar5 < 0x980915) {
          if (uVar5 == 0x980901) {
            if (*(int *)(*(int *)(*param_1 + 0xd4) + 0xf4) == 0x2011) {
              return 0;
            }
            bVar1 = *(char *)(param_2 + 1);
            param_1[0x1023] = (int)(int *******)(uint)bVar1;
            pcVar3 = tisp_set_contrast;
            local_b0 = (int *******)(uint)bVar1;
          }
          else if (uVar5 == 0x980902) {
            if (*(int *)(*(int *)(*param_1 + 0xd4) + 0xf4) == 0x2011) {
              return 0;
            }
            bVar1 = *(char *)(param_2 + 1);
            param_1[0x1024] = (int)(int *******)(uint)bVar1;
            pcVar3 = tisp_set_saturation;
            local_b0 = (int *******)(uint)bVar1;
          }
          else {
            if (uVar5 != 0x980900) {
              return 0xffffffff;
            }
            if (*(int *)(*(int *)(*param_1 + 0xd4) + 0xf4) == 0x2011) {
              return 0;
            }
            bVar1 = *(char *)(param_2 + 1);
            param_1[0x1025] = (int)(int *******)(uint)bVar1;
            pcVar3 = tisp_set_brightness;
            local_b0 = (int *******)(uint)bVar1;
          }
          goto LAB_00016aec;
        }
        if (uVar5 == 0x980918) {
          param_1[0x3bf] = param_2[1];
          iVar6 = -0x16;
          if (param_2[1] < 3) {
            iVar6 = (int)*(char *)((int)&CSWTCH_84 + param_2[1]);
          }
          iVar6 = tisp_s_antiflick(iVar6);
          if (iVar6 == 0) {
            return 0;
          }
          iVar10 = 0xe2;
          pcVar9 = "apical_isp_flicker_s_control";
          goto LAB_00016390;
        }
        if (0x980918 < uVar5) {
          uVar2 = 0x98091f;
          if (uVar5 != 0x98091b) goto LAB_00015da4;
          if (*(int *)(*(int *)(*param_1 + 0xd4) + 0xf4) == 0x2011) {
            return 0;
          }
          bVar1 = *(char *)(param_2 + 1);
          param_1[0xfdb] = (int)(int *******)(uint)bVar1;
          pcVar3 = tisp_set_sharpness;
          local_b0 = (int *******)(uint)bVar1;
          goto LAB_00016aec;
        }
        if (uVar5 != 0x980915) {
          return 0xffffffff;
        }
        iVar6 = *(int *)(*param_1 + 0xd4);
        uVar2 = param_2[1];
        param_1[0x3ac] = uVar2;
        uVar5 = *(unsigned int *)(iVar6 + 0x170);
        *(unsigned int *)(iVar6 + 0x168) = uVar2;
      }
      if (uVar2 != 0) {
        uVar2 = 2;
      }
      uVar2 = uVar2 | uVar5 != 0;
LAB_000163c4:
      apical_isp_hvflip_update(iVar6,uVar2);
      return 0;
    }
    if (uVar5 == 0x800002b) {
      param_2 = (unsigned int *)param_2[1];
      pcVar3 = apical_isp_gamma_s_attr_isra_34;
LAB_000168f4:
      iVar6 = (*pcVar3)(param_2);
      return iVar6;
    }
    if (uVar5 < 0x800002c) {
      if (uVar5 == 0x8000024) {
        param_2 = param_2 + 1;
        pcVar3 = apical_isp_ae_s_roi_isra_36;
        goto LAB_000168f4;
      }
      if (uVar5 < 0x8000025) {
        if (uVar5 == 0x800000f) {
          private_copy_from_user(&local_b0,param_2[1],0x18);
          local_4d0 = local_a0;
          local_4cc = local_9c;
          iVar6 = tisp_s_awb_ct_trend(local_b0,local_ac,local_a8,local_a4);
          if (iVar6 == 0) {
            return 0;
          }
          iVar10 = 0x351;
          pcVar8 = "%s:%d set awb_cluster attr failed!!!\n";
          pcVar9 = "tiziano_isp_awb_ct_trend_s_attr";
          goto LAB_00016c64;
        }
        if (uVar5 < 0x800000f) {
          private_copy_from_user(&local_b0,param_2[1],0x28);
          for (uVar5 = 0; uVar5 < 0x18; uVar5 = uVar5 + 1) {
            *(char *)((int)&local_4d0 + uVar5) = *(char *)((int)&local_a0 + uVar5);
          }
          iVar6 = tisp_s_awb_cluster(local_b0,local_ac,local_a8,local_a4);
          return iVar6;
        }
        if (uVar5 == 0x8000022) {
          return 0;
        }
        if (uVar5 != 0x8000023) {
          return -1;
        }
        if ((int *******)param_2[1] < (int *******)0x100) {
          pcVar3 = tisp_set_ae_comp;
          local_b0 = (int *******)param_2[1];
          goto LAB_00016aec;
        }
        pcVar9 = "AE COMP Value set overflow!\n";
        goto LAB_00016ae0;
      }
      if (uVar5 == 0x8000028) {
        pcVar3 = tisp_s_max_again;
        local_b0 = (int *******)param_2[1];
LAB_00016aec:
        (*pcVar3)(local_b0);
        return 0;
      }
      if (uVar5 < 0x8000029) {
        if (uVar5 != 0x8000025) {
          return 0xffffffff;
        }
        iVar6 = apical_isp_expr_s_ctrl_isra_35(*param_1,param_2[1]);
        return iVar6;
      }
      if (uVar5 == 0x8000029) {
        pcVar3 = tisp_s_max_isp_dgain;
        local_b0 = (int *******)param_2[1];
        goto LAB_00016aec;
      }
      if (uVar5 != 0x800002a) {
        return -1;
      }
      iVar6 = tisp_s_Hilightdepress(param_2[1]);
      if (iVar6 == 0) {
        return 0;
      }
      iVar10 = 0x5ed;
      pcVar9 = "apical_isp_hi_light_depress_s_ctrl";
    }
    else if (uVar5 == 0x8000032) {
      iVar6 = tisp_s_ae_it_max(param_2[1]);
      if (iVar6 == 0) {
        return 0;
      }
      iVar10 = 0x6d9;
      pcVar9 = "apical_isp_ae_it_max_s_ctrl";
    }
    else {
      if (uVar5 < 0x8000033) {
        if (uVar5 == 0x800002d) {
          param_2 = param_2 + 1;
          pcVar3 = apical_isp_ae_zone_weight_s_attr_isra_47;
          goto LAB_000168f4;
        }
        if (uVar5 < 0x800002d) {
          return 0;
        }
        if (uVar5 != 0x800002e) {
          if (uVar5 != 0x800002f) {
            return -1;
          }
          if (param_2[1] == 0) {
            return -1;
          }
          private_copy_from_user(&local_b0,param_2[1],0x10);
          iVar6 = tisp_s_ae_min(local_b0,local_ac,local_a8,local_a4);
          return iVar6;
        }
        pppppppuVar4 = (int *******)private_kmalloc(0x42c,0xd0);
        if (pppppppuVar4 != (int *******)0x0) {
          private_copy_from_user(&local_b0,param_2[1],0x10);
          pppppppuVar4[0x105] = (int ******)((uint)local_b0 & 0xff);
          pppppppuVar4[0x106] = (int ******)((uint)local_b0 >> 8 & 0xff);
          pppppppuVar4[0x107] = (int ******)((uint)local_b0 >> 0x10 & 0xff);
          pppppppuVar4[0x108] = (int ******)((uint)local_b0 >> 0x18);
          for (uVar5 = 0; uVar5 < 0x41c; uVar5 = uVar5 + 1) {
            *(char *)((int)&local_4d0 + uVar5) =
                 *(char *)((int)pppppppuVar4 + uVar5 + 0x10);
          }
          tisp_s_ae_hist(*pppppppuVar4,pppppppuVar4[1],pppppppuVar4[2],pppppppuVar4[3]);
          pcVar3 = private_kfree;
          local_b0 = pppppppuVar4;
          goto LAB_00016aec;
        }
        pcVar9 = "Failed to private_kmalloc ae_hist\n";
        goto LAB_0001683c;
      }
      if (uVar5 == 0x8000035) {
        private_copy_from_user(&local_b0,param_2[1],0x98);
        iVar6 = tisp_set_ae_attr(&local_b0);
        if (iVar6 == 0) {
          return 0;
        }
        iVar10 = 0x7e1;
        pcVar8 = "%s:%d set ae attr failed!!!\n";
        pcVar9 = "tiziano_isp_ae_manual_attr_s_ctrl";
        goto LAB_00016c64;
      }
      if (uVar5 < 0x8000036) {
        if (uVar5 != 0x8000034) {
          return -1;
        }
        uVar5 = param_2[1];
        pcVar3 = tisp_set_ae_freeze;
        goto LAB_000169c4;
      }
      if (uVar5 != 0x8000037) {
        if (uVar5 != 0x8000038) {
          return 0xffffffff;
        }
        private_copy_from_user(&local_b0,param_2[1],0x28);
        for (uVar5 = 0; uVar5 < 0x18; uVar5 = uVar5 + 1) {
          *(char *)((int)&local_4d0 + uVar5) = *(char *)((int)&local_a0 + uVar5);
        }
        iVar6 = tisp_s_ae_at_list(local_b0,local_ac,local_a8,local_a4);
        if (iVar6 == 0) {
          return 0;
        }
        iVar10 = 0x431;
        pcVar8 = "%s:%d set ae target list failed!!!\n";
        pcVar9 = "tiziano_isp_ae_target_list_s_ctrl";
        goto LAB_00016c64;
      }
      iVar6 = tisp_s_BacklightComp(param_2[1]);
      if (iVar6 == 0) {
        return 0;
      }
      iVar10 = 0x609;
      pcVar9 = "tiziano_isp_backlight_comp_s_ctrl";
    }
  }
  else {
    if (uVar5 == 0x80000e1) {
      if (param_2[1] == param_1[0x1029]) {
        return 0;
      }
      iVar6 = *(int *)(*param_1 + 0xd4);
      param_1[0x1029] = param_2[1];
      *(int *)(iVar6 + 0x178) = 1;
      return 0;
    }
    if (0x80000e1 < uVar5) {
      if (uVar5 == 0x8000100) {
        private_copy_from_user(&local_b0,param_2[1],0x28);
        iVar6 = tisp_s_ccm_attr(&local_b0);
        if (iVar6 == 0) {
          return 0;
        }
        iVar10 = 0x7c0;
        pcVar9 = "tiziano_isp_ccm_attr_s_ctrl";
        pcVar8 = "%s:%d set ccm attr failed!!!\n";
        goto LAB_00016c64;
      }
      if (uVar5 < 0x8000101) {
        if (uVar5 == 0x80000e6) {
          local_b0 = (int *******)param_2[1];
          pcVar3 = tisp_s_ev_start;
          goto LAB_00016aec;
        }
        if (uVar5 < 0x80000e7) {
          if (uVar5 == 0x80000e3) {
            private_copy_from_user(&local_b0,param_2[1],0x14);
            local_4d0 = local_a0;
            tisp_s_fcrop_control(local_b0,local_ac,local_a8,local_a4);
            return 0;
          }
          if (uVar5 < 0x80000e3) {
            private_copy_from_user(&local_b0,param_2[1],4);
            pcVar3 = tisp_s_module_control;
            goto LAB_00016aec;
          }
          if (uVar5 != 0x80000e4) {
            if (uVar5 != 0x80000e5) {
              return 0xffffffff;
            }
            param_2 = (unsigned int *)param_2[1];
            pcVar3 = apical_isp_mask_s_attr_isra_29;
            goto LAB_000168f4;
          }
          uVar2 = param_2[1];
          iVar6 = *(int *)(*param_1 + 0xd4);
          uVar5 = (uVar2 & 2) >> 1;
          param_1[0x3ac] = uVar5;
          *(unsigned int *)(iVar6 + 0x168) = uVar5;
          param_1[0x3ad] = uVar2 & 1;
          *(unsigned int *)(iVar6 + 0x170) = uVar2 & 1;
          goto LAB_000163c4;
        }
        if (uVar5 == 0x80000e8) {
          private_copy_from_user(&local_b0,param_2[1],0x24);
          for (uVar5 = 0; uVar5 < 0x14; uVar5 = uVar5 + 1) {
            *(char *)((int)&local_4d0 + uVar5) = *(char *)((int)&local_a0 + uVar5);
          }
          tisp_s_autozoom_control(local_b0,local_ac,local_a8,local_a4);
          return 0;
        }
        if (0x80000e7 < uVar5) {
          if (uVar5 == 0x80000e9) {
            private_copy_from_user(&local_b0,param_2[1],0xc);
            tisp_s_scaler_level_control(local_b0,local_ac,local_a8);
            return 0;
          }
          if (uVar5 != 0x80000ea) {
            return 0xffffffff;
          }
          private_copy_from_user(&local_b0,param_2[1],4);
          pcVar3 = tisp_set_wdr_output_mode;
          goto LAB_00016cc8;
        }
        uVar5 = param_2[1];
        iVar10 = *(int *)(*param_1 + 0xd4);
        iVar6 = tisp_cust_mode_s_ctrl(uVar5);
        if (iVar6 == 0) {
          if (uVar5 == 1) {
            if ((param_1[0x1029] & 0xfffffffdU) == 0) {
              iVar6 = 2;
              *(int *)(iVar10 + 0x178) = 2;
            }
            else {
              if ((param_1[0x1029] & 0xfffffffdU) != 1) {
                return 0;
              }
              *(int *)(iVar10 + 0x178) = 2;
              iVar6 = 3;
            }
            param_1[0x1029] = iVar6;
            return 0;
          }
          if (uVar5 == 0) {
            if ((param_1[0x1029] & 0xfffffffdU) == 0) {
              uVar7 = 2;
            }
            else {
              uVar7 = 3;
              if ((param_1[0x1029] & 0xfffffffdU) != 1) {
                return 0;
              }
            }
            *(int *)(iVar10 + 0x178) = uVar7;
            return 0;
          }
          return 0;
        }
        pcVar9 = "make sure xxx-cust-t31.bin exist\n";
      }
      else {
        if (uVar5 == 0x8000161) {
          return 0;
        }
        if (0x8000161 < uVar5) {
          if (uVar5 == 0x8000164) {
            if (param_2[1] == 1) {
              *(int *)(*(int *)(*param_1 + 0xd4) + 0x15c) = 0;
              pcVar9 = "@@@ isp bypass disable @@@\n";
            }
            else {
              *(int *)(*(int *)(*param_1 + 0xd4) + 0x15c) = 1;
              pcVar9 = "@@@ isp bypass enable @@@\n";
            }
            isp_printf(0,pcVar9);
            return 0;
          }
          if (0x8000164 < uVar5) {
            if (uVar5 < 0x800016a) {
              return 0;
            }
            return -1;
          }
          uVar2 = 0x8000163;
          goto LAB_00015da4;
        }
        if (uVar5 == 0x8000102) {
          private_copy_from_user(&local_b0,param_2[1],3);
          pcVar3 = tisp_set_bcsh_fixed_contrast;
LAB_00016cc8:
          iVar6 = (*pcVar3)(&local_b0);
          return iVar6;
        }
        if (0x8000101 < uVar5) {
          if (uVar5 == 0x8000120) {
            return 0;
          }
          if (uVar5 == 0x8000140) {
            return 0;
          }
          return -1;
        }
        local_b0 = (int *******)param_2[1];
        if (local_b0 < (int *******)0x100) {
          pcVar3 = tisp_set_bcsh_hue;
          goto LAB_00016aec;
        }
        pcVar9 = "BCSH Hue Value set overflow!\n";
      }
LAB_00016ae0:
      uVar7 = 2;
      goto LAB_00016840;
    }
    if (uVar5 == 0x8000086) {
      if (param_2[1] < 0x100) {
        pcVar3 = tisp_s_2dns_ratio;
LAB_00016938:
        iVar6 = (*pcVar3)();
        if (-1 < iVar6) {
          return iVar6;
        }
        isp_printf(1,"Set Ratio failure!!!\n");
        return iVar6;
      }
LAB_00016910:
      pcVar9 = "Ratio value overflow!!!\n";
LAB_0001683c:
      uVar7 = 1;
LAB_00016840:
      isp_printf(uVar7,pcVar9);
      return -1;
    }
    if (uVar5 < 0x8000087) {
      if (uVar5 != 0x8000062) {
        if (uVar5 < 0x8000063) {
          if (uVar5 == 0x8000044) {
            param_2 = param_2 + 1;
            pcVar3 = apical_isp_af_weight_s_attr_isra_51;
          }
          else {
            if (0x8000044 < uVar5) {
              uVar2 = 0x8000060;
LAB_00016070:
              if (uVar2 <= uVar5) {
                return 0;
              }
              return -1;
            }
            if (uVar5 != 0x8000042) {
              return 0xffffffff;
            }
            param_2 = (unsigned int *)param_2[1];
            pcVar3 = apical_isp_af_hist_s_attr_isra_50;
          }
          goto LAB_000168f4;
        }
        if (uVar5 < 0x8000084) {
          if (0x8000080 < uVar5) {
            return 0;
          }
          if (uVar5 != 0x8000080) {
            return 0xffffffff;
          }
          private_copy_from_user(param_1 + 0xfe0,param_2[1],0x106);
          return 0;
        }
        if (uVar5 != 0x8000085) {
          return -1;
        }
        if (param_2[1] < 0x100) {
          pcVar3 = tisp_s_3dns_ratio;
          goto LAB_00016938;
        }
        goto LAB_00016910;
      }
      iVar6 = tisp_s_dpc_strength(param_2[1]);
      if (iVar6 == 0) {
        return 0;
      }
      iVar10 = 0x6f5;
      pcVar9 = "apical_isp_dpc_strength_s_ctrl";
    }
    else {
      if (uVar5 == 0x80000a4) {
        uVar5 = param_2[1];
        pcVar3 = tisp_s_defog_enable;
LAB_000169c4:
        (*pcVar3)(uVar5);
        return 0;
      }
      if (0x80000a4 < uVar5) {
        if (uVar5 < 0x80000c3) {
          if (0x80000bf < uVar5) {
            return 0;
          }
          if (uVar5 != 0x80000a6) {
            return 0xffffffff;
          }
          private_copy_from_user(&local_b0,param_2[1],0x40);
          pcVar3 = tisp_set_csc_attr;
          goto LAB_00016cc8;
        }
        if (uVar5 != 0x80000e0) {
          return -1;
        }
        iVar6 = *param_1;
        local_b0 = (int *******)param_2[1];
        if (local_b0 == *(int ********)(*(int *)(iVar6 + 0xd4) + 300)) {
          return 0;
        }
        if (iVar6 == 0) {
          iVar10 = -2;
        }
        else if (*(code **)(iVar6 + 0x7c) == (code *)0x0) {
          iVar10 = -0x203;
        }
        else {
          iVar10 = (**(code **)(iVar6 + 0x7c))(iVar6,0x200000a,&local_b0);
          if (iVar10 == 0) {
            param_1[0x1028] = (int)local_b0;
            tisp_set_fps();
            return 0;
          }
        }
        pcVar8 = "Failed to set sensor fps=%u, ret=%d\n";
        pcVar9 = (char *)local_b0;
        iVar6 = iVar10;
        goto LAB_00016c64;
      }
      if (uVar5 != 0x80000a2) {
        if (uVar5 < 0x80000a3) {
          uVar2 = 0x80000a0;
          goto LAB_00016070;
        }
        uVar5 = param_2[1];
        pcVar3 = tisp_s_adr_enable;
        goto LAB_000169c4;
      }
      iVar6 = tisp_s_drc_strength(param_2[1]);
      if (iVar6 == 0) {
        return 0;
      }
      iVar10 = 0x711;
      pcVar9 = "apical_isp_drc_strength_s_ctrl";
    }
  }
LAB_00016390:
  pcVar8 = "%s:%d set control failed!!!\n";
LAB_00016c64:
  isp_printf(1,pcVar8,pcVar9,iVar10);
  return iVar6;
}



int apical_isp_mask_g_attr_isra_68(int *param_1)

{
  char auStack_b8 [176];
  
  tisp_g_mscaler_mask_attr(auStack_b8);
  private_copy_to_user(*param_1,auStack_b8,0xac);
  return 0;
}



int apical_isp_expr_g_ctrl_isra_72(int *param_1)

{
  char local_98 [48];
  int local_68;
  short local_2c;
  short local_2a;
  short local_1c;
  unsigned int local_18;
  short local_12;
  short local_10;
  short local_e;
  
  tisp_g_ev_attr(local_98);
  local_18 = (uint)(local_68 != 0);
  local_12 = local_2c;
  local_10 = local_2a;
  local_e = local_1c;
  private_copy_to_user(*param_1,&local_18,0xc);
  return 0;
}



int apical_isp_max_again_g_ctrl_isra_73(int *param_1)

{
  int iVar1;
  char auStack_90 [32];
  int local_70;
  
  iVar1 = tisp_g_ev_attr(auStack_90);
  if (iVar1 == 0) {
    *param_1 = local_70;
  }
  else {
    isp_printf(1,"%s:%d:Get Control failed!!!\n","apical_isp_max_again_g_ctrl",0x5c2);
  }
  return iVar1;
}



int apical_isp_max_dgain_g_ctrl_isra_74(int *param_1)

{
  int iVar1;
  char auStack_90 [36];
  int local_6c;
  
  iVar1 = tisp_g_ev_attr(auStack_90);
  if (iVar1 == 0) {
    *param_1 = local_6c;
  }
  else {
    isp_printf(1,"%s:%d:Get Control failed!!!\n","apical_isp_max_dgain_g_ctrl",0x5dc);
  }
  return iVar1;
}



int apical_isp_ev_g_attr_isra_75(int *param_1)

{
  int iVar1;
  char auStack_a8 [4];
  int local_a4;
  int local_a0;
  int local_9c;
  int local_98;
  int local_94;
  int local_90;
  int local_28;
  int local_24;
  int local_20;
  int local_1c;
  int local_18;
  int local_14;
  
  iVar1 = tisp_g_ev_attr(auStack_a8);
  if (iVar1 == 0) {
    local_28 = local_a4;
    local_1c = local_98;
    local_18 = local_94;
    local_14 = local_90;
    local_24 = local_a0;
    local_20 = local_9c;
    private_copy_to_user(*param_1,&local_28,0x18);
  }
  else {
    isp_printf(1,"%s:%d:Get Control failed!!!\n","apical_isp_ev_g_attr",0x65d);
  }
  return iVar1;
}



int apical_isp_gamma_g_attr_isra_76(int *param_1)

{
  int iVar1;
  int iVar2;
  short *puVar3;
  short *puVar4;
  short local_218 [130];
  short local_114 [132];
  
  iVar1 = tisp_g_Gamma(local_218);
  if (iVar1 == 0) {
    iVar2 = 0;
    do {
      puVar4 = (short *)((int)local_218 + iVar2);
      puVar3 = (short *)((int)local_114 + iVar2);
      iVar2 = iVar2 + 2;
      *puVar3 = *puVar4;
    } while (iVar2 != 0x102);
    private_copy_to_user(*param_1,local_114,0x102);
  }
  else {
    isp_printf(1,"%s:%d get control failed!!!\n","apical_isp_gamma_g_attr",0x20f);
  }
  return iVar1;
}



int apical_isp_ae_g_roi_isra_77(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  char local_f8 [232];
  
  iVar1 = private_kmalloc(900,0xd0);
  if (iVar1 == 0) {
    isp_printf(1,"Failed to private_kmalloc roi_weight\n");
    iVar2 = -1;
  }
  else {
    iVar2 = tisp_g_aeroi_weight(iVar1);
    iVar4 = 0;
    if (iVar2 == 0) {
      iVar7 = 0;
      do {
        iVar3 = 0;
        do {
          iVar6 = iVar3 + iVar4;
          iVar5 = iVar3 * 4;
          iVar3 = iVar3 + 1;
          local_f8[iVar6] = (char)*(int *)(iVar1 + iVar5 + iVar7);
        } while (iVar3 != 0xf);
        iVar4 = iVar4 + 0xf;
        iVar7 = iVar4 * 4;
      } while (iVar4 != 0xe1);
      private_copy_to_user(*param_1,local_f8,0xe1);
    }
    else {
      isp_printf(1,"%s:%d get control failed!!!\n","apical_isp_ae_g_roi",0x267);
    }
    private_kfree(iVar1);
  }
  return iVar2;
}



int apical_isp_ae_zone_g_ctrl_isra_84(int *param_1)

{
  char auStack_390 [904];
  
  tisp_g_ae_zone(auStack_390);
  private_copy_to_user(*param_1,auStack_390,900);
  return 0;
}



int apical_isp_af_zone_g_ctrl_isra_85(int *param_1)

{
  char auStack_390 [904];
  
  tisp_g_af_zone(auStack_390);
  private_copy_to_user(*param_1,auStack_390,900);
  return 0;
}



int apical_isp_ae_zone_weight_g_attr_isra_89(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  char local_f8 [232];
  
  iVar1 = private_kmalloc(900,0xd0);
  if (iVar1 == 0) {
    isp_printf(1,"Failed to kmalloc ae_zone_weight\n");
    iVar2 = -1;
  }
  else {
    iVar2 = tisp_g_aezone_weight(iVar1);
    iVar4 = 0;
    if (iVar2 == 0) {
      iVar7 = 0;
      do {
        iVar3 = 0;
        do {
          iVar6 = iVar3 + iVar4;
          iVar5 = iVar3 * 4;
          iVar3 = iVar3 + 1;
          local_f8[iVar6] = (char)*(int *)(iVar1 + iVar5 + iVar7);
        } while (iVar3 != 0xf);
        iVar4 = iVar4 + 0xf;
        iVar7 = iVar4 * 4;
      } while (iVar4 != 0xe1);
      private_copy_to_user(*param_1,local_f8,0xe1);
    }
    else {
      isp_printf(1,"%s:%d get control failed!!!\n","apical_isp_ae_zone_weight_g_attr",0x4f2);
    }
    private_kfree(iVar1);
  }
  return iVar2;
}



int apical_isp_ae_hist_origin_g_attr_isra_92(int *param_1)

{
  void *__src;
  int uVar1;
  char auStack_410 [1028];
  
  __src = (void *)private_kmalloc(0x42c,0xd0);
  if (__src == (void *)0x0) {
    isp_printf(1,"Failed to private_kmalloc ae_hist\n");
    uVar1 = 0xffffffff;
  }
  else {
    tisp_g_ae_hist(__src);
    memcpy(auStack_410,__src,0x400);
    private_copy_to_user(*param_1,auStack_410,0x400);
    private_kfree(__src);
    uVar1 = 0;
  }
  return uVar1;
}



int apical_isp_awb_zone_statis_g_attr_isra_94(int *param_1)

{
  void *__src;
  int uVar1;
  char auStack_2b8 [684];
  
  __src = (void *)private_vmalloc(0x1c);
  if (__src == (void *)0x0) {
    isp_printf(1,"Failed to private_vmalloc wb_zone\n");
    uVar1 = 0xffffffff;
  }
  else {
    tisp_g_wb_zone(__src);
    memcpy(auStack_2b8,__src,0x2a3);
    private_copy_to_user(*param_1,auStack_2b8,0x2a3);
    private_vfree(__src);
    uVar1 = 0;
  }
  return uVar1;
}



int apical_isp_af_hist_g_attr_isra_95(int *param_1)

{
  int local_b8;
  int local_b4;
  int local_b0;
  int local_ac;
  char local_a8;
  char local_a7;
  short local_a6;
  short local_a4;
  short local_a2;
  short local_a0;
  short local_9e;
  char local_9c;
  char local_9b;
  char local_9a;
  char local_99;
  char local_98;
  char local_97;
  char local_96;
  char local_95;
  char local_94;
  char local_92;
  char local_91;
  short local_90;
  char local_8e;
  char local_8d;
  char local_8c;
  short local_8a;
  char local_88;
  char local_86;
  char local_85;
  short local_84;
  char local_82;
  char local_81;
  char local_80;
  short local_7e;
  char local_7c;
  char local_7a;
  char local_79;
  short local_78;
  char local_76;
  char local_75;
  char local_74;
  short local_72;
  char local_70;
  char local_6e;
  char local_6d;
  short local_6c;
  char local_6a;
  char local_69;
  char local_68;
  short local_66;
  char local_64;
  int local_60;
  int local_5c;
  int local_58;
  int local_54;
  char local_50;
  char local_4f;
  short local_4e;
  short local_4c;
  short local_4a;
  short local_48;
  short local_46;
  char local_44;
  char local_43;
  char local_42;
  char local_41;
  char local_40;
  char local_3f;
  char local_3e;
  char local_3d;
  char local_3c;
  char local_3a;
  char local_39;
  short local_38;
  char local_36;
  char local_35;
  char local_34;
  short local_32;
  char local_30;
  char local_2e;
  char local_2d;
  short local_2c;
  char local_2a;
  char local_29;
  char local_28;
  short local_26;
  char local_24;
  char local_22;
  char local_21;
  short local_20;
  char local_1e;
  char local_1d;
  char local_1c;
  short local_1a;
  char local_18;
  char local_16;
  char local_15;
  short local_14;
  char local_12;
  char local_11;
  char local_10;
  short local_e;
  char local_c;
  
  tisp_g_af_attr(&local_b8);
  local_3f = local_97;
  local_3e = local_96;
  local_3d = local_95;
  local_3c = local_94;
  local_60 = local_b8;
  local_5c = local_b4;
  local_58 = local_b0;
  local_54 = local_ac;
  local_50 = local_a8;
  local_4f = local_a7;
  local_4e = local_a6;
  local_4c = local_a4;
  local_4a = local_a2;
  local_48 = local_a0;
  local_46 = local_9e;
  local_44 = local_9c;
  local_43 = local_9b;
  local_42 = local_9a;
  local_41 = local_99;
  local_40 = local_98;
  local_3a = local_92;
  local_39 = local_91;
  local_38 = local_90;
  local_36 = local_8e;
  local_35 = local_8d;
  local_34 = local_8c;
  local_32 = local_8a;
  local_30 = local_88;
  local_2e = local_86;
  local_2d = local_85;
  local_2c = local_84;
  local_2a = local_82;
  local_29 = local_81;
  local_28 = local_80;
  local_26 = local_7e;
  local_24 = local_7c;
  local_22 = local_7a;
  local_21 = local_79;
  local_20 = local_78;
  local_1e = local_76;
  local_1d = local_75;
  local_1c = local_74;
  local_1a = local_72;
  local_18 = local_70;
  local_16 = local_6e;
  local_15 = local_6d;
  local_14 = local_6c;
  local_12 = local_6a;
  local_11 = local_69;
  local_10 = local_68;
  local_e = local_66;
  local_c = local_64;
  private_copy_to_user(*param_1,&local_60,0x58);
  return 0;
}



int apical_isp_af_weight_g_attr_isra_96(int *param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  char local_f8 [232];
  
  iVar1 = private_kmalloc(900,0xd0);
  if (iVar1 == 0) {
    isp_printf(1,"Failed to kmalloc ae_weight\n");
    iVar2 = -1;
  }
  else {
    iVar2 = tisp_g_af_weight(iVar1);
    iVar4 = 0;
    if (iVar2 == 0) {
      iVar7 = 0;
      do {
        iVar3 = 0;
        do {
          iVar6 = iVar3 + iVar4;
          iVar5 = iVar3 * 4;
          iVar3 = iVar3 + 1;
          local_f8[iVar6] = (char)*(int *)(iVar1 + iVar5 + iVar7);
        } while (iVar3 != 0xf);
        iVar4 = iVar4 + 0xf;
        iVar7 = iVar4 * 4;
      } while (iVar4 != 0xe1);
      private_copy_to_user(*param_1,local_f8,0xe1);
    }
    else {
      isp_printf(1,"%s:%d get control failed!!!\n","apical_isp_af_weight_g_attr",0x2ae);
    }
    private_kfree(iVar1);
  }
  return iVar2;
}



int tiziano_isp_ae_manual_attr_g_ctrl_isra_103(int *param_1)

{
  char auStack_a0 [152];
  
  tisp_get_ae_attr(auStack_a0);
  private_copy_to_user(*param_1,auStack_a0,0x98);
  return 0;
}



int tiziano_isp_csc_g_attr_isra_108(int *param_1)

{
  int uVar1;
  char auStack_50 [68];
  
  uVar1 = tisp_get_csc_attr(auStack_50);
  private_copy_to_user(*param_1,auStack_50,0x40);
  return uVar1;
}



int isp_frame_done_wait(unsigned int param_1,int *param_2)

{
  int uVar1;
  int *unaff_gp;
  int local_38;
  int local_34;
  char *local_30;
  int ***local_2c;
  int ***local_28;
  
  frame_done_cond = 0;
  local_38 = 0;
  local_34 = *unaff_gp;
  local_30 = &autoremove_wake_function;
  local_2c = &local_2c;
  local_28 = local_2c;
  do {
    prepare_to_wait(&frame_done_wq,&local_38,1);
    if (frame_done_cond == 1) {
      if (param_1 != 0) goto LAB_00017924;
      break;
    }
    if ((*(unsigned int *)(*(int *)(*unaff_gp + 4) + 8) & 2) != 0) {
      param_1 = 0xfffffe00;
      goto LAB_00017924;
    }
    param_1 = schedule_timeout(param_1);
  } while (param_1 != 0);
  param_1 = (uint)(frame_done_cond == 1);
LAB_00017924:
  finish_wait(&frame_done_wq,&local_38);
  uVar1 = frame_done_cnt;
  param_2[1] = DAT_000b220c;
  *param_2 = uVar1;
  uVar1 = 0xfffffe00;
  if ((param_1 != 0xfffffe00) && (uVar1 = 0xffffff6f, param_1 != 0)) {
    uVar1 = 0;
  }
  return uVar1;
}



// WARNING: Type propagation algorithm not settling

int apical_isp_core_ops_g_ctrl(int *param_1,unsigned int *param_2)

{
  bool bVar1;
  code *pcVar2;
  unsigned int uVar3;
  char *pcVar4;
  unsigned int *puVar5;
  char *pcVar6;
  int uVar7;
  int iVar8;
  int unaff_gp;
  unsigned int local_98;
  unsigned int local_94;
  unsigned int local_90;
  int local_8c;
  int local_88;
  int local_84;
  ushort local_80;
  unsigned int local_7c;
  unsigned int local_18;
  int local_14;
  
  uVar3 = *param_2;
  if (uVar3 == 0x8000032) {
    iVar8 = tisp_g_ae_it_max(&local_98);
    if (iVar8 != 0) {
      uVar7 = 0x6e5;
      pcVar6 = "apical_isp_ae_it_max_g_ctrl";
LAB_00017fd0:
      pcVar4 = "%s:%d set control failed!!!\n";
LAB_00017fd8:
      isp_printf(1,pcVar4,pcVar6,uVar7);
      return iVar8;
    }
LAB_000183c0:
    param_2[1] = local_98;
  }
  else {
    if (uVar3 < 0x8000033) {
      if (uVar3 == 0x800000b) {
        pcVar2 = apical_isp_awb_zone_statis_g_attr_isra_94;
        goto LAB_000185c0;
      }
      if (uVar3 < 0x800000c) {
        if (0x8000001 < uVar3) {
          if (uVar3 < 0x8000008) {
            if (0x8000005 < uVar3) goto LAB_000186d0;
            if (uVar3 == 0x8000004) {
              iVar8 = tisp_g_wb_attr(&local_98);
              if (iVar8 == 0) {
                switch(local_98) {
                case 0:
                  local_18 = 0;
                  break;
                case 1:
                  local_18 = 1;
                  break;
                case 2:
                  local_18 = 2;
                  break;
                case 3:
                  local_18 = 3;
                  break;
                case 4:
                  local_18 = 4;
                  break;
                case 5:
                  local_18 = 5;
                  break;
                case 6:
                  local_18 = 6;
                  break;
                case 7:
                  local_18 = 7;
                  break;
                case 8:
                  local_18 = 8;
                  break;
                case 9:
                  local_18 = 9;
                  break;
                default:
                  isp_printf(1,"%s:%d: Can not support this mode!!!\n","apical_isp_wb_g_ctrl",0x5a3)
                  ;
                  return -1;
                }
                uVar7 = 8;
                puVar5 = &local_18;
                local_14 = CONCAT22((short)local_90,(short)local_94);
                iVar8 = 0;
                goto LAB_000186b8;
              }
              uVar7 = 0x57f;
              pcVar6 = "apical_isp_wb_g_ctrl";
              goto LAB_000180cc;
            }
            if (uVar3 < 0x8000005) {
              if (uVar3 != 0x8000003) {
                return -1;
              }
              return 0;
            }
            tisp_g_wb_attr(&local_98);
          }
          else {
            if (uVar3 != 0x8000009) {
              if (uVar3 < 0x800000a) {
                tisp_g_rgb_coefft(&local_98);
                uVar7 = 6;
              }
              else {
                tisp_g_awb_start(&local_98);
                uVar7 = 8;
              }
              private_copy_to_user(param_2[1],&local_98,uVar7);
              return 0;
            }
            tisp_g_wb_attr(&local_98);
            local_84 = local_8c;
            local_80 = (ushort)local_88;
          }
          uVar3 = local_84 * 0x10000 + (uint)local_80;
          goto LAB_00018500;
        }
        if (uVar3 < 0x8000000) {
          if (uVar3 == 0x980915) {
            uVar3 = param_1[0x3ac];
          }
          else if (uVar3 < 0x980916) {
            if (uVar3 == 0x980901) {
              uVar3 = param_1[0x1023];
            }
            else if (uVar3 < 0x980902) {
              if (uVar3 != 0x980900) {
                return -1;
              }
              uVar3 = param_1[0x1025];
            }
            else if (uVar3 == 0x980902) {
              uVar3 = param_1[0x1024];
            }
            else {
              if (uVar3 != 0x980914) {
                return -1;
              }
              uVar3 = param_1[0x3ad];
            }
          }
          else if (uVar3 == 0x98091b) {
            uVar3 = param_1[0xfdb];
          }
          else if (uVar3 < 0x98091c) {
            if (uVar3 != 0x980918) {
              return -1;
            }
            uVar3 = param_1[0x3bf];
          }
          else if (uVar3 == 0x98091f) {
            uVar3 = param_1[0x1027];
          }
          else {
            if (uVar3 != 0x9a091a) {
              return -1;
            }
            uVar3 = param_1[0x1026];
          }
          goto LAB_00018500;
        }
      }
      else {
        if (uVar3 == 0x8000027) {
          iVar8 = tisp_g_ev_attr(&local_98);
          local_98 = local_7c;
          if (iVar8 != 0) {
            uVar7 = 0x19;
            pcVar6 = "apical_isp_g_totalgain";
LAB_000180cc:
            pcVar4 = "%s:%d:Get Control failed!!!\n";
            goto LAB_00017fd8;
          }
          goto LAB_000183c0;
        }
        if (uVar3 < 0x8000028) {
          if (0x8000022 < uVar3) {
            if (uVar3 == 0x8000024) {
              pcVar2 = apical_isp_ae_g_roi_isra_77;
LAB_000185c0:
              iVar8 = (*pcVar2)(param_2 + 1);
              return iVar8;
            }
            if (0x8000023 < uVar3) {
              if (uVar3 == 0x8000025) {
                pcVar2 = apical_isp_expr_g_ctrl_isra_72;
              }
              else {
                if (uVar3 != 0x8000026) {
                  return -1;
                }
                pcVar2 = apical_isp_ev_g_attr_isra_75;
              }
              goto LAB_000185c0;
            }
            pcVar2 = tisp_get_ae_comp;
LAB_00018540:
            (*pcVar2)(&local_98);
            uVar3 = local_98 & 0xff;
            goto LAB_00018500;
          }
          if (uVar3 < 0x8000020) {
            if (uVar3 == 0x800000e) {
              iVar8 = tisp_g_awb_cluster(&local_98);
              private_copy_to_user(param_2[1],&local_98,0x28);
              if (iVar8 == 0) {
                return 0;
              }
              uVar7 = 0x344;
              pcVar6 = "tiziano_isp_awb_cluster_g_attr";
            }
            else {
              if (uVar3 != 0x800000f) {
                if (uVar3 != 0x800000d) {
                  return -1;
                }
                tisp_g_wb_ct(&local_98);
                uVar7 = 4;
                goto LAB_00017f10;
              }
              iVar8 = tisp_g_awb_ct_trend(&local_98);
              private_copy_to_user(param_2[1],&local_98,0x18);
              if (iVar8 == 0) {
                return 0;
              }
              uVar7 = 0x35e;
              pcVar6 = "tiziano_isp_awb_ct_trend_g_attr";
            }
            pcVar4 = "%s:%d get awb_cluster attr failed!!!\n";
            goto LAB_00017fd8;
          }
        }
        else if (uVar3 != 0x800002c) {
          if (0x800002c < uVar3) {
            if (uVar3 == 0x800002f) {
              iVar8 = tisp_g_ae_min(&local_98);
              uVar7 = 0x10;
              if (iVar8 != 0) {
                return iVar8;
              }
              puVar5 = &local_98;
              iVar8 = 0;
              goto LAB_000186b8;
            }
            if (uVar3 < 0x8000030) {
              if (uVar3 != 0x800002d) {
                if (uVar3 != 0x800002e) {
                  return -1;
                }
                iVar8 = private_kmalloc(0x42c,0xd0);
                if (iVar8 != 0) {
                  tisp_g_ae_hist(iVar8);
                  local_98 = CONCAT13((char)*(int *)(iVar8 + 0x420),
                                      CONCAT12((char)*(int *)(iVar8 + 0x41c),
                                               CONCAT11((char)*(int *)(iVar8 + 0x418),
                                                        (char)*(int *)(iVar8 + 0x414))));
                  local_94 = CONCAT22((short)*(int *)(iVar8 + 0x404),
                                      (short)*(int *)(iVar8 + 0x400));
                  local_90 = CONCAT22((short)*(int *)(iVar8 + 0x40c),
                                      (short)*(int *)(iVar8 + 0x408));
                  local_8c = CONCAT13((char)*(int *)(iVar8 + 0x428),
                                      CONCAT12((char)*(int *)(iVar8 + 0x424),
                                               (short)*(int *)(iVar8 + 0x410)));
                  private_copy_to_user(param_2[1],&local_98,0x10);
                  private_kfree(iVar8);
                  return 0;
                }
                pcVar6 = "Failed to private_kmalloc ae_hist\n";
                uVar7 = 1;
LAB_00018570:
                isp_printf(uVar7,pcVar6);
                return -1;
              }
              pcVar2 = apical_isp_ae_zone_weight_g_attr_isra_89;
            }
            else if (uVar3 == 0x8000030) {
              pcVar2 = apical_isp_ae_zone_g_ctrl_isra_84;
            }
            else {
              if (uVar3 != 0x8000031) {
                return -1;
              }
              pcVar2 = apical_isp_ae_hist_origin_g_attr_isra_92;
            }
            goto LAB_000185c0;
          }
          if (uVar3 == 0x8000029) {
            pcVar2 = apical_isp_max_dgain_g_ctrl_isra_74;
            goto LAB_000185c0;
          }
          if (uVar3 < 0x8000029) {
            pcVar2 = apical_isp_max_again_g_ctrl_isra_73;
            goto LAB_000185c0;
          }
          if (uVar3 != 0x800002a) {
            if (uVar3 != 0x800002b) {
              return -1;
            }
            pcVar2 = apical_isp_gamma_g_attr_isra_76;
            goto LAB_000185c0;
          }
          iVar8 = tisp_g_Hilightdepress(&local_98);
          if (iVar8 != 0) {
            uVar7 = 0x5f9;
            pcVar6 = "apical_isp_hi_light_depress_g_ctrl";
            goto LAB_00017fd0;
          }
          goto LAB_000183c0;
        }
      }
    }
    else {
      if (uVar3 == 0x80000a2) {
        iVar8 = tisp_g_drc_strength(&local_98);
        if (iVar8 != 0) {
          uVar7 = 0x71d;
          pcVar6 = "apical_isp_drc_strength_g_ctrl";
          goto LAB_00017fd0;
        }
        goto LAB_000183c0;
      }
      if (uVar3 < 0x80000a3) {
        if (uVar3 == 0x8000043) {
          iVar8 = tisp_g_af_metric(&local_98);
          uVar7 = 4;
          if (iVar8 != 0) {
            isp_printf(1,"%s:%d set control failed!!!\n","apical_isp_af_metric_g_ctrl",0x625);
            return 0;
          }
LAB_00017f10:
          uVar3 = param_2[1];
LAB_00017f18:
          private_copy_to_user(uVar3,&local_98,uVar7);
          return 0;
        }
        if (uVar3 < 0x8000044) {
          if (uVar3 == 0x8000038) {
            iVar8 = tisp_g_ae_at_list(&local_98);
            private_copy_to_user(param_2[1],&local_98,0x28);
            if (iVar8 == 0) {
              return 0;
            }
            uVar7 = 0x43e;
            pcVar6 = "tiziano_isp_ae_target_list_g_ctrl";
            pcVar4 = "%s:%d get ae target list failed!!!\n";
            goto LAB_00017fd8;
          }
          if (uVar3 < 0x8000039) {
            if (uVar3 == 0x8000035) {
              pcVar2 = tiziano_isp_ae_manual_attr_g_ctrl_isra_103;
              goto LAB_000185c0;
            }
            if (uVar3 < 0x8000036) {
              if (uVar3 != 0x8000033) {
                return -1;
              }
              pcVar2 = tisp_get_ae_luma;
              goto LAB_00018540;
            }
            if (uVar3 != 0x8000036) {
              if (uVar3 != 0x8000037) {
                return -1;
              }
              iVar8 = tisp_g_BacklightComp(&local_98);
              if (iVar8 != 0) {
                uVar7 = 0x615;
                pcVar6 = "tiziano_isp_backlight_comp_g_ctrl";
                goto LAB_00017fd0;
              }
              goto LAB_000183c0;
            }
            tisp_get_ae_state(&local_98);
            uVar7 = 0xc;
            goto LAB_00017f10;
          }
          if (0x8000041 < uVar3) {
            pcVar2 = apical_isp_af_hist_g_attr_isra_95;
            goto LAB_000185c0;
          }
          if (uVar3 < 0x8000040) {
            if (uVar3 != 0x8000039) {
              return -1;
            }
            iVar8 = tisp_get_defog_strength(&local_98);
            uVar7 = 1;
            goto LAB_000186b4;
          }
        }
        else {
          if (0x8000083 < uVar3) {
            if (uVar3 != 0x8000084) {
              bVar1 = uVar3 < 0x80000a0;
LAB_00017eb4:
              if (bVar1) {
                return -1;
              }
              return 0;
            }
            pcVar2 = tisp_g_ncuinfo;
LAB_00018668:
            (*pcVar2)(&local_98);
            uVar7 = 0x14;
            goto LAB_00017f10;
          }
          if (uVar3 < 0x8000082) {
            if (uVar3 == 0x8000045) {
              uVar3 = param_2[1];
              iVar8 = *(int *)(*param_1 + 0xd4);
              uVar7 = 0x14;
              local_98 = (uint)*(ushort *)(*(int *)(iVar8 + 0x120) + 0xb0);
              local_94 = (uint)*(ushort *)(*(int *)(iVar8 + 0x120) + 0xb2);
              local_90 = *(int *)(iVar8 + 300);
              local_8c = *(int *)(iVar8 + 0x124);
              local_88 = *(int *)(iVar8 + 0x128);
              goto LAB_00017f18;
            }
            if (uVar3 < 0x8000045) {
              pcVar2 = apical_isp_af_weight_g_attr_isra_96;
              goto LAB_000185c0;
            }
            if (uVar3 == 0x8000046) {
              pcVar2 = apical_isp_af_zone_g_ctrl_isra_85;
              goto LAB_000185c0;
            }
            if (uVar3 != 0x8000062) {
              return -1;
            }
            iVar8 = tisp_g_dpc_strength(&local_98);
            if (iVar8 != 0) {
              uVar7 = 0x701;
              pcVar6 = "apical_isp_dpc_strength_g_ctrl";
              goto LAB_00017fd0;
            }
            goto LAB_000183c0;
          }
        }
        goto LAB_000186d0;
      }
      if (uVar3 == 0x80000e5) {
        pcVar2 = apical_isp_mask_g_attr_isra_68;
        goto LAB_000185c0;
      }
      if (0x80000e5 < uVar3) {
        if (uVar3 != 0x8000120) {
          if (0x8000120 < uVar3) {
            if (uVar3 == 0x8000162) {
              uVar3 = param_2[1];
              local_18 = 0;
              local_14 = 0;
              if (((uVar3 + 0x18 | uVar3) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
                __might_sleep("include/linux/kernel.h",0xc9,0);
                __copy_user(&local_98,uVar3,0x18);
              }
              iVar8 = isp_frame_done_wait(local_98,&local_18);
              uVar3 = param_2[1];
              local_90 = local_18;
              local_8c = local_14;
              if (((uVar3 + 0x18 | uVar3) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
                __might_sleep("include/linux/kernel.h",0xc9,0);
                __copy_user(uVar3,&local_98,0x18);
                return iVar8;
              }
              return iVar8;
            }
            if (uVar3 < 0x8000163) {
              bVar1 = uVar3 < 0x8000160;
              goto LAB_00017eb4;
            }
            if (uVar3 != 0x8000167) {
              if (uVar3 != 0x8000169) {
                return -1;
              }
              return 0;
            }
            uVar3 = param_1[0x3b1];
            goto LAB_00018500;
          }
          if (uVar3 == 0x80000ea) {
            iVar8 = tisp_get_wdr_output_mode(&local_98);
            uVar7 = 4;
LAB_000186b4:
            puVar5 = &local_98;
LAB_000186b8:
            private_copy_to_user(param_2[1],puVar5,uVar7);
            return iVar8;
          }
          if (0x80000ea < uVar3) {
            if (uVar3 != 0x8000100) {
              if (uVar3 != 0x8000101) {
                return -1;
              }
              pcVar2 = tisp_get_bcsh_hue;
              goto LAB_00018540;
            }
            tisp_g_ccm_attr(&local_98);
            uVar7 = 0x28;
            goto LAB_00017f10;
          }
          if (uVar3 != 0x80000e7) {
            return -1;
          }
          uVar3 = tisp_cust_mode_g_ctrl();
          if ((int)uVar3 < 0) {
            pcVar6 = "make sure xxx-cust-t31.bin exist\n";
            uVar7 = 2;
            goto LAB_00018570;
          }
          param_2[1] = uVar3;
        }
        goto LAB_000186d0;
      }
      if (uVar3 == 0x80000e0) {
        uVar3 = *(unsigned int *)(*(int *)(*param_1 + 0xd4) + 300);
        goto LAB_00018500;
      }
      if (uVar3 < 0x80000e1) {
        if (uVar3 == 0x80000a6) {
          pcVar2 = tiziano_isp_csc_g_attr_isra_108;
          goto LAB_000185c0;
        }
        if (0x80000a6 < uVar3) {
          if (2 < uVar3 + 0xf7ffff40) {
            return -1;
          }
          return 0;
        }
        if (uVar3 != 0x80000a5) {
          return -1;
        }
        pcVar2 = tisp_get_blc_attr;
        goto LAB_00018668;
      }
      if (uVar3 == 0x80000e2) {
        tisp_g_module_control(&local_98);
        uVar7 = 4;
        goto LAB_00017f10;
      }
      if (uVar3 < 0x80000e2) {
        uVar3 = param_1[0x1029] & 1;
      }
      else {
        if (uVar3 == 0x80000e3) {
          tisp_g_fcrop_control(&local_98);
          uVar7 = 0x14;
          goto LAB_00017f10;
        }
        if (uVar3 != 0x80000e4) {
          return -1;
        }
        uVar3 = *(unsigned int *)(*(int *)(*param_1 + 0xd4) + 0x168);
        if (uVar3 != 0) {
          uVar3 = 2;
        }
        uVar3 = uVar3 | *(int *)(*(int *)(*param_1 + 0xd4) + 0x170) != 0;
      }
LAB_00018500:
      param_2[1] = uVar3;
    }
LAB_000186d0:
    iVar8 = 0;
  }
  return iVar8;
}



int isp_core_tunning_unlocked_ioctl(int param_1,int param_2,int param_3)

{
  int iVar1;
  int *piVar2;
  int iVar3;
  int local_20;
  int aiStack_1c [4];
  
  iVar3 = *(int *)(*(int *)(*(int *)(param_1 + 0x70) + 200) + 0x1bc);
  if (*(int *)(iVar3 + 0x40c4) != 3) {
    return -1;
  }
  if (param_2 == -0x3ff7a9e5) {
    iVar1 = private_copy_from_user(&local_20,param_3,8);
    if (iVar1 != 0) {
      return -0xe;
    }
    iVar3 = apical_isp_core_ops_g_ctrl(iVar3,&local_20);
    if ((iVar3 != 0) && (iVar3 != -0x203)) {
      return iVar3;
    }
    iVar1 = private_copy_to_user(param_3,&local_20,8);
    if (iVar1 != 0) {
      return -0xe;
    }
    goto LAB_00018854;
  }
  if (param_2 == -0x3ff7a9e4) {
    iVar1 = private_copy_from_user(&local_20,param_3,8);
    piVar2 = &local_20;
    if (iVar1 != 0) {
      return -0xe;
    }
LAB_000187ec:
    iVar3 = apical_isp_core_ops_s_ctrl(iVar3,piVar2);
  }
  else {
    iVar1 = private_copy_from_user(&local_20,param_3,0xc);
    if (iVar1 == 0) {
      piVar2 = aiStack_1c;
      if (local_20 == 0) goto LAB_000187ec;
      iVar3 = apical_isp_core_ops_g_ctrl(iVar3,piVar2);
      if (((iVar3 != 0) && (iVar3 != -0x203)) ||
         (iVar1 = private_copy_to_user(param_3,&local_20,0xc), iVar1 == 0)) goto LAB_00018854;
    }
    iVar3 = -0xe;
  }
LAB_00018854:
  if (iVar3 == -0x203) {
    iVar3 = 0;
  }
  return iVar3;
}



void isp_frame_done_wakeup(void)

{
  DAT_000b220c = (uint)(frame_done_cnt + 1 < frame_done_cnt) + DAT_000b220c;
  frame_done_cond = 1;
  frame_done_cnt = frame_done_cnt + 1;
  __wake_up(&frame_done_wq,3,1,0);
  return;
}



int isp_core_tuning_event(int param_1,unsigned int param_2)

{
  int uVar1;
  
  if (param_2 == 0x4000001) {
    uVar1 = 1;
  }
  else {
    if (0x4000001 < param_2) {
      if (param_2 == 0x4000002) {
        isp_frame_done_wakeup();
      }
      else if (param_2 == 0x4000003) {
        uVar1 = *(int *)(param_1 + 0x40a4);
        tisp_day_or_night_s_ctrl(uVar1);
        *(int *)(param_1 + 0x40a4) = uVar1;
      }
      return 0;
    }
    if (param_2 != 0x4000000) {
      return 0;
    }
    uVar1 = 2;
  }
  *(int *)(param_1 + 0x40c4) = uVar1;
  return 0;
}



int * isp_core_tuning_init(int param_1)

{
  int *__s;
  
  __s = (int *)private_kmalloc(0x40d0,0xd0);
  if (__s == (int *)0x0) {
    isp_printf(2,"Failed to allocate isp image tuning device\n");
    __s = (int *)0x0;
  }
  else {
    memset(__s,0,0x40d0);
    *__s = param_1;
    private_spin_lock_init(__s + 0x102e);
    private_raw_mutex_init(__s + 0x102e,"&tuning->mlock",0x10000);
    __s[0x1031] = 1;
    __s[0x1032] = isp_core_tunning_fops;
    __s[0x1033] = isp_core_tuning_event;
  }
  return __s;
}



void isp_core_tuning_deinit(int param_1)

{
  if (param_1 == 0) {
    return;
  }
                    // WARNING: Could not recover jumptable at 0x000195c0. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x194))();
  return;
}



unsigned int private_math_exp2(unsigned int param_1,unsigned int param_2,unsigned int param_3)

{
  longlong lVar1;
  int iVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int iVar6;
  
  uVar4 = param_2 & 0xff;
  uVar3 = (1 << (param_2 & 0x1f)) - 1U & param_1;
  param_1 = param_1 >> (param_2 & 0x1f);
  if (uVar4 < 6) {
    uVar3 = *(unsigned int *)(__pow2_lut + (uVar3 << (5 - uVar4 & 0x1f)) * 4) >>
            ((0x1e - (param_3 & 0xff)) - param_1 & 0x1f);
  }
  else {
    uVar5 = uVar3 >> (uVar4 - 5 & 0x1f);
    iVar6 = *(int *)(__pow2_lut + uVar5 * 4);
    lVar1 = (ulonglong)(uint)(*(int *)(__pow2_lut + (uVar5 + 1) * 4) - iVar6) *
            (ulonglong)((1 << (uVar4 - 5 & 0x1f)) - 1U & uVar3);
    iVar2 = __lshrdi3((int)lVar1,(int)((ulonglong)lVar1 >> 0x20));
    uVar3 = (uint)(iVar6 + iVar2) >> ((0x1e - (param_3 & 0xff)) - param_1 & 0x1f);
  }
  return uVar3;
}


int private_driver_get_interface(void)

{
  private_get_driver_interface(&pfaces);
  return -(uint)(pfaces == 0);
}



char private_leading_one_position(unsigned int param_1)

{
  char cVar1;
  
  if (param_1 < 0x10000) {
    cVar1 = '\0';
  }
  else {
    param_1 = param_1 >> 0x10;
    cVar1 = '\x10';
  }
  if (0xff < param_1) {
    cVar1 = cVar1 + '\b';
    param_1 = param_1 >> 8;
  }
  if (0xf < param_1) {
    cVar1 = cVar1 + '\x04';
    param_1 = param_1 >> 4;
  }
  if (3 < param_1) {
    cVar1 = cVar1 + '\x02';
    param_1 = param_1 >> 2;
  }
  if (1 < param_1) {
    cVar1 = cVar1 + '\x01';
  }
  return cVar1;
}



unsigned int private_log2_int_to_fixed(unsigned int param_1,unsigned int param_2,unsigned int param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  param_2 = param_2 & 0xff;
  if (param_1 != 0) {
    param_3 = param_3 & 0xff;
    iVar1 = private_leading_one_position(param_1,param_2,param_3);
    if (iVar1 < 0x10) {
      param_1 = param_1 << (0xfU - iVar1 & 0x1f);
    }
    else {
      param_1 = param_1 >> (iVar1 - 0xfU & 0x1f);
    }
    iVar2 = 0;
    for (iVar3 = 0; iVar3 < (int)param_2; iVar3 = iVar3 + 1) {
      param_1 = param_1 * param_1;
      iVar2 = iVar2 * 2;
      if ((int)param_1 < 0) {
        iVar2 = iVar2 + 1;
        param_1 = param_1 >> 0x10;
      }
      else {
        param_1 = param_1 >> 0xf;
      }
    }
    return (iVar1 << (param_2 & 0x1f)) + iVar2 << (param_3 & 0x1f) |
           (param_1 & 0x7fff) >> (0xf - param_3 & 0x1f);
  }
  return 0;
}



int private_log2_fixed_to_fixed(int param_1,int param_2,unsigned int param_3)

{
  int iVar1;
  
  param_3 = param_3 & 0xff;
  iVar1 = private_log2_int_to_fixed(param_1,param_3,0);
  return iVar1 - (param_2 << (param_3 & 0x1f));
}



int private_leading_one_position_64(unsigned int param_1,unsigned int param_2)

{
  int iVar1;
  unsigned int uVar2;
  
  iVar1 = 0;
  uVar2 = param_2;
  if (param_2 != 0) {
    iVar1 = 0x20;
    uVar2 = 0;
    param_1 = param_2;
  }
  if (0xffff < param_1) {
    param_1 = param_1 >> 0x10;
    uVar2 = 0;
    iVar1 = iVar1 + 0x10;
  }
  if (0xff < param_1) {
    param_1 = param_1 >> 8;
    uVar2 = 0;
    iVar1 = iVar1 + 8;
  }
  if (0xf < param_1) {
    param_1 = param_1 >> 4;
    uVar2 = 0;
    iVar1 = iVar1 + 4;
  }
  if (3 < param_1) {
    param_1 = uVar2 << 0x1e | param_1 >> 2;
    iVar1 = iVar1 + 2;
    if (uVar2 >> 2 != 0) goto LAB_00018e98;
  }
  if (param_1 < 2) {
    return iVar1;
  }
LAB_00018e98:
  return iVar1 + 1;
}



unsigned int private_log2_int_to_fixed_64(unsigned int param_1,unsigned int param_2,unsigned int param_3,unsigned int param_4)

{
  longlong lVar1;
  unsigned int uVar2;
  int iVar3;
  code *pcVar4;
  unsigned int uVar5;
  int iVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  ulonglong uVar9;
  
  uVar2 = 0;
  if ((param_1 | param_2) != 0) {
    iVar3 = private_leading_one_position_64();
    if (iVar3 < 0x10) {
      iVar6 = 0xf - iVar3;
      pcVar4 = __ashldi3;
    }
    else {
      iVar6 = iVar3 + -0xf;
      pcVar4 = __lshrdi3;
    }
    uVar9 = (*pcVar4)(param_1,param_2,iVar6);
    uVar2 = 0;
    uVar5 = 0;
    for (iVar6 = 0; iVar6 < (int)(param_3 & 0xff); iVar6 = iVar6 + 1) {
      lVar1 = (uVar9 & 0xffffffff) * (uVar9 & 0xffffffff);
      uVar8 = (uint)lVar1;
      uVar7 = (int)(uVar9 >> 0x20) * (uint)uVar9 * 2 + (int)((ulonglong)lVar1 >> 0x20);
      uVar5 = uVar2 >> 0x1f | uVar5 << 1;
      uVar2 = uVar2 * 2;
      if ((uVar8 & 0x80000000 | uVar7) == 0) {
        uVar8 = uVar7 * 0x20000 | uVar8 >> 0xf;
        uVar7 = uVar7 >> 0xf;
      }
      else {
        uVar5 = (uVar2 + 1 < uVar2) + uVar5;
        uVar8 = uVar7 * 0x10000 | uVar8 >> 0x10;
        uVar7 = uVar7 >> 0x10;
        uVar2 = uVar2 + 1;
      }
      uVar9 = CONCAT44(uVar7,uVar8);
    }
    uVar7 = iVar3 << (param_3 & 0x1f);
    uVar2 = __ashldi3(uVar7 + uVar2,(uint)(uVar7 + uVar2 < uVar7) + ((int)uVar7 >> 0x1f) + uVar5,
                      param_4 & 0xff);
    uVar5 = __lshrdi3((uint)uVar9 & 0x7fff,0,0xf - (param_4 & 0xff));
    uVar2 = uVar2 | uVar5;
  }
  return uVar2;
}



int private_log2_fixed_to_fixed_64(int param_1,int param_2,int param_3,unsigned int param_4)

{
  int iVar1;
  
  iVar1 = private_log2_int_to_fixed_64(param_1,param_2,param_4 & 0xff,0);
  return iVar1 - (param_3 << (param_4 & 0x1f));
}

void private_request_module
               (int param_1,int param_2,int param_3,int param_4)

{
  int local_res8;
  int local_resc;
  int local_18;
  int **local_14;
  int *local_10 [3];
  
  local_10[0] = &local_res8;
  local_14 = local_10;
  local_res8 = param_3;
  local_resc = param_4;
  local_18 = param_2;
  (**(code **)(pfaces + 0x130))(1,&_LC0,&local_18);
  return;
}


void private_seq_printf(int param_1,int param_2,int param_3,int param_4)

{
  int local_res8;
  int local_resc;
  int local_18;
  int **local_14;
  int *local_10 [3];
  
  local_10[0] = &local_res8;
  local_14 = local_10;
  local_res8 = param_3;
  local_resc = param_4;
  local_18 = param_2;
  (**(code **)(pfaces + 0x17c))(param_1,&_LC0,&local_18);
  return;
}


char * find_new_buffer(void)

{
  int iVar1;
  int *puVar2;
  
  puVar2 = &ispmem;
  iVar1 = 0;
  do {
    if (*(char *)((int)puVar2 + 0xd) == '\0') {
      memset(&DAT_000b222c + iVar1 * 0x14,0,0x14);
      (&DAT_000b222d)[iVar1 * 0x14] = 1;
      return &DAT_000b222c + iVar1 * 0x14;
    }
    iVar1 = iVar1 + 1;
    puVar2 = puVar2 + 5;
  } while (iVar1 != 0x14);
  return (char *)0x0;
}



void isp_mem_init(void)

{
  int uVar1;
  
  memset(&ispmem,0,0x1ac);
  private_get_isp_priv_mem(&ispmem,&DAT_000b2224);
  private_raw_mutex_init(&DAT_000b23c0,"&ispmem.mlock",0x10000);
  DAT_000b23bc = (char *)find_new_buffer();
  *DAT_000b23bc = 0;
  uVar1 = ispmem;
  *(int *)(DAT_000b23bc + 4) = 0;
  *(int *)(DAT_000b23bc + 8) = 0;
  *(int *)(DAT_000b23bc + 0xc) = uVar1;
  *(int *)(DAT_000b23bc + 0x10) = DAT_000b2224;
  return;
}



int isp_malloc_buffer(int param_1)

{
  int uVar1;
  int iVar2;
  int iVar3;
  char *pcVar4;
  unsigned int uVar5;
  
  if (ispmem == 0) {
LAB_00019940:
    uVar1 = 0;
  }
  else {
    uVar1 = 0;
    if (param_1 != 0) {
      uVar5 = param_1 + 0xfffU & 0xfffff000;
      private_mutex_lock(&DAT_000b23c0);
      pcVar4 = DAT_000b23bc;
      while (pcVar4 != (char *)0x0) {
        if (*pcVar4 == '\0') {
          if (uVar5 <= *(unsigned int *)(pcVar4 + 0x10)) {
            if (uVar5 < *(unsigned int *)(pcVar4 + 0x10)) {
              iVar2 = find_new_buffer();
              if (iVar2 == 0) {
                private_mutex_unlock(&DAT_000b23c0);
                goto LAB_00019940;
              }
              *(unsigned int *)(iVar2 + 0xc) = *(int *)(pcVar4 + 0xc) + uVar5;
              iVar3 = *(int *)(pcVar4 + 0x10);
              *(char **)(iVar2 + 4) = pcVar4;
              *(unsigned int *)(iVar2 + 0x10) = iVar3 - uVar5;
              if (*(int *)(pcVar4 + 8) != 0) {
                *(int *)(*(int *)(pcVar4 + 8) + 4) = iVar2;
              }
              *(int *)(iVar2 + 8) = *(int *)(pcVar4 + 8);
              *(int *)(pcVar4 + 8) = iVar2;
            }
            *(unsigned int *)(pcVar4 + 0x10) = uVar5;
            *pcVar4 = '\x01';
            break;
          }
          pcVar4 = *(char **)(pcVar4 + 8);
        }
        else {
          pcVar4 = *(char **)(pcVar4 + 8);
        }
      }
      private_mutex_unlock(&DAT_000b23c0);
      uVar1 = 0;
      if (pcVar4 != (char *)0x0) {
        uVar1 = *(int *)(pcVar4 + 0xc);
      }
    }
  }
  return uVar1;
}



void isp_free_buffer(int param_1)

{
  char *pcVar1;
  char *__s;
  
  private_mutex_lock(&DAT_000b23c0);
  pcVar1 = DAT_000b23bc;
LAB_000199f8:
  do {
    __s = DAT_000b23bc;
    if (pcVar1 == (char *)0x0) {
LAB_00019a24:
      while (pcVar1 = __s, pcVar1 != (char *)0x0) {
        __s = *(char **)(pcVar1 + 8);
        if ((((*pcVar1 == '\0') && (__s != (char *)0x0)) && (*__s == '\0')) &&
           (*(int *)(pcVar1 + 0x10) + *(int *)(pcVar1 + 0xc) == *(int *)(__s + 0xc))) {
          *(int *)(pcVar1 + 0x10) = *(int *)(__s + 0x10) + *(int *)(pcVar1 + 0x10);
          *(int *)(pcVar1 + 8) = *(int *)(__s + 8);
          if (*(int *)(__s + 8) != 0) {
            *(char **)(*(int *)(__s + 8) + 4) = pcVar1;
          }
          memset(__s,0,0x14);
          __s[1] = '\0';
          __s = pcVar1;
        }
      }
                    // WARNING: Could not recover jumptable at 0x0001922c. Too many branches
                    // WARNING: Treating indirect jump as call
      (**(code **)(pfaces + 0x7c))(&DAT_000b23c0);
      return;
    }
    if (*pcVar1 != '\0') {
      if (*(int *)(pcVar1 + 0xc) == param_1) {
        *pcVar1 = '\0';
        __s = DAT_000b23bc;
        goto LAB_00019a24;
      }
      pcVar1 = *(char **)(pcVar1 + 8);
      goto LAB_000199f8;
    }
    pcVar1 = *(char **)(pcVar1 + 8);
  } while( true );
}



void private_ktime_set(int *param_1)

{
  *param_1 = 0;
  param_1[1] = 0;
  return;
}


int * FUN_00019bc4(int *param_1)

{
  int local_10 [2];
  
  memset(local_10,0,4);
  *param_1 = local_10[0];
  return param_1;
}

int isp_irq_handle(int param_1,int param_2)

{
  code *pcVar1;
  int iVar2;
  int uVar3;
  int *piVar4;
  
  if (param_2 + -0x80 != 0) {
    uVar3 = 1;
    if (**(int **)(param_2 + 0x44) == 0) goto LAB_00019ee0;
    pcVar1 = *(code **)(**(int **)(param_2 + 0x44) + 0x20);
    if (pcVar1 != (code *)0x0) {
      iVar2 = (*pcVar1)(param_2 + -0x80,0,0);
      uVar3 = 1;
      if (iVar2 == 2) {
        uVar3 = 2;
      }
      goto LAB_00019ee0;
    }
  }
  uVar3 = 1;
LAB_00019ee0:
  piVar4 = (int *)(param_2 + -0x48);
  iVar2 = *piVar4;
  while( true ) {
    if ((((iVar2 != 0) && (**(int **)(iVar2 + 0xc4) != 0)) &&
        (pcVar1 = *(code **)(**(int **)(iVar2 + 0xc4) + 0x20), pcVar1 != (code *)0x0)) &&
       (iVar2 = (*pcVar1)(iVar2,0,0), iVar2 == 2)) {
      uVar3 = 2;
    }
    piVar4 = piVar4 + 1;
    if (piVar4 == (int *)(param_2 + -8)) break;
    iVar2 = *piVar4;
  }
  return uVar3;
}



int isp_irq_thread_handle(int param_1,int param_2)

{
  code *pcVar1;
  int iVar2;
  int *piVar3;
  
  if (((param_2 + -0x80 != 0) && (**(int **)(param_2 + 0x44) != 0)) &&
     (pcVar1 = *(code **)(**(int **)(param_2 + 0x44) + 0x24), pcVar1 != (code *)0x0)) {
    (*pcVar1)(param_2 + -0x80,0);
  }
  piVar3 = (int *)(param_2 + -0x48);
  iVar2 = *piVar3;
  while( true ) {
    if (((iVar2 != 0) && (**(int **)(iVar2 + 0xc4) != 0)) &&
       (pcVar1 = *(code **)(**(int **)(iVar2 + 0xc4) + 0x24), pcVar1 != (code *)0x0)) {
      (*pcVar1)(iVar2,0);
    }
    piVar3 = piVar3 + 1;
    if (piVar3 == (int *)(param_2 + -8)) break;
    iVar2 = *piVar3;
  }
  return 1;
}



void tx_isp_enable_irq(int *param_1)

{
                    // WARNING: Could not recover jumptable at 0x000191a0. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x60))(*param_1);
  return;
}



void tx_isp_disable_irq(int *param_1)

{
                    // WARNING: Could not recover jumptable at 0x000191b4. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 100))(*param_1);
  return;
}



int tx_isp_request_irq(int *param_1,int *param_2)

{
  int uVar1;
  int iVar2;
  int iVar3;
  
  if ((param_1 == (int *)0x0) || (param_2 == (int *)0x0)) {
    isp_printf(2,"%s[%d] the parameters are invalid!\n","tx_isp_request_irq",0x4d);
    uVar1 = 0xffffffea;
  }
  else {
    iVar2 = private_platform_get_irq(param_1,0);
    if (iVar2 < 0) {
      *param_2 = 0;
    }
    else {
      private_spin_lock_init(param_2);
      iVar3 = private_request_threaded_irq
                        (iVar2,isp_irq_handle,isp_irq_thread_handle,0x2000,*param_1,param_2);
      if (iVar3 != 0) {
        isp_printf(2,"%s[%d] Failed to request irq(%d).\n","tx_isp_request_irq",0x5e,iVar2);
        *param_2 = 0;
        return 0xfffffffc;
      }
      param_2[1] = (int)tx_isp_enable_irq;
      *param_2 = iVar2;
      param_2[2] = (int)tx_isp_disable_irq;
      tx_isp_disable_irq(param_2);
    }
    uVar1 = 0;
  }
  return uVar1;
}



void tx_isp_free_irq(int *param_1)

{
  if (param_1 != (int *)0x0) {
    if (*param_1 == 0) {
      *param_1 = 0;
    }
    else {
      private_free_irq(*param_1,param_1);
      *param_1 = 0;
    }
  }
  return;
}



int fs_activate_module(unsigned int param_1)

{
  int uVar1;
  int iVar2;
  int iVar3;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar1 = 0;
    if (*(int *)(param_1 + 0xe4) == 1) {
      iVar3 = 0;
      while( true ) {
        if (*(int *)(param_1 + 0xe0) <= iVar3) {
          *(int *)(param_1 + 0xe4) = 2;
          return 0;
        }
        iVar2 = iVar3 * 0x2ec + *(int *)(param_1 + 0xdc);
        if (*(int *)(iVar2 + 0x2d0) != 1) break;
        *(int *)(iVar2 + 0x2d0) = 2;
        iVar3 = iVar3 + 1;
      }
      isp_printf(2,"The state of channel%d is invalid when be activated!\n");
      uVar1 = 0xffffffff;
    }
  }
  return uVar1;
}



int __enqueue_in_driver(int param_1)

{
  int iVar1;
  int iVar2;
  
  iVar2 = *(int *)(param_1 + 0x44);
  *(int *)(param_1 + 0x48) = 3;
  *(char *)(param_1 + 0x4c) = 3;
  iVar1 = tx_isp_send_event_to_remote(*(int *)(iVar2 + 0x298),0x3000005,param_1 + 0x68);
  if ((iVar1 != 0) && (iVar1 != -0x203)) {
    isp_printf(2,"Failed to qbuf to driver; chan%d!\n",*(int *)(iVar2 + 0x29c));
  }
  return iVar1;
}



void __vb2_queue_cancel(unsigned int param_1)

{
  bool bVar1;
  unsigned int uVar2;
  int *piVar3;
  int local_18 [2];
  
  local_18[0] = 0;
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    if ((*(unsigned int *)(param_1 + 0x20c) & 1) != 0) {
      tx_isp_send_event_to_remote(*(int *)(param_1 + 0x298),0x3000004,0);
    }
    *(char *)(param_1 + 0x20c) = *(char *)(param_1 + 0x20c) & 0xfe;
    *(unsigned int *)(param_1 + 0x1ec) = param_1 + 0x1ec;
    *(unsigned int *)(param_1 + 0x1f0) = param_1 + 0x1ec;
    __private_spin_lock_irqsave(param_1 + 0x200,local_18);
    *(unsigned int *)(param_1 + 0x1f8) = param_1 + 0x1f8;
    *(unsigned int *)(param_1 + 0x1fc) = param_1 + 0x1f8;
    *(int *)(param_1 + 500) = 0;
    *(int *)(param_1 + 0x200) = 0;
    private_spin_unlock_irqrestore(param_1 + 0x200,local_18[0]);
    tx_isp_send_event_to_remote(*(int *)(param_1 + 0x298),0x3000007,0);
    private_wake_up_all(param_1 + 0x204);
    piVar3 = (int *)(param_1 + 0xe8);
    uVar2 = 0;
    while (bVar1 = uVar2 < *(unsigned int *)(param_1 + 0x1e8), uVar2 = uVar2 + 1, bVar1) {
      *(int *)(*piVar3 + 0x48) = 0;
      piVar3 = piVar3 + 1;
    }
  }
  return;
}



void __vb2_queue_free(int param_1,int param_2)

{
  unsigned int uVar1;
  int iVar2;
  int local_20 [2];
  
  uVar1 = *(int *)(param_1 + 0x1e8) - param_2;
  local_20[0] = 0;
  iVar2 = param_1 + uVar1 * 4;
  while( true ) {
    if (*(unsigned int *)(param_1 + 0x1e8) <= uVar1) break;
    private_kfree(*(int *)(iVar2 + 0xe8));
    uVar1 = uVar1 + 1;
    *(int *)(iVar2 + 0xe8) = 0;
    iVar2 = iVar2 + 4;
  }
  *(unsigned int *)(param_1 + 0x1e8) = *(unsigned int *)(param_1 + 0x1e8) - param_2;
  *(int *)(param_1 + 0x1ec) = param_1 + 0x1ec;
  *(int *)(param_1 + 0x1f0) = param_1 + 0x1ec;
  __private_spin_lock_irqsave(param_1 + 0x200,local_20);
  *(int *)(param_1 + 0x1f8) = param_1 + 0x1f8;
  *(int *)(param_1 + 0x1fc) = param_1 + 0x1f8;
  private_spin_unlock_irqrestore(param_1 + 0x200,local_20[0]);
  tx_isp_send_event_to_remote(*(int *)(param_1 + 0x298),0x3000007,0);
  return;
}



void dump_isp_framesource_open(int param_1,int param_2)

{
  int uVar1;
  
  uVar1 = PDE_DATA();
                    // WARNING: Could not recover jumptable at 0x000194d4. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x170))(param_2,isp_framesource_show,uVar1,0x800);
  return;
}



int isp_framesource_show(int param_1)

{
  char cVar1;
  unsigned int uVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  char *pcVar7;
  int iVar8;
  int iVar9;
  int *piVar10;
  unsigned int uVar11;
  int iVar12;
  int local_40 [2];
  char *local_38;
  int local_34;
  int local_30;
  
  uVar2 = *(unsigned int *)(param_1 + 0x3c);
  uVar11 = 0;
  if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
    uVar11 = *(unsigned int *)(uVar2 + 0xd4);
  }
  local_40[0] = 0;
  if ((uVar11 == 0) || (0xfffff000 < uVar11)) {
    isp_printf(2,"The parameter is invalid!\n");
    iVar8 = 0;
  }
  else {
    iVar12 = 0;
    iVar8 = 0;
    while (iVar12 < *(int *)(uVar11 + 0xe0)) {
      iVar3 = private_seq_printf(param_1,"############## framesource %d ###############\n",iVar12);
      iVar9 = iVar12 * 0x2ec + *(int *)(uVar11 + 0xdc);
      if (*(int *)(iVar9 + 0x2d0) == 4) {
        pcVar7 = "running";
      }
      else {
        pcVar7 = "stop";
      }
      iVar4 = private_seq_printf(param_1,"chan status: %s\n",pcVar7);
      iVar8 = iVar8 + iVar3 + iVar4;
      if (*(int *)(iVar9 + 0x2d0) == 4) {
        iVar3 = private_seq_printf(param_1,"output pixformat: %c%c%c%c\n",
                                   (int)*(char *)(iVar9 + 0x248),(int)*(char *)(iVar9 + 0x249),
                                   (int)*(char *)(iVar9 + 0x24a),(int)*(char *)(iVar9 + 0x24b));
        iVar4 = private_seq_printf(param_1,"output resolution: %d * %d\n",
                                   *(int *)(iVar9 + 0x240),*(int *)(iVar9 + 0x244));
        if (*(char *)(iVar9 + 0x284) == '\0') {
          pcVar7 = "disable";
        }
        else {
          pcVar7 = "enable";
        }
        iVar5 = private_seq_printf(param_1,"scaler : %s\n",pcVar7);
        iVar5 = iVar8 + iVar3 + iVar4 + iVar5;
        if (*(char *)(iVar9 + 0x284) == '\0') {
          cVar1 = *(char *)(iVar9 + 0x270);
        }
        else {
          iVar8 = private_seq_printf(param_1,"scaler width: %d\n",*(int *)(iVar9 + 0x288));
          iVar3 = private_seq_printf(param_1,"scaler height: %d\n",*(int *)(iVar9 + 0x28c));
          iVar5 = iVar5 + iVar8 + iVar3;
          cVar1 = *(char *)(iVar9 + 0x270);
        }
        if (cVar1 == '\0') {
          pcVar7 = "disable";
        }
        else {
          pcVar7 = "enable";
        }
        iVar8 = private_seq_printf(param_1,"crop : %s\n",pcVar7);
        iVar5 = iVar5 + iVar8;
        if (*(char *)(iVar9 + 0x270) != '\0') {
          iVar8 = private_seq_printf(param_1,"crop top: %d\n",*(int *)(iVar9 + 0x274));
          iVar3 = private_seq_printf(param_1,"crop left: %d\n",*(int *)(iVar9 + 0x278));
          iVar4 = private_seq_printf(param_1,"crop width: %d\n",*(int *)(iVar9 + 0x27c));
          iVar6 = private_seq_printf(param_1,"crop height: %d\n",*(int *)(iVar9 + 0x280));
          iVar5 = iVar5 + iVar8 + iVar3 + iVar4 + iVar6;
        }
        iVar8 = private_seq_printf(param_1,"the state of buffers:\n");
        __private_spin_lock_irqsave(iVar9 + 0x2c4,local_40);
        iVar3 = private_seq_printf(param_1,"queue count: %d\n",*(int *)(iVar9 + 0x218));
        iVar3 = iVar5 + iVar8 + iVar3;
        iVar4 = *(int *)(iVar9 + 0x210);
        iVar8 = iVar9 + 0x210;
        while (iVar4 != iVar8) {
          local_38 = (char *)(iVar4 + -0x58);
          local_34 = iVar8;
          iVar8 = private_seq_printf(param_1,"queue addr: 0x%08lx\n",*(int *)(iVar4 + -0x24))
          ;
          iVar3 = iVar3 + iVar8;
          iVar8 = local_34;
          iVar4 = *(int *)(local_38 + 0x58);
        }
        iVar8 = private_seq_printf(param_1,"done count: %d\n",*(int *)(iVar9 + 0x224));
        iVar3 = iVar3 + iVar8;
        iVar4 = *(int *)(iVar9 + 0x21c);
        pcVar7 = "done addr: 0x%08lx\n";
        iVar8 = iVar9 + 0x21c;
        while (iVar4 != iVar8) {
          local_38 = pcVar7;
          local_34 = iVar4 + -0x60;
          local_30 = iVar8;
          iVar8 = private_seq_printf(param_1,pcVar7,*(int *)(iVar4 + -0x2c));
          iVar3 = iVar3 + iVar8;
          pcVar7 = local_38;
          iVar8 = local_30;
          iVar4 = *(int *)(local_34 + 0x60);
        }
        private_spin_unlock_irqrestore(iVar9 + 0x2c4,local_40[0]);
        iVar4 = private_seq_printf(param_1,"the output buffers is: %d\n",
                                   *(int *)(iVar9 + 0x2e0));
        iVar8 = private_seq_printf(param_1,"the losted buffers is: %d\n",
                                   *(int *)(iVar9 + 0x2e4));
        iVar8 = iVar3 + iVar4 + iVar8;
        if (iVar12 == 0) {
          iVar3 = private_seq_printf(param_1,"ch0_pre_dequeue_drop is: %d\n",
                                     isp_ch0_pre_dequeue_drop);
          iVar4 = private_seq_printf(param_1,"ch0_pre_dequeue_intc_ahead_cnt is: %d\n",
                                     isp_ch0_pre_dequeue_intc_ahead_cnt);
          iVar5 = private_seq_printf(param_1,"pdq cnt: %d, pdq intc cnt:%d, pdq intc cnt1:%d\n",
                                     isp_ch0_pdq_cnt,isp_ch0_pdq_intc_cnt,0);
          iVar8 = iVar8 + iVar3 + iVar4 + iVar5;
        }
        iVar3 = private_seq_printf(param_1,"---------------------------\n");
        iVar8 = iVar8 + iVar3;
        piVar10 = (int *)(iVar9 + 0x10c);
        iVar9 = 0;
        pcVar7 = "buf:%d, state:%d, buf_state:%d, buf_qcnt:%d, buf_dqcnt:%d\n";
        iVar3 = 0x40;
        do {
          iVar4 = *piVar10;
          if (iVar4 != 0) {
            local_38 = pcVar7;
            local_34 = iVar3;
            iVar3 = private_seq_printf(param_1,pcVar7,iVar9,*(int *)(iVar4 + 0x48),
                                       *(char *)(iVar4 + 0x4c),*(int *)(iVar4 + 0x50),
                                       *(int *)(iVar4 + 0x54));
            iVar8 = iVar8 + iVar3;
            pcVar7 = local_38;
            iVar3 = local_34;
          }
          iVar9 = iVar9 + 1;
          piVar10 = piVar10 + 1;
        } while (iVar9 != iVar3);
        iVar12 = iVar12 + 1;
      }
      else {
        iVar12 = iVar12 + 1;
      }
    }
  }
  return iVar8;
}



void __fill_v4l2_buffer(void *param_1,void *param_2)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int iVar3;
  
  iVar3 = *(int *)((int)param_1 + 0x44);
  memcpy(param_2,param_1,0x34);
  *(int *)((int)param_2 + 0x3c) = *(int *)((int)param_1 + 0x3c);
  *(int *)((int)param_2 + 0x40) = *(int *)((int)param_1 + 0x40);
  uVar1 = *(unsigned int *)((int)param_2 + 0xc) & 0xffff1bb8;
  *(unsigned int *)((int)param_2 + 0xc) = uVar1;
  uVar1 = uVar1 | *(unsigned int *)(iVar3 + 0x14);
  *(unsigned int *)((int)param_2 + 0xc) = uVar1;
  uVar2 = *(unsigned int *)((int)param_1 + 0x48);
  if (uVar2 == 3) {
    uVar1 = uVar1 | 2;
  }
  else if (uVar2 < 4) {
    if (uVar2 != 1) {
      return;
    }
    uVar1 = uVar1 | 2;
  }
  else {
    if (uVar2 != 4) {
      if (uVar2 != 5) {
        return;
      }
      *(unsigned int *)((int)param_2 + 0xc) = uVar1 | 0x40;
    }
    uVar1 = *(unsigned int *)((int)param_2 + 0xc) | 4;
  }
  *(unsigned int *)((int)param_2 + 0xc) = uVar1;
  return;
}



int frame_chan_event(int *param_1,int param_2,int param_3)

{
  int iVar1;
  int **ppiVar2;
  unsigned int uVar3;
  int uVar4;
  int iVar5;
  char bVar6;
  char bVar7;
  int *piVar8;
  void *__src;
  int *piVar9;
  int local_40;
  int local_3c;
  int local_38 [2];
  int *local_30;
  int *local_2c;
  
  if (param_1 == (int *)0x0) {
    return 0xffffffea;
  }
  if ((int *)0xfffff000 < param_1) {
    return 0xffffffea;
  }
  if (param_2 != 0x3000006) {
    return 0;
  }
  local_38[0] = 0;
  if (param_3 == 0) {
    isp_printf(1,"error: %s, %d buf == NULL\n","frame_channel_buffer_done",0x52);
    dump_msca_regs();
    return 0;
  }
  iVar5 = (uint)*(char *)(param_1 + 1) * 0x2ec + *(int *)(*param_1 + 0xdc);
  __private_spin_lock_irqsave(iVar5 + 0x2c4,local_38);
  if (isp_ch0_pre_dequeue_time == 0) {
    piVar8 = *(int **)(iVar5 + 0x210);
LAB_0001ad30:
    bVar6 = 0;
    for (; __src = piVar8 + -0x16, (int *)(iVar5 + 0x210) != piVar8; piVar8 = (int *)*piVar8) {
      if (piVar8[-9] == *(int *)(param_3 + 8)) {
        *(char *)(piVar8 + -3) = 0x65;
        if (bVar6 == 0) goto LAB_0001ae08;
        uVar4 = *(int *)(iVar5 + 0x2c0);
        goto LAB_0001ad88;
      }
      bVar6 = bVar6 + 1;
    }
    __src = (void *)0x0;
    if (bVar6 != 0) {
      uVar4 = *(int *)(iVar5 + 0x2c0);
LAB_0001ad88:
      isp_printf(1,"mscaler: index = %d, buffer idx = %d\n",uVar4,bVar6);
      piVar8 = (int *)"buflist:0x%08lx\n";
      for (piVar9 = *(int **)(iVar5 + 0x210); (int *)(iVar5 + 0x210) != piVar9;
          piVar9 = (int *)*piVar9) {
        local_30 = piVar8;
        isp_printf(1,piVar8,piVar9[-9]);
        piVar8 = local_30;
      }
      isp_printf(1,"buf get:0x%08x isp_index = %d\n",*(int *)(param_3 + 8),
                 *(int *)(param_3 + 0x18));
      dump_msca_regs();
      goto LAB_0001ae08;
    }
  }
  else {
    if (*(int *)(iVar5 + 0x2c0) != 0) {
      piVar8 = *(int **)(iVar5 + 0x210);
      goto LAB_0001ad30;
    }
    if (*(int *)(param_3 + 0x14) == 0) {
      if (ch0_pre_dequeue_vb._52_4_ != *(int *)(param_3 + 8)) {
        isp_printf(1,
                   "WARN: ch0 frame interrupt time ahead of pre dequeue time, userptr = 0x%x, bufaddr = 0x%x\n"
                  );
      }
      if (isp_ch0_pre_dequeue_intc_ahead == '\x01') {
        isp_printf(2,"ERROR: Do not have prequeue event between two interrupts!!!\n");
      }
      if (isp_ch0_pre_dequeue_flag == '\x01') {
        isp_ch0_pre_dequeue_flag = '\0';
      }
      else {
        isp_printf(1,"WARN: ch0 frame interrupt time ahead of pre dequeue time\n");
        isp_ch0_pre_dequeue_intc_ahead = '\x01';
        isp_ch0_pre_dequeue_intc_ahead_cnt = isp_ch0_pre_dequeue_intc_ahead_cnt + '\x01';
        isp_ch0_pdq_intc_cnt = isp_ch0_pdq_intc_cnt + 1;
      }
      goto LAB_0001b11c;
    }
    if ((iVar5 + 0x210 == *(int *)(iVar5 + 0x210)) ||
       (*(int *)(*(unsigned int *)(*(int *)(iVar5 + 0x210) + -0x24) | 0xa0000000) == 0x12345678)) {
      isp_ch0_pre_dequeue_drop = isp_ch0_pre_dequeue_drop + 1;
      goto LAB_0001b11c;
    }
    uVar3 = *(unsigned int *)(param_3 + 0x18) & 0xffff;
    if ((*(unsigned int *)(iVar5 + 0x244) == uVar3) || ((*(unsigned int *)(param_3 + 0x18) & 0xffff) == 0)) {
      if (isp_ch0_pre_dequeue_intc_ahead != '\x01') {
        isp_printf(1,
                   "WARNING: predequeue event hanppened after that max/0 lines, but before dmadone interrupt, lines = %d\n"
                   ,uVar3);
      }
      iVar1 = *(int *)(iVar5 + 0x210);
    }
    else {
      iVar1 = *(int *)(iVar5 + 0x210);
    }
    isp_ch0_pre_dequeue_flag = '\x01';
    isp_ch0_pre_dequeue_intc_ahead = '\0';
    if (iVar5 + 0x210 == iVar1) {
      isp_printf(2,"ERROR: queue list shouldn\'t be empty here\n");
      goto LAB_0001b11c;
    }
    __src = (void *)(iVar1 + -0x58);
    memcpy(ch0_pre_dequeue_vb,__src,0x68);
    ch0_pre_dequeue_vb._64_4_ = uVar3 << 0x10 | 1;
    *(int *)(iVar1 + -0x18) = ch0_pre_dequeue_vb._64_4_;
    isp_ch0_pre_dequeue_valid_lines = uVar3;
    *(char *)(iVar5 + 0x238) = 0;
    isp_ch0_pdq_cnt = isp_ch0_pdq_cnt + 1;
    bVar6 = 0;
LAB_0001ae08:
    if (__src != (void *)0x0) {
      bVar7 = 0;
      piVar8 = *(int **)(iVar5 + 0x210);
      do {
        piVar9 = piVar8 + -0x16;
        if ((piVar9 == (int *)0x0) || (piVar8[-4] != 3)) {
          isp_printf(1,
                     "error: %s, %d ch = %d, vb = %p, buf = 0x%lx, state = %d, loop = %d, idx = %d\n"
                     ,"frame_channel_buffer_done",0x111,*(int *)(iVar5 + 0x2c0),piVar9,
                     piVar8[-9],piVar8[-4],bVar7,bVar6);
          dump_msca_regs();
          *(int *)(iVar5 + 0x2e4) = *(int *)(iVar5 + 0x2e4) + 1;
        }
        else {
          *(char *)(piVar8 + -3) = 0x66;
          local_30 = piVar8;
          local_2c = piVar9;
          private_getrawmonotonic(&local_40);
          local_30[-1] = local_30[-1] + 1;
          local_30[-0x11] = local_40;
          local_30[-0xb] = 0;
          iVar1 = *local_30;
          local_30[-0x10] = local_3c / 1000;
          piVar8 = (int *)local_30[1];
          *(int **)(iVar1 + 4) = piVar8;
          *piVar8 = iVar1;
          *local_30 = 0x100100;
          local_30[1] = 0x200200;
          *(int *)(iVar5 + 0x218) = *(int *)(iVar5 + 0x218) + -1;
          if (isp_ch0_pre_dequeue_time == 0) {
            uVar3 = local_30[-6];
LAB_0001aee8:
            local_30[-6] = uVar3 & 0xffff0000;
            iVar1 = *(int *)(iVar5 + 0x2c0);
          }
          else {
            iVar1 = *(int *)(iVar5 + 0x2c0);
            if (iVar1 != 0) {
              uVar3 = local_30[-6];
              goto LAB_0001aee8;
            }
          }
          if (iVar1 == 0) {
            if (isp_day_night_switch_drop_frame_cnt != '\0') {
              isp_day_night_switch_drop_frame_cnt = isp_day_night_switch_drop_frame_cnt + -1;
              if (local_2c != (int *)ch0_pre_dequeue_vb) {
                ppiVar2 = *(int ***)(iVar5 + 0x214);
                *(int **)(iVar5 + 0x214) = local_30;
                local_30[1] = (int)ppiVar2;
                *local_30 = iVar5 + 0x210;
                *ppiVar2 = local_30;
LAB_0001af7c:
                local_30[-4] = 1;
LAB_0001af80:
                *(int *)(iVar5 + 0x218) = *(int *)(iVar5 + 0x218) + 1;
                __enqueue_in_driver(local_2c);
              }
              goto LAB_0001b11c;
            }
          }
          else if (iVar1 == 1) {
            if (DAT_000d9c65 != '\0') {
              DAT_000d9c65 = DAT_000d9c65 + -1;
              ppiVar2 = *(int ***)(iVar5 + 0x214);
              *(int **)(iVar5 + 0x214) = local_30;
              *local_30 = iVar5 + 0x210;
              local_30[1] = (int)ppiVar2;
              *ppiVar2 = local_30;
              goto LAB_0001af7c;
            }
          }
          else if ((iVar1 == 2) && (DAT_000d9c66 != '\0')) {
            DAT_000d9c66 = DAT_000d9c66 + -1;
            ppiVar2 = *(int ***)(iVar5 + 0x214);
            *(int **)(iVar5 + 0x214) = local_30;
            *local_30 = iVar5 + 0x210;
            local_30[1] = (int)ppiVar2;
            *ppiVar2 = local_30;
            local_30[-4] = 1;
            goto LAB_0001af80;
          }
          local_30[-4] = 4;
          ppiVar2 = *(int ***)(iVar5 + 0x220);
          *(int **)(iVar5 + 0x220) = local_30 + 2;
          local_30[2] = iVar5 + 0x21c;
          local_30[3] = (int)ppiVar2;
          *ppiVar2 = local_30 + 2;
          *(int *)(iVar5 + 0x224) = *(int *)(iVar5 + 0x224) + 1;
          private_wake_up(iVar5 + 0x228);
          private_complete(iVar5 + 0x2d4);
        }
        bVar7 = bVar7 + 1;
        if (bVar6 < bVar7) goto code_r0x0001b0a4;
        piVar8 = *(int **)(iVar5 + 0x210);
      } while( true );
    }
  }
  isp_printf(1,"vb is null, buf get:0x%08x lastaddr = 0x%08x idx=%d isp_index = %d\n",
             *(int *)(param_3 + 8),*(int *)(lastaddr + *(int *)(iVar5 + 0x2c0) * 4),
             bVar6,*(int *)(param_3 + 0x18));
  isp_err3 = isp_err3 + 1;
  iVar1 = *(int *)(iVar5 + 0x2c0);
LAB_0001b100:
  *(int *)(lastaddr + iVar1 * 4) = *(int *)(param_3 + 8);
LAB_0001b11c:
  private_spin_unlock_irqrestore(iVar5 + 0x2c4,local_38[0]);
  return 0;
code_r0x0001b0a4:
  iVar1 = *(int *)(iVar5 + 0x2c0);
  goto LAB_0001b100;
}



int frame_channel_open(int param_1,int param_2)

{
  int uVar1;
  unsigned int uVar2;
  int iVar3;
  
  uVar2 = *(unsigned int *)(param_2 + 0x70);
  uVar1 = 0xffffffea;
  if ((uVar2 != 0) && (iVar3 = uVar2 + 0x2c4, uVar2 < 0xfffff001)) {
    private_mutex_lock(iVar3);
    if (*(int *)(uVar2 + 0x2d0) < 2) {
      private_mutex_unlock(iVar3);
      isp_printf(2,"Frame channel%d is slake now, Please activate it firstly!\n",
                 *(int *)(uVar2 + 0x2c0));
      uVar1 = 0xffffffff;
    }
    else {
      private_mutex_unlock(iVar3);
      memset((void *)(uVar2 + 0x23c),0,0x70);
      *(int *)(uVar2 + 0x2e0) = 0;
      *(int *)(uVar2 + 0x2e4) = 0;
      private_init_completion(uVar2 + 0x2d4);
      __vb2_queue_free(uVar2 + 0x24,*(int *)(uVar2 + 0x20c));
      *(int *)(uVar2 + 0x2d0) = 3;
      uVar1 = 0;
    }
  }
  return uVar1;
}



int frame_channel_vidioc_set_fmt(unsigned int param_1,int param_2)

{
  int iVar1;
  char *pcVar2;
  int local_80 [4];
  int local_70;
  int local_64;
  
  if (param_1 == 0) {
    return -0x16;
  }
  if (0xfffff000 < param_1) {
    return -0x16;
  }
  iVar1 = private_copy_from_user(local_80,param_2,0x70);
  if (iVar1 == 0) {
    if (local_80[0] == 1) {
      if (local_70 == 0) {
        local_70 = 4;
      }
      else if (local_70 != 4) {
        pcVar2 = "The field is invalid!\n";
        goto LAB_0001b2e0;
      }
      if (local_64 == 8) {
        iVar1 = tx_isp_send_event_to_remote(*(int *)(param_1 + 700),0x3000002,local_80);
        if ((iVar1 != 0) && (iVar1 != -0x203)) {
          isp_printf(2,"Failed to set fmt to frame chan%d!\n",*(int *)(param_1 + 0x2c0));
          return iVar1;
        }
        iVar1 = private_copy_to_user(param_2,local_80,0x70);
        if (iVar1 == 0) {
          memcpy((void *)(param_1 + 0x23c),local_80,0x70);
          return 0;
        }
        pcVar2 = "Failed to copy to user\n";
        goto LAB_0001b38c;
      }
      pcVar2 = "The colorspace is invalid!\n";
    }
    else {
      pcVar2 = "The frame type is invalid!\n";
    }
LAB_0001b2e0:
    isp_printf(2,pcVar2);
    iVar1 = -0x16;
  }
  else {
    pcVar2 = "Failed to copy from user\n";
LAB_0001b38c:
    isp_printf(2,pcVar2);
    iVar1 = -0xc;
  }
  return iVar1;
}



int frame_channel_vidioc_get_fmt(unsigned int param_1,int param_2)

{
  int iVar1;
  int local_80 [4];
  int local_70;
  int local_64;
  
  iVar1 = -0x16;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return iVar1;
    }
    iVar1 = tx_isp_send_event_to_remote(*(int *)(param_1 + 700),0x3000001,local_80);
    if ((iVar1 == 0) || (iVar1 == -0x203)) {
      local_64 = 8;
      local_70 = 4;
      local_80[0] = 1;
      iVar1 = private_copy_to_user(param_2,local_80,0x70);
      if (iVar1 == 0) {
        memcpy((void *)(param_1 + 0x23c),local_80,0x70);
        iVar1 = 0;
      }
      else {
        isp_printf(2,"Failed to copy to user\n");
        iVar1 = -0xc;
      }
    }
    else {
      isp_printf(2,"Failed to set fmt to frame chan%d!\n",*(int *)(param_1 + 0x2c0));
    }
  }
  return iVar1;
}



unsigned int check_state(int param_1)

{
  unsigned int uVar1;
  
  uVar1 = 0;
  if ((param_1 != 0) && (uVar1 = 1, *(int *)(param_1 + 0x1f8) == param_1 + 0x1f8)) {
    uVar1 = *(unsigned int *)(param_1 + 0x20c) & 1 ^ 1;
  }
  return uVar1;
}



int __frame_channel_vb2_streamoff(int param_1,int param_2)

{
  int uVar1;
  char *pcVar2;
  
  if (*(int *)(param_1 + 0x24) == param_2) {
    if ((*(unsigned int *)(param_1 + 0x230) & 1) != 0) {
      __vb2_queue_cancel(param_1 + 0x24);
      *(int *)(param_1 + 0x2d0) = 3;
      return 0;
    }
    pcVar2 = "streamoff: not streaming\n";
    uVar1 = 1;
  }
  else {
    pcVar2 = "streamon: invalid stream type\n";
    uVar1 = 2;
  }
  isp_printf(uVar1,pcVar2);
  return 0xffffffea;
}



int fs_slake_module(unsigned int param_1)

{
  int uVar1;
  int iVar2;
  int iVar3;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar1 = 0;
    if (*(int *)(param_1 + 0xe4) != 1) {
      for (iVar3 = 0; iVar3 < *(int *)(param_1 + 0xe0); iVar3 = iVar3 + 1) {
        iVar2 = iVar3 * 0x2ec + *(int *)(param_1 + 0xdc);
        if (*(int *)(iVar2 + 0x2d0) == 4) {
          __frame_channel_vb2_streamoff(iVar2,*(int *)(iVar2 + 0x24));
          __vb2_queue_free(iVar2 + 0x24,*(int *)(iVar2 + 0x20c));
          *(int *)(iVar2 + 0x2d0) = 1;
        }
        else {
          *(int *)(iVar2 + 0x2d0) = 1;
        }
      }
      *(int *)(param_1 + 0xe4) = 1;
      uVar1 = 0;
    }
  }
  return uVar1;
}



int frame_channel_release(int param_1,int param_2)

{
  int uVar1;
  unsigned int uVar2;
  
  uVar2 = *(unsigned int *)(param_2 + 0x70);
  uVar1 = 0xffffffea;
  if (((uVar2 != 0) && (uVar2 < 0xfffff001)) && (uVar1 = 0, *(int *)(uVar2 + 0x2d0) == 4)) {
    __frame_channel_vb2_streamoff(uVar2,*(int *)(uVar2 + 0x24));
    __vb2_queue_free(uVar2 + 0x24,*(int *)(uVar2 + 0x20c));
    *(int *)(uVar2 + 0x2d0) = 2;
    uVar1 = 0;
  }
  return uVar1;
}



unsigned int frame_channel_unlocked_ioctl(int param_1,unsigned int param_2,unsigned int param_3)

{
  bool bVar1;
  int iVar2;
  int *piVar3;
  unsigned int uVar4;
  int *piVar5;
  code *pcVar6;
  int iVar7;
  char *pcVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  unsigned int local_78;
  int local_74;
  int local_70;
  unsigned int local_6c;
  int local_68;
  int local_64;
  int local_60;
  int local_48;
  unsigned int local_44;
  unsigned int local_40;
  unsigned int local_34;
  int local_30;
  
  uVar9 = *(unsigned int *)(param_1 + 0x70);
  if ((uVar9 == 0) || (0xfffff000 < uVar9)) {
    if (param_2 != 0x800456c5) {
      if (param_2 < 0x800456c6) {
        if (param_2 == 0x407056c4) {
          uVar9 = 0;
          goto LAB_0001b900;
        }
        if (0x407056c4 < param_2) {
          if (param_2 == 0x80045612) {
            return 0xffffffea;
          }
          if (param_2 != 0x80045613) {
            return 0xfffffdfd;
          }
          return 0xffffffea;
        }
        uVar9 = 0;
LAB_0001c26c:
        if (param_2 != 0x400456bf) {
          return 0xfffffdfd;
        }
        local_78 = 0;
        uVar4 = private_wait_for_completion_interruptible(uVar9 + 0x2d4);
        local_78 = uVar4;
        if (-1 < (int)uVar4) {
          local_78 = *(int *)(uVar9 + 0x2d4) + 1;
        }
        iVar2 = private_copy_to_user(param_3,&local_78,4);
      }
      else {
        if (param_2 != 0xc044560f) {
          if (param_2 < 0xc0445610) {
            if (param_2 == 0xc0145608) {
              return 0xffffffea;
            }
            if (param_2 != 0xc0445609) {
              return 0xfffffdfd;
            }
            return 0xffffffea;
          }
          if (param_2 == 0xc0445611) {
            return 0xffffffea;
          }
          uVar9 = 0;
LAB_0001c320:
          if (param_2 != 0xc07056c3) {
            return 0xfffffdfd;
          }
          pcVar6 = frame_channel_vidioc_set_fmt;
          goto LAB_0001b910;
        }
        uVar9 = 0;
LAB_0001bb20:
        local_34 = 0;
        if (uVar9 == 0) {
          return 0xffffffea;
        }
        if (0xfffff000 < uVar9) {
          return 0xffffffea;
        }
        if ((param_3 == 0) || (0xfffff000 < param_3)) goto LAB_0001b7d8;
        iVar2 = private_copy_from_user(&local_78,param_3,0x44);
        if (iVar2 != 0) goto LAB_0001b814;
        if (local_74 != *(int *)(uVar9 + 0x24)) {
          pcVar8 = "qbuf: invalid buffer type\n";
          goto LAB_0001b7dc;
        }
        uVar4 = *(unsigned int *)(uVar9 + 0x20c);
        if (uVar4 <= local_78) {
          pcVar8 = "qbuf: buffer index(%d) out of range(%d) \n";
          local_40 = local_78;
LAB_0001bb94:
          isp_printf(2,pcVar8,local_40,uVar4);
          return 0xffffffea;
        }
        iVar2 = *(int *)(uVar9 + (local_78 + 0x3a) * 4 + 0x24);
        if (iVar2 == 0) {
          pcVar8 = "qbuf: buffer is NULL\n";
          goto LAB_0001b7dc;
        }
        *(char *)(iVar2 + 0x4c) = 1;
        if (local_48 != *(int *)(uVar9 + 0x3c)) {
          pcVar8 = "qbuf: invalid memory type\n";
          goto LAB_0001b7dc;
        }
        uVar4 = *(unsigned int *)(uVar9 + 0x58);
        if (local_40 != uVar4) {
          pcVar8 = "qbuf: invalid memory size, length = %d sizeimage = %d\n";
          goto LAB_0001bb94;
        }
        if (*(int *)(iVar2 + 0x48) != 0) {
          pcVar8 = "qbuf: buffer already in use\n";
          goto LAB_0001b7dc;
        }
        iVar7 = *(int *)(uVar9 + 0x2c0);
        *(unsigned int *)(iVar2 + 0x34) = local_44;
        *(unsigned int *)(iVar2 + 0x38) = local_40;
        *(int *)(iVar2 + 0x10) = local_68;
        *(int *)(iVar2 + 0x14) = local_64;
        *(int *)(iVar2 + 0x18) = local_60;
        *(unsigned int *)(iVar2 + 0xc) = local_6c & 0xffff1bb8;
        private_dma_sync_single_for_device(0,local_44,local_40,2);
        if ((isp_ch0_pre_dequeue_time != 0) && (iVar7 == 0)) {
          *(int *)(local_44 | 0xa0000000) = 0x12345678;
        }
        *(int *)(iVar2 + 0x68) = iVar2 + 0x68;
        *(int *)(iVar2 + 0x6c) = iVar2 + 0x68;
        *(unsigned int *)(iVar2 + 0x70) = local_44;
        *(int *)(iVar2 + 0x48) = 2;
        *(char *)(iVar2 + 0x4c) = 2;
        private_mutex_lock(uVar9 + 0x28);
        __private_spin_lock_irqsave(uVar9 + 0x2c4,&local_34);
        piVar3 = *(int **)(uVar9 + 0x214);
        *(int *)(uVar9 + 0x214) = iVar2 + 0x58;
        *(unsigned int *)(iVar2 + 0x58) = uVar9 + 0x210;
        *(int **)(iVar2 + 0x5c) = piVar3;
        *piVar3 = iVar2 + 0x58;
        *(int *)(iVar2 + 0x48) = 1;
        *(int *)(uVar9 + 0x218) = *(int *)(uVar9 + 0x218) + 1;
        private_spin_unlock_irqrestore(uVar9 + 0x2c4,local_34);
        if ((*(unsigned int *)(uVar9 + 0x230) & 1) != 0) {
          __enqueue_in_driver(iVar2);
        }
        *(char *)(iVar2 + 0x4c) = 0x1e;
        __fill_v4l2_buffer(iVar2,&local_78);
        private_mutex_unlock(uVar9 + 0x28);
LAB_0001b884:
        iVar2 = private_copy_to_user(param_3,&local_78,0x44);
        uVar4 = 0;
      }
      if (iVar2 == 0) {
        return uVar4;
      }
      pcVar8 = "Failed to copy to user\n";
      goto LAB_0001b8ac;
    }
    uVar9 = 0;
LAB_0001b760:
    local_78 = 0;
    if (uVar9 == 0) {
      return 0xffffffea;
    }
    if (0xfffff000 < uVar9) {
      return 0xffffffea;
    }
    if ((param_3 == 0) || (0xfffff000 < param_3)) {
LAB_0001b7d8:
      pcVar8 = "The parameter from user is invalid!\n";
LAB_0001b7dc:
      isp_printf(2,pcVar8);
      return 0xffffffea;
    }
    iVar2 = private_copy_from_user(&local_78,param_3,4);
    if (iVar2 == 0) {
      uVar9 = tx_isp_send_event_to_remote(*(int *)(uVar9 + 700),0x3000008,&local_78);
      if (uVar9 == 0) {
        return 0;
      }
      if (uVar9 == 0xfffffdfd) {
        return 0;
      }
      isp_printf(2,"streamon: driver refused to start streaming\n");
      return uVar9;
    }
  }
  else {
    if (param_2 == 0x800456c5) goto LAB_0001b760;
    if (0x800456c5 < param_2) {
      if (param_2 == 0xc044560f) goto LAB_0001bb20;
      if (param_2 < 0xc0445610) {
        if (param_2 == 0xc0145608) {
          if ((param_3 == 0) || (0xfffff000 < param_3)) goto LAB_0001b7d8;
          iVar2 = private_copy_from_user(&local_78,param_3,0x14);
          if (iVar2 == 0) {
            iVar2 = uVar9 + 0x24;
            if ((*(unsigned int *)(uVar9 + 0x230) & 1) != 0) {
              pcVar8 = "reqbufs: streaming active\n";
              goto LAB_0001b9c8;
            }
            if (((local_78 == 0) || (*(int *)(uVar9 + 0x20c) != 0)) ||
               (*(int *)(uVar9 + 0x3c) != local_70)) {
              __vb2_queue_free(iVar2);
              if (local_78 == 0) {
                return 0;
              }
              iVar7 = *(int *)(uVar9 + 0x3c);
            }
            else {
              iVar7 = *(int *)(uVar9 + 0x3c);
            }
            if (iVar7 == local_70) {
              uVar4 = 0x40;
              if (local_78 < 0x41) {
                uVar4 = local_78;
              }
              if (((isp_ch0_pre_dequeue_time < 1) || (*(int *)(uVar9 + 0x2c0) != 0)) || (uVar4 < 2))
              {
                uVar10 = 0;
                do {
                  uVar11 = uVar4;
                  if (uVar4 == uVar10) {
LAB_0001becc:
                    isp_printf(0,"Allocated %d buffers!\n",uVar11);
                    if (uVar11 == 0) {
                      isp_printf(2,"Memory allocation failed\n");
                      return 0xfffffff4;
                    }
                    local_34 = uVar11;
                    if (uVar11 < uVar4) {
                      __vb2_queue_free(iVar2,uVar11);
                      isp_printf(2,"Can\'t allocation %d buffers!\n",uVar4);
                      return 0xfffffff4;
                    }
                    *(unsigned int *)(uVar9 + 0x20c) = uVar11;
                    local_78 = uVar11;
                    uVar4 = tx_isp_send_event_to_remote
                                      (*(int *)(uVar9 + 700),0x3000008,&local_34);
                    if ((uVar4 != 0) && (uVar4 != 0xfffffdfd)) {
                      isp_printf(2,"streamon: driver refused to start streaming\n");
                      return uVar4;
                    }
                    iVar2 = private_copy_to_user(param_3,&local_78,0x14);
                    if (iVar2 != 0) {
                      isp_printf(2,"Failed to copy to user\n");
                      return 0xfffffff4;
                    }
                    if (0xfffff000 < uVar9 + 0x23c) {
                      return 0;
                    }
                    if (0xfffff000 < uVar9 + 0x40) {
                      return 0;
                    }
                    *(int *)(uVar9 + 0x40) = *(int *)(uVar9 + 0x23c);
                    memcpy((void *)(uVar9 + 0x44),(void *)(uVar9 + 0x240),0x30);
                    return 0;
                  }
                  piVar3 = (int *)private_kmalloc(*(int *)(uVar9 + 0x34),0xd0);
                  if (piVar3 == (int *)0x0) {
                    isp_printf(2,"Memory alloc for buffer struct failed\n");
                    uVar11 = uVar10;
                    goto LAB_0001becc;
                  }
                  memset(piVar3,0,*(size_t *)(uVar9 + 0x34));
                  piVar3[0x12] = 0;
                  piVar3[0x11] = iVar2;
                  *piVar3 = *(int *)(uVar9 + 0x20c) + uVar10;
                  piVar3[1] = *(int *)(uVar9 + 0x24);
                  piVar3[0xc] = *(int *)(uVar9 + 0x3c);
                  *(int **)(uVar9 + (uVar10 + *(int *)(uVar9 + 0x20c) + 0x3a) * 4 + 0x24) = piVar3;
                  uVar10 = uVar10 + 1;
                } while( true );
              }
              local_40 = 0;
              pcVar8 = 
              "error: one buffer schedule only support nrvbs = 1, chan index:%d, num_buffers:%d\n";
              goto LAB_0001bb94;
            }
            pcVar8 = "reqbufs: the memory type isn\'t userptr!\n";
            goto LAB_0001b7dc;
          }
        }
        else {
          if (param_2 != 0xc0445609) {
            return 0xfffffdfd;
          }
          if ((param_3 == 0) || (0xfffff000 < param_3)) goto LAB_0001b7d8;
          iVar2 = private_copy_from_user(&local_78,param_3,0x44);
          if (iVar2 == 0) {
            if (local_74 != *(int *)(uVar9 + 0x24)) goto LAB_0001c058;
            if (*(unsigned int *)(uVar9 + 0x20c) <= local_78) {
              pcVar8 = "querybuf: buffer index out of range\n";
              goto LAB_0001b7dc;
            }
            __fill_v4l2_buffer(*(int *)(uVar9 + (local_78 + 0x3a) * 4 + 0x24),&local_78);
            goto LAB_0001b884;
          }
        }
      }
      else {
        if (param_2 != 0xc0445611) goto LAB_0001c320;
        if ((param_3 == 0) || (0xfffff000 < param_3)) goto LAB_0001b7d8;
        iVar2 = private_copy_from_user(&local_78,param_3,0x44);
        if (iVar2 == 0) {
          if (local_74 == *(int *)(uVar9 + 0x24)) {
            local_34 = 0;
            piVar3 = (int *)0x0;
            uVar10 = 0;
            uVar4 = *(unsigned int *)(uVar9 + 0x230);
            do {
              if ((uVar4 & 1) == 0) {
                isp_printf(2,"Streaming off, will not wait for buffers,chan index %d\n",
                           *(int *)(uVar9 + 0x2c0));
                return 0xffffffea;
              }
              local_30 = uVar9 + 0x224;
              __private_spin_lock_irqsave(uVar9 + 0x224,&local_34);
              if (*(int *)(uVar9 + 0x2c0) == 0) {
                if (isp_ch0_pre_dequeue_interrupt_process == 0) {
                  piVar5 = *(int **)(uVar9 + 0x21c);
                  goto LAB_0001c158;
                }
                if (*(char *)(uVar9 + 0x238) == '\0') {
                  piVar5 = *(int **)(uVar9 + 0x21c);
                  goto LAB_0001c158;
                }
                if (ch0_pre_dequeue_vb._64_2_ != 2) {
                  piVar5 = *(int **)(uVar9 + 0x21c);
                  goto LAB_0001c158;
                }
                *(char *)(uVar9 + 0x238) = 0;
                piVar3 = (int *)ch0_pre_dequeue_vb;
LAB_0001c19c:
                bVar1 = true;
              }
              else {
                piVar5 = *(int **)(uVar9 + 0x21c);
LAB_0001c158:
                bVar1 = false;
                if (piVar5 != (int *)(uVar9 + 0x21c)) {
                  piVar3 = (int *)piVar5[1];
                  iVar2 = *piVar5;
                  *(int **)(iVar2 + 4) = piVar3;
                  *piVar3 = iVar2;
                  *piVar5 = 0x100100;
                  piVar5[1] = 0x200200;
                  *(int *)(uVar9 + 0x224) = *(int *)(uVar9 + 0x224) + -1;
                  piVar3 = piVar5 + -0x18;
                  goto LAB_0001c19c;
                }
              }
              private_spin_unlock_irqrestore(local_30,local_34);
              if (bVar1) {
LAB_0001c200:
                if ((int)uVar10 < 0) {
                  return uVar10;
                }
                __fill_v4l2_buffer(piVar3,&local_78);
                piVar3[0x12] = 0;
                goto LAB_0001b884;
              }
              uVar10 = private_wait_event_interruptible(uVar9 + 0x228,check_state,uVar9 + 0x24);
              if (uVar10 == 0xfffffe00) {
                uVar4 = *(unsigned int *)(uVar9 + 0x230);
              }
              else {
                if (uVar10 != 0) {
                  isp_printf(2,"Sleep was interrupted\n");
                  goto LAB_0001c200;
                }
                uVar4 = *(unsigned int *)(uVar9 + 0x230);
              }
            } while( true );
          }
LAB_0001c058:
          pcVar8 = "dqbuf: invalid buffer type\n";
          goto LAB_0001b7dc;
        }
      }
      goto LAB_0001b814;
    }
    if (param_2 == 0x407056c4) {
LAB_0001b900:
      pcVar6 = frame_channel_vidioc_get_fmt;
LAB_0001b910:
      uVar9 = (*pcVar6)(uVar9,param_3);
      return uVar9;
    }
    if (param_2 < 0x407056c5) goto LAB_0001c26c;
    if (param_2 != 0x80045612) {
      if (param_2 != 0x80045613) {
        return 0xfffffdfd;
      }
      if ((param_3 != 0) && (param_3 < 0xfffff001)) {
        iVar2 = private_copy_from_user(&local_78,param_3,4);
        if (iVar2 == 0) {
          pcVar6 = __frame_channel_vb2_streamoff;
          param_3 = local_78;
          goto LAB_0001b910;
        }
        goto LAB_0001b814;
      }
      goto LAB_0001b7d8;
    }
    if (*(int *)(uVar9 + 0x2d0) != 3) {
      isp_printf(2,"The state of frame channel%d is invalid(%d)!\n",*(int *)(uVar9 + 0x2c0));
      return 0xffffffff;
    }
    if ((param_3 == 0) || (0xfffff000 < param_3)) goto LAB_0001b7d8;
    iVar2 = private_copy_from_user(&local_78,param_3,4);
    if (iVar2 == 0) {
      if (*(unsigned int *)(uVar9 + 0x24) != local_78) {
        pcVar8 = "streamon: invalid stream type\n";
        goto LAB_0001b7dc;
      }
      if ((*(unsigned int *)(uVar9 + 0x230) & 1) == 0) {
        piVar3 = *(int **)(uVar9 + 0x210);
        while( true ) {
          if (piVar3 == (int *)(uVar9 + 0x210)) break;
          __enqueue_in_driver(piVar3 + -0x16);
          piVar3 = (int *)*piVar3;
        }
        *(char *)(uVar9 + 0x230) = *(char *)(uVar9 + 0x230) | 1;
        uVar4 = tx_isp_send_event_to_remote(*(int *)(uVar9 + 700),0x3000003,0);
        if ((uVar4 != 0) && (uVar4 != 0xfffffdfd)) {
          isp_printf(2,"streamon: driver refused to start streaming\n");
          __vb2_queue_cancel(uVar9 + 0x24);
          *(char *)(uVar9 + 0x230) = *(char *)(uVar9 + 0x230) & 0xfe;
          return uVar4;
        }
        *(int *)(uVar9 + 0x2d0) = 4;
        isp_printf(0,"Streamon successful\n");
        return 0;
      }
      pcVar8 = "streamon: already streaming\n";
LAB_0001b9c8:
      isp_printf(2,pcVar8);
      return 0xfffffff0;
    }
  }
LAB_0001b814:
  pcVar8 = "Failed to copy from user\n";
LAB_0001b8ac:
  isp_printf(2,pcVar8);
  return 0xfffffff4;
}



void tx_isp_frame_chan_deinit(unsigned int param_1)

{
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    private_misc_deregister();
    __vb2_queue_cancel(param_1 + 0x24);
    __vb2_queue_free(param_1 + 0x24,*(int *)(param_1 + 0x20c));
    *(int *)(param_1 + 0x2d0) = 1;
  }
  return;
}



int tx_isp_fs_probe(int param_1)

{
  char bVar1;
  void *__s;
  int uVar2;
  int iVar3;
  void *__s_00;
  int iVar4;
  unsigned int uVar5;
  int *puVar6;
  int iVar7;
  
  __s = (void *)private_kmalloc(0xe8,0xd0);
  if (__s == (void *)0x0) {
    isp_printf(2,"Failed to allocate csi device\n");
    uVar2 = 0xfffffff4;
  }
  else {
    memset(__s,0,0xe8);
    iVar7 = *(int *)(param_1 + 0x58);
    iVar3 = tx_isp_subdev_init(param_1,__s,fs_subdev_ops);
    if (iVar3 == 0) {
      uVar5 = (uint)*(ushort *)((int)__s + 200);
      *(unsigned int *)((int)__s + 0xe0) = uVar5;
      if (uVar5 == 0) {
LAB_0001c4bc:
        *(int *)((int)__s + 0xe4) = 1;
        private_platform_set_drvdata(param_1,__s);
        *(char **)((int)__s + 0x34) = isp_framesource_fops;
        *(void **)((int)__s + 0xd4) = __s;
        return 0;
      }
      __s_00 = (void *)private_kmalloc(uVar5 * 0x2ec,0xd0);
      *(void **)((int)__s + 0xdc) = __s_00;
      memset(__s_00,0,*(int *)((int)__s + 0xe0) * 0x2ec);
      iVar3 = 0;
      while( true ) {
        if (*(int *)((int)__s + 0xe0) <= iVar3) goto LAB_0001c4bc;
        iVar7 = iVar3 * 0x2ec;
        puVar6 = (int *)(*(int *)((int)__s + 0xdc) + iVar7);
        uVar5 = iVar3 * 0x24 + *(int *)((int)__s + 0xcc);
        if (puVar6 == (int *)0x0) break;
        if ((int *)0xfffff000 < puVar6) {
          uVar2 = 0xffffffea;
          goto LAB_0001c58c;
        }
        if ((uVar5 == 0) || (0xfffff000 < uVar5)) break;
        bVar1 = *(char *)(uVar5 + 4);
        puVar6[0xaf] = uVar5;
        puVar6[0xb0] = (uint)bVar1;
        if (*(char *)(uVar5 + 5) == '\0') {
          puVar6[0xb4] = 0;
        }
        else {
          sprintf((char *)(puVar6 + 0xab),"framechan%d");
          *puVar6 = 0xff;
          puVar6[2] = fs_channel_ops;
          puVar6[1] = puVar6 + 0xab;
          iVar4 = private_misc_register(puVar6);
          if (iVar4 < 0) {
            isp_printf(2,"Failed to register framechan%d!\n",puVar6[0xb0]);
            uVar2 = 0xfffffffe;
            goto LAB_0001c58c;
          }
          if ((int *)0xfffff000 < puVar6 + 9) {
            private_misc_deregister(puVar6);
            uVar2 = 0xffffffea;
            goto LAB_0001c58c;
          }
          memset(puVar6 + 9,0,0x218);
          puVar6[0xf] = 2;
          puVar6[0xd] = 0x84;
          puVar6[0xe] = 0x2000;
          puVar6[0x84] = puVar6 + 0x84;
          puVar6[0x85] = puVar6 + 0x84;
          puVar6[0x87] = puVar6 + 0x87;
          puVar6[0x88] = puVar6 + 0x87;
          puVar6[9] = 1;
          private_spin_lock_init(puVar6 + 0x89);
          private_raw_mutex_init(puVar6 + 10,"&q->mlock",0x10000);
          puVar6[0x86] = 0;
          puVar6[0x89] = 0;
          private_init_waitqueue_head(puVar6 + 0x8a);
          private_spin_lock_init(puVar6 + 0xb1);
          private_raw_mutex_init(puVar6 + 0xb1,"&chan->mlock",0x10000);
          private_init_completion(puVar6 + 0xb5);
          *(code **)(uVar5 + 0x1c) = frame_chan_event;
          puVar6[0xb4] = 1;
        }
        iVar3 = iVar3 + 1;
      }
      uVar2 = 0xffffffea;
LAB_0001c58c:
      while( true ) {
        iVar3 = iVar3 + -1;
        iVar7 = iVar7 + -0x2ec;
        if (iVar3 == 0) break;
        tx_isp_frame_chan_deinit(*(int *)((int)__s + 0xdc) + iVar7);
      }
    }
    else {
      isp_printf(2,"Failed to init isp module(%d.%d)\n",*(char *)(iVar7 + 2),
                 *(char *)(iVar7 + 3));
      uVar2 = 0xfffffff4;
    }
    private_kfree(__s);
  }
  return uVar2;
}



void sensor_alloc_analog_gain(int param_1,short *param_2)

{
  int local_10 [2];
  
  local_10[0] = 0;
  (**(code **)(*(int *)(g_ispcore + 0x120) + 0xc0))(param_1,0x10,local_10);
  *param_2 = (short)local_10[0];
  return;
}



void sensor_alloc_analog_gain_short(int param_1,int param_2)

{
  int local_10 [2];
  
  local_10[0] = 0;
  (**(code **)(*(int *)(g_ispcore + 0x120) + 0xc4))(param_1,0x10,local_10);
  *(short *)(param_2 + 0xe) = (short)local_10[0];
  return;
}



void sensor_alloc_digital_gain(int param_1,int param_2)

{
  int local_10 [2];
  
  local_10[0] = 0;
  (**(code **)(*(int *)(g_ispcore + 0x120) + 200))(param_1,0x10,local_10);
  *(short *)(param_2 + 2) = (short)local_10[0];
  return;
}



int sensor_alloc_integration_time(int param_1,int param_2)

{
  code *pcVar1;
  int local_10 [2];
  
  pcVar1 = *(code **)(*(int *)(g_ispcore + 0x120) + 0xd0);
  local_10[0] = 0;
  if (pcVar1 == (code *)0x0) {
    *(short *)(param_2 + 0x10) = (short)param_1;
  }
  else {
    param_1 = (*pcVar1)(param_1,0,local_10);
    *(short *)(param_2 + 0x10) = (short)local_10[0];
  }
  return param_1;
}



int sensor_alloc_integration_time_short(int param_1,int param_2)

{
  int local_10 [2];
  
  local_10[0] = 0;
  if (*(int *)(*(int *)(g_ispcore + 0x120) + 0xd0) == 0) {
    *(short *)(param_2 + 0x12) = (short)param_1;
  }
  else {
    param_1 = (**(code **)(*(int *)(g_ispcore + 0x120) + 0xd4))(param_1,0,local_10);
    *(short *)(param_2 + 0x12) = (short)local_10[0];
  }
  return param_1;
}



void sensor_set_integration_time(unsigned int param_1)

{
  int iVar1;
  int iVar2;
  
  iVar1 = g_ispcore;
  param_1 = param_1 & 0xffff;
  iVar2 = *(int *)(g_ispcore + 0x120);
  if (param_1 != *(unsigned int *)(iVar2 + 0xac)) {
    *(unsigned int *)(iVar2 + 0xec) = (*(unsigned int *)(iVar2 + 0xec) & 0xffff0000) + param_1;
    *(unsigned int *)(iVar2 + 0xac) = param_1;
    *(int *)(iVar1 + 0x198) = 1;
    *(unsigned int *)(iVar1 + 0x19c) = param_1;
    *(int *)(iVar1 + 0x1b0) = 1;
    *(int *)(iVar1 + 0x1b4) = *(int *)(iVar2 + 0xec);
  }
  return;
}



void sensor_set_integration_time_short(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = g_ispcore;
  param_1 = param_1 & 0xffff;
  if (param_1 != *(unsigned int *)(*(int *)(g_ispcore + 0x120) + 0xdc)) {
    *(unsigned int *)(*(int *)(g_ispcore + 0x120) + 0xdc) = param_1;
    *(int *)(iVar1 + 0x1a0) = 1;
    *(unsigned int *)(iVar1 + 0x1a4) = param_1;
  }
  return;
}



void sensor_set_analog_gain(int param_1)

{
  int iVar1;
  int iVar2;
  
  iVar1 = g_ispcore;
  iVar2 = *(int *)(g_ispcore + 0x120);
  if (*(int *)(iVar2 + 0x9c) != param_1) {
    *(unsigned int *)(iVar2 + 0xec) = (uint)*(ushort *)(iVar2 + 0xec) | param_1 << 0x10;
    *(int *)(iVar2 + 0x9c) = param_1;
    *(int *)(iVar1 + 0x180) = 1;
    *(int *)(iVar1 + 0x184) = param_1;
    *(int *)(iVar1 + 0x1b0) = 1;
    *(int *)(iVar1 + 0x1b4) = *(int *)(iVar2 + 0xec);
  }
  return;
}



void sensor_set_analog_gain_short(int param_1)

{
  int iVar1;
  
  iVar1 = g_ispcore;
  if (*(int *)(*(int *)(g_ispcore + 0x120) + 0xe4) != param_1) {
    *(int *)(*(int *)(g_ispcore + 0x120) + 0xe4) = param_1;
    *(int *)(iVar1 + 0x188) = 1;
    *(int *)(iVar1 + 0x18c) = param_1;
  }
  return;
}



void sensor_set_digital_gain(int param_1)

{
  int iVar1;
  
  iVar1 = g_ispcore;
  if (*(int *)(*(int *)(g_ispcore + 0x120) + 0xa0) != param_1) {
    *(int *)(*(int *)(g_ispcore + 0x120) + 0xa0) = param_1;
    *(int *)(iVar1 + 400) = 1;
    *(int *)(iVar1 + 0x194) = param_1;
  }
  return;
}



unsigned int sensor_get_normal_fps(void)

{
  unsigned int uVar1;
  unsigned int uVar2;
  
  uVar2 = *(unsigned int *)(g_ispcore + 300) >> 0x10;
  uVar1 = *(unsigned int *)(g_ispcore + 300) & 0xffff;
  return (uVar2 % uVar1 << 8) / uVar1 + (uVar2 / uVar1) * 0x100 & 0xffff;
}



int sensor_read_black_pedestal(void)

{
  return 0;
}



void sensor_end_changes(void)

{
  return;
}



short sensor_get_id(void)

{
  return *(short *)(*(int *)(g_ispcore + 0x120) + 4);
}



void sensor_set_wdr_mode(void)

{
  return;
}



int sensor_fps_control(int param_1,int param_2)

{
  int iVar1;
  int iVar2;
  
  iVar1 = g_ispcore;
  iVar2 = *(int *)(g_ispcore + 0x120);
  *(short *)(param_2 + 2) = *(short *)(iVar2 + 0xb0);
  *(short *)(param_2 + 4) = *(short *)(iVar2 + 0xb2);
  *(unsigned int *)(param_2 + 0x28) = (uint)*(ushort *)(iVar2 + 0xa4);
  *(unsigned int *)(param_2 + 0x2c) = (uint)*(ushort *)(iVar2 + 0xb4);
  *(unsigned int *)(param_2 + 0x50) = (uint)*(ushort *)(iVar2 + 0xd8);
  *(unsigned int *)(param_2 + 0x54) = (uint)*(ushort *)(iVar2 + 0xda);
  *(unsigned int *)(param_2 + 0x30) = (uint)*(ushort *)(iVar2 + 0xb4);
  *(unsigned int *)(param_2 + 0x34) = (uint)*(ushort *)(iVar2 + 0xaa);
  return *(int *)(iVar1 + 300);
}



void sensor_disable_isp(void)

{
  return;
}



int sensor_get_lines_per_second(void)

{
  return 0;
}



void sensor_set_mode(char param_1,char *param_2)

{
  ushort uVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  char local_20 [12];
  
  iVar2 = g_ispcore;
  local_20[0] = 1;
  if ((g_ispcore != 0) && (*(code **)(g_ispcore + 0x7c) != (code *)0x0)) {
    iVar4 = *(int *)(g_ispcore + 0x120);
    iVar3 = (**(code **)(g_ispcore + 0x7c))(g_ispcore,0x200000d,local_20);
    if (iVar3 == 0) {
      *(short *)(param_2 + 6) = (short)*(int *)(iVar2 + 0xec);
      *(short *)(param_2 + 8) = (short)*(int *)(iVar2 + 0xf0);
      *(short *)(param_2 + 2) = *(short *)(iVar4 + 0xb0);
      *(short *)(param_2 + 4) = *(short *)(iVar4 + 0xb2);
      *(unsigned int *)(param_2 + 0x28) = (uint)*(ushort *)(iVar4 + 0xa4);
      *(unsigned int *)(param_2 + 0x2c) = (uint)*(ushort *)(iVar4 + 0xb4);
      *(unsigned int *)(param_2 + 0x50) = (uint)*(ushort *)(iVar4 + 0xd8);
      *(unsigned int *)(param_2 + 0x54) = (uint)*(ushort *)(iVar4 + 0xda);
      *(unsigned int *)(param_2 + 0x30) = (uint)*(ushort *)(iVar4 + 0xb4);
      uVar1 = *(ushort *)(iVar4 + 0xaa);
      *param_2 = param_1;
      *(unsigned int *)(param_2 + 0x34) = (uint)uVar1;
      return;
    }
  }
  isp_printf(1,"Failed to set sensor mode=%u\n",local_20[0]);
  return;
}



void sensor_start_changes(void)

{
  return;
}



void sensor_hw_reset_enable(void)

{
  return;
}



void sensor_hw_reset_disable(void)

{
  return;
}



void sensor_init(int param_1)

{
  int iVar1;
  
  iVar1 = *(int *)(g_ispcore + 0x120);
  *(int *)(param_1 + 0x20) = *(int *)(iVar1 + 0x94);
  *(int *)(param_1 + 0x24) = *(int *)(iVar1 + 0x98);
  *(char *)(param_1 + 0x3a) = (char)*(short *)(iVar1 + 0xb6);
  *(char *)(param_1 + 0x3b) = (char)*(short *)(iVar1 + 0xb8);
  *(char *)(param_1 + 0x3c) = (char)*(short *)(iVar1 + 0xba);
  *(unsigned int *)(param_1 + 0x28) = (uint)*(ushort *)(iVar1 + 0xa4);
  *(unsigned int *)(param_1 + 0x2c) = (uint)*(ushort *)(iVar1 + 0xb4);
  *(unsigned int *)(param_1 + 0x50) = (uint)*(ushort *)(iVar1 + 0xd8);
  *(unsigned int *)(param_1 + 0x54) = (uint)*(ushort *)(iVar1 + 0xda);
  *(int *)(param_1 + 0x58) = *(int *)(iVar1 + 0xe0);
  *(code **)(param_1 + 0x5c) = sensor_hw_reset_disable;
  *(code **)(param_1 + 0x60) = sensor_hw_reset_enable;
  *(code **)(param_1 + 100) = sensor_alloc_analog_gain;
  *(code **)(param_1 + 0x68) = sensor_alloc_analog_gain_short;
  *(code **)(param_1 + 0x6c) = sensor_alloc_digital_gain;
  *(code **)(param_1 + 0x70) = sensor_alloc_integration_time;
  *(code **)(param_1 + 0x74) = sensor_alloc_integration_time_short;
  *(code **)(param_1 + 0x78) = sensor_set_integration_time;
  *(code **)(param_1 + 0x7c) = sensor_set_integration_time_short;
  *(code **)(param_1 + 0x80) = sensor_start_changes;
  *(code **)(param_1 + 0x84) = sensor_end_changes;
  *(code **)(param_1 + 0x88) = sensor_set_analog_gain;
  *(code **)(param_1 + 0x8c) = sensor_set_analog_gain_short;
  *(code **)(param_1 + 0x90) = sensor_set_digital_gain;
  *(code **)(param_1 + 0x94) = sensor_get_normal_fps;
  *(code **)(param_1 + 0x98) = sensor_read_black_pedestal;
  *(code **)(param_1 + 0x9c) = sensor_set_mode;
  *(code **)(param_1 + 0xa0) = sensor_set_wdr_mode;
  *(code **)(param_1 + 0xa4) = sensor_fps_control;
  *(code **)(param_1 + 0xa8) = sensor_get_id;
  *(code **)(param_1 + 0xac) = sensor_disable_isp;
  *(code **)(param_1 + 0xb0) = sensor_get_lines_per_second;
  return;
}



int sensor_early_init(int param_1)

{
  int uVar1;
  
  uVar1 = 0xffffffea;
  if ((param_1 != 0) && (uVar1 = 0, g_ispcore == 0)) {
    g_ispcore = param_1;
  }
  return uVar1;
}



int tx_isp_video_s_stream(int param_1,int param_2)

{
  code **ppcVar1;
  code *pcVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int *piVar6;
  
  piVar6 = (int *)(param_1 + 0x38);
  iVar5 = 0;
  while ((((iVar3 = *piVar6, iVar3 == 0 ||
           (ppcVar1 = *(code ***)(*(int *)(iVar3 + 0xc4) + 4), ppcVar1 == (code **)0x0)) ||
          (pcVar2 = *ppcVar1, pcVar2 == (code *)0x0)) ||
         ((iVar3 = (*pcVar2)(iVar3,param_2), iVar3 == 0 || (iVar3 == -0x203))))) {
    iVar5 = iVar5 + 1;
    piVar6 = piVar6 + 1;
    if (iVar5 == 0x10) {
      return 0;
    }
  }
  iVar5 = param_1 + iVar5 * 4;
  while (param_1 != iVar5) {
    iVar4 = *(int *)(iVar5 + 0x38);
    if (iVar4 == 0) {
      iVar5 = iVar5 + -4;
    }
    else {
      ppcVar1 = *(code ***)(*(int *)(iVar4 + 0xc4) + 4);
      if (ppcVar1 == (code **)0x0) {
        iVar5 = iVar5 + -4;
      }
      else {
        pcVar2 = *ppcVar1;
        if (pcVar2 == (code *)0x0) {
          iVar5 = iVar5 + -4;
        }
        else {
          (*pcVar2)(iVar4,param_2 == 0);
          iVar5 = iVar5 + -4;
        }
      }
    }
  }
  return iVar3;
}



int tx_isp_video_link_stream(int param_1,int param_2)

{
  int iVar1;
  code *pcVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int *piVar6;
  
  piVar6 = (int *)(param_1 + 0x38);
  iVar5 = 0;
  while ((((iVar4 = *piVar6, iVar4 == 0 ||
           (iVar1 = *(int *)(*(int *)(iVar4 + 0xc4) + 4), iVar1 == 0)) ||
          (pcVar2 = *(code **)(iVar1 + 4), pcVar2 == (code *)0x0)) ||
         ((iVar4 = (*pcVar2)(iVar4,param_2), iVar4 == 0 || (iVar4 == -0x203))))) {
    iVar5 = iVar5 + 1;
    piVar6 = piVar6 + 1;
    if (iVar5 == 0x10) {
      return 0;
    }
  }
  iVar5 = param_1 + iVar5 * 4;
  while (param_1 != iVar5) {
    iVar1 = *(int *)(iVar5 + 0x38);
    if (iVar1 == 0) {
      iVar5 = iVar5 + -4;
    }
    else {
      iVar3 = *(int *)(*(int *)(iVar1 + 0xc4) + 4);
      if (iVar3 == 0) {
        iVar5 = iVar5 + -4;
      }
      else {
        pcVar2 = *(code **)(iVar3 + 4);
        if (pcVar2 == (code *)0x0) {
          iVar5 = iVar5 + -4;
        }
        else {
          (*pcVar2)(iVar1,param_2 == 0);
          iVar5 = iVar5 + -4;
        }
      }
    }
  }
  return iVar4;
}



int tx_isp_open(int param_1,int param_2)

{
  int iVar1;
  code **ppcVar2;
  code *pcVar3;
  int iVar4;
  int iVar5;
  int *piVar6;
  
  iVar4 = *(int *)(param_2 + 0x70);
  if (*(int *)(iVar4 + 0x108) != 0) {
    *(int *)(iVar4 + 0x108) = *(int *)(iVar4 + 0x108) + 1;
    return 0;
  }
  piVar6 = (int *)(iVar4 + 0x2c);
  *(int *)(iVar4 + 0x10c) = 0xffffffff;
  iVar1 = 0;
  iVar5 = *piVar6;
  do {
    if (iVar5 != 0) {
      ppcVar2 = *(code ***)(*(int *)(iVar5 + 0xc4) + 0x10);
      if ((ppcVar2 != (code **)0x0) && (pcVar3 = *ppcVar2, pcVar3 != (code *)0x0)) {
        iVar1 = (*pcVar3)();
        if (iVar1 == 0) goto LAB_0001d048;
        if (iVar1 != -0x203) {
          return iVar1;
        }
      }
      iVar1 = -0x203;
    }
LAB_0001d048:
    piVar6 = piVar6 + 1;
    if (piVar6 == (int *)(iVar4 + 0x6c)) {
      if (iVar1 == -0x203) {
        iVar1 = 0;
      }
      return iVar1;
    }
    iVar5 = *piVar6;
  } while( true );
}



int tx_isp_notify(int param_1,unsigned int param_2,int param_3)

{
  code *pcVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int *piVar5;
  int *piVar6;
  
  piVar6 = (int *)(globe_ispdev + 0x38);
  piVar5 = (int *)(globe_ispdev + 0x78);
  iVar3 = 0;
  iVar4 = *piVar6;
  do {
    if (iVar4 != 0) {
      if ((param_2 & 0xff000000) == 0x1000000) {
        if (**(int **)(iVar4 + 0xc4) != 0) {
          pcVar1 = *(code **)(**(int **)(iVar4 + 0xc4) + 0x1c);
LAB_0001d118:
          if (pcVar1 != (code *)0x0) {
            iVar4 = (*pcVar1)(iVar4,param_2,param_3);
            iVar3 = 0;
            if ((iVar4 != 0) && (iVar3 = -0x203, iVar4 != -0x203)) {
              return iVar4;
            }
            goto LAB_0001d144;
          }
        }
        iVar3 = -0x203;
      }
      else if ((param_2 & 0xff000000) == 0x2000000) {
        iVar2 = *(int *)(*(int *)(iVar4 + 0xc4) + 0xc);
        iVar3 = -0x203;
        if (iVar2 != 0) {
          pcVar1 = *(code **)(iVar2 + 8);
          goto LAB_0001d118;
        }
      }
      else {
        iVar3 = 0;
      }
    }
LAB_0001d144:
    piVar6 = piVar6 + 1;
    if (piVar5 == piVar6) {
      if (iVar3 == -0x203) {
        iVar3 = 0;
      }
      return iVar3;
    }
    iVar4 = *piVar6;
  } while( true );
}



int find_subdev_link_pad(int param_1,char **param_2)

{
  bool bVar1;
  char cVar2;
  char cVar3;
  int iVar4;
  char *pcVar5;
  unsigned int uVar6;
  char *pcVar7;
  int *piVar8;
  char cVar9;
  
  piVar8 = (int *)(param_1 + 0x38);
  iVar4 = *piVar8;
  do {
    if (iVar4 != 0) {
      pcVar5 = *(char **)(iVar4 + 8);
      pcVar7 = *param_2;
      cVar2 = *pcVar5;
      do {
        cVar3 = *pcVar7;
        pcVar5 = pcVar5 + 1;
        pcVar7 = pcVar7 + 1;
        cVar9 = cVar2;
        if (cVar3 != cVar2) break;
        bVar1 = cVar2 != '\0';
        cVar2 = *pcVar5;
        cVar9 = cVar3;
      } while (bVar1);
      if (cVar9 == cVar3) {
        if (*(char *)(param_2 + 1) == '\x01') {
          uVar6 = (uint)*(char *)((int)param_2 + 5);
          if (uVar6 < *(ushort *)(iVar4 + 0xca)) {
            iVar4 = *(int *)(iVar4 + 0xd0);
            goto LAB_0001d250;
          }
        }
        else if ((*(char *)(param_2 + 1) == '\x02') &&
                (uVar6 = (uint)*(char *)((int)param_2 + 5), uVar6 < *(ushort *)(iVar4 + 200))) {
          iVar4 = *(int *)(iVar4 + 0xcc);
LAB_0001d250:
          return uVar6 * 0x24 + iVar4;
        }
        isp_printf(2,"Can\'t find the matched pad!\n");
        return 0;
      }
    }
    piVar8 = piVar8 + 1;
    if (piVar8 == (int *)(param_1 + 0x78)) {
      return 0;
    }
    iVar4 = *piVar8;
  } while( true );
}



int isp_subdev_release_clks(int param_1)

{
  int *puVar1;
  unsigned int uVar2;
  int *puVar3;
  
  puVar1 = *(int **)(param_1 + 0xbc);
  if (puVar1 != (int *)0x0) {
    puVar3 = puVar1;
    for (uVar2 = 0; uVar2 < *(unsigned int *)(param_1 + 0xc0); uVar2 = uVar2 + 1) {
      private_clk_put(*puVar3);
      puVar3 = puVar3 + 1;
    }
    private_kfree(puVar1);
    *(int *)(param_1 + 0xbc) = 0;
  }
  return 0;
}



unsigned int isp_subdev_init_clks(int param_1,int *param_2)

{
  unsigned int *__s;
  unsigned int uVar1;
  int iVar2;
  unsigned int *puVar3;
  int iVar4;
  
  iVar4 = *(int *)(param_1 + 0xc0);
  if (iVar4 == 0) {
    *(int *)(param_1 + 0xbc) = 0;
  }
  else {
    __s = (unsigned int *)private_kmalloc(iVar4 << 2,0xd0);
    if (__s == (unsigned int *)0x0) {
      isp_printf(2,"%s[%d] Failed to allocate core\'s clks\n","isp_subdev_init_clks",0x6b3);
      return 0xfffffff4;
    }
    memset(__s,0,iVar4 << 2);
    iVar2 = 0;
    puVar3 = __s;
    do {
      uVar1 = private_clk_get(*(int *)(param_1 + 4),*param_2);
      *puVar3 = uVar1;
      if (0xfffff000 < uVar1) {
        isp_printf(2,"Failed to get %s clock %ld\n",*param_2,uVar1);
        uVar1 = *puVar3;
LAB_0001d404:
        for (puVar3 = __s + iVar2; __s != puVar3; puVar3 = puVar3 + -1) {
          private_clk_put(puVar3[-1]);
        }
        private_kfree(__s);
        return uVar1;
      }
      if ((param_2[1] != 0xffff) && (uVar1 = private_clk_set_rate(uVar1), uVar1 != 0)) {
        isp_printf(2,"Failed to set %s clock rate(%ld)\n",*param_2,param_2[1]);
        goto LAB_0001d404;
      }
      iVar2 = iVar2 + 1;
      param_2 = param_2 + 2;
      puVar3 = puVar3 + 1;
    } while (iVar2 != iVar4);
    *(unsigned int **)(param_1 + 0xbc) = __s;
  }
  return 0;
}



void tx_isp_unregister_platforms(int *param_1)

{
  int iVar1;
  int *piVar2;
  
  iVar1 = param_1[1];
  piVar2 = param_1;
  while( true ) {
    if (iVar1 == 0) {
      iVar1 = *piVar2;
    }
    else {
      (**(code **)(iVar1 + 4))(*piVar2);
      iVar1 = *piVar2;
    }
    if (iVar1 != 0) {
      private_platform_device_unregister();
    }
    if (piVar2 + 2 == param_1 + 0x20) break;
    iVar1 = piVar2[3];
    piVar2 = piVar2 + 2;
  }
  return;
}



void tx_isp_exit(void)

{
  private_platform_driver_unregister(tx_isp_driver);
                    // WARNING: Could not recover jumptable at 0x000190d8. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(pfaces + 0x18))(tx_isp_platform_device);
  return;
}



int subdev_video_destroy_link(int *param_1)

{
  int *puVar1;
  int iVar2;
  int iVar3;
  
  if (param_1[3] != 0) {
    iVar3 = *param_1;
    puVar1 = (int *)param_1[2];
    iVar2 = param_1[1];
    *param_1 = 0;
    param_1[1] = 0;
    param_1[2] = 0;
    param_1[3] = 0;
    *(char *)(iVar3 + 7) = 2;
    if (puVar1 != (int *)0x0) {
      *puVar1 = 0;
      puVar1[1] = 0;
      puVar1[2] = 0;
      puVar1[3] = 0;
    }
    if (iVar2 != 0) {
      *(char *)(iVar2 + 7) = 2;
    }
  }
  return 0;
}



int tx_isp_video_link_destroy_isra_5(int param_1)

{
  int iVar1;
  int iVar2;
  code *pcVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  
  iVar1 = 0;
  if (-1 < *(int *)(param_1 + 0x118)) {
    iVar1 = *(int *)(param_1 + 0x118) * 8;
    iVar6 = *(int *)(configs + iVar1 + 4);
    iVar4 = *(int *)(configs + iVar1);
    iVar5 = 0;
    do {
      while( true ) {
        if (iVar6 <= iVar5) {
          *(int *)(param_1 + 0x118) = 0xffffffff;
          return 0;
        }
        iVar1 = find_subdev_link_pad(param_1,iVar4);
        iVar2 = find_subdev_link_pad(param_1,iVar4 + 8);
        if ((iVar1 != 0) && (pcVar3 = subdev_video_destroy_link, iVar2 != 0)) break;
LAB_0001d66c:
        iVar4 = iVar4 + 0x14;
        iVar5 = iVar5 + 1;
      }
      subdev_video_destroy_link(iVar1 + 8);
      iVar1 = (*pcVar3)(iVar2 + 8);
      if (iVar1 == 0) goto LAB_0001d66c;
      iVar4 = iVar4 + 0x14;
      iVar5 = iVar5 + 1;
    } while (iVar1 == -0x203);
  }
  return iVar1;
}



int tx_isp_release(int param_1,int param_2)

{
  int iVar1;
  code *pcVar2;
  int iVar3;
  int iVar4;
  int *piVar5;
  
  iVar4 = *(int *)(param_2 + 0x70);
  piVar5 = (int *)(iVar4 + 0x2c);
  if (*(int *)(iVar4 + 0x108) != 0) {
    *(int *)(iVar4 + 0x108) = *(int *)(iVar4 + 0x108) + -1;
    return 0;
  }
  iVar1 = 0;
  iVar3 = *piVar5;
  do {
    if (iVar3 != 0) {
      iVar1 = *(int *)(*(int *)(iVar3 + 0xc4) + 0x10);
      if ((iVar1 != 0) && (pcVar2 = *(code **)(iVar1 + 4), pcVar2 != (code *)0x0)) {
        iVar1 = (*pcVar2)();
        if (iVar1 == 0) goto LAB_0001d77c;
        if (iVar1 != -0x203) {
          return iVar1;
        }
      }
      iVar1 = -0x203;
    }
LAB_0001d77c:
    piVar5 = piVar5 + 1;
    if (piVar5 == (int *)(iVar4 + 0x6c)) {
      if (iVar1 == -0x203) {
        iVar1 = *(int *)(iVar4 + 0x10c);
      }
      else {
        if (iVar1 != 0) {
          return iVar1;
        }
        iVar1 = *(int *)(iVar4 + 0x10c);
      }
      if (iVar1 < 0) {
        return 0;
      }
      tx_isp_video_link_destroy_isra_5(iVar4 + -0xc);
      return 0;
    }
    iVar3 = *piVar5;
  } while( true );
}



int tx_isp_init(void)

{
  int iVar1;
  char *pcVar2;
  
  iVar1 = private_driver_get_interface();
  if (iVar1 == 0) {
    iVar1 = private_platform_device_register(tx_isp_platform_device);
    if (iVar1 == 0) {
      iVar1 = private_platform_driver_register(tx_isp_driver);
      if (iVar1 == 0) {
        return 0;
      }
      private_platform_device_unregister(tx_isp_platform_device);
      return iVar1;
    }
    pcVar2 = "Failed to insmod isp driver!!!\n";
  }
  else {
    pcVar2 = "Failed to insmod isp driver!\n";
  }
  isp_printf(1,pcVar2);
  return iVar1;
}



int tx_isp_get_ae_algo_handle_isra_16(int param_1,int param_2)

{
  short uVar1;
  void *pvVar2;
  int iVar3;
  int uVar4;
  int iVar5;
  char auStack_b0 [4];
  int local_ac;
  int local_a8;
  int local_a4;
  int local_a0;
  int local_68;
  int local_64;
  int local_4c;
  int local_44;
  
  iVar5 = *(int *)(param_1 + 0xd4);
  private_wait_for_completion_interruptible(&ae_algo_comp);
  memset((void *)(ae_info_mine + 8),0,2000);
  tisp_g_ae_zone(ae_info_mine + 8);
  tisp_g_ae_hist(ae_statis_mine);
  memcpy((void *)(ae_info_mine + 0x38c),ae_statis_mine,0x400);
  iVar3 = ae_info_mine;
  pvVar2 = ae_statis_mine;
  *(char *)(ae_info_mine + 0x78c) = (char)*(int *)((int)ae_statis_mine + 0x414);
  *(char *)(iVar3 + 0x78d) = (char)*(int *)((int)pvVar2 + 0x418);
  *(char *)(iVar3 + 0x78e) = (char)*(int *)((int)pvVar2 + 0x41c);
  *(char *)(iVar3 + 0x78f) = (char)*(int *)((int)pvVar2 + 0x420);
  uVar1 = *(short *)((int)pvVar2 + 0x400);
  *(char *)(iVar3 + 0x790) = (char)uVar1;
  *(char *)(iVar3 + 0x791) = (char)((ushort)uVar1 >> 8);
  uVar1 = *(short *)((int)pvVar2 + 0x404);
  *(char *)(iVar3 + 0x792) = (char)uVar1;
  *(char *)(iVar3 + 0x793) = (char)((ushort)uVar1 >> 8);
  uVar1 = *(short *)((int)pvVar2 + 0x408);
  *(char *)(iVar3 + 0x794) = (char)uVar1;
  *(char *)(iVar3 + 0x795) = (char)((ushort)uVar1 >> 8);
  uVar1 = *(short *)((int)pvVar2 + 0x40c);
  *(char *)(iVar3 + 0x796) = (char)uVar1;
  *(char *)(iVar3 + 0x797) = (char)((ushort)uVar1 >> 8);
  uVar1 = *(short *)((int)pvVar2 + 0x410);
  *(char *)(iVar3 + 0x798) = (char)uVar1;
  *(char *)(iVar3 + 0x799) = (char)((ushort)uVar1 >> 8);
  *(char *)(iVar3 + 0x79a) = (char)*(int *)((int)pvVar2 + 0x424);
  *(char *)(iVar3 + 0x79b) = (char)*(int *)((int)pvVar2 + 0x428);
  tisp_get_ae_attr(auStack_b0);
  iVar3 = ae_info_mine;
  *(int *)(ae_info_mine + 0x7a0) = local_a4;
  *(int *)(iVar3 + 0x7a4) = local_ac;
  *(int *)(iVar3 + 0x7a8) = local_a8;
  *(int *)(iVar3 + 0x7ac) = local_a0;
  *(int *)(iVar3 + 0x7b0) = local_64;
  *(int *)(iVar3 + 0x7b4) = local_68;
  *(int *)(iVar3 + 0x7b8) = local_4c;
  *(int *)(iVar3 + 0x7bc) = local_44;
  *(int *)(iVar3 + 0x7c0) = *(int *)(iVar5 + 0x17c);
  *(unsigned int *)(iVar3 + 0x7c4) = (uint)*(ushort *)(*(int *)(iVar5 + 0x120) + 0xb0);
  *(unsigned int *)(iVar3 + 0x7c8) = (uint)*(ushort *)(*(int *)(iVar5 + 0x120) + 0xb2);
  *(int *)(iVar3 + 0x7cc) = *(int *)(iVar5 + 300);
  *(int *)(iVar3 + 2000) = *(int *)(iVar5 + 0x124);
  *(int *)(iVar3 + 0x7d4) = *(int *)(iVar5 + 0x128);
  iVar3 = private_copy_to_user(param_2,iVar3,0x7d8);
  uVar4 = 0;
  if (iVar3 != 0) {
    isp_printf(2,"[ %s:%d ] copy to user error\n","tx_isp_get_ae_algo_handle",0x425);
    uVar4 = 0xfffffff2;
  }
  return uVar4;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tx_isp_unlocked_ioctl(int param_1,unsigned int param_2,int param_3)

{
  char cVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  code *pcVar5;
  int *piVar6;
  int uVar7;
  char *pcVar8;
  char *pcVar9;
  int uVar10;
  int iVar11;
  int iVar12;
  unsigned int uVar13;
  unsigned int uVar14;
  int iVar15;
  int iVar16;
  int iVar17;
  unsigned int uVar18;
  unsigned int uVar19;
  unsigned int uVar20;
  unsigned int local_98 [4];
  int local_88;
  int local_84;
  int local_80;
  int local_74;
  int local_70;
  int local_6c;
  int local_68;
  int local_64;
  unsigned int *local_48;
  int local_44;
  int local_40;
  int local_3c;
  int local_38;
  int local_34;
  int local_30;
  code *local_2c;
  
  iVar17 = *(int *)(param_1 + 0x70);
  if (param_2 == 0x800856d7) {
    iVar17 = *(int *)(*(int *)(iVar17 + 0x2c) + 0xd4);
    local_98[0] = 0;
    local_98[1] = 0;
    iVar16 = *(int *)(*(int *)(iVar17 + 0x120) + 0x90);
    if (iVar16 == 1) {
      local_98[1] = *(int *)(iVar17 + 0x124) * *(int *)(iVar17 + 0x128) * 2;
    }
    else if (iVar16 == 2) {
      local_98[1] = *(int *)(*(int *)(iVar17 + 0x120) + 0xe8);
    }
    else {
      isp_printf(1,"Not the wdr mode, do not need to alloc buf!!!\n");
    }
    iVar17 = local_98[1];
    isp_printf(0,"%s:%d::tsize is %d\n","tx_isp_wdr_get_buf",0x359,local_98[1]);
    iVar16 = private_copy_to_user(param_3,local_98,8);
    if (iVar16 != 0) {
      isp_printf(2,"[%s][%d] copy from user error\n","tx_isp_wdr_get_buf",0x35b,iVar17);
      return -0xe;
    }
    return 0;
  }
  if (0x800856d7 < param_2) {
    if (param_2 == 0xc00456e2) {
      iVar17 = private_copy_from_user(local_98,param_3,0x18);
      if (iVar17 == 0) {
        if (local_98[2] != 1) {
          return 0;
        }
        pcVar5 = tisp_awb_algo_handle;
LAB_0001f074:
        (*pcVar5)(local_98);
        return 0;
      }
      uVar10 = 0x4bd;
      pcVar9 = "tx_isp_set_awb_algo_handle";
    }
    else {
      if (param_2 < 0xc00456e3) {
        if (param_2 == 0xc0045627) {
          iVar16 = private_copy_from_user(local_98,param_3,4);
          piVar6 = (int *)(iVar17 + 0x2c);
          if (iVar16 == 0) {
            iVar16 = *piVar6;
            while( true ) {
              if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0))
              {
                pcVar5 = *(code **)(iVar11 + 8);
                if ((pcVar5 != (code *)0x0) &&
                   ((iVar16 = (*pcVar5)(iVar16,0x2000004,local_98), iVar16 != 0 &&
                    (iVar16 != -0x203)))) {
                  return iVar16;
                }
              }
              piVar6 = piVar6 + 1;
              if (piVar6 == (int *)(iVar17 + 0x6c)) break;
              iVar16 = *piVar6;
            }
            iVar17 = private_copy_to_user(param_3,local_98,4);
            if (iVar17 == 0) {
              return 0;
            }
            uVar10 = 0x196;
            pcVar9 = "tx_isp_sensor_set_input";
LAB_0001ddd4:
            pcVar8 = "[%s][%d] copy to user error\n";
            goto LAB_0001dddc;
          }
          uVar10 = 0x188;
          pcVar9 = "tx_isp_sensor_set_input";
        }
        else {
          if (0xc0045627 < param_2) {
            if (param_2 == 0xc00456c8) {
              sprintf((char *)local_98,(char *)(*(int *)(*(int *)(iVar17 + 0x2c) + 0xd4) + 0x1d8));
              iVar17 = private_copy_to_user(param_3,local_98,0x40);
              if (iVar17 == 0) {
                return 0;
              }
              uVar10 = 0x51e;
              pcVar9 = "tx_isp_get_default_bin_path";
            }
            else {
              if (param_2 != 0xc00456e1) {
                if (param_2 != 0xc00456c7) {
                  return 0;
                }
                iVar16 = private_copy_from_user(local_98,param_3,0x40);
                if (iVar16 == 0) {
                  memcpy((void *)(*(int *)(*(int *)(iVar17 + 0x2c) + 0xd4) + 0x1d8),local_98,0x40);
                  return 0;
                }
                uVar10 = 0x502;
                pcVar9 = "tx_isp_set_default_bin_path";
                goto LAB_0001f218;
              }
              private_wait_for_completion_interruptible(&awb_algo_comp);
              memset(awb_info_mine + 2,0,699);
              tisp_g_wb_zone(awb_info_mine + 8);
              tisp_g_wb_attr(local_98);
              piVar6 = awb_info_mine;
              awb_info_mine[4] = local_98[3];
              piVar6[5] = local_88;
              piVar6[6] = local_84;
              piVar6[7] = local_80;
              piVar6[2] = local_98[1];
              piVar6[3] = local_98[2];
              iVar17 = private_copy_to_user(param_3,piVar6,0x2c3);
              if (iVar17 == 0) {
                return 0;
              }
              uVar10 = 0x4b1;
              pcVar9 = "tx_isp_get_awb_algo_handle";
            }
            goto LAB_0001f2bc;
          }
          if (param_2 == 0x805056c1) {
            iVar16 = private_copy_from_user(local_98,param_3,0x50);
            piVar6 = (int *)(iVar17 + 0x2c);
            if (iVar16 == 0) {
              do {
                iVar16 = *piVar6;
                if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0)
                   ) {
                  pcVar5 = *(code **)(iVar11 + 8);
                  if ((pcVar5 != (code *)0x0) &&
                     ((iVar16 = (*pcVar5)(iVar16,0x2000000,local_98), iVar16 != 0 &&
                      (iVar16 != -0x203)))) {
                    return iVar16;
                  }
                }
                piVar6 = piVar6 + 1;
                if ((int *)(iVar17 + 0x6c) == piVar6) {
                  return 0;
                }
              } while( true );
            }
            uVar10 = 0x1a6;
            pcVar9 = "tx_isp_sensor_register_sensor";
          }
          else if (param_2 == 0x805056c2) {
            iVar16 = private_copy_from_user(local_98,param_3,0x50);
            piVar6 = (int *)(iVar17 + 0x2c);
            if (iVar16 == 0) {
              iVar16 = *piVar6;
              do {
                if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0)
                   ) {
                  pcVar5 = *(code **)(iVar11 + 8);
                  if ((pcVar5 != (code *)0x0) &&
                     ((iVar16 = (*pcVar5)(iVar16,0x2000001,local_98), iVar16 != 0 &&
                      (iVar16 != -0x203)))) {
                    return iVar16;
                  }
                }
                piVar6 = piVar6 + 1;
                if ((int *)(iVar17 + 0x6c) == piVar6) {
                  return 0;
                }
                iVar16 = *piVar6;
              } while( true );
            }
            uVar10 = 0x1c0;
            pcVar9 = "tx_isp_sensor_release_sensor";
          }
          else {
            if (param_2 != 0x8038564f) {
              return 0;
            }
            iVar16 = private_copy_from_user(local_98,param_3,0x38);
            if (iVar16 == 0) {
              local_3c = local_6c;
              local_40 = local_70;
              local_38 = local_68;
              local_34 = local_64;
              piVar6 = (int *)(iVar17 + 0x2c);
              iVar16 = *piVar6;
              local_48 = local_98 + 1;
              do {
                if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0)
                   ) {
                  pcVar5 = *(code **)(iVar11 + 8);
                  if ((pcVar5 != (code *)0x0) &&
                     ((iVar16 = (*pcVar5)(iVar16,0x2000011,&local_48), iVar16 != 0 &&
                      (iVar16 != -0x203)))) {
                    return iVar16;
                  }
                }
                piVar6 = piVar6 + 1;
                if ((int *)(iVar17 + 0x6c) == piVar6) {
                  return 0;
                }
                iVar16 = *piVar6;
              } while( true );
            }
            uVar10 = 0x213;
            pcVar9 = "tx_isp_sensor_s_register";
          }
        }
        goto LAB_0001dea8;
      }
      if (param_2 == 0xc00456e7) {
        iVar17 = 0;
        do {
          iVar16 = tisp_get_frame_drop(iVar17,local_98 + iVar17 * 3);
          iVar17 = iVar17 + 1;
        } while (iVar17 != 3);
        iVar17 = private_copy_to_user(param_3,local_98,0x24);
        if (iVar17 == 0) {
          return iVar16;
        }
        uVar10 = 0x53e;
        pcVar9 = "tx_isp_get_frame_drop";
LAB_0001f2bc:
        pcVar8 = "[ %s:%d ] copy to user error\n";
        goto LAB_0001dddc;
      }
      if (0xc00456e7 < param_2) {
        if (param_2 == 0xc00456e9) {
          iVar16 = *(int *)(iVar17 + 0x2c);
          iVar17 = private_copy_from_user(local_98,param_3,0x2a);
          if (iVar17 == 0) {
            if (iVar16 == 0) {
              return -2;
            }
            pcVar5 = *(code **)(iVar16 + 0x7c);
            if (pcVar5 == (code *)0x0) {
              return -0x203;
            }
            uVar10 = 0x2000018;
LAB_0001eb70:
            iVar17 = (*pcVar5)(iVar16,uVar10,local_98);
            return iVar17;
          }
          uVar10 = 0x3d0;
          pcVar9 = "tx_isp_set_gpio_sta";
        }
        else if (param_2 < 0xc00456e9) {
          iVar16 = *(int *)(iVar17 + 0x2c);
          iVar17 = private_copy_from_user(local_98,param_3,0x2a);
          if (iVar17 == 0) {
            if (iVar16 == 0) {
              return -2;
            }
            pcVar5 = *(code **)(iVar16 + 0x7c);
            if (pcVar5 == (code *)0x0) {
              return -0x203;
            }
            uVar10 = 0x2000017;
            goto LAB_0001eb70;
          }
          uVar10 = 0x3be;
          pcVar9 = "tx_isp_set_gpio_init";
        }
        else if (param_2 == 0xc0385650) {
          iVar16 = private_copy_from_user(local_98,param_3,0x38);
          uVar10 = 0x232;
          if (iVar16 == 0) {
            local_48 = local_98 + 1;
            local_40 = local_70;
            local_3c = local_6c;
            piVar6 = (int *)(iVar17 + 0x2c);
            iVar16 = *piVar6;
            while( true ) {
              if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0))
              {
                pcVar5 = *(code **)(iVar11 + 8);
                if ((pcVar5 != (code *)0x0) &&
                   ((iVar16 = (*pcVar5)(iVar16,0x2000012,&local_48), iVar16 != 0 &&
                    (iVar16 != -0x203)))) {
                  return iVar16;
                }
              }
              piVar6 = piVar6 + 1;
              if (piVar6 == (int *)(iVar17 + 0x6c)) break;
              iVar16 = *piVar6;
            }
            local_68 = local_38;
            local_74 = local_44;
            local_64 = local_34;
            iVar17 = private_copy_to_user(param_3,local_98,0x38);
            if (iVar17 == 0) {
              return 0;
            }
            uVar10 = 0x244;
          }
          pcVar9 = "tx_isp_sensor_g_register";
        }
        else {
          if (param_2 != 0xc050561a) {
            return 0;
          }
          iVar16 = private_copy_from_user(local_98,param_3,0x50);
          piVar6 = (int *)(iVar17 + 0x2c);
          if (iVar16 == 0) {
            iVar16 = *piVar6;
            while( true ) {
              if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0))
              {
                pcVar5 = *(code **)(iVar11 + 8);
                if ((pcVar5 != (code *)0x0) &&
                   ((iVar16 = (*pcVar5)(iVar16,0x2000002,local_98), iVar16 != 0 &&
                    (iVar16 != -0x203)))) {
                  return iVar16;
                }
              }
              piVar6 = piVar6 + 1;
              if ((int *)(iVar17 + 0x6c) == piVar6) break;
              iVar16 = *piVar6;
            }
            iVar17 = private_copy_to_user(param_3,local_98,0x50);
            if (iVar17 == 0) {
              return 0;
            }
            uVar10 = 0x15f;
            pcVar9 = "tx_isp_sensor_enum_input";
            goto LAB_0001ddd4;
          }
          uVar10 = 0x151;
          pcVar9 = "tx_isp_sensor_enum_input";
        }
        goto LAB_0001dea8;
      }
      if (param_2 == 0xc00456e4) {
        iVar17 = private_copy_from_user(local_98,param_3,8);
        if (iVar17 == 0) {
          tisp_awb_algo_deinit();
          tisp_awb_algo_init(0);
          piVar6 = awb_info_mine;
          goto LAB_0001f13c;
        }
        uVar10 = 0x4e0;
        pcVar9 = "tx_isp_set_awb_algo_close";
      }
      else {
        if (param_2 < 0xc00456e4) {
          tisp_awb_algo_init(1);
          awb_info_mine = (int *)kmem_cache_alloc(_DAT_000da0c0,0xd0);
          awb_algo_comp = 0;
          __init_waitqueue_head(&DAT_000b2478,"&x->wait",0x10000);
          return 0;
        }
        if (param_2 != 0xc00456e6) {
          return 0;
        }
        iVar17 = private_copy_from_user(local_98,param_3,0x24);
        iVar16 = 0;
        if (iVar17 == 0) {
          do {
            iVar17 = tisp_set_frame_drop(iVar16,local_98 + iVar16 * 3);
            iVar16 = iVar16 + 1;
          } while (iVar16 != 3);
          return iVar17;
        }
        uVar10 = 0x52c;
        pcVar9 = "tx_isp_set_frame_drop";
      }
    }
    goto LAB_0001f218;
  }
  if (param_2 == 0x800456d8) {
    iVar17 = *(int *)(iVar17 + 0x2c);
    local_98[0] = 1;
    iVar16 = *(int *)(iVar17 + 0xd4);
    if (*(int *)(iVar16 + 0x17c) != 1) {
      *(int *)(iVar16 + 0x17c) = 1;
      if (wdr_switch != 0) {
        if ((iVar17 != 0) && (*(code **)(iVar17 + 0x7c) != (code *)0x0)) {
          (**(code **)(iVar17 + 0x7c))(iVar17,0x2000013,local_98);
        }
        tisp_s_wdr_en(local_98[0]);
        if (iVar17 == 0) {
          iVar17 = *(int *)(iVar16 + 0x120);
        }
        else {
          if (*(code **)(iVar17 + 0x7c) != (code *)0x0) {
            (**(code **)(iVar17 + 0x7c))(iVar17,0x200000c,local_98);
          }
          iVar17 = *(int *)(iVar16 + 0x120);
        }
        *(int *)(iVar17 + 0xac) = 0;
        *(int *)(iVar17 + 0xdc) = 0;
        *(int *)(iVar17 + 0x9c) = 0;
        *(int *)(iVar17 + 0xe4) = 0;
        *(int *)(iVar17 + 0xa0) = 0;
      }
      wdr_switch = 1;
    }
    return 0;
  }
  if (param_2 < 0x800456d9) {
    iVar16 = iVar17 + -0xc;
    if (param_2 != 0x800456d0) {
      if (0x800456d0 < param_2) {
        if (param_2 == 0x800456d2) {
          param_3 = 1;
        }
        else {
          if (param_2 < 0x800456d2) {
            iVar17 = tx_isp_video_link_destroy_isra_5(iVar16);
            return iVar17;
          }
          param_3 = 0;
          if (param_2 != 0x800456d3) {
            return 0;
          }
        }
        pcVar5 = tx_isp_video_link_stream;
        goto LAB_0001e080;
      }
      if (param_2 == 0x80045612) {
        param_3 = 1;
      }
      else {
        if (param_2 != 0x80045613) {
          if (param_2 != 0x40045626) {
            return 0;
          }
          piVar6 = (int *)(iVar17 + 0x2c);
          do {
            iVar16 = *piVar6;
            if ((iVar16 != 0) && (iVar11 = *(int *)(*(int *)(iVar16 + 0xc4) + 0xc), iVar11 != 0)) {
              pcVar5 = *(code **)(iVar11 + 8);
              if ((pcVar5 != (code *)0x0) &&
                 ((iVar16 = (*pcVar5)(iVar16,0x2000003,local_98), iVar16 != 0 && (iVar16 != -0x203))
                 )) {
                return iVar16;
              }
            }
            piVar6 = piVar6 + 1;
          } while ((int *)(iVar17 + 0x6c) != piVar6);
          iVar17 = private_copy_to_user(param_3,local_98,4);
          if (iVar17 == 0) {
            return 0;
          }
          uVar10 = 0x179;
          pcVar9 = "tx_isp_sensor_get_input";
          goto LAB_0001ddd4;
        }
        param_3 = 0;
      }
      pcVar5 = tx_isp_video_s_stream;
LAB_0001e080:
      iVar17 = (*pcVar5)(iVar16,param_3);
      return iVar17;
    }
    iVar11 = private_copy_from_user(local_98,param_3,4);
    if (iVar11 == 0) {
      if (1 < local_98[0]) {
        isp_printf(2,"link(%d) is invalid!\n");
        return -0x16;
      }
      if (local_98[0] == *(unsigned int *)(iVar17 + 0x10c)) {
        return 0;
      }
      local_30 = *(int *)(configs + local_98[0] * 8 + 4);
      iVar11 = *(int *)(configs + local_98[0] * 8);
      iVar15 = 0;
      do {
        if (local_30 <= iVar15) {
          *(unsigned int *)(iVar17 + 0x10c) = local_98[0];
          return 0;
        }
        local_2c = find_subdev_link_pad;
        iVar2 = find_subdev_link_pad(iVar16,iVar11);
        iVar3 = (*local_2c)(iVar16,iVar11 + 8);
        if ((iVar2 != 0) && (iVar3 != 0)) {
          uVar13 = *(unsigned int *)(iVar11 + 0x10);
          if (((*(char *)(iVar2 + 6) & *(char *)(iVar3 + 6)) & uVar13) == 0) {
            isp_printf(2,"The link type is mismatch!\n");
            return -1;
          }
          if ((*(char *)(iVar2 + 7) == '\x04') || (*(char *)(iVar3 + 7) == '\x04')) {
            isp_printf(2,"Please stop active links firstly! %d\n",0xd9);
            return -1;
          }
          if ((*(char *)(iVar2 + 7) == '\x03') && (iVar3 != *(int *)(iVar2 + 0xc))) {
            iVar4 = subdev_video_destroy_link(iVar2 + 8);
            if (iVar4 == 0) {
              cVar1 = *(char *)(iVar3 + 7);
              goto LAB_0001e1e4;
            }
          }
          else {
            cVar1 = *(char *)(iVar3 + 7);
LAB_0001e1e4:
            iVar12 = iVar3 + 8;
            if (((cVar1 != '\x03') || (iVar2 == *(int *)(iVar3 + 0xc))) ||
               (iVar4 = subdev_video_destroy_link(iVar12), iVar4 == 0)) {
              *(int *)(iVar2 + 8) = iVar2;
              *(int *)(iVar2 + 0xc) = iVar3;
              *(int *)(iVar2 + 0x10) = iVar12;
              *(unsigned int *)(iVar2 + 0x14) = uVar13 | 1;
              *(char *)(iVar2 + 7) = 3;
              *(int *)(iVar3 + 8) = iVar3;
              *(int *)(iVar3 + 0xc) = iVar2;
              *(int *)(iVar3 + 0x10) = iVar2 + 8;
              *(unsigned int *)(iVar3 + 0x14) = uVar13 | 1;
              *(char *)(iVar3 + 7) = 3;
              goto LAB_0001e278;
            }
          }
          if (iVar4 != -0x203) {
            return iVar4;
          }
        }
LAB_0001e278:
        iVar15 = iVar15 + 1;
        iVar11 = iVar11 + 0x14;
      } while( true );
    }
    uVar10 = 0x108;
    pcVar9 = "tx_isp_video_link_setup";
    goto LAB_0001dea8;
  }
  if (param_2 == 0x800456dd) {
    piVar6 = (int *)kmem_cache_alloc(_DAT_000da0b4,0xd0);
    iVar16 = *(int *)(*(int *)(iVar17 + 0x2c) + 0xd4);
    iVar17 = private_copy_from_user(piVar6,param_3,0x80);
    if (iVar17 == 0) {
      if (*piVar6 != 0x336ac) {
        isp_printf(2,"[ %s:%d ] Ae Algo Function register version error\n","tx_isp_set_ae_algo_open"
                   ,0x452);
        return -1;
      }
      iVar11 = *(int *)(iVar16 + 0x120);
      tisp_ae_algo_init(1,piVar6);
      piVar6[0x1b] = *(int *)(iVar16 + 300);
      piVar6[3] = *(int *)(iVar11 + 0xac);
      iVar17 = private_math_exp2(*(int *)(iVar11 + 0x9c),0x10,10);
      piVar6[4] = iVar17;
      piVar6[5] = 0x400;
      piVar6[0xf] = *(int *)(iVar11 + 0xdc);
      iVar17 = private_math_exp2(*(int *)(iVar11 + 0xe4),0x10,10);
      piVar6[0x10] = iVar17;
      piVar6[0x11] = 0x400;
      if (*(int *)(iVar16 + 0x17c) == 0) {
        uVar13 = system_reg_read(0x1030);
        piVar6[6] = uVar13 & 0xffff;
      }
      else {
        uVar13 = system_reg_read(0x1000);
        piVar6[6] = uVar13 & 0xffff;
        uVar13 = system_reg_read(0x100c);
        piVar6[0x12] = uVar13 & 0xffff;
      }
      ae_info_mine = kmem_cache_alloc(_DAT_000da0c4,0xd0);
      ae_statis_mine = kmem_cache_alloc(_DAT_000da0c4,0xd0);
      ae_algo_comp = 0;
      __init_waitqueue_head(&DAT_000b2484,"&x->wait",0x10000);
      iVar17 = private_copy_to_user(param_3,piVar6,0x80);
      if (iVar17 == 0) {
LAB_0001f13c:
        private_kfree(piVar6);
        return 0;
      }
      uVar10 = 0x46f;
      pcVar9 = "tx_isp_set_ae_algo_open";
      goto LAB_0001f2bc;
    }
    uVar10 = 0x44d;
    pcVar9 = "tx_isp_set_ae_algo_open";
LAB_0001f218:
    pcVar8 = "[ %s:%d ] copy from user error\n";
  }
  else {
    if (param_2 < 0x800456de) {
      if (param_2 == 0x800456db) {
        iVar16 = *(int *)(iVar17 + 0x2c);
        pcVar5 = tx_isp_get_ae_algo_handle_isra_16;
        goto LAB_0001e080;
      }
      if (param_2 < 0x800456dc) {
        if (param_2 != 0x800456d9) {
          return 0;
        }
        iVar16 = *(int *)(iVar17 + 0x2c);
        local_98[0] = 0;
        iVar17 = *(int *)(iVar16 + 0xd4);
        if (*(int *)(iVar17 + 0x17c) == 0) {
          return 0;
        }
        iVar11 = *(int *)(iVar17 + 0x120);
        *(int *)(iVar17 + 0x17c) = 0;
        if (wdr_switch != 0) {
          if ((iVar16 != 0) && (*(code **)(iVar16 + 0x7c) != (code *)0x0)) {
            (**(code **)(iVar16 + 0x7c))(iVar16,0x2000013,local_98);
          }
          tisp_s_wdr_en(local_98[0]);
          if (iVar16 == 0) {
            *(int *)(iVar11 + 0xac) = 0;
          }
          else {
            if (*(code **)(iVar16 + 0x7c) != (code *)0x0) {
              (**(code **)(iVar16 + 0x7c))(iVar16,0x200000c,local_98);
            }
            *(int *)(iVar11 + 0xac) = 0;
          }
          *(int *)(iVar11 + 0xdc) = 0;
          *(int *)(iVar11 + 0x9c) = 0;
          *(int *)(iVar11 + 0xe4) = 0;
          *(int *)(iVar11 + 0xa0) = 0;
        }
        wdr_switch = 1;
        return 0;
      }
      iVar17 = private_copy_from_user(local_98,param_3,0x38);
      if (iVar17 == 0) {
        if (local_98[2] != 1) {
          return 0;
        }
        pcVar5 = tisp_ae_algo_handle;
        goto LAB_0001f074;
      }
      uVar10 = 0x431;
      pcVar9 = "tx_isp_set_ae_algo_handle";
      goto LAB_0001f218;
    }
    if (param_2 == 0x800856d4) {
      iVar16 = *(int *)(*(int *)(iVar17 + 0x2c) + 0xd4);
      iVar17 = private_copy_from_user(local_98,param_3,8);
      if (iVar17 == 0) {
        uVar14 = *(int *)(iVar16 + 0xec) + 7U & 0xfffffff8;
        uVar13 = uVar14 * *(int *)(iVar16 + 0xf0);
        system_reg_write(0x7820,local_98[0]);
        system_reg_write(0x7824,uVar14);
        uVar10 = 0x270;
        if (uVar13 <= local_98[1]) {
          iVar17 = *(int *)(iVar16 + 0xf0);
          uVar14 = *(int *)(iVar16 + 0xec) + 7U & 0xfffffff8;
          system_reg_write(0x7828,uVar13 + local_98[0]);
          system_reg_write(0x782c,uVar14);
          uVar13 = uVar13 + (uVar14 * iVar17 >> 1);
          uVar10 = 0x27c;
          if (uVar13 <= local_98[1]) {
            iVar17 = *(int *)(iVar16 + 0xf0);
            uVar14 = (*(int *)(iVar16 + 0xec) + 0x1fU >> 5) + 7 & 0xfffffff8;
            system_reg_write(0x7830,uVar13 + local_98[0]);
            system_reg_write(0x7834,uVar14);
            iVar17 = ((iVar17 + 0xfU >> 4) + 1) * uVar14;
            if (isp_memopt == 0) {
              system_reg_write(0x7840,uVar13 + iVar17 + local_98[0]);
              system_reg_write(0x7844,uVar14);
              system_reg_write(0x7848,uVar13 + local_98[0] + iVar17 * 2);
              system_reg_write(0x784c,uVar14);
              system_reg_write(0x7850,uVar13 + local_98[0] + iVar17 * 3);
              system_reg_write(0x7854,uVar14);
              iVar17 = iVar17 * 4;
            }
            else {
              system_reg_write(0x7840,uVar13 + local_98[0]);
              system_reg_write(0x7844,0);
              system_reg_write(0x7848,uVar13 + local_98[0]);
              system_reg_write(0x784c,0);
              system_reg_write(0x7850,uVar13 + local_98[0]);
              system_reg_write(0x7854,0);
            }
            system_reg_write(0x7838,0);
            system_reg_write(0x783c,1);
            uVar13 = uVar13 + iVar17;
            uVar10 = 0x29b;
            if (uVar13 <= local_98[1]) {
              if (isp_memopt == 0) {
                iVar17 = *(int *)(iVar16 + 0xf0);
                uVar14 = (*(unsigned int *)(iVar16 + 0xec) >> 1) + 7 & 0xfffffff8;
                system_reg_write(0x7858,uVar13 + local_98[0]);
                system_reg_write(0x785c,uVar14);
                uVar13 = uVar13 + uVar14 * iVar17;
                uVar10 = 0x2a8;
                if (uVar13 <= local_98[1]) {
                  iVar17 = *(int *)(iVar16 + 0xf0);
                  uVar14 = (*(unsigned int *)(iVar16 + 0xec) >> 1) + 7 & 0xfffffff8;
                  system_reg_write(0x7860,uVar13 + local_98[0]);
                  system_reg_write(0x7864,uVar14);
                  uVar13 = uVar13 + (uVar14 * iVar17 >> 1);
                  uVar10 = 0x2b4;
                  if (uVar13 <= local_98[1]) {
                    iVar17 = *(int *)(iVar16 + 0xf0);
                    uVar14 = (*(unsigned int *)(iVar16 + 0xec) >> 5) + 7 & 0xfffffff8;
                    system_reg_write(0x7868,uVar13 + local_98[0]);
                    system_reg_write(0x786c,uVar14);
                    uVar13 = uVar13 + (uVar14 * iVar17 >> 5);
                    goto LAB_0001e790;
                  }
                }
              }
              else {
                system_reg_write(0x7858);
                system_reg_write(0x785c,0);
                system_reg_write(0x7860,local_98[0]);
                system_reg_write(0x7864,0);
                system_reg_write(0x7868,local_98[0]);
                system_reg_write(0x786c,0);
LAB_0001e790:
                if (uVar13 <= local_98[1]) {
                  return 0;
                }
                uVar10 = 0x2cc;
              }
            }
          }
        }
        pcVar9 = "tx_isp_set_buf";
        pcVar8 = "%s,%d: buf size too small\n";
        uVar7 = 1;
        goto LAB_0001dde0;
      }
      uVar10 = 0x262;
      pcVar9 = "tx_isp_set_buf";
    }
    else {
      if (param_2 < 0x800856d5) {
        if (param_2 != 0x800456de) {
          return 0;
        }
        iVar17 = private_copy_from_user(local_98,param_3,8);
        if (iVar17 == 0) {
          tisp_ae_algo_deinit();
          tisp_ae_algo_init(0,0);
          private_kfree(ae_info_mine);
          private_kfree(ae_statis_mine);
          return 0;
        }
        uVar10 = 0x47d;
        pcVar9 = "tx_isp_set_ae_algo_close";
        goto LAB_0001f218;
      }
      if (param_2 != 0x800856d5) {
        if (param_2 != 0x800856d6) {
          return 0;
        }
        iVar16 = *(int *)(*(int *)(iVar17 + 0x2c) + 0xd4);
        iVar17 = private_copy_from_user(local_98,param_3,8);
        if (iVar17 != 0) {
          isp_printf(2,"[%s][%d] copy from user error\n","tx_isp_wdr_set_buf",0x322);
          return -0xe;
        }
        isp_printf(0,"%s:%d::tsize is %d, buf info size is %d, paddr is 0x%x\n","tx_isp_wdr_set_buf"
                   ,0x326,0,local_98[1],local_98[0]);
        iVar17 = *(int *)(*(int *)(iVar16 + 0x120) + 0x90);
        if (iVar17 == 1) {
          uVar14 = *(unsigned int *)(iVar16 + 0x128);
          uVar13 = uVar14 * *(int *)(iVar16 + 0x124) * 2;
        }
        else {
          if (iVar17 != 2) {
            isp_printf(2,"Not the wdr mode, do not need to alloc buf!!!\n");
            return -1;
          }
          uVar13 = *(unsigned int *)(*(int *)(iVar16 + 0x120) + 0xe8);
          uVar14 = uVar13 / (uint)(*(int *)(iVar16 + 0x124) << 1);
        }
        uVar18 = uVar13;
        uVar19 = local_98[1];
        uVar20 = local_98[0];
        isp_printf(0,"%s:%d::tsize is %d, buf info size is %d, paddr is 0x%x\n","tx_isp_wdr_set_buf"
                   ,0x331,uVar13,local_98[1],local_98[0]);
        if (uVar13 <= local_98[1]) {
          system_reg_write(0x2004,local_98[0]);
          system_reg_write(0x2008,*(int *)(iVar16 + 0x124) << 1);
          system_reg_write(0x200c,uVar14);
          return 0;
        }
        isp_printf(0,"%s,%d: buf size too small\n","tx_isp_wdr_set_buf",0x334,uVar18,uVar19,uVar20);
        *(int *)(iVar16 + 0x17c) = 0;
        tisp_s_wdr_en(0);
        return -0xe;
      }
      iVar17 = *(int *)(*(int *)(iVar17 + 0x2c) + 0xd4);
      uVar13 = *(unsigned int *)(iVar17 + 0xec);
      iVar17 = *(int *)(iVar17 + 0xf0);
      iVar11 = iVar17 * 8;
      uVar14 = (uVar13 + 7 >> 3) * iVar11;
      iVar16 = (uVar14 >> 1) + uVar14;
      iVar17 = ((uVar13 + 0x1f >> 5) + 7 >> 3) * ((iVar17 + 0xfU >> 4) + 1) * 8;
      local_98[1] = iVar16 + iVar17;
      if (isp_memopt == 0) {
        uVar14 = ((uVar13 >> 1) + 7 >> 3) * iVar11;
        local_98[1] = iVar17 * 4 +
                      (((uVar13 >> 5) + 7 >> 3) * iVar11 >> 5) + (uVar14 >> 1) + iVar16 + uVar14;
      }
      local_98[0] = 0;
      iVar17 = private_copy_to_user(param_3,local_98,8);
      if (iVar17 == 0) {
        return 0;
      }
      uVar10 = 0x30a;
      pcVar9 = "tx_isp_get_buf";
    }
LAB_0001dea8:
    pcVar8 = "[%s][%d] copy from user error\n";
  }
LAB_0001dddc:
  uVar7 = 2;
LAB_0001dde0:
  isp_printf(uVar7,pcVar8,pcVar9,uVar10);
  return -0xe;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int private_reset_tx_isp_module(int param_1)

{
  int iVar1;
  
  if (param_1 != 0) {
    return 0;
  }
  _DAT_b00000c4 = _DAT_b00000c4 | 0x200000;
  iVar1 = 500;
  do {
    if ((_DAT_b00000c4 & 0x100000) != 0) {
      _DAT_b00000c4 = _DAT_b00000c4 & 0xff9fffff;
      return 0;
    }
    iVar1 = iVar1 + -1;
    private_msleep(2);
  } while (iVar1 != 0);
  return 0xffffffff;
}



int tx_isp_reg_set(int param_1,int param_2,unsigned int param_3,int param_4,int param_5)

{
  unsigned int uVar1;
  int iVar2;
  unsigned int *puVar3;
  
  uVar1 = 0;
  for (iVar2 = 0; iVar2 < (int)((param_4 - param_3) + 1); iVar2 = iVar2 + 1) {
    uVar1 = uVar1 + (1 << (iVar2 + param_3 & 0x1f));
  }
  puVar3 = (unsigned int *)(*(int *)(param_1 + 0xb8) + param_2);
  *puVar3 = param_5 << (param_3 & 0x1f) | ~uVar1 & *puVar3;
  return 0;
}



int tx_isp_send_event_to_remote(int param_1)

{
  int uVar1;
  code *UNRECOVERED_JUMPTABLE;
  
  if (((param_1 != 0) && (*(int *)(param_1 + 0xc) != 0)) &&
     (UNRECOVERED_JUMPTABLE = *(code **)(*(int *)(param_1 + 0xc) + 0x1c),
     UNRECOVERED_JUMPTABLE != (code *)0x0)) {
                    // WARNING: Could not recover jumptable at 0x0001f44c. Too many branches
                    // WARNING: Treating indirect jump as call
    uVar1 = (*UNRECOVERED_JUMPTABLE)();
    return uVar1;
  }
  return 0xfffffdfd;
}



int tx_isp_module_init(int *param_1,void *param_2)

{
  int uVar1;
  
  if (param_2 == (void *)0x0) {
    isp_printf(2,"%s the parameters are invalid!\n","tx_isp_module_init");
    uVar1 = 0xffffffea;
  }
  else {
    if ((param_1 != (int *)0x0) && ((void *)param_1[0x16] != (void *)0x0)) {
      memcpy(param_2,(void *)param_1[0x16],4);
    }
    *(int *)((int)param_2 + 0x78) = 0;
    memset((void *)((int)param_2 + 0x38),0,0x40);
    *(int *)((int)param_2 + 8) = *param_1;
    *(code **)((int)param_2 + 0x7c) = tx_isp_notify;
    *(int *)((int)param_2 + 0x30) = 0;
    *(int *)((int)param_2 + 0x34) = 0;
    *(int **)((int)param_2 + 4) = param_1 + 4;
    uVar1 = 0;
  }
  return uVar1;
}



void tx_isp_module_deinit(void *param_1)

{
  if (param_1 != (void *)0x0) {
    memset(param_1,0,0x80);
    return;
  }
  return;
}



int tx_isp_subdev_init(int *param_1,int param_2,int param_3)

{
  bool bVar1;
  char cVar2;
  char cVar3;
  char uVar4;
  int iVar5;
  int *piVar6;
  char *pcVar7;
  char *pcVar8;
  int iVar9;
  char cVar10;
  int iVar11;
  char *pcVar12;
  unsigned int uVar13;
  void *__s;
  int *piVar14;
  void *__s_00;
  
  if ((param_1 == (int *)0x0) || (param_2 == 0)) {
    isp_printf(2,"%s the parameters are invalid!\n","tx_isp_subdev_init");
    return -0x16;
  }
  *(int *)(param_2 + 0xc4) = param_3;
  iVar5 = tx_isp_module_init();
  if (iVar5 != 0) {
    isp_printf(2,0x7ffc0,*param_1);
    return -0xc;
  }
  pcVar12 = (char *)param_1[0x16];
  if (pcVar12 == (char *)0x0) {
LAB_0001fa9c:
    iVar5 = 0;
  }
  else {
    iVar5 = tx_isp_request_irq(param_1,param_2 + 0x80);
    if (iVar5 == 0) {
      uVar13 = 0;
      while (uVar13 < (uint)param_1[0x32]) {
        piVar14 = (int *)private_platform_get_resource(param_1,0x200,uVar13);
        if (piVar14 == (int *)0x0) {
          uVar13 = uVar13 + 1;
        }
        else {
          pcVar7 = (char *)piVar14[2];
          cVar2 = *pcVar7;
          pcVar8 = "isp-device";
          do {
            cVar3 = *pcVar8;
            pcVar7 = pcVar7 + 1;
            pcVar8 = pcVar8 + 1;
            cVar10 = cVar2;
            if (cVar3 != cVar2) break;
            bVar1 = cVar2 != '\0';
            cVar2 = *pcVar7;
            cVar10 = cVar3;
          } while (bVar1);
          if (cVar10 == cVar3) {
            iVar5 = param_1[0xf];
            if (iVar5 == 0) {
              iVar5 = param_1[6];
            }
            piVar14 = (int *)private_request_mem_region(*piVar14,(piVar14[1] + 1) - *piVar14,iVar5);
            if (piVar14 == (int *)0x0) {
              isp_printf(2,"%s[%d] Not enough memory for resources\n","tx_isp_subdev_init",0x766);
              iVar5 = -0x10;
              goto LAB_0001f9c8;
            }
            iVar5 = private_ioremap(*piVar14,(piVar14[1] + 1) - *piVar14);
            *(int *)(param_2 + 0xb8) = iVar5;
            if (iVar5 != 0) goto LAB_0001f690;
            isp_printf(2,"%s[%d] Unable to ioremap registers\n","tx_isp_subdev_init",0x76d);
            iVar5 = -6;
            goto LAB_0001f9ac;
          }
          uVar13 = uVar13 + 1;
        }
      }
      piVar14 = (int *)0x0;
LAB_0001f690:
      *(int **)(param_2 + 0xb4) = piVar14;
      if (*pcVar12 == '\x01') {
        *(unsigned int *)(param_2 + 0xc0) = (uint)(char)pcVar12[4];
        iVar5 = isp_subdev_init_clks(param_2,*(int *)(pcVar12 + 8));
        if (iVar5 == 0) {
          for (iVar5 = 0; iVar5 < (int)(uint)(char)pcVar12[0xc]; iVar5 = iVar5 + 1) {
            if (*(char *)(*(int *)(pcVar12 + 0x10) + iVar5 * 2) == '\x02') {
              *(short *)(param_2 + 200) = *(short *)(param_2 + 200) + 1;
            }
            else {
              *(short *)(param_2 + 0xca) = *(short *)(param_2 + 0xca) + 1;
            }
          }
          __s = (void *)0x0;
          if (*(ushort *)(param_2 + 200) == 0) {
LAB_0001f81c:
            __s_00 = (void *)0x0;
            if (*(ushort *)(param_2 + 0xca) != 0) {
              __s_00 = (void *)private_kmalloc((uint)*(ushort *)(param_2 + 0xca) * 0x24,0xd0);
              if (__s == (void *)0x0) {
                isp_printf(2,"Failed to malloc %s\'s inpads\n",*(int *)(param_2 + 8));
                private_kfree(0);
                goto LAB_0001f91c;
              }
              memset(__s_00,0,(uint)*(ushort *)(param_2 + 0xca) * 0x24);
              iVar9 = 0;
              iVar5 = 0;
              while (iVar11 = iVar5 * 2, iVar5 < (int)(uint)(char)pcVar12[0xc]) {
                iVar5 = iVar5 + 1;
                if (*(char *)(*(int *)(pcVar12 + 0x10) + iVar11) == '\x01') {
                  piVar14 = (int *)(iVar9 * 0x24 + (int)__s_00);
                  *(char *)(piVar14 + 1) = (char)iVar9;
                  *piVar14 = param_2;
                  iVar9 = iVar9 + 1;
                  *(char *)((int)piVar14 + 5) =
                       *(char *)(*(int *)(pcVar12 + 0x10) + iVar11);
                  uVar4 = *(char *)(*(int *)(pcVar12 + 0x10) + iVar11 + 1);
                  *(char *)((int)piVar14 + 7) = 2;
                  *(char *)((int)piVar14 + 6) = uVar4;
                  piVar14[5] = 0;
                }
              }
            }
            *(void **)(param_2 + 0xcc) = __s;
            *(void **)(param_2 + 0xd0) = __s_00;
            goto LAB_0001fa9c;
          }
          __s = (void *)private_kmalloc((uint)*(ushort *)(param_2 + 200) * 0x24,0xd0);
          if (__s != (void *)0x0) {
            memset(__s,0,(uint)*(ushort *)(param_2 + 200) * 0x24);
            iVar9 = 0;
            iVar5 = 0;
            while (iVar11 = iVar5 * 2, iVar5 < (int)(uint)(char)pcVar12[0xc]) {
              iVar5 = iVar5 + 1;
              if (*(char *)(*(int *)(pcVar12 + 0x10) + iVar11) == '\x02') {
                piVar6 = (int *)(iVar9 * 0x24 + (int)__s);
                *(char *)(piVar6 + 1) = (char)iVar9;
                *piVar6 = param_2;
                iVar9 = iVar9 + 1;
                *(char *)((int)piVar6 + 5) = *(char *)(*(int *)(pcVar12 + 0x10) + iVar11);
                uVar4 = *(char *)(*(int *)(pcVar12 + 0x10) + iVar11 + 1);
                *(char *)((int)piVar6 + 7) = 2;
                *(char *)((int)piVar6 + 6) = uVar4;
                piVar6[5] = 0;
              }
            }
            goto LAB_0001f81c;
          }
          isp_printf(2,"Failed to malloc %s\'s outpads\n",*(int *)(param_2 + 8));
LAB_0001f91c:
          isp_subdev_release_clks(param_2);
          iVar5 = -0xc;
        }
        else {
          isp_printf(2,"Failed to init %s\'s clks!\n",*(int *)(param_2 + 8));
        }
      }
      else {
        if (*pcVar12 != '\x02') {
          isp_printf(0,"It\'s header!\n");
          return 0;
        }
        *(unsigned int *)(param_2 + 0xc0) = (uint)(char)pcVar12[4];
        iVar5 = isp_subdev_init_clks(param_2,*(int *)(pcVar12 + 8));
        if (iVar5 == 0) {
          return 0;
        }
      }
      isp_printf(2,"[%d] Failed to init subdev!\n",0x77d);
      private_iounmap(*(int *)(param_2 + 0xb8));
LAB_0001f9ac:
      private_release_mem_region(*piVar14,(piVar14[1] + 1) - *piVar14);
LAB_0001f9c8:
      tx_isp_free_irq(param_2 + 0x80);
    }
    else {
      isp_printf(2,0x7ffe0);
    }
    tx_isp_module_deinit(param_2);
  }
  return iVar5;
}



void tx_isp_subdev_deinit(int param_1)

{
  int *piVar1;
  int iVar2;
  
  if (*(int *)(param_1 + 0x30) != 0) {
    private_misc_deregister(param_1 + 0xc);
  }
  isp_subdev_release_clks(param_1);
  if (*(int *)(param_1 + 0xcc) != 0) {
    private_kfree();
  }
  if (*(int *)(param_1 + 0xd0) != 0) {
    private_kfree();
  }
  if (*(int *)(param_1 + 0xb8) != 0) {
    private_iounmap();
  }
  piVar1 = *(int **)(param_1 + 0xb4);
  if (piVar1 == (int *)0x0) {
    iVar2 = *(int *)(param_1 + 0x80);
  }
  else {
    private_release_mem_region(*piVar1,(piVar1[1] + 1) - *piVar1);
    *(int *)(param_1 + 0xb4) = 0;
    iVar2 = *(int *)(param_1 + 0x80);
  }
  if (iVar2 != 0) {
    tx_isp_free_irq(param_1 + 0x80);
  }
  tx_isp_module_deinit(param_1);
  *(int *)(param_1 + 0xc4) = 0;
  return;
}



int tx_isp_create_graph_and_nodes(int param_1)

{
  char *pcVar1;
  int iVar2;
  int iVar3;
  int *puVar4;
  int *puVar5;
  unsigned int uVar6;
  
  puVar4 = (int *)(param_1 + 0x84);
  puVar5 = puVar4;
  for (uVar6 = 0; uVar6 < *(unsigned int *)(param_1 + 0x80); uVar6 = uVar6 + 1) {
    pcVar1 = (char *)private_platform_get_drvdata(*puVar5);
    if ((pcVar1 == (char *)0x0) || ((char *)0xfffff000 < pcVar1)) {
      isp_printf(1,"Can\'t find the module(%d) driver!\n",uVar6);
    }
    else if (*pcVar1 == '\x01') {
      *(char **)(param_1 + (((char)pcVar1[3] & 0xf) + 0xe) * 4) = pcVar1;
    }
    puVar5 = puVar5 + 2;
  }
  uVar6 = 0;
  puVar5 = puVar4;
  do {
    if (*(unsigned int *)(param_1 + 0x80) <= uVar6) {
LAB_0001fca4:
      uVar6 = 0;
      puVar5 = puVar4;
      do {
        if (*(unsigned int *)(param_1 + 0x80) <= uVar6) {
          return 0;
        }
        iVar3 = private_platform_get_drvdata(*puVar5);
        if (*(int *)(iVar3 + 0x30) != 0) {
          *(int *)(iVar3 + 0x14) = *(int *)(iVar3 + 0x30);
          *(int *)(iVar3 + 0x10) = *(int *)(iVar3 + 8);
          *(int *)(iVar3 + 0xc) = 0xff;
          iVar2 = private_misc_register(iVar3 + 0xc);
          if (iVar2 < 0) {
            isp_printf(2,"Failed to register tx-isp miscdev(%d.%d)!\n",*(char *)(iVar3 + 2),
                       *(char *)(iVar3 + 3));
            puVar4 = puVar4 + uVar6 * 2;
            while (uVar6 = uVar6 - 1, uVar6 != 0xffffffff) {
              iVar3 = private_platform_get_drvdata(puVar4[-2]);
              if (*(int *)(iVar3 + 0x30) != 0) {
                private_misc_deregister(iVar3 + 0xc);
              }
              puVar4 = puVar4 + -2;
            }
            return 0xfffffffe;
          }
        }
        if (*(int *)(iVar3 + 0x34) != 0) {
          private_proc_create_data
                    (*(int *)(iVar3 + 8),0x124,*(int *)(param_1 + 0x11c),
                     *(int *)(iVar3 + 0x34),iVar3);
        }
        uVar6 = uVar6 + 1;
        puVar5 = puVar5 + 2;
      } while( true );
    }
    pcVar1 = (char *)private_platform_get_drvdata(*puVar5);
    if (*pcVar1 == '\x02') {
      iVar3 = *(int *)(param_1 + (((char)pcVar1[2] & 0xf) + 0xe) * 4);
      if (iVar3 == 0) {
        isp_printf(2,"the module(%d.%d) doesn\'t have parent!\n",(uint)(char)pcVar1[2],pcVar1[3]);
        goto LAB_0001fca4;
      }
      *(char **)(iVar3 + (((char)pcVar1[3] & 0xf) + 0xe) * 4) = pcVar1;
    }
    uVar6 = uVar6 + 1;
    puVar5 = puVar5 + 2;
  } while( true );
}



int tx_isp_probe(int param_1)

{
  bool bVar1;
  code cVar2;
  code cVar3;
  void *__s;
  int iVar4;
  code *pcVar5;
  code *pcVar6;
  code **ppcVar7;
  code cVar8;
  int iVar9;
  code **ppcVar10;
  int *puVar11;
  int iVar12;
  
  __s = (void *)private_kmalloc(0x120,0xd0);
  if (__s == (void *)0x0) {
    isp_printf(2,"Failed to allocate camera device\n");
    iVar4 = -0xc;
  }
  else {
    memset(__s,0,0x120);
    iVar9 = *(int *)(param_1 + 0x58);
    if (iVar9 == 0) {
      iVar4 = -0x16;
    }
    else if (*(char *)(iVar9 + 4) < 0x11) {
      iVar12 = 0;
      puVar11 = (int *)((int)__s + 0x84);
      while( true ) {
        if ((int)(uint)*(char *)(iVar9 + 4) <= iVar12) break;
        ppcVar7 = *(code ***)(*(int *)(iVar9 + 8) + iVar12 * 4);
        iVar4 = 0;
        *puVar11 = ppcVar7;
        do {
          ppcVar10 = *(code ***)((int)&isp_drivers + iVar4);
          pcVar5 = *ppcVar7;
          pcVar6 = ppcVar10[5];
          cVar2 = *pcVar5;
          do {
            cVar3 = *pcVar6;
            pcVar5 = pcVar5 + 1;
            pcVar6 = pcVar6 + 1;
            cVar8 = cVar2;
            if (cVar3 != cVar2) break;
            bVar1 = cVar2 != (code)0x0;
            cVar2 = *pcVar5;
            cVar8 = cVar3;
          } while (bVar1);
          iVar4 = iVar4 + 4;
          if (cVar8 == cVar3) {
            iVar4 = private_platform_device_register(ppcVar7);
            if (iVar4 != 0) {
              isp_printf(2,"Failed to register isp device(%d)\n",iVar12);
              *puVar11 = 0;
              goto LAB_00020044;
            }
            if (*ppcVar10 == (code *)0x0) {
              puVar11[1] = ppcVar10;
            }
            else {
              (**ppcVar10)(ppcVar7);
              puVar11[1] = ppcVar10;
            }
            break;
          }
        } while (iVar4 != 0x14);
        iVar12 = iVar12 + 1;
        puVar11 = puVar11 + 2;
      }
      *(unsigned int *)((int)__s + 0x80) = (uint)*(char *)(iVar9 + 4);
      private_spin_lock_init((int)__s + 0x114);
      iVar4 = tx_isp_module_init(param_1,__s);
      if (iVar4 == 0) {
        *(int *)((int)__s + 0xc) = 0xff;
        *(char **)((int)__s + 0x30) = tx_isp_fops;
        *(char **)((int)__s + 0x14) = tx_isp_fops;
        *(char **)((int)__s + 0x10) = "tx-isp";
        iVar4 = private_misc_register((int)__s + 0xc);
        if (iVar4 < 0) {
          isp_printf(2,"Failed to register tx-isp miscdev!\n");
          iVar4 = -2;
        }
        else {
          iVar9 = private_jz_proc_mkdir(&_LC39);
          *(int *)((int)__s + 0x11c) = iVar9;
          if (iVar9 == 0) {
            isp_printf(2,"Failed to create debug directory of tx-isp!\n");
          }
          else {
            private_platform_set_drvdata(param_1,__s);
            globe_ispdev = __s;
            iVar4 = tx_isp_create_graph_and_nodes(__s);
            if (iVar4 == 0) {
              isp_mem_init();
              *(char **)((int)__s + 0x104) = "H20221206a";
              isp_printf(1,"@@@@ tx-isp-probe ok(version %s), compiler date=%s @@@@@\n","H20221206a"
                         ,"Dec  6 2022");
              return 0;
            }
            private_proc_remove(*(int *)((int)__s + 0x11c));
          }
          private_misc_deregister((int)__s + 0xc);
        }
        tx_isp_module_deinit(__s);
      }
      else {
        isp_printf(2,"Failed to init isp module(%d.%d)\n",*(char *)(iVar9 + 2),
                   *(char *)(iVar9 + 3));
        iVar4 = -0xc;
      }
LAB_00020044:
      tx_isp_unregister_platforms((int *)((int)__s + 0x84));
    }
    else {
      isp_printf(2,"The number of platform device is too much!\n");
      iVar4 = -0x16;
    }
    private_kfree(__s);
  }
  return iVar4;
}



int * FUN_000202e4(int *param_1)

{
  int local_10 [2];
  
  memset(local_10,0,4);
  *param_1 = local_10[0];
  return param_1;
}



unsigned int tisp_math_exp2(unsigned int param_1,unsigned int param_2,unsigned int param_3)

{
  longlong lVar1;
  int iVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int iVar6;
  
  uVar4 = param_2 & 0xff;
  uVar3 = (1 << (param_2 & 0x1f)) - 1U & param_1;
  param_1 = param_1 >> (param_2 & 0x1f);
  if (uVar4 < 6) {
    uVar3 = *(unsigned int *)(__pow2_lut + (uVar3 << (5 - uVar4 & 0x1f)) * 4) >>
            ((0x1e - (param_3 & 0xff)) - param_1 & 0x1f);
  }
  else {
    uVar5 = uVar3 >> (uVar4 - 5 & 0x1f);
    iVar6 = *(int *)(__pow2_lut + uVar5 * 4);
    lVar1 = (ulonglong)(uint)(*(int *)(__pow2_lut + (uVar5 + 1) * 4) - iVar6) *
            (ulonglong)((1 << (uVar4 - 5 & 0x1f)) - 1U & uVar3);
    iVar2 = __lshrdi3((int)lVar1,(int)((ulonglong)lVar1 >> 0x20));
    uVar3 = (uint)(iVar6 + iVar2) >> ((0x1e - (param_3 & 0xff)) - param_1 & 0x1f);
  }
  return uVar3;
}



void fix_point_add(void)

{
  return;
}



void fix_point_sub(int param_1,int param_2,unsigned int param_3,unsigned int param_4,unsigned int param_5,
                  unsigned int param_6)

{
  if ((param_4 < param_6) || ((param_6 == param_4 && (param_3 < param_5)))) {
    isp_printf(2,"error: do not support negative number\n");
  }
  return;
}



void fix_point_mult2(int param_1,int param_2,unsigned int param_3,unsigned int param_4,unsigned int param_5,
                    unsigned int param_6)

{
  unsigned int uVar1;
  char8 uVar2;
  longlong lVar3;
  longlong lVar4;
  int uVar5;
  
  if (param_1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = __lshrdi3(0xffffffff,0xffffffff,0x40 - param_1);
  }
  uVar1 = (uint)((ulonglong)uVar2 >> 0x20);
  lVar3 = __lshrdi3(param_3,param_4,param_1);
  lVar4 = __lshrdi3(param_5,param_6,param_1);
  uVar5 = (int)((ulonglong)lVar4 >> 0x20);
  param_3 = (uint)uVar2 & param_3;
  param_5 = (uint)uVar2 & param_5;
  __ashldi3((int)(lVar3 * lVar4),(int)((ulonglong)(lVar3 * lVar4) >> 0x20),param_1);
  lVar3 = (ulonglong)param_3 * (ulonglong)param_5;
  __lshrdi3((int)lVar3,
            (uVar1 & param_6) * param_3 + (uVar1 & param_4) * param_5 +
            (int)((ulonglong)lVar3 >> 0x20),param_1,uVar5,uVar5);
  return;
}



void fix_point_mult3(int param_1)

{
  int unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  unsigned int uVar1;
  ulonglong uVar2;
  longlong lVar3;
  longlong lVar4;
  ulonglong uVar5;
  unsigned int param_7;
  unsigned int param_8;
  int uVar6;
  
  uVar5 = fix_point_mult2();
  if (param_1 == 0) {
    uVar2 = 0;
  }
  else {
    uVar2 = __lshrdi3(0xffffffff,0xffffffff,0x40 - param_1);
  }
  lVar3 = __lshrdi3((int)uVar5,(int)(uVar5 >> 0x20),param_1);
  lVar4 = __lshrdi3(param_7,param_8,param_1);
  uVar6 = (int)((ulonglong)lVar4 >> 0x20);
  uVar1 = (uint)(uVar2 >> 0x20) & param_8;
  __ashldi3((int)(lVar3 * lVar4),(int)((ulonglong)(lVar3 * lVar4) >> 0x20),param_1);
  lVar3 = (uVar2 & uVar5) * CONCAT44(uVar1,(uint)uVar2 & param_7);
  __lshrdi3((int)lVar3,(int)((ulonglong)lVar3 >> 0x20),param_1,uVar6,uVar6,param_8,unaff_s0,unaff_s1
            ,unaff_s2,unaff_s3);
  return;
}



void fix_point_add_64(void)

{
  return;
}



void fix_point_sub_64(int param_1,int param_2,unsigned int param_3,unsigned int param_4,unsigned int param_5,
                     unsigned int param_6)

{
  if ((param_4 < param_6) || ((param_6 == param_4 && (param_3 < param_5)))) {
    isp_printf(2,"error: do not support negative number\n");
  }
  return;
}



void fix_point_mult2_64(int param_1,int param_2,unsigned int param_3,unsigned int param_4,unsigned int param_5,
                       unsigned int param_6)

{
  int iVar1;
  unsigned int uVar2;
  char8 uVar3;
  longlong lVar4;
  longlong lVar5;
  unsigned int uVar6;
  int uVar7;
  
  uVar3 = __lshrdi3(0xffffffff,0xffffffff,0x40 - param_1);
  uVar2 = (uint)((ulonglong)uVar3 >> 0x20);
  uVar6 = (uint)uVar3;
  lVar4 = __lshrdi3(param_3,param_4,param_1);
  param_3 = param_3 & uVar6;
  lVar5 = __lshrdi3(param_5,param_6,param_1);
  uVar7 = (int)((ulonglong)lVar5 >> 0x20);
  __ashldi3((int)(lVar4 * lVar5),(int)((ulonglong)(lVar4 * lVar5) >> 0x20),param_1);
  iVar1 = (param_6 & uVar2) * param_3 + (param_4 & uVar2) * (param_5 & uVar6);
  lVar4 = (ulonglong)param_3 * (ulonglong)(param_5 & uVar6);
  __lshrdi3((int)lVar4,iVar1 + (int)((ulonglong)lVar4 >> 0x20),param_1,iVar1,uVar7);
  return;
}



void fix_point_mult3_64(int param_1)

{
  int iVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  int unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  unsigned int uVar4;
  char8 uVar5;
  longlong lVar6;
  longlong lVar7;
  char8 uVar8;
  unsigned int param_7;
  unsigned int param_8;
  unsigned int uVar9;
  int uVar10;
  
  uVar8 = fix_point_mult2_64();
  uVar3 = (uint)((ulonglong)uVar8 >> 0x20);
  uVar5 = __lshrdi3(0xffffffff,0xffffffff,0x40 - param_1);
  uVar2 = (uint)((ulonglong)uVar5 >> 0x20);
  uVar9 = (uint)uVar5;
  lVar6 = __lshrdi3((uint)uVar8,uVar3,param_1);
  uVar3 = uVar3 & uVar2;
  uVar4 = (uint)uVar8 & uVar9;
  lVar7 = __lshrdi3(param_7,param_8,param_1);
  uVar10 = (int)((ulonglong)lVar7 >> 0x20);
  __ashldi3((int)(lVar6 * lVar7),(int)((ulonglong)(lVar6 * lVar7) >> 0x20),param_1);
  iVar1 = (param_8 & uVar2) * uVar4 + uVar3 * (param_7 & uVar9);
  lVar6 = (ulonglong)uVar4 * (ulonglong)(param_7 & uVar9);
  __lshrdi3((int)lVar6,iVar1 + (int)((ulonglong)lVar6 >> 0x20),param_1,iVar1,uVar10,uVar3,unaff_s0,
            unaff_s1,unaff_s2,unaff_s3);
  return;
}


uint64_t fix_point_div_64(int param_1, int param_2, unsigned int param_3, int param_4, unsigned int param_5, unsigned int param_6) {
    int64_t quotient;
    int64_t product;
    unsigned int remainder_low, remainder_high;
    uint64_t shifted_result;
    int iteration;
    unsigned int shift_low, shift_high;
    unsigned int carry;

    // Perform 64-bit division.
    quotient = div64_u64(param_3, param_4, param_5, param_6);

    // Calculate product of quotient and concatenated param_5 and param_6.
    product = quotient * ((uint64_t)param_6 << 32 | param_5);

    // Calculate remainder.
    remainder_low = param_3 - (uint32_t)product;
    remainder_high = (param_4 - (uint32_t)(product >> 32)) - (uint)(param_3 < remainder_low);

    iteration = 0;
    shift_low = 0;
    shift_high = 0;

    while (1) {
        shifted_result = ((uint64_t)shift_high << 32) | shift_low;

        // Check if iterations reached param_1.
        if (iteration == param_1) {
            shifted_result |= __ashldi3((int)quotient, (int)(quotient >> 32), param_1);
            return shifted_result;
        }

        // Left shift remainder and shift registers.
        remainder_high = (remainder_low >> 31) | (remainder_high << 1);
        carry = (shift_low >> 31);
        shift_high = (shift_high << 1) | carry;
        remainder_low <<= 1;
        shift_low <<= 1;

        // Adjust quotient and remainder based on comparison with param_5 and param_6.
        if (param_6 < remainder_high || (remainder_high == param_6 && param_5 < remainder_low)) {
            shift_low |= 1;
            remainder_high = (remainder_high - param_6) - (uint)(remainder_low < param_5);
            remainder_low -= param_5;
            iteration++;
        } else {
            iteration++;
        }
    }
}


void fix_point_div(void)

{
  fix_point_div_64();
  return;
}



int fix_point_add_32(int param_1,int param_2,int param_3)

{
  return param_2 + param_3;
}



int fix_point_sub_32(int param_1,unsigned int param_2,unsigned int param_3)

{
  if (param_2 < param_3) {
    isp_printf(2,"error: do not support negative number\n");
  }
  return param_2 - param_3;
}



int fix_point_mult2_32(unsigned int param_1,unsigned int param_2,unsigned int param_3)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  
  uVar1 = 0xffffffff >> (-param_1 & 0x1f);
  uVar2 = param_2 >> (param_1 & 0x1f);
  uVar3 = param_3 >> (param_1 & 0x1f);
  param_2 = uVar1 & param_2;
  uVar1 = uVar1 & param_3;
  return param_2 * uVar3 + uVar2 * uVar1 + (uVar2 * uVar3 << (param_1 & 0x1f)) +
         (param_2 * uVar1 >> (param_1 & 0x1f));
}



void fix_point_mult3_32(int param_1,int param_2,int param_3,int param_4)

{
  int uVar1;
  code *UNRECOVERED_JUMPTABLE;
  
  UNRECOVERED_JUMPTABLE = fix_point_mult2_32;
  uVar1 = fix_point_mult2_32();
                    // WARNING: Could not recover jumptable at 0x00020e8c. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)(param_1,uVar1,param_4);
  return;
}



unsigned int fix_point_div_32(int param_1,unsigned int param_2,unsigned int param_3)

{
  int iVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  
  uVar3 = 0;
  uVar2 = param_2 - param_3 * (param_2 / param_3);
  iVar1 = 0;
LAB_00020ebc:
  do {
    if (iVar1 == param_1) {
LAB_00020f08:
      uVar2 = __ashldi3(param_2 / param_3,0,param_1);
      return uVar3 | uVar2;
    }
    uVar2 = uVar2 * 2;
    uVar3 = uVar3 << 1;
    if (uVar2 <= param_3) {
      if (param_3 == uVar2) {
        uVar3 = (uVar3 | 1) << ((param_1 + -1) - iVar1 & 0x1fU);
        goto LAB_00020f08;
      }
      iVar1 = iVar1 + 1;
      goto LAB_00020ebc;
    }
    uVar3 = uVar3 | 1;
    uVar2 = uVar2 - param_3;
    iVar1 = iVar1 + 1;
  } while( true );
}



int fix_point_intp(unsigned int param_1,unsigned int param_2,unsigned int param_3,int param_4,int param_5)

{
  longlong lVar1;
  unsigned int uVar2;
  int iVar3;
  unsigned int uVar4;
  int iVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  ulonglong uVar8;
  
  if (param_3 < param_2) {
    isp_printf(2,"%s,%d: error\n","fix_point_intp",0xfc);
  }
  if (param_3 == param_2) {
    if (param_4 != param_5) {
      isp_printf(2,"%s,%d: error\n","fix_point_intp",0x101);
      param_4 = 0;
    }
  }
  else {
    param_3 = param_3 - param_2;
    if (param_4 != param_5) {
      uVar8 = div64_u64(0,0,param_3,0);
      iVar3 = (int)(uVar8 >> 0x20);
      lVar1 = (ulonglong)param_3 * (uVar8 & 0xffffffff);
      uVar7 = 0;
      uVar4 = -(int)lVar1;
      iVar5 = -(uint)(uVar4 != 0) - (iVar3 * param_3 + (int)((ulonglong)lVar1 >> 0x20));
      for (uVar6 = 0; uVar6 < param_1; uVar6 = uVar6 + 1 & 0xff) {
        uVar2 = uVar4 >> 0x1f | iVar5 << 1;
        uVar4 = uVar4 * 2;
        uVar7 = uVar7 << 1;
        if ((uVar2 == 0) && (uVar4 <= param_3)) {
          if (param_3 == uVar4) {
            uVar7 = (uVar7 | 1) << ((param_1 - 1) - uVar6 & 0x1f);
            break;
          }
          iVar5 = 0;
        }
        else {
          uVar7 = uVar7 | 1;
          iVar5 = uVar2 - (uVar4 < uVar4 - param_3);
          uVar4 = uVar4 - param_3;
        }
      }
      uVar4 = __ashldi3((int)uVar8,iVar3,param_1);
      param_4 = (int)uVar8 - (uVar7 | uVar4);
    }
  }
  return param_4;
}



int table_intp(int param_1,int *param_2,unsigned int param_3,unsigned int param_4)

{
  unsigned int uVar1;
  int uVar2;
  unsigned int uVar3;
  
  if (param_4 <= (uint)param_2[1]) {
    return *param_2;
  }
  uVar1 = 1;
  while( true ) {
    if (param_3 <= uVar1) {
      return param_2[param_3 * 2 + -2];
    }
    uVar3 = (param_2 + uVar1 * 2)[1];
    if (param_4 <= uVar3) break;
    uVar1 = uVar1 + 1 & 0xff;
  }
  uVar2 = fix_point_intp(param_1,(param_2 + (uVar1 - 1) * 2)[1],uVar3,param_2[(uVar1 - 1) * 2],
                         param_2[uVar1 * 2],param_4);
  return uVar2;
}



int tisp_simple_intp(unsigned int param_1,int param_2,int param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  int iVar5;
  
  if (7 < param_1) {
    return *(int *)(param_3 + 0x20);
  }
  piVar4 = (int *)(param_3 + param_1 * 4);
  iVar5 = *piVar4;
  iVar1 = piVar4[1];
  iVar2 = iVar1;
  if (iVar5 != iVar1) {
    if (iVar5 < iVar1) {
      iVar2 = iVar1 - iVar5;
    }
    else {
      iVar2 = iVar5 - iVar1;
    }
    iVar3 = (iVar2 * param_2 >> 0x10) + ((int)(iVar2 * param_2 & 0x8000U) >> 0xf);
    iVar2 = iVar5 - iVar3;
    if (iVar5 < iVar1) {
      iVar2 = iVar5 + iVar3;
    }
  }
  return iVar2;
}



unsigned int tisp_log2_int_to_fixed(unsigned int param_1,unsigned int param_2,unsigned int param_3)

{
  unsigned int uVar1;
  int iVar2;
  unsigned int uVar3;
  int iVar4;
  
  uVar1 = 0;
  if (param_1 != 0) {
    if (param_1 < 0x10000) {
      uVar3 = 0;
      uVar1 = param_1;
    }
    else {
      uVar1 = param_1 >> 0x10;
      uVar3 = 0x10;
    }
    if (0xff < uVar1) {
      uVar3 = uVar3 + 8;
      uVar1 = uVar1 >> 8;
    }
    if (0xf < uVar1) {
      uVar3 = uVar3 + 4;
      uVar1 = uVar1 >> 4;
    }
    if (3 < uVar1) {
      uVar3 = uVar3 + 2;
      uVar1 = uVar1 >> 2;
    }
    if (uVar1 != 1) {
      uVar3 = uVar3 + 1 & 0xff;
    }
    if (uVar3 < 0x10) {
      param_1 = param_1 << (0xf - uVar3 & 0x1f);
    }
    else {
      param_1 = param_1 >> (uVar3 - 0xf & 0x1f);
    }
    iVar2 = 0;
    for (iVar4 = 0; iVar4 < (int)(param_2 & 0xff); iVar4 = iVar4 + 1) {
      param_1 = param_1 * param_1;
      iVar2 = iVar2 * 2;
      if ((int)param_1 < 0) {
        iVar2 = iVar2 + 1;
        param_1 = param_1 >> 0x10;
      }
      else {
        param_1 = param_1 >> 0xf;
      }
    }
    uVar1 = (uVar3 << (param_2 & 0x1f)) + iVar2 << (param_3 & 0x1f) |
            (param_1 & 0x7fff) >> (0xf - (param_3 & 0xff) & 0x1f);
  }
  return uVar1;
}



int tisp_log2_fixed_to_fixed(int param_1,int param_2,unsigned int param_3)

{
  int iVar1;
  
  param_3 = param_3 & 0xff;
  iVar1 = tisp_log2_int_to_fixed(param_1,param_3,0);
  return iVar1 - (param_2 << (param_3 & 0x1f));
}



// WARNING: Removing unreachable block (ram,0x000213d4)

unsigned int tisp_log2_int_to_fixed_64(unsigned int param_1,unsigned int param_2,unsigned int param_3,unsigned int param_4)

{
  longlong lVar1;
  unsigned int uVar2;
  code *pcVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int iVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  ulonglong uVar9;
  
  if ((param_1 | param_2) == 0) {
    return 0;
  }
  if (param_2 == 0) {
    uVar7 = 0;
    uVar2 = param_1;
  }
  else {
    uVar7 = 0x20;
    uVar2 = param_2;
  }
  if (0xffff < uVar2) {
    uVar2 = uVar2 >> 0x10;
    uVar7 = uVar7 + 0x10;
  }
  if (0xff < uVar2) {
    uVar2 = uVar2 >> 8;
    uVar7 = uVar7 + 8;
  }
  if (0xf < uVar2) {
    uVar2 = uVar2 >> 4;
    uVar7 = uVar7 + 4;
  }
  if (3 < uVar2) {
    uVar2 = uVar2 >> 2;
    uVar7 = uVar7 + 2;
  }
  if (uVar2 != 1) {
    uVar7 = uVar7 + 1;
  }
  if (uVar7 < 0x10) {
    iVar6 = 0xf - uVar7;
    pcVar3 = __ashldi3;
  }
  else {
    iVar6 = uVar7 - 0xf;
    pcVar3 = __lshrdi3;
  }
  uVar9 = (*pcVar3)(param_1,param_2,iVar6);
  uVar2 = 0;
  uVar5 = 0;
  iVar6 = 0;
  while( true ) {
    if ((int)(param_3 & 0xff) <= iVar6) break;
    lVar1 = (uVar9 & 0xffffffff) * (uVar9 & 0xffffffff);
    uVar8 = (uint)lVar1;
    uVar4 = (int)(uVar9 >> 0x20) * (uint)uVar9 * 2 + (int)((ulonglong)lVar1 >> 0x20);
    uVar5 = uVar2 >> 0x1f | uVar5 << 1;
    uVar2 = uVar2 * 2;
    if ((uVar8 & 0x80000000 | uVar4) == 0) {
      uVar8 = uVar4 * 0x20000 | uVar8 >> 0xf;
      uVar4 = uVar4 >> 0xf;
    }
    else {
      uVar5 = (uVar2 + 1 < uVar2) + uVar5;
      uVar8 = uVar4 * 0x10000 | uVar8 >> 0x10;
      uVar4 = uVar4 >> 0x10;
      uVar2 = uVar2 + 1;
    }
    uVar9 = CONCAT44(uVar4,uVar8);
    iVar6 = iVar6 + 1;
  }
  uVar7 = uVar7 << (param_3 & 0x1f);
  uVar2 = __ashldi3(uVar7 + uVar2,(uint)(uVar7 + uVar2 < uVar7) + ((int)uVar7 >> 0x1f) + uVar5,
                    param_4 & 0xff);
  uVar7 = __lshrdi3((uint)uVar9 & 0x7fff,0,0xf - (param_4 & 0xff));
  return uVar2 | uVar7;
}



int tisp_log2_fixed_to_fixed_64(int param_1,int param_2,int param_3,unsigned int param_4)

{
  int iVar1;
  
  iVar1 = tisp_log2_int_to_fixed_64(param_1,param_2,param_4 & 0xff,0);
  return iVar1 - (param_3 << (param_4 & 0x1f));
}



void netlink_rcv_msg(int param_1)

{
  int *piVar1;
  
  if (0xf < *(unsigned int *)(param_1 + 0x50)) {
    piVar1 = *(int **)(param_1 + 0xa4) + 4;
    if ((piVar1 != (int *)0x0) && (net_event_process != (code *)0x0)) {
                    // WARNING: Could not recover jumptable at 0x00021590. Too many branches
                    // WARNING: Treating indirect jump as call
      (*net_event_process)(piVar1,**(int **)(param_1 + 0xa4) + -0x10);
      return;
    }
  }
  return;
}



int netlink_send_msg(void *param_1,unsigned int param_2)

{
  int uVar1;
  int iVar2;
  int iVar3;
  
  param_2 = param_2 & 0xffff;
  iVar2 = private_nlmsg_new(param_2,0x20);
  if (iVar2 == 0) {
    isp_printf(2,"%s,%d: netlink_alloc_skb error\n","netlink_send_msg",0x1d);
  }
  else {
    iVar3 = private_nlmsg_put(iVar2,0,0,0x17,param_2,0);
    if (iVar3 != 0) {
      memcpy((void *)(iVar3 + 0x10),param_1,param_2);
                    // WARNING: Could not recover jumptable at 0x00019624. Too many branches
                    // WARNING: Treating indirect jump as call
      uVar1 = (**(code **)(pfaces + 0x1a8))(nlsk,iVar2,0x32,0x40);
      return uVar1;
    }
    isp_printf(2,"%s,%d: nlmsg_put() error\n","netlink_send_msg",0x22);
    kfree_skb(iVar2);
  }
  return 0xffffffff;
}



int tisp_netlink_event_set_cb(int param_1)

{
  net_event_process = param_1;
  return 0;
}



int tisp_netlink_init(void)

{
  int uVar1;
  
  nlsk = private_netlink_kernel_create(&init_net,0x17,nlcfg);
  uVar1 = 0;
  if (nlsk == 0) {
    isp_printf(2,"%s,%d: create netlink socket error.\n","tisp_netlink_init",0x4d);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



void tisp_netlink_exit(void)

{
  if ((nlsk != 0) && (*(int *)(nlsk + 0x130) != 0)) {
                    // WARNING: Could not recover jumptable at 0x0001964c. Too many branches
                    // WARNING: Treating indirect jump as call
    (**(code **)(pfaces + 0x1b0))();
    return;
  }
  return;
}



bool isp_tunning_poll(int param_1,code **param_2)

{
  if ((param_2 != (code **)0x0) && (*param_2 != (code *)0x0)) {
    (**param_2)(param_1,&dumpQueue,param_2);
    return tispPollValue != '\0';
  }
  return tispPollValue != '\0';
}



int tisp_code_tuning_release(void)

{
  private_kfree(tisp_par_ioctl);
  tisp_par_ioctl = 0;
  return 0;
}



int tisp_param_operate_process(int *param_1)

{
  code *pcVar1;
  int *__dest;
  int iVar2;
  int *piVar3;
  unsigned int uVar4;
  char *pcVar5;
  int iVar6;
  int uVar7;
  int *piVar8;
  int local_4d8;
  int local_4d4;
  int local_4d0;
  int local_b8;
  int local_b4;
  int local_b0;
  int local_ac;
  int local_a8;
  int local_a4;
  int local_a0;
  int local_20 [3];
  
  piVar3 = opmsg;
  iVar2 = *param_1;
  local_20[0] = 0;
  if (iVar2 == 0) {
    iVar2 = param_1[1];
    if ((iVar2 == 0) || (iVar2 - 1U < 0x22)) {
      pcVar1 = tisp_ae_param_array_get;
    }
    else if (iVar2 - 0x23U < 0x19) {
      pcVar1 = tisp_awb_param_array_get;
    }
    else if (iVar2 - 0x3cU < 2) {
      pcVar1 = tisp_gamma_param_array_get;
    }
    else if (iVar2 - 0x3eU < 0x16) {
      pcVar1 = tisp_gib_param_array_get;
    }
    else if (iVar2 - 0x5fU < 0x4a) {
      pcVar1 = tisp_dmsc_param_array_get;
    }
    else if (iVar2 - 0x54U < 0xb) {
      pcVar1 = tisp_lsc_param_array_get;
    }
    else if (iVar2 - 0xa9U < 0xc) {
      pcVar1 = tisp_ccm_param_array_get;
    }
    else if (iVar2 - 0xb5U < 0x31) {
      pcVar1 = tisp_sharpen_param_array_get;
    }
    else if (iVar2 - 0xe6U < 0x1f) {
      pcVar1 = tisp_dpc_param_array_get;
    }
    else if (iVar2 - 0x105U < 0x7b) {
      pcVar1 = tisp_sdns_param_array_get;
    }
    else if (iVar2 - 0x180U < 0x1d7) {
      pcVar1 = tisp_mdns_param_array_get;
    }
    else if (iVar2 - 0x357U < 3) {
      pcVar1 = tisp_clm_param_array_get;
    }
    else if (iVar2 - 0x35aU < 0x26) {
      pcVar1 = tisp_defog_param_array_get;
    }
    else if (iVar2 - 0x380U < 0x2c) {
      pcVar1 = tisp_adr_param_array_get;
    }
    else if (iVar2 == 0x3ac) {
      iVar2 = 0x3ac;
      pcVar1 = tisp_hldc_param_array_get;
    }
    else if (iVar2 - 0x3adU < 0x13) {
      pcVar1 = tisp_af_param_array_get;
    }
    else if (iVar2 - 0x3c0U < 0x26) {
      pcVar1 = tisp_bcsh_param_array_get;
    }
    else if (iVar2 - 0x3e6U < 0xf) {
      pcVar1 = tisp_ydns_param_array_get;
    }
    else if (iVar2 - 0x3f5U < 10) {
      pcVar1 = tisp_gb_param_array_get;
    }
    else if (iVar2 - 0x3ffU < 0x33) {
      pcVar1 = tisp_wdr_param_array_get;
    }
    else {
      if (0x14 < iVar2 - 0x432U) {
        uVar7 = 0x72;
LAB_00021ea8:
        pcVar5 = "%s,%d: unsupport msg arraty id\n";
LAB_0002251c:
        isp_printf(2,pcVar5,"tisp_param_operate_process",uVar7);
        return 0xffffffff;
      }
      pcVar1 = tisp_rdns_param_array_get;
    }
    (*pcVar1)(iVar2,opmsg + 6,local_20);
    piVar3 = opmsg;
    *opmsg = *param_1;
    piVar3[1] = param_1[1];
    piVar3[2] = param_1[2];
    uVar4 = local_20[0] + 0x18U & 0xffff;
    piVar3[3] = param_1[3];
    piVar3[4] = param_1[4];
    goto LAB_000222e4;
  }
  if (iVar2 == 1) {
    local_20[0] = param_1[2];
    iVar2 = param_1[1];
    if ((iVar2 == 0) || (iVar2 - 1U < 0x22)) {
      pcVar1 = tisp_ae_param_array_set;
    }
    else if (iVar2 - 0x23U < 0x19) {
      pcVar1 = tisp_awb_param_array_set;
    }
    else if (iVar2 - 0x3cU < 2) {
      pcVar1 = tisp_gamma_param_array_set;
    }
    else if (iVar2 - 0x3eU < 0x16) {
      pcVar1 = tisp_gib_param_array_set;
    }
    else if (iVar2 - 0x54U < 0xb) {
      pcVar1 = tisp_lsc_param_array_set;
    }
    else if (iVar2 - 0x5fU < 0x4a) {
      pcVar1 = tisp_dmsc_param_array_set;
    }
    else if (iVar2 - 0xa9U < 0xc) {
      pcVar1 = tisp_ccm_param_array_set;
    }
    else if (iVar2 - 0xb5U < 0x31) {
      pcVar1 = tisp_sharpen_param_array_set;
    }
    else if (iVar2 - 0xe6U < 0x1f) {
      pcVar1 = tisp_dpc_param_array_set;
    }
    else if (iVar2 - 0x105U < 0x7b) {
      pcVar1 = tisp_sdns_param_array_set;
    }
    else if (iVar2 - 0x180U < 0x1d7) {
      pcVar1 = tisp_mdns_param_array_set;
    }
    else if (iVar2 - 0x357U < 3) {
      pcVar1 = tisp_clm_param_array_set;
    }
    else if (iVar2 - 0x35aU < 0x26) {
      pcVar1 = tisp_defog_param_array_set;
    }
    else if (iVar2 - 0x380U < 0x2c) {
      pcVar1 = tisp_adr_param_array_set;
    }
    else if (iVar2 == 0x3ac) {
      iVar2 = 0x3ac;
      pcVar1 = tisp_hldc_param_array_set;
    }
    else if (iVar2 - 0x3adU < 0x13) {
      pcVar1 = tisp_af_param_array_set;
    }
    else if (iVar2 - 0x3c0U < 0x26) {
      pcVar1 = tisp_bcsh_param_array_set;
    }
    else if (iVar2 - 0x3e6U < 0xf) {
      pcVar1 = tisp_ydns_param_array_set;
    }
    else if (iVar2 - 0x3f5U < 10) {
      pcVar1 = tisp_gb_param_array_set;
    }
    else if (iVar2 - 0x3ffU < 0x33) {
      pcVar1 = tisp_wdr_param_array_set;
    }
    else {
      if (0x14 < iVar2 - 0x432U) {
        uVar7 = 0xac;
        goto LAB_00021ea8;
      }
      pcVar1 = tisp_rdns_param_array_set;
    }
    (*pcVar1)(iVar2,param_1 + 6,local_20);
    uVar4 = 0x18;
    piVar3 = opmsg;
    goto LAB_000222e4;
  }
  if (iVar2 == 2) {
    iVar2 = param_1[1];
    piVar8 = param_1 + 6;
    *opmsg = 2;
    piVar3[1] = param_1[1];
    piVar3[2] = param_1[2];
    piVar3[3] = param_1[3];
    iVar6 = param_1[4];
    piVar3[5] = 0;
    piVar3[4] = iVar6;
    if (iVar2 == 0) {
      memcpy(&local_b8,piVar8,0x98);
      for (uVar4 = 0; uVar4 < 0x88; uVar4 = uVar4 + 1) {
        *(char *)((int)&local_4d8 + uVar4) = *(char *)((int)&local_a8 + uVar4);
      }
      pcVar1 = tisp_ae_manual_set;
LAB_00021fd8:
      (*pcVar1)(local_b8,local_b4,local_b0,local_ac);
      uVar4 = 0x18;
      piVar3 = opmsg;
    }
    else {
      if (iVar2 == 1) {
        iVar2 = param_1[2];
        uVar4 = 0xc;
      }
      else {
        if (iVar2 == 0xb) {
          memcpy(&local_b8,piVar8,0x98);
          for (uVar4 = 0; uVar4 < 0x88; uVar4 = uVar4 + 1) {
            *(char *)((int)&local_4d8 + uVar4) = *(char *)((int)&local_a8 + uVar4);
          }
          pcVar1 = tisp_ae_min_max_set;
          goto LAB_00021fd8;
        }
        if (iVar2 == 0xd) {
          __dest = (int *)private_kmalloc(0x42c,0xd0);
          memcpy(__dest,piVar8,0x42c);
          for (uVar4 = 0; uVar4 < 0x41c; uVar4 = uVar4 + 1) {
            *(char *)((int)&local_4d8 + uVar4) = *(char *)((int)__dest + uVar4 + 0x10);
          }
          tisp_s_ae_hist(*__dest,__dest[1],__dest[2],__dest[3]);
          pcVar1 = private_kfree;
LAB_00022148:
          (*pcVar1)(__dest);
          uVar4 = 0x18;
          piVar3 = opmsg;
          goto LAB_000222e4;
        }
        if (iVar2 != 2) {
          if (iVar2 == 3) {
            iVar2 = 0;
            if ((param_1[2] != 0) && (iVar2 = 1, param_1[2] != 1)) {
              isp_printf(2,"%s:%d::Cant support this mode!!!\n","tisp_param_operate_process",0xdb);
              iVar2 = 0;
            }
            pcVar1 = tisp_day_or_night_s_ctrl;
          }
          else if (iVar2 == 0xc) {
            iVar2 = param_1[2];
            pcVar1 = tisp_s_Hilightdepress;
          }
          else {
            if (iVar2 != 0x10) {
              if (iVar2 == 9) {
                __dest = (int *)(uint)*(char *)(param_1 + 2);
                pcVar1 = tisp_set_brightness;
              }
              else if (iVar2 == 6) {
                __dest = (int *)(uint)*(char *)(param_1 + 2);
                pcVar1 = tisp_set_saturation;
              }
              else if (iVar2 == 7) {
                __dest = (int *)(uint)*(char *)(param_1 + 2);
                pcVar1 = tisp_set_sharpness;
              }
              else {
                if (iVar2 != 8) {
                  if (iVar2 == 5) {
                    memcpy(&local_b8,piVar8,0x1c);
                    local_4d8 = local_a8;
                    local_4d4 = local_a4;
                    local_4d0 = local_a0;
                    tisp_s_wb_attr(local_b8,local_b4,local_b0,local_ac);
                    uVar4 = 0x18;
                    piVar3 = opmsg;
                  }
                  else if (iVar2 == 10) {
                    memcpy(&local_b8,piVar8,0x14);
                    local_4d8 = local_a8;
                    tisp_s_fcrop_control(local_b8,local_b4,local_b0,local_ac);
                    uVar4 = 0x18;
                    piVar3 = opmsg;
                  }
                  else {
                    isp_printf(2,"%s,%d: unsupport msg arraty id\n","tisp_param_operate_process",
                               0xfa);
                    opmsg[5] = 1;
                    uVar4 = 0x18;
                    piVar3 = opmsg;
                  }
                  goto LAB_000222e4;
                }
                __dest = (int *)(uint)*(char *)(param_1 + 2);
                pcVar1 = tisp_set_contrast;
              }
              goto LAB_00022148;
            }
            iVar2 = param_1[2];
            pcVar1 = tisp_s_wdr_en;
          }
          (*pcVar1)(iVar2);
          uVar4 = 0x18;
          piVar3 = opmsg;
          goto LAB_000222e4;
        }
        iVar2 = param_1[3];
        uVar4 = param_1[2] & 0x1ffff;
      }
      system_reg_write(uVar4,iVar2);
      uVar4 = 0x18;
      piVar3 = opmsg;
    }
    goto LAB_000222e4;
  }
  if (iVar2 != 3) {
    uVar7 = 0x14c;
    pcVar5 = "%s,%d: unsupport msg type\n";
    goto LAB_0002251c;
  }
  iVar2 = param_1[1];
  *opmsg = 3;
  piVar8 = piVar3 + 6;
  piVar3[1] = param_1[1];
  piVar3[2] = param_1[2];
  piVar3[3] = param_1[3];
  iVar6 = param_1[4];
  piVar3[5] = 0;
  piVar3[4] = iVar6;
  if (iVar2 == 0) {
    memcpy(piVar8,&tisp_ae_ctrls,0x98);
    uVar4 = 0xb0;
    piVar3 = opmsg;
    goto LAB_000222e4;
  }
  if (iVar2 == 0xd) {
    local_b8 = private_kmalloc(0x42c,0xd0);
    tisp_g_ae_hist(local_b8);
    memcpy(piVar8,&local_b8,0x42c);
    netlink_send_msg(opmsg,0x444);
    private_kfree(local_b8);
    return 0;
  }
  if (iVar2 == 1) {
    iVar2 = system_reg_read(0xc);
    piVar3 = opmsg;
    opmsg[2] = iVar2;
  }
  else {
    if (iVar2 == 0x10) {
      local_b8 = 0;
      tisp_g_wdr_en();
      iVar2 = local_b8;
    }
    else if (iVar2 == 2) {
      iVar2 = system_reg_read(param_1[2] & 0xfffff);
    }
    else {
      if (iVar2 == 3) {
        iVar2 = tisp_day_or_night_g_ctrl(&local_b8);
        if (iVar2 == 0) {
LAB_00022440:
          iVar6 = 0;
        }
        else {
          iVar6 = 1;
          if (iVar2 != 1) {
            isp_printf(2,"Have no Value\n");
            goto LAB_00022440;
          }
        }
        piVar3 = opmsg;
        opmsg[3] = iVar6;
        goto LAB_000223c0;
      }
      if (iVar2 != 0xc) {
        if (iVar2 == 4) {
          memcpy(piVar8,&sensor_info,0x60);
          uVar4 = 0x78;
          piVar3 = opmsg;
        }
        else {
          if (iVar2 != 5) {
            isp_printf(2,"%s,%d: unsupport msg arraty id\n","tisp_param_operate_process",0x147);
            opmsg[5] = 1;
            return 0;
          }
          tisp_g_wb_attr(&local_b8);
          memcpy(piVar8,&local_b8,0x1c);
          uVar4 = 0x34;
          piVar3 = opmsg;
        }
        goto LAB_000222e4;
      }
      local_b8 = 0;
      tisp_g_Hilightdepress(&local_b8);
      iVar2 = local_b8;
    }
    piVar3 = opmsg;
    opmsg[3] = iVar2;
  }
LAB_000223c0:
  uVar4 = 0x18;
LAB_000222e4:
  netlink_send_msg(piVar3,uVar4);
  return 0;
}



unsigned int isp_tunning_read(int param_1,unsigned int param_2,unsigned int param_3)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int unaff_gp;
  
  uVar1 = 0xfffffff5;
  if (((*(unsigned int *)(param_1 + 0x1c) & 0x80) == 0) && (tispPollValue != '\0')) {
    uVar2 = param_3;
    if (((param_2 + param_3 | param_2 | param_3) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
      __might_sleep("include/linux/kernel.h",0xc9,0);
      __copy_user(param_2,&tispPollValue);
    }
    uVar1 = 0xfffffff2;
    if (uVar2 == 0) {
      tispPollValue = '\0';
      uVar1 = param_3;
    }
  }
  return uVar1;
}



int tisp_code_tuning_open(void)

{
  tisp_par_ioctl = (void *)private_kmalloc(0x500c,0xd0);
  memset(tisp_par_ioctl,0,0x500c);
  return 0;
}



int tisp_top_param_array_get(void *param_1,int *param_2)

{
  tisp_g_wdr_en(&DAT_000b2634);
  memcpy(param_1,&sensor_info,0x60);
  *param_2 = 0x60;
  return 0;
}



int tisp_get_ae_info(int param_1)

{
  *(int *)(param_1 + 4) = 0x98;
  memcpy((void *)(param_1 + 0xc),&tisp_ae_ctrls,0x98);
  return 0;
}



int tisp_set_ae_info(int param_1)

{
  *(int *)(param_1 + 4) = 0x98;
  memcpy(&tisp_ae_ctrls,(void *)(param_1 + 0xc),0x98);
  return 0;
}



int tisp_get_awb_info(int param_1)

{
  char auStack_28 [32];
  
  tisp_g_wb_attr(auStack_28);
  *(int *)(param_1 + 4) = 0x1c;
  memcpy((void *)(param_1 + 0xc),auStack_28,0x1c);
  return 0;
}



int tisp_set_awb_info(int param_1)

{
  int local_28;
  int local_24;
  int local_20;
  int local_1c;
  int local_18;
  int local_14;
  int local_10;
  
  *(int *)(param_1 + 4) = 0x1c;
  memcpy(&local_28,(void *)(param_1 + 0xc),0x1c);
  tisp_s_wb_attr(local_28,local_24,local_20,local_1c,local_18,local_14,local_10);
  return 0;
}



int tisp_reg_map_get(int param_1,int param_2,int *param_3)

{
  int local_res0 [4];
  int local_18 [2];
  
  local_res0[0] = param_1;
  local_18[0] = system_reg_read(param_1 + -0x13300000);
  memcpy((void *)(param_2 + 0xc),local_res0,4);
  memcpy((void *)(param_2 + 0x10),local_18,4);
  *param_3 = 8;
  return 0;
}



int tisp_reg_map_set(int param_1)

{
  int local_18;
  int local_14 [2];
  
  memcpy(local_14,(void *)(param_1 + 0xc),4);
  memcpy(&local_18,(void *)(param_1 + 0x10),4);
  local_14[0] = local_14[0] + -0x13300000;
  system_reg_write(local_14[0],local_18);
  return 0;
}



int tisp_dn_mode_get(int param_1,int *param_2)

{
  int iVar1;
  int local_18 [3];
  
  iVar1 = tisp_day_or_night_g_ctrl();
  if (iVar1 == 0) {
    local_18[0] = 0;
  }
  else if (iVar1 == 1) {
    local_18[0] = 1;
  }
  else {
    isp_printf(2,"Have no Value\n");
  }
  memcpy((void *)(param_1 + 0xc),local_18,4);
  *param_2 = 4;
  return 0;
}



int tisp_dn_mode_set(int param_1)

{
  int uVar1;
  int local_10 [3];
  
  memcpy(local_10,(void *)(param_1 + 0xc),4);
  uVar1 = 0;
  if ((local_10[0] != 0) && (uVar1 = 1, local_10[0] != 1)) {
    isp_printf(2,"%s:%d::Cant support this mode!!!\n","tisp_dn_mode_set",0x1fa);
    uVar1 = 0;
  }
  tisp_day_or_night_s_ctrl(uVar1);
  return 0;
}



int tisp_blc_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x3f5;
  do {
    tisp_gb_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x3ff);
  return 0;
}



int tisp_blc_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x3f5;
  do {
    tisp_gb_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x3ff);
  return 0;
}



int tisp_lsc_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_28 [3];
  
  local_28[0] = 0;
  *param_2 = 0;
  iVar1 = 0x54;
  do {
    tisp_lsc_param_array_get(iVar1,param_1,local_28);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_28[0];
    *param_2 = *param_2 + local_28[0];
  } while (iVar1 != 0x59);
  iVar1 = 0x5c;
  do {
    tisp_lsc_param_array_get(iVar1,param_1,local_28);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_28[0];
    *param_2 = *param_2 + local_28[0];
  } while (iVar1 != 0x5f);
  return 0;
}



int tisp_lsc_set_par_cfg(int param_1,int param_2)

{
  int uVar1;
  int iVar2;
  int local_20 [2];
  
  local_20[0] = 0;
  if (param_1 == 1) {
    uVar1 = 0x59;
  }
  else {
    if (param_1 == 0) {
      iVar2 = 0x54;
      do {
        tisp_lsc_param_array_set(iVar2,param_2,local_20);
        iVar2 = iVar2 + 1;
        param_2 = param_2 + local_20[0];
      } while (iVar2 != 0x59);
      iVar2 = 0x5c;
      do {
        tisp_lsc_param_array_set(iVar2,param_2,local_20);
        iVar2 = iVar2 + 1;
        param_2 = param_2 + local_20[0];
      } while (iVar2 != 0x5f);
      return 0;
    }
    if (param_1 == 2) {
      uVar1 = 0x5a;
    }
    else {
      if (param_1 != 3) {
        return 0;
      }
      uVar1 = 0x5b;
    }
  }
  tisp_lsc_param_array_set(uVar1,param_2,local_20);
  return 0;
}



int tisp_wdr_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x3ff;
  do {
    tisp_wdr_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x432);
  return 0;
}



int tisp_wdr_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x3ff;
  do {
    tisp_wdr_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x432);
  return 0;
}



int tisp_dpc_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0xe6;
  do {
    tisp_dpc_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x105);
  return 0;
}



int tisp_dpc_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0xe6;
  do {
    tisp_dpc_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x105);
  return 0;
}



int tisp_gib_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x3e;
  do {
    tisp_gib_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x54);
  return 0;
}



int tisp_gib_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x3e;
  do {
    tisp_gib_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x54);
  return 0;
}



int tisp_rdns_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x432;
  do {
    tisp_rdns_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x447);
  return 0;
}



int tisp_rdns_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x432;
  do {
    tisp_rdns_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x447);
  return 0;
}



int tisp_adr_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x380;
  do {
    tisp_adr_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x3ac);
  return 0;
}



int tisp_adr_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x380;
  do {
    tisp_adr_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x3ac);
  return 0;
}



int tisp_dmsc_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x5f;
  do {
    tisp_dmsc_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0xa9);
  return 0;
}



int tisp_dmsc_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x5f;
  do {
    tisp_dmsc_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0xa9);
  return 0;
}



int tisp_ccm_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0xa9;
  do {
    tisp_ccm_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0xb5);
  return 0;
}



int tisp_ccm_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0xa9;
  do {
    tisp_ccm_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0xb5);
  return 0;
}



int tisp_gamma_get_par_cfg(int param_1,int *param_2)

{
  int local_18 [2];
  
  *param_2 = 0;
  local_18[0] = 0;
  tisp_gamma_param_array_get(0x3c,param_1,local_18);
  *param_2 = *param_2 + local_18[0];
  tisp_gamma_param_array_get(0x3d,param_1 + local_18[0],local_18);
  *param_2 = *param_2 + local_18[0];
  return 0;
}



int tisp_gamma_set_par_cfg(int param_1)

{
  int local_18 [3];
  
  local_18[0] = 0;
  tisp_gamma_param_array_set(0x3c,param_1,local_18);
  tisp_gamma_param_array_set(0x3d,param_1 + local_18[0],local_18);
  return 0;
}



int tisp_defog_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x35a;
  do {
    tisp_defog_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x380);
  return 0;
}



int tisp_defog_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x35a;
  do {
    tisp_defog_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x380);
  return 0;
}



int tisp_mdns_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x180;
  do {
    tisp_mdns_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x357);
  return 0;
}



int tisp_mdns_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x180;
  do {
    tisp_mdns_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x357);
  return 0;
}



int tisp_ydns_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x3e6;
  do {
    tisp_ydns_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x3f5);
  return 0;
}



int tisp_ydns_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x3e6;
  do {
    tisp_ydns_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x3f5);
  return 0;
}



int tisp_bcsh_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x3c0;
  do {
    tisp_bcsh_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x3e6);
  return 0;
}



int tisp_bcsh_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x3c0;
  do {
    tisp_bcsh_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x3e6);
  return 0;
}



int tisp_clm_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x357;
  do {
    tisp_clm_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x35a);
  return 0;
}



int tisp_clm_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x357;
  do {
    tisp_clm_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x35a);
  return 0;
}



int tisp_ysp_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0xb5;
  do {
    tisp_sharpen_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0xe6);
  return 0;
}



int tisp_ysp_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0xb5;
  do {
    tisp_sharpen_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0xe6);
  return 0;
}



int tisp_sdns_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x105;
  do {
    tisp_sdns_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x180);
  return 0;
}



int tisp_sdns_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x105;
  do {
    tisp_sdns_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x180);
  return 0;
}



int tisp_af_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x3ad;
  do {
    tisp_af_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x3c0);
  return 0;
}



int tisp_af_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x3ad;
  do {
    tisp_af_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x3c0);
  return 0;
}



int tisp_hldc_get_par_cfg(int param_1,int *param_2)

{
  int local_10 [2];
  
  *param_2 = 0;
  local_10[0] = 0;
  tisp_hldc_param_array_get(0x3ac,param_1,local_10);
  *param_2 = *param_2 + local_10[0];
  return 0;
}



int tisp_hldc_set_par_cfg(int param_1)

{
  int local_10 [3];
  
  local_10[0] = 0;
  tisp_hldc_param_array_set(0x3ac,param_1,local_10);
  return 0;
}



int tisp_ae_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 1;
  do {
    tisp_ae_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x23);
  return 0;
}



int tisp_ae_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 1;
  do {
    tisp_ae_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x23);
  return 0;
}



int tisp_awb_get_par_cfg(int param_1,int *param_2)

{
  int iVar1;
  int local_20 [2];
  
  local_20[0] = 0;
  *param_2 = 0;
  iVar1 = 0x23;
  do {
    tisp_awb_param_array_get(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
    *param_2 = *param_2 + local_20[0];
  } while (iVar1 != 0x3c);
  return 0;
}



int tisp_awb_set_par_cfg(int param_1)

{
  int iVar1;
  int local_20 [3];
  
  local_20[0] = 0;
  iVar1 = 0x23;
  do {
    tisp_awb_param_array_set(iVar1,param_1,local_20);
    iVar1 = iVar1 + 1;
    param_1 = param_1 + local_20[0];
  } while (iVar1 != 0x3c);
  return 0;
}



int tisp_code_tuning_ioctl(int param_1,unsigned int param_2,unsigned int param_3)

{
  unsigned int uVar1;
  code *pcVar2;
  int *puVar3;
  char *pcVar4;
  int iVar5;
  size_t __n;
  int uVar6;
  unsigned int uVar7;
  int unaff_gp;
  
  puVar3 = tisp_par_ioctl;
  if ((param_2 >> 8 & 0xff) != 0x74) {
    pcVar4 = "_IOC_TYPE error !!! cmd is %d\n";
LAB_00023f38:
    isp_printf(2,pcVar4,param_2);
    return 0xffffffea;
  }
  if (0x32 < (param_2 & 0xff)) {
    pcVar4 = "_IOC_NR error !!! cmd is %d\n";
    goto LAB_00023f38;
  }
  switch(param_2) {
  case 0x20007400:
    uVar7 = param_3 + 0x500c | param_3;
    if ((uVar7 & *(unsigned int *)(unaff_gp + 0x18)) != 0) goto LAB_00023f9c;
    __might_sleep("include/linux/kernel.h",0xc9,0);
    iVar5 = 0x500c;
    __copy_user(puVar3,param_3);
    if (iVar5 != 0) goto LAB_00023f9c;
    switch(*tisp_par_ioctl) {
    case 0:
      pcVar2 = tisp_top_param_array_get;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 1:
      pcVar2 = tisp_blc_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 2:
      pcVar2 = tisp_lsc_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 3:
      pcVar2 = tisp_wdr_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 4:
      pcVar2 = tisp_dpc_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 5:
      pcVar2 = tisp_gib_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 6:
      pcVar2 = tisp_rdns_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 7:
      pcVar2 = tisp_adr_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 8:
      pcVar2 = tisp_dmsc_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 9:
      pcVar2 = tisp_ccm_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 10:
      pcVar2 = tisp_gamma_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0xb:
      pcVar2 = tisp_defog_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0xc:
      pcVar2 = tisp_mdns_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0xd:
      pcVar2 = tisp_ydns_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0xe:
      pcVar2 = tisp_bcsh_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0xf:
      pcVar2 = tisp_clm_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0x10:
      pcVar2 = tisp_ysp_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0x11:
      pcVar2 = tisp_sdns_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0x12:
      pcVar2 = tisp_af_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0x13:
      pcVar2 = tisp_hldc_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0x14:
      pcVar2 = tisp_ae_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    case 0x15:
      pcVar2 = tisp_awb_get_par_cfg;
      puVar3 = tisp_par_ioctl + 3;
      break;
    default:
      goto switchD_00024018_caseD_16;
    case 0x17:
      tisp_reg_map_get(tisp_par_ioctl[2],tisp_par_ioctl,tisp_par_ioctl + 1);
      uVar1 = *(unsigned int *)(unaff_gp + 0x18);
      goto LAB_00024210;
    case 0x18:
      pcVar2 = tisp_dn_mode_get;
      puVar3 = tisp_par_ioctl;
    }
    (*pcVar2)(puVar3,tisp_par_ioctl + 1);
switchD_00024018_caseD_16:
    uVar1 = *(unsigned int *)(unaff_gp + 0x18);
LAB_00024210:
    puVar3 = tisp_par_ioctl;
    if ((uVar7 & uVar1) != 0) goto LAB_00023f9c;
    __might_sleep("include/linux/kernel.h",0xc9,0);
    goto LAB_000245d4;
  case 0x20007401:
    if (((param_3 + 0x500c | param_3) & *(unsigned int *)(unaff_gp + 0x18)) != 0) goto LAB_00023f9c;
    __might_sleep("include/linux/kernel.h",0xc9,0);
    iVar5 = 0x500c;
    __copy_user(puVar3,param_3);
    if (iVar5 != 0) goto LAB_00023f9c;
    puVar3 = tisp_par_ioctl;
    switch(*tisp_par_ioctl) {
    case 1:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_blc_set_par_cfg;
      break;
    case 2:
      tisp_lsc_set_par_cfg(tisp_par_ioctl[2],tisp_par_ioctl + 3);
      return 0;
    case 3:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_wdr_set_par_cfg;
      break;
    case 4:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_dpc_set_par_cfg;
      break;
    case 5:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_gib_set_par_cfg;
      break;
    case 6:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_rdns_set_par_cfg;
      break;
    case 7:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_adr_set_par_cfg;
      break;
    case 8:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_dmsc_set_par_cfg;
      break;
    case 9:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_ccm_set_par_cfg;
      break;
    case 10:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_gamma_set_par_cfg;
      break;
    case 0xb:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_defog_set_par_cfg;
      break;
    case 0xc:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_mdns_set_par_cfg;
      break;
    case 0xd:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_ydns_set_par_cfg;
      break;
    case 0xe:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_bcsh_set_par_cfg;
      break;
    case 0xf:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_clm_set_par_cfg;
      break;
    case 0x10:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_ysp_set_par_cfg;
      break;
    case 0x11:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_sdns_set_par_cfg;
      break;
    case 0x12:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_af_set_par_cfg;
      break;
    case 0x13:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_hldc_set_par_cfg;
      break;
    case 0x14:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_ae_set_par_cfg;
      break;
    case 0x15:
      puVar3 = tisp_par_ioctl + 3;
      pcVar2 = tisp_awb_set_par_cfg;
      break;
    default:
      isp_printf(2,"[ %s:%d ] Have no this ID(%d)\n","tisp_set_par_process",0x4b0,*tisp_par_ioctl);
      return 0;
    case 0x17:
      pcVar2 = tisp_reg_map_set;
      break;
    case 0x18:
      pcVar2 = tisp_dn_mode_set;
    }
LAB_0002470c:
    (*pcVar2)(puVar3);
switchD_00023f74_caseD_20007402:
    return 0;
  default:
    goto switchD_00023f74_caseD_20007402;
  case 0x20007403:
    pcVar2 = tisp_get_ae_info;
    break;
  case 0x20007404:
    if (((param_3 + 0x500c | param_3) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
      __might_sleep("include/linux/kernel.h",0xc9,0);
      iVar5 = 0x500c;
      __copy_user(puVar3,param_3);
      if (iVar5 == 0) {
        pcVar2 = tisp_set_ae_info;
        puVar3 = tisp_par_ioctl;
        goto LAB_0002470c;
      }
    }
    uVar6 = 0x506;
LAB_0002469c:
    isp_printf(2,"%s:%d:set ioctl par copy_to_user error!!!\n","tisp_code_tuning_ioctl",uVar6);
    return 0xfffffff2;
  case 0x20007406:
    pcVar2 = tisp_get_awb_info;
    break;
  case 0x20007407:
    if (((param_3 + 0x500c | param_3) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
      __might_sleep("include/linux/kernel.h",0xc9,0);
      iVar5 = 0x500c;
      __copy_user(puVar3,param_3);
      if (iVar5 == 0) {
        pcVar2 = tisp_set_awb_info;
        puVar3 = tisp_par_ioctl;
        goto LAB_0002470c;
      }
    }
    uVar6 = 0x514;
    goto LAB_0002469c;
  case 0x20007408:
    uVar7 = param_3 + 0x500c | param_3;
    if ((uVar7 & *(unsigned int *)(unaff_gp + 0x18)) != 0) goto LAB_00023f9c;
    __might_sleep("include/linux/kernel.h",0xc9,0);
    iVar5 = 0x500c;
    __copy_user(puVar3,param_3);
    puVar3 = tisp_par_ioctl;
    if (iVar5 != 0) goto LAB_00023f9c;
    tisp_par_ioctl[1] = 0xb;
    __n = 0xb;
    pcVar4 = "V-20221024";
    goto LAB_000244d0;
  case 0x20007409:
    uVar7 = param_3 + 0x500c | param_3;
    if ((uVar7 & *(unsigned int *)(unaff_gp + 0x18)) != 0) goto LAB_00023f9c;
    __might_sleep("include/linux/kernel.h",0xc9,0);
    iVar5 = 0x500c;
    __copy_user(puVar3,param_3);
    puVar3 = tisp_par_ioctl;
    if (iVar5 != 0) goto LAB_00023f9c;
    tisp_par_ioctl[1] = 0xf;
    __n = 0xf;
    pcVar4 = "V-T31-20221024";
LAB_000244d0:
    memcpy(puVar3 + 3,pcVar4,__n);
    puVar3 = tisp_par_ioctl;
    if ((uVar7 & *(unsigned int *)(unaff_gp + 0x18)) != 0) goto LAB_00023f9c;
    __might_sleep("include/linux/kernel.h",0xc9,0);
    goto LAB_000245d4;
  }
  (*pcVar2)(tisp_par_ioctl);
  puVar3 = tisp_par_ioctl;
  if (((param_3 + 0x500c | param_3) & *(unsigned int *)(unaff_gp + 0x18)) == 0) {
    __might_sleep("include/linux/kernel.h",0xc9,0);
LAB_000245d4:
    iVar5 = 0x500c;
    __copy_user(param_3,puVar3);
    if (iVar5 == 0) {
      return 0;
    }
  }
LAB_00023f9c:
  isp_printf(2,"get ioctl par copy_to_user error!!!\n");
  return 0xfffffff2;
}



int tisp_code_create_tuning_node(void)

{
  unsigned int local_18 [2];
  
  if (major == 0) {
    alloc_chrdev_region(local_18,0,1,&_LC12);
    major = local_18[0] >> 0x14;
  }
  else {
    local_18[0] = major << 0x14;
    register_chrdev_region(local_18[0],1,&_LC12);
  }
  cdev_init(tisp_cdev,tisp_fops);
  cdev_add(tisp_cdev,local_18[0],1);
  cls = __class_create(&__this_module,&_LC12,0x10000);
  device_create(cls,0,major << 0x14,0,&_LC12);
  tispPollValue = 0;
  __init_waitqueue_head(&dumpQueue,"&dumpQueue",0x10000);
  return 0;
}



int tisp_param_operate_init(void)

{
  int uVar1;
  
  opmsg = private_kmalloc(&Elf32_RegInfo_MIPS_00010018,0xd0);
  if (opmsg == 0) {
    isp_printf(2,"%s,%d: private_kmalloc error\n","tisp_param_operate_init",0x158);
    uVar1 = 0xffffffff;
  }
  else {
    tisp_netlink_init();
    tisp_netlink_event_set_cb(tisp_param_operate_process);
    tisp_code_create_tuning_node();
    uVar1 = 0;
  }
  return uVar1;
}



void tisp_code_destroy_tuning_node(void)

{
  int iVar1;
  
  iVar1 = major;
  cdev_del(tisp_cdev);
  device_destroy(cls,major << 0x14);
  class_destroy(cls);
  unregister_chrdev_region(iVar1 << 0x14,1);
  major = 0;
  return;
}



int tisp_param_operate_deinit(void)

{
  tisp_netlink_exit();
  if (opmsg != 0) {
    private_kfree();
    opmsg = 0;
  }
  tisp_code_destroy_tuning_node();
  return 0;
}



int tisp_again_update(void)

{
  return 0;
}



int tisp_tgain_update(int param_1,int param_2)

{
  tisp_gib_gain_interpolation();
  tisp_gb_blc_again_interp(param_1,0);
  tisp_dmsc_refresh(param_1);
  tisp_sharpen_refresh(param_1);
  tisp_sdns_refresh(param_1);
  tisp_dpc_refresh(param_1);
  tisp_lsc_gain_update(param_1,param_2);
  tisp_ydns_gain_update(param_1,param_2);
  tisp_rdns_gain_update(param_1,param_2);
  tisp_mdns_refresh(param_1);
  return 0;
}



int tisp_ev_update(int param_1,int param_2)

{
  int iVar1;
  int iVar2;
  unsigned int uVar3;
  
  uVar3 = system_reg_read(0xc);
  if ((ev_last != param_1) || (iVar1 = ev_last, iVar2 = DAT_000b276c, DAT_000b276c != param_2)) {
    tisp_awb_ev_update(param_1,param_2);
    tisp_ccm_ev_update(param_1,param_2);
    if ((uVar3 & 0x80) == 0) {
      tisp_adr_ev_update(param_1,param_2);
    }
    if ((uVar3 & 0x800) == 0) {
      tisp_defog_ev_update(param_1,param_2);
    }
    tisp_bcsh_ev_update(param_1,param_2);
    iVar1 = param_1;
    iVar2 = param_2;
    if ((uVar3 & 8) == 0) {
      tisp_wdr_ev_update(param_1,param_2);
      iVar1 = param_1;
      iVar2 = param_2;
    }
  }
  DAT_000b276c = iVar2;
  ev_last = iVar1;
  return 0;
}



int tisp_ct_update(int param_1,int param_2)

{
  unsigned int uVar1;
  
  uVar1 = system_reg_read(0xc);
  if ((uVar1 & 0x200) == 0) {
    tisp_ccm_ct_update(param_1,param_2);
  }
  if ((uVar1 & 0x40) == 0) {
    tisp_lsc_ct_update(param_1,param_2);
  }
  if ((uVar1 & 0x10000) == 0) {
    tisp_bcsh_ct_update(param_1,param_2);
  }
  return 0;
}



int tisp_ae_ir_update(void)

{
  tisp_gib_deir_ir_update();
  return 0;
}



int ip_done_interrupt_static(void)

{
  unsigned int uVar1;
  
  uVar1 = system_reg_read(0xc);
  if ((uVar1 & 0x40) == 0) {
    tisp_lsc_write_lut_datas();
  }
  return 2;
}



int tisp_deinit(void)

{
  int iVar1;
  
  iVar1 = tisp_param_operate_deinit();
  if (iVar1 != 0) {
    isp_printf(2,"%s,%d: tisp_param_operate_deinit error %d\n","tisp_deinit",0x23a,iVar1);
  }
  iVar1 = tisp_event_exit();
  if (iVar1 != 0) {
    isp_printf(2,"%s,%d: tisp_event_exit error %d\n","tisp_deinit",0x23e,iVar1);
  }
  if (DAT_000b26fc != 0) {
    private_kfree();
    DAT_000b26fc = 0;
  }
  if (DAT_000b2714 != 0) {
    private_kfree();
    DAT_000b2714 = 0;
  }
  if (DAT_000b272c != 0) {
    private_kfree();
    DAT_000b272c = 0;
  }
  if (DAT_000b2738 != 0) {
    private_kfree();
    DAT_000b2738 = 0;
  }
  if (DAT_000b2744 != 0) {
    private_kfree();
    DAT_000b2744 = 0;
  }
  if (DAT_000b2750 != 0) {
    private_kfree();
    DAT_000b2750 = 0;
  }
  if (DAT_000b275c != 0) {
    private_kfree();
    DAT_000b275c = 0;
  }
  if (tparams_day != 0) {
    private_vfree();
    tparams_day = 0;
  }
  if (tparams_night != 0) {
    private_vfree();
    tparams_night = 0;
  }
  if (tparams_cust != 0) {
    private_vfree();
    tparams_cust = 0;
  }
  tisp_deinit_free();
  return 0;
}



int tisp_fw_process(void)

{
  tisp_event_process();
  return 0;
}



int tisp_channel_start(unsigned int param_1)

{
  bool bVar1;
  int uVar2;
  int uVar3;
  int uVar4;
  int uVar5;
  int uVar6;
  int uVar7;
  int uVar8;
  int uVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  int iVar12;
  unsigned int uVar13;
  int *unaff_s7;
  
  if (msca_ch_en == 0xffffffff) {
    msca_ch_en = 0;
  }
  msca_ch_en = 1 << (param_1 & 0x1f) | msca_ch_en;
  uVar10 = msca_dmaout_arb | 0xe;
  bVar1 = msca_dmaout_arb != 0xffffffff;
  msca_dmaout_arb = 0xe;
  if (bVar1) {
    msca_dmaout_arb = uVar10;
  }
  if (param_1 == 1) {
    unaff_s7 = &ds1_attr;
  }
  else if (param_1 == 2) {
    unaff_s7 = &ds2_attr;
  }
  else if (param_1 == 0) {
    unaff_s7 = &ds0_attr;
  }
  else {
    isp_printf(2,"can not support this chanel!!!!\n");
  }
  system_reg_write(0x9818,msca_dmaout_arb);
  uVar10 = DAT_000b25d4;
  uVar13 = DAT_000b25d0;
  if (unaff_s7[8] != 1) {
    uVar10 = DAT_000b26f4;
    uVar13 = tispinfo;
  }
  if (((uint)(unaff_s7[1] << 1) < uVar13) || ((uint)(unaff_s7[2] << 1) < uVar10)) {
    iVar12 = (param_1 + 0x98) * 0x100;
    system_reg_write(iVar12 + 0x1c0,0x40080);
    system_reg_write(iVar12 + 0x1c4,0x40080);
    system_reg_write(iVar12 + 0x1c8,0x40080);
    system_reg_write(iVar12 + 0x1cc,0x40080);
    uVar11 = 1 << (param_1 + 8 & 0x1f) | 1 << (param_1 + 0xb & 0x1f) | msca_ch_en;
  }
  else {
    iVar12 = (param_1 + 0x98) * 0x100;
    system_reg_write(iVar12 + 0x1c0,0x200);
    system_reg_write(iVar12 + 0x1c4,0);
    system_reg_write(iVar12 + 0x1c8,0x200);
    system_reg_write(iVar12 + 0x1cc,0);
    uVar11 = ~(1 << (param_1 + 8 & 0x1f) | 1 << (param_1 + 0xb & 0x1f)) & msca_ch_en;
  }
  msca_ch_en = uVar11 | 0xf0000;
  system_reg_write(0x9804);
  uVar2 = system_reg_read(0x9864);
  uVar3 = system_reg_read(0x9860);
  iVar12 = (param_1 + 0x98) * 0x100;
  uVar4 = system_reg_read(iVar12 + 0x180);
  uVar5 = system_reg_read(iVar12 + 0x198);
  uVar6 = system_reg_read(iVar12 + 0x128);
  uVar7 = system_reg_read(iVar12 + 300);
  uVar8 = system_reg_read(iVar12 + 0x104);
  uVar9 = system_reg_read(iVar12 + 0x100);
  isp_printf(0,
             "chax is %d,reg value: src size is 0x%x,src pog is 0x%x,dmaout y stri is 0x%x,uv stri is 0x%x,crop opos is 0x%x,crop size is 0x%x,rse step is 0x%x,rsz osize is 0x%x,input width is %d,height is %d,scaler width is %d,height is %d\n"
             ,param_1,uVar2,uVar3,uVar4,uVar5,uVar6,uVar7,uVar8,uVar9,uVar13,uVar10,unaff_s7[1],
             unaff_s7[2]);
  return 0;
}



int tisp_channel_stop(unsigned int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int iVar3;
  
  uVar2 = 1 << (param_1 & 0x1f);
  if (msca_ch_en == 0xffffffff) {
    msca_ch_en = 0;
  }
  msca_ch_en = ~uVar2 & msca_ch_en;
  iVar3 = 0xbb9;
  system_reg_write(0x9804);
  do {
    uVar1 = system_reg_read(0x9808);
    iVar3 = iVar3 + -1;
    private_msleep(1);
    if (iVar3 == 0) {
      isp_printf(2,"error(%s,%d): wait ch%d stop too long\n","tisp_channel_stop",0x2b9,param_1);
      return 0;
    }
  } while ((uVar2 & uVar1) != 0);
  return 0;
}



int tisp_channel_fifo_clear(int param_1)

{
  int iVar1;
  
  iVar1 = (param_1 + 0x98) * 0x100;
  system_reg_write(iVar1 + 0x19c,1);
  system_reg_write(iVar1 + 0x1a0,1);
  system_reg_write(iVar1 + 0x1a4,1);
  system_reg_write(iVar1 + 0x1a8,1);
  return 0;
}



int tisp_channel_attr_set(int param_1,int *param_2)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  int *__dest;
  unsigned int uVar16;
  unsigned int uVar17;
  
  iVar1 = param_2[2];
  iVar2 = param_2[1];
  iVar3 = *param_2;
  iVar4 = param_2[7];
  iVar5 = param_2[6];
  iVar6 = param_2[5];
  iVar7 = param_2[4];
  iVar8 = param_2[3];
  iVar9 = param_2[0xc];
  iVar10 = param_2[0xb];
  iVar11 = param_2[10];
  iVar12 = param_2[9];
  iVar13 = param_2[8];
  uVar16 = DAT_000b26f4;
  isp_printf(0,
             "chan %d:input size is %d x %d,cattr fcrop en x y width height is %d, %d, %d, %d, %d,crop  %d, %d, %d, %d, %d,scaler is  %d, %d, %d\n"
             ,param_1,tispinfo,DAT_000b26f4,iVar13,iVar12,iVar11,iVar10,iVar9,iVar8,iVar7,iVar6,
             iVar5,iVar4,iVar3,iVar2,iVar1);
  if (param_1 == 0) {
    __dest = &ds0_attr;
  }
  else if (param_1 == 1) {
    __dest = &ds1_attr;
  }
  else {
    if (param_1 != 2) goto LAB_000254bc;
    __dest = &ds2_attr;
  }
  memcpy(__dest,param_2,0x34);
LAB_000254bc:
  if (DAT_000b25c4 == 0) {
    DAT_000b25c8 = 0;
    DAT_000b25cc = 0;
    DAT_000b25d0 = tispinfo;
    DAT_000b25d4 = DAT_000b26f4;
    uVar16 = 0;
  }
  else {
    if ((tispinfo < DAT_000b25d0 + DAT_000b25c8) || (DAT_000b26f4 < DAT_000b25d4 + DAT_000b25cc)) {
      isp_printf(2,"%s:%d::fcrop attr is wrong!\n","tisp_channel_attr_set",0x2e4,uVar16,iVar13,
                 iVar12,iVar11,iVar10,iVar9,iVar8,iVar7,iVar6,iVar5,iVar4,iVar3,iVar2,iVar1);
      return 0xffffffff;
    }
    uVar16 = DAT_000b25c8 << 0x10 | DAT_000b25cc;
  }
  uVar14 = DAT_000b25d4;
  uVar15 = DAT_000b25d0;
  system_reg_write(0x9860,uVar16);
  system_reg_write(0x9864,uVar15 << 0x10 | uVar14);
  if (*param_2 == 0) {
    param_2[1] = uVar15;
    param_2[2] = uVar14;
    uVar16 = uVar15;
    uVar17 = uVar14;
  }
  else {
    uVar16 = param_2[1];
    uVar17 = param_2[2];
  }
  iVar1 = (param_1 + 0x99) * 0x100;
  system_reg_write(iVar1,uVar16 << 0x10 | uVar17);
  system_reg_write(iVar1 + 4,(uVar15 << 9) / uVar16 << 0x10 | (uVar14 << 9) / uVar17 & 0xffff);
  if (param_2[3] == 0) {
    param_2[4] = 0;
    param_2[5] = 0;
    param_2[6] = uVar16;
    param_2[7] = uVar17;
    uVar15 = uVar16;
    uVar14 = uVar17;
  }
  else {
    uVar15 = param_2[6];
    uVar14 = param_2[7];
    if ((uVar16 < uVar15 + param_2[4]) || (uVar17 < uVar14 + param_2[5])) {
      isp_printf(2,
                 "%s:%d::crop attr is wrong!crop width is %d,cropx is %d,scaout_w is %d,crop height is %d,crop y is %d,scaout y is %d\n"
                 ,"tisp_channel_attr_set",0x304,uVar15,param_2[4],uVar16,uVar14,param_2[5],uVar17);
      return 0xffffffff;
    }
  }
  system_reg_write(iVar1 + 0x2c,uVar15 << 0x10 | uVar14);
  system_reg_write(iVar1 + 0x28,param_2[4] << 0x10 | param_2[5]);
  system_reg_write(iVar1 + 0x80,uVar15);
  system_reg_write(iVar1 + 0x98,uVar15);
  return 0;
}



int tiziano_load_parameters(char *param_1)

{
  char cVar1;
  char cVar2;
  void *pvVar3;
  char *__s;
  unsigned int uVar4;
  int iVar5;
  int iVar6;
  char *pcVar7;
  unsigned int uVar8;
  char *pcVar9;
  char cVar10;
  unsigned int *puVar11;
  unsigned int *puVar12;
  int uVar13;
  code *pcVar14;
  unsigned int uVar15;
  char *pcVar16;
  unsigned int uVar17;
  char *pcVar18;
  int uVar19;
  char acStack_88 [64];
  int local_48;
  code *local_44;
  code *local_40;
  code *local_3c;
  code *local_38;
  code *local_34;
  code *local_30;
  
  __s = (char *)private_vmalloc(0x34);
  local_44 = private_vmalloc;
  if (__s == (char *)0x0) {
    isp_printf(2,"Failed to private_kmalloc TISPParamManage\n");
    return 0xffffffff;
  }
  memset(__s,0,0x34);
  snprintf(__s,8,"%s");
  pcVar16 = __s + 8;
  snprintf(pcVar16,8,"header%d");
  sprintf(acStack_88,param_1);
  uVar4 = private_filp_open(acStack_88,0,0);
  local_40 = memset;
  local_3c = snprintf;
  local_38 = private_filp_open;
  if (0xfffff000 < uVar4) {
    isp_printf(2,"ISP: open %s file for isp calibrate read failed\n",acStack_88);
    return 0xffffffff;
  }
  iVar5 = *(int *)(*(int *)(uVar4 + 0xc) + 0x28);
  uVar17 = *(unsigned int *)(iVar5 + 0x30);
  iVar5 = *(int *)(iVar5 + 0x34);
  private_get_fs(&local_48);
  uVar19 = local_48;
  private_set_fs(0);
  local_34 = private_get_fs;
  pcVar14 = (code *)(uVar4 + 0x28);
  if (*(int *)(__s + 0x28) == 0) {
    local_30 = (code *)(uVar4 + 0x28);
    iVar6 = private_vmalloc(uVar17);
    *(int *)(__s + 0x28) = iVar6;
    if (iVar6 != 0) {
      *(unsigned int *)(__s + 0x2c) = uVar17;
      pcVar14 = local_30;
      goto LAB_00025880;
    }
    uVar17 = iVar5 << 0x16 | uVar17 >> 10;
    uVar13 = 0x358;
LAB_00025b28:
    isp_printf(2,"%s[%d]: Failed to alloc %lld KB buffer!\n","tiziano_load_parameters",uVar13,uVar17
               ,iVar5 >> 10);
  }
  else {
LAB_00025880:
    if (iVar5 < 1) {
      if (iVar5 == 0) {
        if (*(unsigned int *)(__s + 0x2c) < uVar17) goto LAB_0002589c;
        uVar13 = *(int *)(__s + 0x28);
      }
      else {
        uVar13 = *(int *)(__s + 0x28);
      }
      private_vfs_read(uVar4,uVar13,uVar17,pcVar14);
      private_filp_close(uVar4,0);
      private_set_fs(uVar19);
      pcVar18 = *(char **)(__s + 0x28);
      iVar5 = 8;
      iVar6 = 8;
      pcVar7 = __s;
      pcVar9 = pcVar18;
      while( true ) {
        cVar1 = *pcVar7;
        cVar2 = *pcVar9;
        cVar10 = cVar2;
        if (iVar6 == 0) break;
        iVar6 = iVar6 + -1;
        pcVar7 = pcVar7 + 1;
        cVar10 = cVar1;
        if ((cVar2 != cVar1) || (pcVar9 = pcVar9 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
      }
      local_30 = private_vfs_read;
      if (cVar10 != cVar2) {
        isp_printf(2,"####################################################################\n");
        isp_printf(2,"#### The version of bin doesn\'t match with driver! ####\n");
        pcVar16 = "#### The version of bin is %s, the driver is %s ####\n";
LAB_00025c30:
        isp_printf(2,pcVar16,pcVar18,__s);
        isp_printf(2,"####################################################################\n");
        goto LAB_00025db0;
      }
      pcVar9 = pcVar18 + 8;
      pcVar7 = pcVar16;
      while( true ) {
        cVar1 = *pcVar7;
        cVar2 = *pcVar9;
        cVar10 = cVar2;
        if (iVar5 == 0) break;
        iVar5 = iVar5 + -1;
        pcVar7 = pcVar7 + 1;
        cVar10 = cVar1;
        if ((cVar2 != cVar1) || (pcVar9 = pcVar9 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
      }
      if (cVar10 == cVar2) {
        uVar17 = *(unsigned int *)(pcVar18 + 0x10);
        puVar11 = (unsigned int *)(pcVar18 + 0x18);
        *(unsigned int *)(__s + 0x10) = uVar17;
        uVar15 = *(unsigned int *)(pcVar18 + 0x14);
        *(unsigned int *)(__s + 0x14) = uVar15;
        pvVar3 = tparams_day;
        uVar8 = 0;
        puVar12 = puVar11;
        while (puVar12 != (unsigned int *)((int)puVar11 + (uVar17 & 0xfffffffc))) {
          uVar8 = uVar8 ^ *puVar12 ^ *(unsigned int *)(crc_table + ((uVar8 ^ *puVar12) & 7) * 4);
          puVar12 = puVar12 + 1;
        }
        if (uVar15 == uVar8) {
          *(unsigned int **)(__s + 0x30) = puVar11;
          memcpy(pvVar3,puVar11,0x137f0);
          memcpy(tparams_night,pcVar18 + 0x13808,0x137f0);
          (*local_3c)(acStack_88,0x40,"/etc/sensor/%s-cust-t31.bin",&DAT_000b25e4);
          uVar4 = (*local_38)(acStack_88,0,0);
          if (0xfffff000 < uVar4) {
            isp_printf(0,"ISP: no %s for cust mode isp calibrate\n",acStack_88);
            goto LAB_00025d80;
          }
          iVar5 = *(int *)(*(int *)(uVar4 + 0xc) + 0x28);
          uVar17 = *(unsigned int *)(iVar5 + 0x30);
          iVar5 = *(int *)(iVar5 + 0x34);
          (*local_34)(&local_48);
          private_set_fs(0);
          uVar19 = local_48;
          if (*(int *)(__s + 0x28) == 0) {
            local_3c = (code *)(uVar4 + 0x28);
            iVar6 = (*local_44)(uVar17);
            *(int *)(__s + 0x28) = iVar6;
            if (iVar6 == 0) {
              uVar17 = iVar5 << 0x16 | uVar17 >> 10;
              uVar13 = 0x39b;
              goto LAB_00025b28;
            }
            *(unsigned int *)(__s + 0x2c) = uVar17;
          }
          if (0 < iVar5) {
LAB_00025b70:
            pcVar16 = "The size of cust file has been modify!\n";
            goto LAB_00025b78;
          }
          if (iVar5 == 0) {
            if (*(unsigned int *)(__s + 0x2c) < uVar17) goto LAB_00025b70;
            uVar13 = *(int *)(__s + 0x28);
          }
          else {
            uVar13 = *(int *)(__s + 0x28);
          }
          (*local_30)(uVar4,uVar13,uVar17);
          private_filp_close(uVar4,0);
          private_set_fs(local_48);
          pcVar18 = *(char **)(__s + 0x28);
          iVar5 = 8;
          iVar6 = 8;
          pcVar7 = __s;
          pcVar9 = pcVar18;
          while( true ) {
            cVar1 = *pcVar7;
            cVar2 = *pcVar9;
            cVar10 = cVar2;
            if (iVar6 == 0) break;
            iVar6 = iVar6 + -1;
            pcVar7 = pcVar7 + 1;
            cVar10 = cVar1;
            if ((cVar2 != cVar1) || (pcVar9 = pcVar9 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
          }
          pcVar7 = pcVar18 + 8;
          if (cVar10 != cVar2) {
            isp_printf(2,"####################################################################\n");
            isp_printf(2,"#### The version of cust bin doesn\'t match with driver! ####\n");
            pcVar16 = "#### The version of cust bin is %s, the driver is %s ####\n";
            goto LAB_00025c30;
          }
          while( true ) {
            cVar1 = *pcVar16;
            cVar2 = *pcVar7;
            cVar10 = cVar2;
            if (iVar5 == 0) break;
            iVar5 = iVar5 + -1;
            pcVar16 = pcVar16 + 1;
            cVar10 = cVar1;
            if ((cVar2 != cVar1) || (pcVar7 = pcVar7 + 1, cVar10 = cVar2, cVar1 == '\0')) break;
          }
          if (cVar10 != cVar2) {
            isp_printf(2,"####################################################################\n");
            pcVar16 = "#### The first flag of cust bin doesn\'t match with driver! ####\n";
            goto LAB_00025c9c;
          }
          uVar17 = *(unsigned int *)(pcVar18 + 0x10);
          puVar11 = (unsigned int *)(pcVar18 + 0x18);
          *(unsigned int *)(__s + 0x10) = uVar17;
          uVar15 = *(unsigned int *)(pcVar18 + 0x14);
          *(unsigned int *)(__s + 0x14) = uVar15;
          uVar8 = 0;
          puVar12 = puVar11;
          while ((unsigned int *)((int)puVar11 + (uVar17 & 0xfffffffc)) != puVar12) {
            uVar8 = uVar8 ^ *puVar12 ^ *(unsigned int *)(crc_table + ((uVar8 ^ *puVar12) & 7) * 4);
            puVar12 = puVar12 + 1;
          }
          if (uVar15 == uVar8) {
            tparams_cust = (void *)(*local_44)(0x137f0);
            (*local_40)(tparams_cust,0,0x137f0);
            pvVar3 = tparams_cust;
            *(unsigned int **)(__s + 0x30) = puVar11;
            memcpy(pvVar3,puVar11,0x137f0);
LAB_00025d80:
            private_vfree(*(int *)(__s + 0x28));
            private_vfree(__s);
            return 0;
          }
          uVar13 = 0x3c3;
          pcVar16 = "%s[%d]: Failed to CRC sensor cust setting!\n";
        }
        else {
          uVar13 = 0x380;
          pcVar16 = "%s[%d]: Failed to CRC sensor setting!\n";
        }
        isp_printf(2,pcVar16,"tiziano_load_parameters",uVar13);
      }
      else {
        isp_printf(2,"####################################################################\n");
        pcVar16 = "#### The first flag of bin doesn\'t match with driver! ####\n";
LAB_00025c9c:
        isp_printf(2,pcVar16);
        isp_printf(2,"####################################################################\n");
      }
    }
    else {
LAB_0002589c:
      pcVar16 = "The size of file has been modify!\n";
LAB_00025b78:
      isp_printf(2,pcVar16);
    }
  }
  private_filp_close(uVar4,0);
  private_set_fs(uVar19);
LAB_00025db0:
  private_kfree(*(int *)(__s + 0x28));
  private_kfree(__s);
  return 0xffffffff;
}



int tisp_init(int *param_1,char *param_2)

{
  unsigned int uVar1;
  void *pvVar2;
  void *pvVar3;
  size_t sVar4;
  int iVar5;
  int iVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  int *puVar9;
  int iVar10;
  int uVar11;
  int *puVar12;
  int *puVar13;
  int uVar14;
  unsigned int uVar15;
  int local_54;
  int local_4c;
  
  memset(&tispinfo,0,0x74);
  memset(&sensor_info,0,0x60);
  memset(&ds0_attr,0,0x34);
  memset(&ds1_attr,0,0x34);
  memset(&ds2_attr,0,0x34);
  memcpy(&sensor_info,param_1,0x60);
  tparams_day = (void *)private_vmalloc(0x137f0);
  memset(tparams_day,0,0x137f0);
  tparams_night = (void *)private_vmalloc(0x137f0);
  memset(tparams_night,0,0x137f0);
  sVar4 = strlen(param_2);
  if (sVar4 == 0) {
    snprintf(param_2,0x40,"/etc/sensor/%s-t31.bin");
  }
  iVar5 = tiziano_load_parameters(param_2);
  pvVar3 = tparams_day;
  if (isp_memopt == 1) {
    *(int *)((int)tparams_day + 0xbb50) = 0;
    *(int *)((int)pvVar3 + 0xbb58) = 1;
    *(int *)((int)pvVar3 + 0xbb68) = 0;
    *(int *)((int)pvVar3 + 0xbb60) = 0;
    pvVar2 = tparams_night;
    *(int *)((int)tparams_night + 0xbb50) = 0;
    *(int *)((int)pvVar2 + 0xbb58) = 1;
    *(int *)((int)pvVar2 + 0xbb68) = 0;
    *(int *)((int)pvVar2 + 0xbb60) = 0;
    iVar6 = tparams_cust;
    if (tparams_cust != 0) {
      *(int *)(tparams_cust + 0xbb50) = 0;
      *(int *)(iVar6 + 0xbb58) = 1;
      *(int *)(iVar6 + 0xbb68) = 0;
      *(int *)(iVar6 + 0xbb60) = 0;
    }
    puVar13 = (int *)((int)pvVar3 + 0xd838);
    puVar12 = (int *)((int)pvVar2 + 0xd838);
    puVar9 = (int *)(iVar6 + 0xd838);
    do {
      *puVar13 = 0;
      *puVar12 = 0;
      if (iVar6 != 0) {
        *puVar9 = 0;
      }
      puVar9 = puVar9 + 1;
      puVar13 = puVar13 + 1;
      puVar12 = puVar12 + 1;
    } while (puVar9 != (int *)(iVar6 + 0xd85c));
  }
  if (iVar5 == 0) {
    memcpy(&DAT_00094400,tparams_day,0x137f0);
    iVar5 = *param_1;
  }
  else {
    isp_printf(2,"no bin file on the system!!!\n");
    iVar5 = *param_1;
  }
  system_reg_write(4,iVar5 << 0x10 | param_1[1]);
  iVar5 = *param_1;
  iVar6 = param_1[1];
  tispinfo = iVar5;
  DAT_000b26f4 = iVar6;
  switch(param_1[2]) {
  case 0:
    uVar14 = 0;
    goto LAB_0002609c;
  case 1:
    uVar14 = 1;
    goto LAB_0002609c;
  case 2:
    uVar14 = 2;
    goto LAB_0002609c;
  case 3:
    uVar14 = 3;
LAB_0002609c:
    system_reg_write(8,uVar14);
    deir_en = 0;
    goto LAB_00026168;
  case 4:
    uVar14 = 8;
    break;
  case 5:
    uVar14 = 9;
    break;
  case 6:
    uVar14 = 10;
    break;
  case 7:
    uVar14 = 0xb;
    break;
  case 8:
    uVar14 = 0xc;
    break;
  case 9:
    uVar14 = 0xd;
    break;
  case 10:
    uVar14 = 0xe;
    break;
  case 0xb:
    uVar14 = 0xf;
    break;
  case 0xc:
    uVar14 = 0x10;
    break;
  case 0xd:
    uVar14 = 0x11;
    break;
  case 0xe:
    uVar14 = 0x12;
    break;
  case 0xf:
    uVar14 = 0x13;
    break;
  case 0x10:
    uVar14 = 0x14;
    break;
  case 0x11:
    uVar14 = 0x15;
    break;
  case 0x12:
    uVar14 = 0x16;
    break;
  case 0x13:
    uVar14 = 0x17;
    break;
  case 0x14:
    goto switchD_00026088_caseD_14;
  default:
    isp_printf(2,"%s:%d:Not support this bayer!!!\n","tisp_init",0x129);
    goto LAB_00026168;
  }
  system_reg_write(8,uVar14);
switchD_00026088_caseD_14:
  deir_en = 1;
LAB_00026168:
  uVar14 = 0x3f00;
  if (deir_en == 1) {
    uVar14 = 0x10003f00;
  }
  system_reg_write(0x1c,uVar14);
  sensor_init(sensor_ctrl);
  tisp_set_csc_version(0);
  isp_printf(0,"IP INIT ByPass : %08x\n",0x8077efff);
  uVar15 = 0x8077efff;
  uVar7 = 0;
  do {
    uVar8 = uVar7 & 0x1f;
    iVar10 = uVar7 * 4;
    uVar1 = uVar7 & 0x1f;
    uVar7 = uVar7 + 1;
    uVar15 = (*(int *)(&DAT_00094400 + iVar10) << uVar1) + (~(1 << uVar8) & uVar15);
  } while (uVar7 != 0x20);
  isp_printf(0,"%s:%d::top bypass is 0x%x\n","tisp_init",0x151,uVar15);
  if (DAT_000b2634 == 1) {
    uVar7 = 0xa1ffdf76;
    uVar8 = 0x880002;
  }
  else {
    uVar7 = 0xb577fffd;
    uVar8 = 0x34000009;
  }
  uVar8 = uVar15 & uVar7 | uVar8;
  system_reg_write(0xc,uVar8);
  isp_printf(0,"%s:%d::sensor info wdr en is %d,top bypass is 0x%x\n","tisp_init",0x15e,DAT_000b2634
             ,uVar8);
  system_reg_write(0x30,0xffffffff);
  uVar14 = 0x33f;
  if (DAT_000b2634 != 1) {
    uVar14 = 0x133;
  }
  system_reg_write(0x10,uVar14);
  iVar10 = private_kmalloc(0x6000,0xd0);
  if (iVar10 != 0) {
    system_reg_write(0xa02c,iVar10 + -0x80000000);
    system_reg_write(0xa030,iVar10 + -0x7ffff000);
    system_reg_write(0xa034,iVar10 + -0x7fffe000);
    system_reg_write(0xa038,iVar10 + -0x7fffd000);
    system_reg_write(0xa03c,iVar10 + -0x7fffc000);
    system_reg_write(0xa040,iVar10 + -0x7fffb800);
    system_reg_write(0xa044,iVar10 + -0x7fffb000);
    system_reg_write(0xa048,iVar10 + -0x7fffa800);
    system_reg_write(0xa04c,0x33);
    DAT_000b2708 = iVar10 + 0x4000;
    DAT_000b26f8 = 4;
    DAT_000b2704 = 4;
    DAT_000b26fc = iVar10;
    DAT_000b2700 = iVar10 + -0x80000000;
    DAT_000b270c = iVar10 + -0x7fffc000;
    iVar10 = private_kmalloc(0x6000,0xd0);
    if (iVar10 != 0) {
      system_reg_write(0xa82c,iVar10 + -0x80000000);
      system_reg_write(0xa830,iVar10 + -0x7ffff000);
      system_reg_write(0xa834,iVar10 + -0x7fffe000);
      system_reg_write(0xa838,iVar10 + -0x7fffd000);
      system_reg_write(0xa83c,iVar10 + -0x7fffc000);
      system_reg_write(0xa840,iVar10 + -0x7fffb800);
      system_reg_write(0xa844,iVar10 + -0x7fffb000);
      system_reg_write(0xa848,iVar10 + -0x7fffa800);
      system_reg_write(0xa84c,0x33);
      DAT_000b2720 = iVar10 + 0x4000;
      DAT_000b2710 = 4;
      DAT_000b271c = 4;
      DAT_000b2714 = iVar10;
      DAT_000b2718 = iVar10 + -0x80000000;
      DAT_000b2724 = iVar10 + -0x7fffc000;
      iVar10 = private_kmalloc(0x4000,0xd0);
      if (iVar10 != 0) {
        system_reg_write(0xb03c,iVar10 + -0x80000000);
        system_reg_write(0xb040,iVar10 + -0x7ffff000);
        system_reg_write(0xb044,iVar10 + -0x7fffe000);
        system_reg_write(0xb048,iVar10 + -0x7fffd000);
        system_reg_write(0xb04c,3);
        DAT_000b2728 = 4;
        DAT_000b272c = iVar10;
        DAT_000b2730 = iVar10 + -0x80000000;
        iVar10 = private_kmalloc(0x4000,0xd0);
        if (iVar10 != 0) {
          system_reg_write(0x4494,iVar10 + -0x80000000);
          system_reg_write(0x4498,iVar10 + -0x7ffff000);
          system_reg_write(0x449c,iVar10 + -0x7fffe000);
          system_reg_write(0x44a0,iVar10 + -0x7fffd000);
          system_reg_write(0x4490,3);
          DAT_000b2734 = 4;
          DAT_000b2738 = iVar10;
          DAT_000b273c = iVar10 + -0x80000000;
          iVar10 = private_kmalloc(0x4000,0xd0);
          if (iVar10 != 0) {
            system_reg_write(0x5b84,iVar10 + -0x80000000);
            system_reg_write(0x5b88,iVar10 + -0x7ffff000);
            system_reg_write(0x5b8c,iVar10 + -0x7fffe000);
            system_reg_write(0x5b90,iVar10 + -0x7fffd000);
            system_reg_write(0x5b80,3);
            DAT_000b2740 = 4;
            DAT_000b2744 = iVar10;
            DAT_000b2748 = iVar10 + -0x80000000;
            isp_printf(0,
                       "[%s,%d] sensor info: it min %d, it max %d,total width %d,total height %d, it max short %d,it min short %d\n"
                       ,"tisp_init",0x1cc,DAT_000b2608,DAT_000b2618,DAT_000b2614,DAT_000b2616,
                       DAT_000b2624,DAT_000b2622);
            iVar10 = private_kmalloc(0x4000,0xd0);
            if (iVar10 != 0) {
              system_reg_write(0xb8a8,iVar10 + -0x80000000);
              system_reg_write(0xb8ac,iVar10 + -0x7ffff000);
              system_reg_write(0xb8b0,iVar10 + -0x7fffe000);
              system_reg_write(0xb8b4,iVar10 + -0x7fffd000);
              system_reg_write(0xb8b8,3);
              DAT_000b274c = 4;
              DAT_000b2750 = iVar10;
              DAT_000b2754 = iVar10 + -0x80000000;
              iVar10 = private_kmalloc(0x8000,0xd0);
              if (iVar10 != 0) {
                system_reg_write(0x2010,iVar10 + -0x80000000);
                system_reg_write(0x2014,iVar10 + -0x7fffe000);
                system_reg_write(0x2018,iVar10 + -0x7fffc000);
                system_reg_write(0x201c,iVar10 + -0x7fffa000);
                system_reg_write(0x2020,0x400);
                system_reg_write(0x2024,3);
                DAT_000b2758 = 4;
                DAT_000b275c = iVar10;
                DAT_000b2760 = iVar10 + -0x80000000;
                tiziano_ae_init(DAT_000b26f4,tispinfo,*(short *)(param_1 + 0xc),local_54,
                                *(short *)((int)param_1 + 0x4a),local_4c);
                tiziano_awb_init(DAT_000b26f4,tispinfo);
                tiziano_gamma_init();
                tiziano_gib_init();
                tiziano_lsc_init();
                tiziano_ccm_init();
                tiziano_dmsc_init();
                tiziano_sharpen_init();
                tiziano_sdns_init();
                tiziano_mdns_init(iVar5,iVar6);
                tiziano_clm_init();
                tiziano_dpc_init();
                tiziano_hldc_init();
                tiziano_defog_init(iVar5,iVar6);
                tiziano_adr_init(iVar5,iVar6);
                tiziano_af_init(iVar6,iVar5);
                tiziano_bcsh_init();
                tiziano_ydns_init();
                tiziano_rdns_init();
                if (DAT_000b2634 == 1) {
                  tiziano_wdr_init(iVar5,iVar6);
                  tisp_gb_init();
                  tisp_dpc_wdr_en(1);
                  tisp_lsc_wdr_en(1);
                  tisp_gamma_wdr_en(1);
                  tisp_sharpen_wdr_en(1);
                  tisp_ccm_wdr_en(1);
                  tisp_bcsh_wdr_en(1);
                  tisp_rdns_wdr_en(1);
                  tisp_adr_wdr_en(1);
                  tisp_defog_wdr_en(1);
                  tisp_mdns_wdr_en(1);
                  tisp_dmsc_wdr_en(1);
                  tisp_ae_wdr_en(1);
                  tisp_sdns_wdr_en(1);
                  iVar5 = param_1[2];
                }
                else {
                  iVar5 = param_1[2];
                }
                if (DAT_000b2634 == 0) {
                  uVar14 = 0x1c;
                  uVar11 = 0x1e;
                }
                else {
                  uVar14 = 0x10;
                  uVar11 = 0x12;
                }
                if (iVar5 == 0x14) {
                  uVar14 = uVar11;
                }
                system_reg_write(0x804,uVar14);
                system_reg_write(0x1c,8);
                system_reg_write(0x800,1);
                tisp_event_init();
                tisp_event_set_cb(4,tisp_tgain_update);
                tisp_event_set_cb(5,tisp_again_update);
                tisp_event_set_cb(7,tisp_ev_update);
                tisp_event_set_cb(9,tisp_ct_update);
                tisp_event_set_cb(8,tisp_ae_ir_update);
                system_irq_func_set(0xd,ip_done_interrupt_static);
                iVar5 = tisp_param_operate_init();
                if (iVar5 == 0) {
                  return 0;
                }
                isp_printf(2,"%s,%d: tisp_param_operate_init error %d\n","tisp_init",0x22d,iVar5);
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return 0xffffffff;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_sync_sensor_attr(int *param_1)

{
  sensor_info = *param_1;
  DAT_000b25dc = param_1[1];
  DAT_000b25f4 = tisp_math_exp2(param_1[7],0x10,10);
  DAT_000b25f8 = tisp_math_exp2(param_1[8],0x10,10);
  DAT_000b2604 = param_1[0xb];
  DAT_000b2608 = *(ushort *)(param_1 + 0xc);
  DAT_000b260a = *(short *)((int)param_1 + 0x32);
  DAT_000b260c = *(short *)(param_1 + 0xd);
  DAT_000b260e = *(short *)((int)param_1 + 0x36);
  DAT_000b2614 = *(short *)(param_1 + 0xf);
  DAT_000b2616 = *(short *)((int)param_1 + 0x3e);
  DAT_000b2618 = *(ushort *)(param_1 + 0x10);
  DAT_000b261a = *(short *)((int)param_1 + 0x42);
  DAT_000b261c = *(short *)(param_1 + 0x11);
  DAT_000b261e = *(short *)((int)param_1 + 0x46);
  DAT_000b2620 = *(short *)(param_1 + 0x12);
  DAT_000b2622 = *(ushort *)((int)param_1 + 0x4a);
  DAT_000b2624 = *(ushort *)(param_1 + 0x13);
  DAT_000b262c = tisp_math_exp2(param_1[0x15],0x10,10);
  if ((DAT_000d3e80 == 0) || (DAT_000d3e80 == DAT_000b25f4)) {
    DAT_000d3e80 = DAT_000b25f4;
  }
  DAT_000d3e84 = DAT_000b25f8;
  _DAT_000d3ebc = DAT_000b262c;
  _DAT_000d3ec0 = (uint)DAT_000b2624;
  DAT_000d3ee4 = (uint)DAT_000b2608;
  _DAT_000d3ef0 = (uint)DAT_000b2622;
  DAT_000d3e88 = (uint)DAT_000b2618;
  sensor_ctrl._32_4_ = param_1[7];
  sensor_ctrl._84_4_ = (uint)DAT_000b2624;
  sensor_ctrl._36_4_ = param_1[8];
  sensor_ctrl._40_4_ = (uint)DAT_000b2608;
  sensor_ctrl[58] = (char)DAT_000b261a;
  sensor_ctrl._44_4_ = (uint)DAT_000b2618;
  sensor_ctrl[59] = (char)DAT_000b261c;
  sensor_ctrl._80_4_ = (uint)DAT_000b2622;
  sensor_ctrl[60] = (char)DAT_000b261e;
  sensor_ctrl._88_4_ = param_1[0x15];
  return 0;
}



int tisp_event_init(void)

{
  int *puVar1;
  int *puVar2;
  int *puVar3;
  
  puVar1 = &DAT_000b27b0;
  DAT_000b2b70 = &DAT_000b2b70;
  DAT_000b2b74 = &DAT_000b2b70;
  DAT_000b2b78 = &DAT_000b2b78;
  DAT_000b2b7c = &DAT_000b2b78;
  DAT_000b27b0 = &DAT_000b27b0;
  puVar2 = puVar1;
  while( true ) {
    puVar2[1] = puVar2;
    puVar2 = puVar2 + 0xc;
    puVar3 = DAT_000b2b7c;
    if ((int **)puVar2 == &DAT_000b2b70) break;
    *puVar2 = puVar2;
  }
  do {
    DAT_000b2b7c = puVar1;
    *puVar1 = &DAT_000b2b78;
    puVar1[1] = puVar3;
    *puVar3 = puVar1;
    puVar1 = puVar1 + 0xc;
    puVar3 = DAT_000b2b7c;
  } while ((int **)puVar1 != &DAT_000b2b70);
  tevent_info = 0;
  __init_waitqueue_head(&DAT_000b27a4,"&x->wait",0x10000);
  return 0;
}



int tisp_event_set_cb(int param_1,int param_2)

{
  *(int *)(cb + param_1 * 4) = param_2;
  return 0;
}



int tisp_event_push(int param_1)

{
  int **ppiVar1;
  int **ppiVar2;
  int uVar3;
  int *piVar4;
  int iVar5;
  
  uVar3 = arch_local_irq_save();
  ppiVar2 = DAT_000b2b78;
  if ((int ***)DAT_000b2b78 == &DAT_000b2b78) {
    isp_printf(1,"%s,%d: event free empty error\n","tisp_event_push",0x2c);
    arch_local_irq_restore(uVar3);
    uVar3 = 0xffffffff;
  }
  else {
    piVar4 = DAT_000b2b78[1];
    iVar5 = (int)*DAT_000b2b78;
    *(int **)(iVar5 + 4) = piVar4;
    *piVar4 = iVar5;
    *ppiVar2 = (int *)0x100100;
    ppiVar2[1] = (int *)0x200200;
    ppiVar2[2] = *(int **)(param_1 + 8);
    piVar4 = *(int **)(param_1 + 0x14);
    ppiVar2[4] = *(int **)(param_1 + 0x10);
    ppiVar2[5] = piVar4;
    piVar4 = *(int **)(param_1 + 0x1c);
    ppiVar2[6] = *(int **)(param_1 + 0x18);
    ppiVar2[7] = piVar4;
    piVar4 = *(int **)(param_1 + 0x24);
    ppiVar2[8] = *(int **)(param_1 + 0x20);
    ppiVar2[9] = piVar4;
    piVar4 = *(int **)(param_1 + 0x2c);
    ppiVar2[10] = *(int **)(param_1 + 0x28);
    ppiVar2[0xb] = piVar4;
    ppiVar1 = DAT_000b2b74;
    DAT_000b2b74 = ppiVar2;
    *ppiVar2 = &DAT_000b2b70;
    ppiVar2[1] = (int *)ppiVar1;
    *ppiVar1 = (int *)ppiVar2;
    private_complete(&tevent_info);
    arch_local_irq_restore(uVar3);
    uVar3 = 0;
  }
  return uVar3;
}



int tisp_event_exit(void)

{
  char auStack_38 [8];
  int local_30;
  
  local_30 = 0;
  tisp_event_push(auStack_38);
  return 0;
}



int tisp_event_process(void)

{
  int **ppiVar1;
  int iVar2;
  int uVar3;
  int *piVar4;
  int **ppiVar5;
  
  iVar2 = private_wait_for_completion_timeout(&tevent_info,0x14);
  if (iVar2 == -0x200) {
    isp_printf(2,"%s,%d: wake up by signal\n","tisp_event_process",0x55);
    uVar3 = 0;
  }
  else {
    uVar3 = 0;
    if (iVar2 != 0) {
      uVar3 = arch_local_irq_save();
      ppiVar1 = DAT_000b2b70;
      if ((int ***)DAT_000b2b70 == &DAT_000b2b70) {
        isp_printf(2,"%s,%d: error\n","tisp_event_process",0x5d);
        arch_local_irq_restore(uVar3);
        uVar3 = 0xffffffff;
      }
      else {
        piVar4 = DAT_000b2b70[1];
        iVar2 = (int)*DAT_000b2b70;
        *(int **)(iVar2 + 4) = piVar4;
        *piVar4 = iVar2;
        *ppiVar1 = (int *)0x100100;
        ppiVar1[1] = (int *)0x200200;
        ppiVar5 = DAT_000b2b7c;
        if (*(code **)(cb + (int)ppiVar1[2] * 4) != (code *)0x0) {
          (**(code **)(cb + (int)ppiVar1[2] * 4))
                    (ppiVar1[4],ppiVar1[5],ppiVar1[6],ppiVar1[7],ppiVar1[8],ppiVar1[9],ppiVar1[10],
                     ppiVar1[0xb]);
          ppiVar5 = DAT_000b2b7c;
        }
        DAT_000b2b7c = ppiVar1;
        *ppiVar1 = &DAT_000b2b78;
        ppiVar1[1] = (int *)ppiVar5;
        *ppiVar5 = (int *)ppiVar1;
        arch_local_irq_restore(uVar3);
        uVar3 = 0;
      }
    }
  }
  return uVar3;
}



void JZ_Isp_Awb_Reg2par(unsigned int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int iVar3;
  unsigned int uVar4;
  unsigned int *puVar5;
  int iVar6;
  int iVar7;
  unsigned int *puVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  unsigned int local_90 [16];
  unsigned int local_50 [17];
  
  uVar1 = *param_2;
  puVar5 = param_2 + 5;
  iVar6 = 0;
  do {
    uVar11 = puVar5[-4];
    uVar10 = *puVar5;
    iVar3 = 0;
    do {
      uVar9 = iVar3 << 1;
      iVar7 = iVar6 + iVar3;
      uVar2 = 0x7f << (uVar9 & 0x1f);
      iVar3 = iVar3 + 4;
      *(unsigned int *)((int)local_50 + iVar7) = (uVar11 & uVar2) >> (uVar9 & 0x1f);
      *(unsigned int *)((int)local_90 + iVar7) = (uVar2 & uVar10) >> (uVar9 & 0x1f);
    } while (iVar3 != 0x10);
    iVar6 = iVar6 + 0x10;
    puVar5 = puVar5 + 1;
  } while (iVar6 != 0x40);
  uVar10 = param_2[10];
  uVar4 = param_2[9];
  uVar11 = param_2[0xb];
  uVar2 = param_2[0xc];
  iVar6 = 0;
  uVar9 = param_2[0xd];
  param_1[3] = uVar1 >> 0x1c;
  *param_1 = uVar1 & 0x7ff;
  param_1[1] = (uVar1 & 0xf000) >> 0xc;
  param_1[2] = (uVar1 << 5) >> 0x15;
  puVar5 = param_1 + 4;
  do {
    *puVar5 = *(unsigned int *)((int)local_50 + iVar6);
    puVar8 = (unsigned int *)((int)local_90 + iVar6);
    iVar6 = iVar6 + 4;
    puVar5[0xf] = *puVar8;
    puVar5 = puVar5 + 1;
  } while (iVar6 != 0x3c);
  param_1[0x26] = uVar11 & 0xffff;
  param_1[0x28] = uVar2 & 0xffff;
  param_1[0x22] = uVar4 & 0xfff;
  param_1[0x23] = (uVar4 & 0xfff0000) >> 0x10;
  param_1[0x24] = uVar10 & 0xfff;
  param_1[0x25] = (uVar10 & 0xfff0000) >> 0x10;
  param_1[0x27] = uVar11 >> 0x10;
  param_1[0x29] = uVar2 >> 0x10;
  param_1[0x2a] = uVar9 & 0xff;
  param_1[0x2b] = (uVar9 & 0xff00) >> 8;
  param_1[0x2c] = uVar9 >> 0x10 & 0xf;
  return;
}



void JZ_Isp_Awb_Awbg2reg(int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  
  uVar3 = *param_1 * 4;
  uVar2 = param_1[1] * 4;
  if (_awb_trend == 1) {
    if (_awb_ct_last_offset < _awb_ct) {
      uVar1 = _awb_ct - _awb_ct_last_offset;
    }
    else {
      uVar1 = _awb_ct_last_offset - _awb_ct;
    }
    if ((199 < uVar1) || (awb_moa == 1)) {
      _awb_ct_last_offset = _awb_ct;
      if (_awb_ct < 5000) {
        if (_awb_ct < 0xbb9) {
          awb_gr_offset = DAT_000a9704;
          awb_gb_offset = DAT_000a9708;
        }
        else {
          awb_gr_offset = DAT_000a96fc;
          awb_gb_offset = DAT_000a9700;
        }
      }
      else {
        awb_gr_offset = DAT_000a96f4;
        awb_gb_offset = DAT_000a96f8;
      }
    }
    uVar3 = uVar3 + awb_gr_offset + -0x400;
    uVar2 = uVar2 + awb_gb_offset + -0x400;
  }
  if (0x3fff < uVar3) {
    uVar3 = 0x3fff;
  }
  if (0x3fff < uVar2) {
    uVar2 = 0x3fff;
  }
  *param_2 = uVar3 | 0x4000000;
  param_2[1] = uVar2 | 0x4000000;
  return;
}



void JZ_Isp_Get_Awb_Statistics(unsigned int *param_1,unsigned int param_2)

{
  unsigned int *puVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  
  for (iVar3 = 0; iVar3 != ((param_2 & 0xf000) >> 0xc) * 0x3c; iVar3 = iVar3 + 0x3c) {
    puVar1 = param_1;
    for (iVar4 = 0; iVar2 = iVar3 + iVar4, iVar4 != (param_2 >> 0x1c) << 2; iVar4 = iVar4 + 4) {
      *(unsigned int *)((int)&awb_array_r + iVar2) = *puVar1 & 0x1fffff;
      *(unsigned int *)((int)&awb_array_g + iVar2) = (puVar1[1] & 0x3ff) << 0xb | *puVar1 >> 0x15;
      *(unsigned int *)((int)&awb_array_b + iVar2) = (puVar1[1] & 0x7ffffc00) >> 10;
      *(unsigned int *)((int)&awb_array_ir + iVar2) = (puVar1[2] & 0xfffff) << 1 | puVar1[1] >> 0x1f;
      *(unsigned int *)((int)&awb_array_p + iVar2) = (puVar1[3] & 1) << 0xc | puVar1[2] >> 0x14;
      puVar1 = puVar1 + 4;
    }
    param_1 = param_1 + (param_2 >> 0x1c) * 4;
  }
  return;
}



int tisp_awb_ev_update(int param_1)

{
  _ev = param_1;
  return 0;
}



int tiziano_awb_params_refresh(void)

{
  memcpy(&_awb_parameter,&DAT_00095410,0xb4);
  memcpy(&_pixel_cnt_th,&DAT_000954c4,4);
  memcpy(&_awb_lowlight_rg_th,&DAT_000954c8,8);
  memcpy(&_AwbPointPos,&DAT_000954d0,8);
  memcpy(&_awb_cof,&DAT_000954d8,8);
  memcpy(&_awb_mode,&DAT_000954f8,0xc);
  memcpy(&_wb_static,&DAT_0009550c,8);
  memcpy(_light_src,&DAT_00095514,0x50);
  memcpy(&_light_src_num,&DAT_00095564,4);
  memcpy(_rg_pos,&DAT_00095568,0x3c);
  memcpy(_bg_pos,&DAT_000955a4,0x3c);
  memcpy(_awb_ct_th_ot_luxhigh,&DAT_000955e0,0x10);
  memcpy(_awb_ct_th_ot_luxlow,&DAT_000955f0,0x10);
  memcpy(_awb_ct_th_in,&DAT_00095600,0x10);
  memcpy(&_awb_ct_para_ot,&DAT_00095610,8);
  memcpy(&_awb_ct_para_in,&DAT_00095618,8);
  memcpy(_awb_dis_tw,&DAT_00095620,0xc);
  memcpy(_rgbg_weight,&DAT_0009562c,900);
  memcpy(_color_temp_mesh,&DAT_000959b0,900);
  memcpy(_awb_wght,&DAT_00095d34,900);
  memcpy(_rgbg_weight_ot,&DAT_000960b8,900);
  memcpy(_ls_w_lut,&DAT_0009643c,0x808);
  if (awb_dn_refresh_flag == 0) {
    memcpy(_awb_mf_para,&DAT_000954e0,0x18);
    memcpy(&_awb_ct,&DAT_00095504,4);
    memcpy(&_awb_ct_last,&DAT_00095508,4);
  }
  awb_dn_refresh_flag = 0;
  return 0;
}



int tiziano_awb_dump(void)

{
  int uVar1;
  
  if (DumpNum_32174 != 0) {
    return 0xb0000;
  }
  DumpNum_32174 = 1;
  isp_printf(2,"-----awb regs dump-----\n");
  uVar1 = system_reg_read(0xb000);
  isp_printf(2,"0x%x: 0x%xx\n",0xb000,uVar1);
  uVar1 = system_reg_read(0xb004);
  isp_printf(2,"0x%x: 0x%xx\n",0xb004,uVar1);
  uVar1 = system_reg_read(0xb008);
  isp_printf(2,"0x%x: 0x%xx\n",0xb008,uVar1);
  uVar1 = system_reg_read(0xb00c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb00c,uVar1);
  uVar1 = system_reg_read(0xb010);
  isp_printf(2,"0x%x: 0x%xx\n",0xb010,uVar1);
  uVar1 = system_reg_read(0xb014);
  isp_printf(2,"0x%x: 0x%xx\n",0xb014,uVar1);
  uVar1 = system_reg_read(0xb018);
  isp_printf(2,"0x%x: 0x%xx\n",0xb018,uVar1);
  uVar1 = system_reg_read(0xb01c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb01c,uVar1);
  uVar1 = system_reg_read(0xb020);
  isp_printf(2,"0x%x: 0x%xx\n",0xb020,uVar1);
  uVar1 = system_reg_read(0xb024);
  isp_printf(2,"0x%x: 0x%xx\n",0xb024,uVar1);
  uVar1 = system_reg_read(0xb028);
  isp_printf(2,"0x%x: 0x%xx\n",0xb028,uVar1);
  uVar1 = system_reg_read(0xb02c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb02c,uVar1);
  uVar1 = system_reg_read(0xb030);
  isp_printf(2,"0x%x: 0x%xx\n",0xb030,uVar1);
  uVar1 = system_reg_read(0xb034);
  isp_printf(2,"0x%x: 0x%xx\n",0xb034,uVar1);
  uVar1 = system_reg_read(0xb038);
  isp_printf(2,"0x%x: 0x%xx\n",0xb038,uVar1);
  uVar1 = system_reg_read(0xb03c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb03c,uVar1);
  uVar1 = system_reg_read(0xb040);
  isp_printf(2,"0x%x: 0x%xx\n",0xb040,uVar1);
  uVar1 = system_reg_read(0xb044);
  isp_printf(2,"0x%x: 0x%xx\n",0xb044,uVar1);
  uVar1 = system_reg_read(0xb048);
  isp_printf(2,"0x%x: 0x%xx\n",0xb048,uVar1);
  uVar1 = system_reg_read(0xb04c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb04c,uVar1);
  uVar1 = system_reg_read(0xb050);
  isp_printf(2,"0x%x: 0x%xx\n",0xb050,uVar1);
  uVar1 = system_reg_read(0xb054);
  isp_printf(2,"0x%x: 0x%xx\n",0xb054,uVar1);
  system_reg_read(0xb058);
  return 0;
}



void system_reg_write_awb(int param_1,int param_2,int param_3)

{
  int uVar1;
  
  if (param_1 == 1) {
    uVar1 = 0xb000;
  }
  else {
    if (param_1 != 2) goto LAB_00027a48;
    uVar1 = 0x1800;
  }
  system_reg_write(uVar1,1);
LAB_00027a48:
  system_reg_write(param_2,param_3);
  return;
}



void Tiziano_awb_set_gain(int param_1,unsigned int param_2,int *param_3)

{
  int iVar1;
  int iVar2;
  int local_28;
  int local_24;
  unsigned int local_20;
  unsigned int local_1c;
  
  local_20 = *(unsigned int *)(param_1 + 0x10);
  local_1c = *(int *)(param_1 + 0x14);
  iVar1 = fix_point_mult2_32(param_2,local_20 << (param_2 & 0x1f),*param_3);
  iVar2 = 1 << (param_2 - 1 & 0x1f);
  local_20 = (uint)(iVar1 + iVar2) >> (param_2 & 0x1f);
  iVar1 = fix_point_mult2_32(param_2,local_1c << (param_2 & 0x1f),param_3[1]);
  DAT_000b5208 = 0x10000 / local_20;
  local_1c = (uint)(iVar2 + iVar1) >> (param_2 & 0x1f);
  DAT_000b520c = 0x10000 / local_1c;
  if (tisp_wb_attr - 1U < 8) {
    local_20 = DAT_000b51f8;
    local_1c = DAT_000b51fc;
  }
  else if (tisp_wb_attr == 9) {
    local_20 = (DAT_000b51f8 + 0x40) * local_20 >> 6;
    local_1c = (DAT_000b51fc + 0x40) * local_1c >> 6;
  }
  JZ_Isp_Awb_Awbg2reg(&local_20,&local_28);
  if (awb_frz == 0) {
    system_reg_write_awb(2,0x1804,local_28);
    system_reg_write_awb(2,0x1808,local_24);
    system_reg_write_awb(2,0x180c,local_28);
    system_reg_write_awb(2,0x1810,local_24);
    tisp_rdns_awb_gain_updata(local_28._2_2_,local_24._2_2_);
  }
  awb_moa = 0;
  return;
}



void Tiziano_awb_fpga(int param_1,int param_2,int param_3,int param_4,unsigned int *param_5,int *param_6,
                     int param_7,unsigned int param_8,int *param_9,unsigned int *param_10,int param_11,
                     int param_12,int param_13)

{
  bool bVar1;
  bool bVar2;
  bool bVar3;
  bool bVar4;
  int uVar5;
  int iVar6;
  char *puVar7;
  char *puVar8;
  unsigned int uVar9;
  char *puVar10;
  unsigned int uVar11;
  unsigned int uVar12;
  int *puVar13;
  int *puVar14;
  int *puVar15;
  int *puVar16;
  int iVar17;
  int iVar18;
  unsigned int uVar19;
  unsigned int uVar20;
  int iVar21;
  int iVar22;
  int iVar23;
  int iVar24;
  int *puVar25;
  unsigned int *puVar26;
  unsigned int uVar27;
  int iVar28;
  int *piVar29;
  char8 uVar30;
  int local_f8;
  int local_f4;
  unsigned int *local_c0;
  int *local_bc;
  unsigned int local_b8;
  unsigned int local_b4;
  int local_b0 [2];
  unsigned int local_a8;
  int *local_a4;
  int local_a0;
  unsigned int local_9c;
  unsigned int local_98;
  unsigned int local_94;
  unsigned int local_90;
  int local_8c;
  int local_88;
  int local_84;
  int local_80;
  int local_7c;
  unsigned int local_78;
  code *local_74;
  unsigned int local_70;
  int local_6c;
  int local_68;
  code *local_64;
  code *local_60;
  unsigned int local_5c;
  int *local_58;
  int *local_54;
  int *local_50;
  int local_4c;
  int *local_48;
  int *local_44;
  unsigned int local_40;
  int local_3c;
  int local_38;
  int *local_34;
  int *local_30;
  
  local_70 = param_8;
  local_a4 = param_9;
  uVar20 = *param_10;
  local_a8 = *(unsigned int *)(param_7 + 0xc);
  iVar24 = *(int *)(param_7 + 4);
  local_6c = *param_6;
  uVar19 = *param_5;
  local_78 = param_5[1];
  local_68 = *(int *)(param_11 + 0x20);
  local_90 = *(unsigned int *)(param_11 + 0x24);
  local_7c = param_6[1];
  local_98 = param_6[2];
  local_94 = param_6[3];
  iVar21 = 0x100 << (uVar20 & 0x1f);
  local_a0 = param_6[4];
  local_9c = param_6[5];
  local_8c = param_4;
  local_88 = param_1;
  local_84 = param_2;
  local_80 = param_3;
  local_64 = (code *)fix_point_mult2_32(uVar20,iVar21,*param_9);
  local_60 = (code *)fix_point_mult2_32(uVar20,iVar21,local_a4[1]);
  uVar9 = local_a8;
  iVar22 = local_a8 * 4;
  local_5c = local_a8 * -4;
  uVar27 = local_a8 * iVar24;
  iVar21 = 0;
  iVar28 = uVar27 * 4;
  iVar23 = 0;
  local_74 = fix_point_mult2_32;
  puVar15 = &zone_rgbg;
  puVar13 = &zone_pix_cnt;
  for (local_54 = (int *)0x0; local_54 != (int *)iVar24;
      local_54 = (int *)((int)local_54 + 1)) {
    puVar25 = (int *)((int)puVar15 + iVar23);
    local_58 = (int *)(local_88 + iVar23);
    puVar14 = (int *)((int)puVar13 + iVar23);
    piVar29 = (int *)(local_80 + iVar23);
    iVar17 = iVar23 + iVar28;
    puVar26 = (unsigned int *)(local_84 + iVar23);
    puVar16 = (int *)(local_8c + iVar23);
    for (local_50 = (int *)0x0; local_50 != (int *)local_a8;
        local_50 = (int *)((int)local_50 + 1)) {
      if (*puVar26 == 0) {
        *puVar25 = 0;
        *puVar14 = 0;
        *(int *)((int)puVar25 + iVar17 + iVar21) = 0;
      }
      else {
        local_4c = iVar21;
        local_48 = puVar14;
        local_44 = puVar16;
        local_40 = uVar27;
        local_3c = iVar28;
        local_38 = iVar17;
        local_34 = puVar15;
        local_30 = puVar13;
        uVar5 = (*local_74)(uVar20,(uint)(*local_58 << (uVar20 & 0x1f)) / *puVar26,local_64);
        *puVar25 = uVar5;
        uVar5 = (*local_74)(uVar20,(uint)(*piVar29 << (uVar20 & 0x1f)) / *puVar26,local_60);
        *(int *)((int)puVar25 + local_38 + local_4c) = uVar5;
        *local_48 = *local_44;
        puVar13 = local_30;
        puVar14 = local_48;
        puVar15 = local_34;
        iVar21 = local_4c;
        puVar16 = local_44;
        iVar17 = local_38;
        uVar27 = local_40;
        iVar28 = local_3c;
      }
      puVar25 = puVar25 + 1;
      puVar14 = puVar14 + 1;
      local_58 = local_58 + 1;
      piVar29 = piVar29 + 1;
      puVar26 = puVar26 + 1;
      puVar16 = puVar16 + 1;
    }
    iVar23 = iVar23 + iVar22;
    iVar21 = iVar21 + local_5c;
  }
  awb_rg_global = 0;
  awb_bg_global = 0;
  bVar4 = false;
  bVar3 = false;
  bVar2 = false;
  iVar21 = 0;
  bVar1 = false;
  iVar23 = 0;
  puVar13 = puVar15;
  uVar11 = uVar27;
  uVar12 = uVar27;
  for (iVar17 = 0; iVar17 != iVar24; iVar17 = iVar17 + 1) {
    iVar6 = 0;
    while (iVar6 != iVar22) {
      iVar18 = *(int *)((int)puVar13 + iVar6 + iVar28);
      iVar23 = iVar23 + *(int *)((int)puVar13 + iVar6);
      iVar21 = iVar21 + iVar18;
      if (*(int *)((int)puVar13 + iVar6) == 0) {
        uVar12 = uVar12 - 1;
        bVar3 = true;
      }
      iVar6 = iVar6 + 4;
      if (iVar18 == 0) {
        uVar11 = uVar11 - 1;
        bVar4 = true;
      }
      bVar1 = true;
      bVar2 = true;
    }
    puVar13 = puVar13 + uVar9;
  }
  if (bVar1) {
    awb_rg_global = iVar23;
  }
  if (bVar2) {
    awb_bg_global = iVar21;
  }
  awb_pix_cnt = uVar27;
  if (bVar3) {
    awb_pix_cnt = uVar12;
  }
  DAT_000b4f2c = uVar27;
  if (bVar4) {
    DAT_000b4f2c = uVar11;
  }
  local_74 = (code *)awb_rg_global;
  local_f8 = *local_a4;
  local_f4 = 0;
  local_50 = &awb_pix_cnt;
  local_60 = fix_point_div;
  local_5c = uVar27;
  local_58 = (int *)iVar28;
  local_54 = puVar15;
  uVar30 = fix_point_div(uVar20,uVar12,awb_rg_global,0);
  local_64 = __lshrdi3;
  awb_rg_global = __lshrdi3((int)uVar30,(int)((ulonglong)uVar30 >> 0x20),uVar20);
  local_74 = (code *)awb_bg_global;
  local_f8 = local_a4[1];
  local_f4 = 0;
  uVar30 = (*local_60)(uVar20);
  awb_bg_global = (*local_64)((int)uVar30,(int)((ulonglong)uVar30 >> 0x20),uVar20);
  DAT_000b5200 = 0x100;
  if (awb_pix_cnt != 0) {
    DAT_000b5200 = awb_rg_global / awb_pix_cnt;
  }
  if (local_50[1] == 0) {
    DAT_000b5204 = 0x100;
  }
  else {
    DAT_000b5204 = awb_bg_global / (uint)local_50[1];
  }
  iVar21 = 0;
  for (iVar28 = 0; iVar28 != iVar24 * 0xf; iVar28 = iVar28 + 0xf) {
    puVar26 = (unsigned int *)(local_8c + iVar21);
    iVar23 = 0;
    puVar7 = &tisp_wb_zone_attr + iVar28;
    puVar10 = puVar7;
    for (puVar8 = puVar7; (uint)((int)puVar8 - (int)puVar7) < local_a8; puVar8 = puVar8 + 1) {
      if (*puVar26 == 0) {
        *puVar8 = 0;
        puVar8[0xe1] = 0;
        puVar8[0x1c2] = 0;
      }
      else {
        iVar17 = iVar21 + iVar23;
        *puVar10 = (char)(*(unsigned int *)(local_88 + iVar17) / *puVar26);
        puVar10[0xe1] = (char)(*(unsigned int *)(local_84 + iVar17) / *puVar26);
        puVar10[0x1c2] = (char)(*(unsigned int *)(local_80 + iVar17) / *puVar26);
      }
      iVar23 = iVar23 + 4;
      puVar10 = puVar10 + 1;
      puVar26 = puVar26 + 1;
    }
    iVar21 = iVar21 + iVar22;
  }
  iVar21 = 0;
  for (iVar28 = 0; iVar28 != iVar24; iVar28 = iVar28 + 1) {
    iVar23 = 0;
    uVar27 = 0;
    while (uVar27 != local_a8) {
      iVar17 = iVar21 + iVar23;
      uVar27 = uVar27 + 1;
      if (*(unsigned int *)(local_8c + iVar17) <= local_70) {
        *(int *)((int)local_54 + iVar17) = 0;
        *(int *)((int)local_54 + iVar23 + iVar21 + (int)local_58) = 0;
        *(int *)((int)&zone_pix_cnt + iVar17) = 0;
      }
      iVar23 = iVar23 + 4;
    }
    iVar21 = iVar21 + iVar22;
  }
  puVar13 = &zone_rgbg_last;
  if (first_frame == 0) {
    iVar28 = 0;
    iVar21 = 0;
    puVar14 = puVar13;
    puVar16 = puVar15;
    for (iVar23 = 0; iVar23 != iVar24; iVar23 = iVar23 + 1) {
      iVar17 = 0;
      while (iVar22 != iVar17) {
        uVar11 = *(unsigned int *)((int)puVar16 + iVar17);
        uVar27 = *(unsigned int *)((int)puVar14 + iVar17);
        iVar6 = uVar27 - uVar11;
        if (uVar27 < uVar11) {
          iVar6 = uVar11 - uVar27;
        }
        iVar28 = iVar28 + iVar6;
        uVar11 = *(unsigned int *)((int)puVar16 + iVar17 + (int)local_58);
        uVar27 = *(unsigned int *)((int)puVar14 + iVar17 + (int)local_58);
        iVar17 = iVar17 + 4;
        iVar6 = uVar27 - uVar11;
        if (uVar27 < uVar11) {
          iVar6 = uVar11 - uVar27;
        }
        iVar21 = iVar21 + iVar6;
      }
      puVar16 = puVar16 + uVar9;
      puVar14 = puVar14 + uVar9;
    }
    if (DAT_000a988c <= ((uint)(iVar21 + iVar28) >> (uVar20 & 0x1f)) / local_5c) goto LAB_000281f4;
    iVar21 = 0;
    if ((tisp_wb_attr == 0) && (awb_moa == 0)) {
      return;
    }
  }
  else {
LAB_000281f4:
    iVar21 = 0;
  }
  for (; iVar21 != iVar24; iVar21 = iVar21 + 1) {
    for (iVar28 = 0; iVar22 != iVar28; iVar28 = iVar28 + 4) {
      *(int *)((int)puVar13 + iVar28) = *(int *)((int)puVar15 + iVar28);
      *(int *)((int)puVar13 + iVar28 + (int)local_58) =
           *(int *)((int)puVar15 + iVar28 + (int)local_58);
    }
    puVar15 = puVar15 + uVar9;
    puVar13 = puVar13 + uVar9;
  }
  local_bc = local_b0;
  local_c0 = &local_b8;
  for (uVar9 = 0; uVar9 < 0x38; uVar9 = uVar9 + 1) {
    *(char *)((int)&local_f8 + uVar9) = (&stack0x00000034)[uVar9];
  }
  Tiziano_Awb_Ct_Detect(&zone_rgbg,&zone_pix_cnt,param_12,param_13);
  uVar9 = _awb_ct;
  puVar13 = &AWBRgI;
  puVar14 = &AWBBgI;
  puVar15 = &AWBCTI;
  if (first_frame == 0) {
    do {
      puVar16 = puVar13 + 1;
      *puVar13 = puVar13[1];
      *puVar14 = puVar14[1];
      puVar14 = puVar14 + 1;
      *puVar15 = puVar15[1];
      puVar13 = puVar16;
      puVar15 = puVar15 + 1;
    } while (puVar16 != &DAT_000a7d44);
    DAT_000a7d44 = local_b8;
    DAT_000a7d08 = local_b4;
    DAT_000a7ccc = _awb_ct;
    if (uVar19 < 0x10) {
      if (uVar19 == 0) {
        uVar19 = 1;
      }
    }
    else {
      uVar19 = 0xf;
    }
    iVar21 = 0xf - uVar19;
    iVar17 = iVar21 * 4;
    iVar24 = 0;
    uVar9 = 0;
    iVar28 = 0;
    uVar11 = 0;
    iVar22 = 0;
    uVar27 = 0;
    iVar23 = 0;
    do {
      iVar6 = iVar17 + iVar24;
      iVar21 = iVar21 + 1;
      iVar23 = iVar21 * *(int *)((int)&AWBRgI + iVar6) + iVar23;
      uVar27 = uVar27 + iVar21;
      iVar22 = iVar21 * *(int *)((int)&AWBBgI + iVar6) + iVar22;
      uVar11 = uVar11 + iVar21;
      iVar28 = iVar21 * *(int *)((int)&AWBCTI + iVar6) + iVar28;
      uVar9 = uVar9 + iVar21;
      iVar24 = iVar24 + 4;
    } while (iVar21 != 0xf);
    uVar27 = ((uVar27 >> 1) + iVar23) / uVar27;
    uVar11 = ((uVar11 >> 1) + iVar22) / uVar11;
    uVar9 = ((uVar9 >> 1) + iVar28) / uVar9;
    if (((((uVar27 == awb_gain_original) && (uVar11 == DAT_000b4f24)) && (tisp_wb_attr == 0)) &&
        ((awb_moa == 0 && (param_6[2] == param_6[4])))) && (param_6[3] == param_6[5])) {
      _awb_ct = uVar9;
      return;
    }
  }
  else {
    iVar21 = 0;
    do {
      *(unsigned int *)((int)&AWBRgI + iVar21) = local_b8;
      *(unsigned int *)((int)&AWBBgI + iVar21) = local_b4;
      puVar26 = (unsigned int *)((int)&AWBCTI + iVar21);
      iVar21 = iVar21 + 4;
      *puVar26 = uVar9;
    } while (iVar21 != 0x3c);
    first_frame = 0;
    uVar19 = 1;
    uVar9 = _awb_ct;
    uVar27 = local_b8;
    uVar11 = local_b4;
  }
  local_b4 = uVar11;
  local_b8 = uVar27;
  _awb_ct = uVar9;
  uVar9 = 1 << (uVar20 + 0x10 & 0x1f);
  iVar21 = 1 << (uVar20 - 1 & 0x1f);
  uVar27 = uVar9 / local_b8 + iVar21 >> (uVar20 & 0x1f);
  uVar9 = uVar9 / local_b4 + iVar21 >> (uVar20 & 0x1f);
  iVar21 = local_98 - uVar27;
  if (local_98 < uVar27) {
    iVar21 = uVar27 - local_98;
  }
  iVar28 = uVar9 - local_94;
  if (uVar9 <= local_94) {
    iVar28 = local_94 - uVar9;
  }
  if (local_68 == 0) {
    local_90 = local_78;
  }
  awb_gain_original = local_b8;
  DAT_000b4f24 = local_b4;
  if (local_b0[0] == 1) {
    param_6[2] = 0x100;
    param_6[3] = 0x100;
    param_6[4] = 0x100;
    param_6[5] = 0x100;
  }
  if (local_6c == 0) {
    if (local_90 < (uint)(iVar21 + iVar28)) {
      if (local_b0[0] != 1) {
        *param_6 = 1;
        param_6[1] = 1;
        param_6[2] = uVar27;
        param_6[3] = uVar9;
        param_6[4] = (int)(uVar27 - local_98) / (int)uVar19 + local_a0;
        uVar27 = local_94;
        goto LAB_00028708;
      }
      *param_6 = 0;
    }
    else {
      *param_6 = 0;
    }
    param_6[1] = 0;
  }
  else {
    if (((uint)(iVar21 + iVar28) <= local_78) || (local_b0[0] == 1)) {
      if ((uVar19 == local_7c + 1U) || (uVar19 == 1)) {
        *param_6 = 0;
        param_6[4] = param_6[2];
        param_6[5] = param_6[3];
      }
      else {
        *param_6 = 1;
        param_6[4] = (int)(uVar27 - local_a0) / (int)(uVar19 - local_7c) + local_a0;
        param_6[5] = (int)(uVar9 - local_9c) / (int)(uVar19 - local_7c) + local_9c;
      }
      param_6[1] = param_6[1] + 1;
      goto LAB_00028710;
    }
    *param_6 = 1;
    param_6[1] = 1;
    param_6[2] = uVar27;
    param_6[3] = uVar9;
    param_6[4] = (int)(uVar27 - local_a0) / (int)uVar19 + local_a0;
    uVar27 = local_9c;
LAB_00028708:
    param_6[5] = (int)(uVar9 - uVar27) / (int)uVar19 + local_9c;
  }
LAB_00028710:
  Tiziano_awb_set_gain(param_6,uVar20,local_a4);
  return;
}



int JZ_Isp_Awb(void)

{
  unsigned int uVar1;
  int iVar2;
  unsigned int uVar3;
  char local_a8 [96];
  char auStack_48 [8];
  int local_40;
  int local_38;
  int local_34;
  
  uVar1 = _ev;
  _awb_ct_last = _awb_ct;
  if (_ev < (uint)(_awb_mode << 10)) {
    DAT_000b4eb4 = _awb_ct_th_ot_luxhigh;
  }
  else {
    if ((uint)(DAT_000a9860 << 10) <= _ev) {
      DAT_000b4ebc = _rgbg_weight;
      DAT_000b4eb0 = _light_src_num;
      DAT_000b4eb4 = _awb_ct_th_in;
      DAT_000b4eb8 = &_awb_ct_para_in;
      goto LAB_00028840;
    }
    DAT_000b4eb4 = _awb_ct_th_ot_luxlow;
  }
  DAT_000b4ebc = _rgbg_weight_ot;
  DAT_000b4eb0 = 0;
  DAT_000b4eb8 = &_awb_ct_para_ot;
LAB_00028840:
  IspAwbCtDetectParam = _light_src;
  if (_light_src._76_4_ == 1) {
    DAT_000b4ebc = _rgbg_weight_global;
  }
  DAT_000b4ec0 = DAT_000a98a8;
  DAT_000b4ec4 = DAT_000a98a0;
  DAT_000b4ec8 = _rg_pos;
  DAT_000b4ecc = _bg_pos;
  DAT_000b4ed0 = _color_temp_mesh;
  DAT_000b4ed4 = _awb_wght;
  DAT_000b4ed8 = _awb_dis_tw;
  DAT_000b4edc = &_awb_ct;
  DAT_000b4ee0 = _ls_w_lut;
  IspAwbFpgaParam = &awb_array_r;
  DAT_000b4ef0 = &awb_array_g;
  DAT_000b4ef4 = &awb_array_b;
  DAT_000b4ef8 = &awb_array_p;
  DAT_000b4efc = &_awb_cof;
  DAT_000b4f00 = _awb_mf_para;
  DAT_000b4f08 = _pixel_cnt_th;
  DAT_000b4ee8 = &_awb_cluster;
  DAT_000b4f0c = &_wb_static;
  DAT_000b4f14 = &_awb_cluster;
  DAT_000b4ee4 = &_AwbPointPos;
  DAT_000b4f04 = &_awb_parameter;
  DAT_000b4f10 = &_AwbPointPos;
  for (uVar3 = 0; uVar3 < 0x40; uVar3 = uVar3 + 1) {
    local_a8[uVar3 + 0x1c] = *(char *)((int)&IspAwbCtDetectParam + uVar3);
  }
  for (uVar3 = 0; uVar3 < 0x1c; uVar3 = uVar3 + 1) {
    local_a8[uVar3] = *(char *)((int)&DAT_000b4efc + uVar3);
  }
  Tiziano_awb_fpga(&awb_array_r,&awb_array_g,&awb_array_b,&awb_array_p);
  if (tawb_custom_en == 1) {
    private_complete(&awb_algo_comp);
  }
  iVar2 = _awb_ct;
  if (tisp_wb_attr == 1) {
    iVar2 = awb_ct_manual;
    if (awb_ct_manual == 0) {
      iVar2 = _awb_ct;
    }
  }
  else if (tisp_wb_attr == 0) {
    awb_ct_manual = _awb_ct;
  }
  _awb_ct = iVar2;
  if (_light_src._76_4_ == 0) {
    if ((uint)(DAT_000a9864 << 10) < uVar1) {
      if ((ModeFlag == 0) && (ModeFlag = 1, awb_frz == 0)) {
        system_reg_write_awb(1,0xb028,DAT_000a9894 << 0x10 | _awb_lowlight_rg_th);
        system_reg_write_awb(1,0xb02c,0x3ff0001);
      }
    }
    else if ((ModeFlag == 1) && (ModeFlag = 0, awb_frz == 0)) {
      system_reg_write_awb(1,0xb028,DAT_000a9928 << 0x10 | DAT_000a9924);
      system_reg_write_awb(1,0xb02c,DAT_000a9930 << 0x10 | DAT_000a992c);
    }
  }
  local_40 = 9;
  local_38 = _awb_ct;
  local_34 = 0;
  tisp_event_push(auStack_48);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_awb_set_lum_th_freq(void)

{
  unsigned int uVar1;
  int local_10;
  unsigned int local_c [2];
  
  local_10 = 0x400;
  local_c[0] = 0;
  tisp_ae_mean_update(local_c,&local_10);
  uVar1 = local_c[0];
  if (_DAT_000a9944 <= local_c[0]) {
    uVar1 = _DAT_000a9944;
  }
  uVar1 = uVar1 * local_10 >> 10;
  if (uVar1 == 0) {
    uVar1 = 1;
  }
  system_reg_write_awb(1,0xb038,_DAT_000a994c << 0x10 | _DAT_000a9948 << 8 | uVar1);
  return 0;
}



int awb_interrupt_static(void)

{
  int iVar1;
  char auStack_40 [8];
  int local_38;
  
  iVar1 = system_reg_read(0xb050);
  private_dma_cache_sync(0,iVar1 * 0x1000 + DAT_000b272c,0x1000,0);
  JZ_Isp_Get_Awb_Statistics(iVar1 * 0x1000 + DAT_000b272c,0xf001f001);
  tiziano_awb_set_lum_th_freq();
  local_38 = 10;
  tisp_event_push(auStack_40);
  return 1;
}



int tiziano_awb_set_hardware_param(void)

{
  unsigned int uVar1;
  
  if (awb_first == 0) {
    awb_first = 1;
    system_reg_write(0xb004,DAT_000a98a8 << 0x1c | DAT_000a98a4 << 0x10 | _awb_parameter |
                            DAT_000a98a0 << 0xc);
    system_reg_write(0xb008,DAT_000a98b8 << 0x18 | DAT_000a98b4 << 0x10 | DAT_000a98ac |
                            DAT_000a98b0 << 8);
    system_reg_write(0xb00c,DAT_000a98c8 << 0x18 | DAT_000a98c4 << 0x10 | DAT_000a98bc |
                            DAT_000a98c0 << 8);
    system_reg_write(0xb010,DAT_000a98d8 << 0x18 | DAT_000a98d4 << 0x10 | DAT_000a98cc |
                            DAT_000a98d0 << 8);
    system_reg_write(0xb014,DAT_000a98e4 << 0x10 | DAT_000a98e0 << 8 | DAT_000a98dc);
    system_reg_write(0xb018,DAT_000a98f4 << 0x18 | DAT_000a98f0 << 0x10 | DAT_000a98e8 |
                            DAT_000a98ec << 8);
    system_reg_write(0xb01c,DAT_000a9904 << 0x18 | DAT_000a9900 << 0x10 | DAT_000a98f8 |
                            DAT_000a98fc << 8);
    system_reg_write(0xb020,DAT_000a9914 << 0x18 | DAT_000a9910 << 0x10 | DAT_000a9908 |
                            DAT_000a990c << 8);
    system_reg_write(0xb024,DAT_000a9920 << 0x10 | DAT_000a991c << 8 | DAT_000a9918);
  }
  if (_light_src._76_4_ != 0) {
    system_reg_write_awb(1,0xb028,0xfff0001);
    system_reg_write_awb(1,0xb02c,0xfff0001);
    system_reg_write_awb(1,0xb030,0x100);
    system_reg_write_awb(1,0xb034,0xffff0100);
    return 0;
  }
  if (ModeFlag == 1) {
    system_reg_write_awb(1,0xb028,DAT_000a9894 << 0x10 | _awb_lowlight_rg_th);
    uVar1 = 0x3ff0001;
  }
  else {
    if (ModeFlag != 0) goto LAB_00028f00;
    system_reg_write_awb(1,0xb028,DAT_000a9928 << 0x10 | DAT_000a9924);
    uVar1 = DAT_000a9930 << 0x10 | DAT_000a992c;
  }
  system_reg_write_awb(1,0xb02c,uVar1);
LAB_00028f00:
  system_reg_write_awb(1,0xb030,DAT_000a9938 << 0x10 | DAT_000a9934);
  system_reg_write_awb(1,0xb034,DAT_000a9940 << 0x10 | DAT_000a993c);
  tiziano_awb_set_lum_th_freq();
  return 0;
}



int tiziano_awb_dn_params_refresh(void)

{
  first_frame = 1;
  awb_dn_refresh_flag = 1;
  tiziano_awb_params_refresh();
  tiziano_awb_set_hardware_param();
  return 0;
}



int tiziano_awb_init(unsigned int param_1,unsigned int param_2)

{
  int *puVar1;
  unsigned int uVar2;
  
  awb_first = 0;
  memset(&tisp_wb_attr,0,0x1c);
  tiziano_awb_params_refresh();
  uVar2 = 0;
  puVar1 = &_awb_parameter;
  while( true ) {
    if (DAT_000a98a8 <= uVar2) break;
    uVar2 = uVar2 + 1;
    puVar1[4] = (param_2 >> 1) / DAT_000a98a8;
    puVar1 = puVar1 + 1;
  }
  uVar2 = 0;
  puVar1 = &_awb_parameter;
  while( true ) {
    if (DAT_000a98a0 <= uVar2) break;
    uVar2 = uVar2 + 1;
    puVar1[0x13] = (param_1 >> 1) / DAT_000a98a0;
    puVar1 = puVar1 + 1;
  }
  if (awb_frz == 0) {
    tiziano_awb_set_hardware_param();
    Tiziano_awb_set_gain(_awb_mf_para,_AwbPointPos,&_wb_static);
  }
  tisp_event_set_cb(10,JZ_Isp_Awb);
  system_irq_func_set(0x1e,awb_interrupt_static);
  return 0;
}



int tisp_g_wb_mode(void *param_1)

{
  memcpy(param_1,&tisp_wb_attr,0x1c);
  if (tisp_wb_attr == 0) {
    *(unsigned int *)((int)param_1 + 4) = 0x10000 / DAT_000b5208;
    *(unsigned int *)((int)param_1 + 8) = 0x10000 / DAT_000b520c;
  }
  return 0;
}



void tisp_awb_set_frz(unsigned int param_1)

{
  awb_frz = param_1 & 0xff;
  return;
}



void tisp_awb_get_frz(char *param_1)

{
  *param_1 = (char)awb_frz;
  return;
}



int tisp_s_wb_mode(int param_1,int param_2,int param_3)

{
  switch(param_1) {
  case 0:
    tisp_wb_attr = 0;
    break;
  case 1:
    tisp_wb_attr = 1;
    DAT_000b51f8 = param_2;
    DAT_000b51fc = param_3;
    break;
  case 2:
    tisp_wb_attr = 2;
    DAT_000b51fc = 0x180;
    DAT_000b51f8 = 0x180;
    break;
  case 3:
    tisp_wb_attr = 3;
    DAT_000b51f8 = 0x1b6;
    DAT_000b51fc = 0x12f;
    break;
  case 4:
    tisp_wb_attr = 4;
    DAT_000b51f8 = 0xdb;
    DAT_000b51fc = 0x2b2;
    break;
  case 5:
    tisp_wb_attr = 5;
    DAT_000b51f8 = 0xf0;
    DAT_000b51fc = 0x234;
    break;
  case 6:
    tisp_wb_attr = 6;
    DAT_000b51f8 = 0x13b;
    DAT_000b51fc = 0x1cb;
    break;
  case 7:
    tisp_wb_attr = 7;
    DAT_000b51f8 = 0x1d4;
    DAT_000b51fc = 0x117;
    break;
  case 8:
    tisp_wb_attr = 8;
    DAT_000b51f8 = 0xf0;
    DAT_000b51fc = 0x178;
    break;
  case 9:
    tisp_wb_attr = 9;
    DAT_000b51f8 = param_2;
    DAT_000b51fc = param_3;
    break;
  default:
    isp_printf(2,"%s:%d::Can not support this mode!!!\n","tisp_s_wb_mode",0x4bd);
  }
  awb_moa = 1;
  return 0;
}



void tisp_awb_get_ct(int *param_1)

{
  *param_1 = _awb_ct;
  return;
}



void tisp_awb_set_ct(int *param_1)

{
  awb_ct_manual = *param_1;
  return;
}



void tiziano_s_awb_start(unsigned int param_1,int param_2)

{
  unsigned int uVar1;
  int iVar2;
  unsigned int uVar3;
  int iVar4;
  int uStack_28;
  int uStack_24;
  unsigned int uStack_20;
  unsigned int uStack_1c;
  
  iVar2 = tparams_day;
  *(unsigned int *)(tparams_day + 0x10e8) = param_1;
  *(int *)(iVar2 + 0x10ec) = param_2;
  *(unsigned int *)(iVar2 + 0x10f0) = param_1;
  *(int *)(iVar2 + 0x10f4) = param_2;
  uVar1 = _AwbPointPos;
  uVar3 = _AwbPointPos - 1;
  _awb_mf_para._8_4_ = param_1;
  _awb_mf_para._12_4_ = param_2;
  _awb_mf_para._16_4_ = param_1;
  _awb_mf_para._20_4_ = param_2;
  uStack_20 = param_1;
  uStack_1c = param_2;
  iVar2 = fix_point_mult2_32(_AwbPointPos,param_1 << (_AwbPointPos & 0x1f),(int)_wb_static);
  iVar4 = 1 << (uVar3 & 0x1f);
  uStack_20 = (uint)(iVar2 + iVar4) >> (uVar1 & 0x1f);
  iVar2 = fix_point_mult2_32(uVar1,uStack_1c << (uVar1 & 0x1f),_wb_static._4_4_);
  DAT_000b5208 = 0x10000 / uStack_20;
  uStack_1c = (uint)(iVar4 + iVar2) >> (uVar1 & 0x1f);
  DAT_000b520c = 0x10000 / uStack_1c;
  if (tisp_wb_attr - 1U < 8) {
    uStack_20 = DAT_000b51f8;
    uStack_1c = DAT_000b51fc;
  }
  else if (tisp_wb_attr == 9) {
    uStack_20 = (DAT_000b51f8 + 0x40) * uStack_20 >> 6;
    uStack_1c = (DAT_000b51fc + 0x40) * uStack_1c >> 6;
  }
  JZ_Isp_Awb_Awbg2reg(&uStack_20,&uStack_28);
  if (awb_frz == 0) {
    system_reg_write_awb(2,0x1804,uStack_28);
    system_reg_write_awb(2,0x1808,uStack_24);
    system_reg_write_awb(2,0x180c,uStack_28);
    system_reg_write_awb(2,0x1810,uStack_24);
    tisp_rdns_awb_gain_updata(uStack_28._2_2_,uStack_24._2_2_);
  }
  awb_moa = 0;
  return;
}



void tiziano_g_awb_start(int *param_1)

{
  *param_1 = _awb_mf_para._8_4_;
  param_1[1] = _awb_mf_para._12_4_;
  return;
}



int tiziano_s_wb_algo(int param_1)

{
  if (param_1 == 1) {
    _light_src._76_4_ = 1;
  }
  else {
    if ((param_1 != 0) && (param_1 != 2)) {
      isp_printf(2,"%s:%d::Can not support this awb algo mode!!!\n","tiziano_s_wb_algo",0x4f1);
      return 0xffffffff;
    }
    _light_src._76_4_ = 0;
  }
  tiziano_awb_set_hardware_param();
  return 0;
}



int tisp_awb_get_zone(void *param_1)

{
  memcpy(param_1,&tisp_wb_zone_attr,0x2a3);
  return 0;
}



int
tisp_awb_set_cluster_awb_params
          (int param_1,int param_2,int param_3,int param_4)

{
  int *puVar1;
  int *puVar2;
  char *puVar3;
  char local_res0 [12];
  int local_resc;
  
  puVar2 = &_awb_cluster;
  local_resc = param_4;
  puVar3 = &stack0x0000001c;
  do {
    puVar1 = (int *)((int)register0x00000074 + 0xc);
    register0x00000074 = (BADSPACEBASE *)((int)register0x00000074 + 4);
    puVar2[1] = *puVar1;
    puVar2 = puVar2 + 1;
  } while ((char *)register0x00000074 != puVar3);
  _awb_cluster = param_1;
  DAT_000a972c = param_2;
  DAT_000a9730 = param_3;
  return 0;
}



int tisp_awb_get_cluster_awb_params(int *param_1)

{
  int iVar1;
  int iVar2;
  
  iVar1 = 0;
  do {
    iVar2 = iVar1 + 4;
    *(int *)((int)param_1 + iVar1 + 0xc) = *(int *)((int)&DAT_000a9710 + iVar1);
    iVar1 = iVar2;
  } while (iVar2 != 0x1c);
  *param_1 = _awb_cluster;
  param_1[1] = DAT_000a972c;
  param_1[2] = DAT_000a9730;
  return 0;
}



int
tisp_awb_set_ct_trend(int param_1,int param_2,int param_3,int param_4)

{
  int *puVar1;
  int *puVar2;
  int uVar3;
  int local_res0 [4];
  
  local_res0[0] = param_1;
  local_res0[1] = param_2;
  local_res0[2] = param_3;
  local_res0[3] = param_4;
  puVar1 = &_awb_trend;
  puVar2 = (int *)&stack0x00000018;
  do {
    uVar3 = *(int *)register0x00000074;
    register0x00000074 = (BADSPACEBASE *)((int)register0x00000074 + 4);
    puVar1[1] = uVar3;
    puVar1 = puVar1 + 1;
  } while ((int *)register0x00000074 != puVar2);
  awb_moa = 1;
  return 0;
}



int tisp_awb_get_ct_trend(int param_1)

{
  int *puVar1;
  int iVar2;
  int *puVar3;
  
  iVar2 = 0;
  do {
    puVar1 = (int *)((int)&DAT_000a96f4 + iVar2);
    puVar3 = (int *)(param_1 + iVar2);
    iVar2 = iVar2 + 4;
    *puVar3 = *puVar1;
  } while (iVar2 != 0x18);
  return 0;
}



int tisp_awb_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x23:
    __src = (char *)&_awb_parameter;
    __n = 0xb4;
    break;
  case 0x24:
    __src = (char *)&_pixel_cnt_th;
    goto LAB_00029620;
  case 0x25:
    __src = (char *)&_awb_lowlight_rg_th;
    goto LAB_00029754;
  case 0x26:
    __src = (char *)&_AwbPointPos;
    goto LAB_00029754;
  case 0x27:
    __src = (char *)&_awb_cof;
    goto LAB_00029754;
  case 0x28:
    __src = _awb_mf_para;
    __n = 0x18;
    break;
  case 0x29:
    __src = (char *)&_awb_mode;
    goto LAB_000296c0;
  case 0x2a:
    __src = (char *)&_awb_ct;
    goto LAB_00029620;
  case 0x2b:
    __src = (char *)&_awb_ct_last;
    goto LAB_00029620;
  case 0x2c:
    __src = (char *)&_wb_static;
    goto LAB_00029754;
  case 0x2d:
    __src = _light_src;
    __n = 0x50;
    break;
  case 0x2e:
    __src = (char *)&_light_src_num;
LAB_00029620:
    __n = 4;
    break;
  case 0x2f:
    __src = _rg_pos;
    goto LAB_00029670;
  case 0x30:
    __src = _bg_pos;
LAB_00029670:
    __n = 0x3c;
    break;
  case 0x31:
    __src = _awb_ct_th_ot_luxhigh;
    goto LAB_00029698;
  case 0x32:
    __src = _awb_ct_th_ot_luxlow;
    goto LAB_00029698;
  case 0x33:
    __src = _awb_ct_th_in;
LAB_00029698:
    __n = 0x10;
    break;
  case 0x34:
    __src = (char *)&_awb_ct_para_ot;
    goto LAB_00029754;
  case 0x35:
    __src = (char *)&_awb_ct_para_in;
LAB_00029754:
    __n = 8;
    break;
  case 0x36:
    __src = _awb_dis_tw;
LAB_000296c0:
    __n = 0xc;
    break;
  case 0x37:
    __src = _rgbg_weight;
    goto LAB_000296f4;
  case 0x38:
    __src = _color_temp_mesh;
    goto LAB_000296f4;
  case 0x39:
    __src = _awb_wght;
    goto LAB_000296f4;
  case 0x3a:
    __src = _rgbg_weight_ot;
LAB_000296f4:
    __n = 900;
    break;
  case 0x3b:
    __src = _ls_w_lut;
    __n = 0x808;
    break;
  default:
    isp_printf(2,"%s,%d: awb not support param id %d\n","tisp_awb_param_array_get",0x59e,param_1);
    return 0xffffffff;
  }
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_awb_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  int *__dest;
  char8 *__dest_00;
  char *puVar2;
  
  switch(param_1) {
  case 0x23:
    memcpy(&_awb_parameter,param_2,0xb4);
    uVar1 = 0xb4;
    break;
  case 0x24:
    __dest = &_pixel_cnt_th;
    goto LAB_000297e8;
  case 0x25:
    __dest_00 = (char8 *)&_awb_lowlight_rg_th;
    goto LAB_0002981c;
  case 0x26:
    __dest_00 = (char8 *)&_AwbPointPos;
    goto LAB_0002981c;
  case 0x27:
    __dest_00 = &_awb_cof;
    goto LAB_0002981c;
  case 0x28:
    uVar1 = 0x18;
    break;
  case 0x29:
    puVar2 = (char *)&_awb_mode;
    goto LAB_00029938;
  case 0x2a:
  case 0x2b:
    goto switchD_000297b4_caseD_2a;
  case 0x2c:
    __dest_00 = &_wb_static;
    goto LAB_0002981c;
  case 0x2d:
    memcpy(_light_src,param_2,0x50);
    uVar1 = 0x50;
    break;
  case 0x2e:
    __dest = &_light_src_num;
LAB_000297e8:
    memcpy(__dest,param_2,4);
switchD_000297b4_caseD_2a:
    uVar1 = 4;
    break;
  case 0x2f:
    puVar2 = _rg_pos;
    goto LAB_000298b0;
  case 0x30:
    puVar2 = _bg_pos;
LAB_000298b0:
    memcpy(puVar2,param_2,0x3c);
    uVar1 = 0x3c;
    break;
  case 0x31:
    puVar2 = _awb_ct_th_ot_luxhigh;
    goto LAB_000298f4;
  case 0x32:
    puVar2 = _awb_ct_th_ot_luxlow;
    goto LAB_000298f4;
  case 0x33:
    puVar2 = _awb_ct_th_in;
LAB_000298f4:
    memcpy(puVar2,param_2,0x10);
    uVar1 = 0x10;
    break;
  case 0x34:
    __dest_00 = &_awb_ct_para_ot;
    goto LAB_0002981c;
  case 0x35:
    __dest_00 = &_awb_ct_para_in;
LAB_0002981c:
    memcpy(__dest_00,param_2,8);
    uVar1 = 8;
    break;
  case 0x36:
    puVar2 = _awb_dis_tw;
LAB_00029938:
    memcpy(puVar2,param_2,0xc);
    uVar1 = 0xc;
    break;
  case 0x37:
    puVar2 = _rgbg_weight;
    goto LAB_0002997c;
  case 0x38:
    puVar2 = _color_temp_mesh;
    goto LAB_0002997c;
  case 0x39:
    puVar2 = _awb_wght;
    goto LAB_0002997c;
  case 0x3a:
    puVar2 = _rgbg_weight_ot;
LAB_0002997c:
    memcpy(puVar2,param_2,900);
    uVar1 = 900;
    break;
  case 0x3b:
    memcpy(_ls_w_lut,param_2,0x808);
    uVar1 = 0x808;
    break;
  default:
    isp_printf(2,"%s,%d: awb not support param id %d\n","tisp_awb_param_array_set",0x628,param_1);
    return 0xffffffff;
  }
  *param_3 = uVar1;
  tiziano_awb_set_hardware_param();
  return 0;
}



void tisp_awb_algo_init(int param_1)

{
  tawb_custom_en = param_1;
  return;
}



void tisp_awb_algo_handle(int param_1)

{
  int local_1c;
  
  if (*(int *)(param_1 + 8) == 1) {
    tisp_s_wb_attr(1,*(int *)(param_1 + 0xc),*(int *)(param_1 + 0x10),local_1c);
  }
  return;
}



int tisp_awb_deinit(void)

{
  if (tawb_custom_en == 1) {
    tawb_custom_en = 0;
  }
  return 0;
}



int ISPAWBInterpolation1(unsigned int param_1,int param_2,int param_3,int param_4,unsigned int param_5,unsigned int param_6)

{
  int uVar1;
  int iVar2;
  
  iVar2 = param_3 << (param_1 & 0x1f);
  if (param_6 < param_5) {
    uVar1 = fix_point_mult2_32(param_1,param_5 - param_6 << (param_1 & 0x1f),param_2 - iVar2);
    iVar2 = fix_point_div_32(param_1,uVar1,param_4 - param_3 << (param_1 & 0x1f));
    iVar2 = -iVar2;
  }
  else {
    uVar1 = fix_point_mult2_32(param_1,param_6 - param_5 << (param_1 & 0x1f),param_2 - iVar2);
    iVar2 = fix_point_div_32(param_1,uVar1,param_4 - param_3 << (param_1 & 0x1f));
  }
  return (param_5 << (param_1 & 0x1f)) + iVar2;
}



int ISPAWBInterpolation2(unsigned int param_1,int param_2,int param_3,int param_4,unsigned int param_5,unsigned int param_6)

{
  int uVar1;
  int iVar2;
  
  if (param_6 < param_5) {
    uVar1 = fix_point_mult2_32(param_1,param_5 - param_6,param_2 - (param_3 << (param_1 & 0x1f)));
    iVar2 = fix_point_div_32(param_1,uVar1,param_4 - param_3 << (param_1 & 0x1f));
    iVar2 = -iVar2;
  }
  else {
    uVar1 = fix_point_mult2_32(param_1,param_6 - param_5);
    iVar2 = fix_point_div_32(param_1,uVar1,param_4 - param_3 << (param_1 & 0x1f));
  }
  return param_5 + iVar2;
}



unsigned int func_zone_ct_weight(unsigned int param_1,unsigned int *param_2,int param_3,unsigned int param_4,int param_5,
                        int param_6,int param_7)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  
  if ((param_1 < param_2[3]) && (param_2[1] < param_1)) {
    if (param_2[2] < param_1) {
      iVar4 = param_2[3] - param_1;
      param_7 = param_6;
    }
    else {
      iVar4 = param_1 - param_2[1];
      if (*param_2 <= param_1) {
        iVar4 = 0x100 << (param_4 & 0x1f);
        goto LAB_00029c98;
      }
    }
    iVar4 = fix_point_mult2_32(param_4,iVar4 << (param_4 & 0x1f),param_7);
    iVar4 = (param_3 << (param_4 & 0x1f)) + iVar4;
  }
  else {
    iVar4 = param_3 << (param_4 & 0x1f);
  }
LAB_00029c98:
  uVar2 = fix_point_mult2_32(param_4,param_5,iVar4);
  uVar5 = 0x100 << (param_4 & 0x1f);
  uVar6 = 0;
  uVar3 = uVar2 - uVar5 * (uVar2 / uVar5);
  uVar1 = 0;
LAB_00020ebc:
  do {
    if (uVar1 == param_4) {
LAB_00020f08:
      uVar1 = __ashldi3(uVar2 / uVar5,0,param_4);
      return uVar6 | uVar1;
    }
    uVar3 = uVar3 * 2;
    uVar6 = uVar6 << 1;
    if (uVar3 <= uVar5) {
      if (uVar5 == uVar3) {
        uVar6 = (uVar6 | 1) << ((param_4 - 1) - uVar1 & 0x1f);
        goto LAB_00020f08;
      }
      uVar1 = uVar1 + 1;
      goto LAB_00020ebc;
    }
    uVar6 = uVar6 | 1;
    uVar3 = uVar3 - uVar5;
    uVar1 = uVar1 + 1;
  } while( true );
}



void Tiziano_Awb_Ct_Detect
               (unsigned int *param_1,unsigned int *param_2,int *param_3,unsigned int *param_4,int *param_5,unsigned int **param_6,
               int param_7,unsigned int *param_8,unsigned int *param_9,int *param_10,int *param_11,int param_12,
               int param_13,int *param_14,unsigned int *param_15,char *param_16,unsigned int *param_17,
               int *param_18,unsigned int *param_19,int *param_20)

{
  bool bVar1;
  unsigned int *puVar2;
  int uVar3;
  unsigned int uVar4;
  unsigned int *puVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  int uVar8;
  code *pcVar9;
  int iVar10;
  int iVar11;
  unsigned int *puVar12;
  int iVar13;
  int *piVar14;
  unsigned int *puVar15;
  int *puVar16;
  int iVar17;
  unsigned int *puVar18;
  unsigned int *puVar19;
  unsigned int *puVar20;
  unsigned int *puVar21;
  unsigned int uVar22;
  unsigned int uVar23;
  unsigned int *puVar24;
  int iVar25;
  unsigned int *puVar26;
  int *piVar27;
  unsigned int uVar28;
  int *piVar29;
  unsigned int **ppuVar30;
  unsigned int **ppuVar31;
  int *piVar32;
  int *piVar33;
  unsigned int *puVar34;
  unsigned int uVar35;
  unsigned int local_118 [20];
  int *local_c8;
  unsigned int *local_c4;
  unsigned int *local_c0;
  int local_bc;
  int local_b8;
  int local_b4;
  unsigned int *local_b0;
  code *local_ac;
  unsigned int *local_a8;
  code *local_a4;
  int *local_a0;
  unsigned int *local_9c;
  unsigned int *local_98;
  unsigned int *local_94;
  int local_90;
  unsigned int *local_8c;
  unsigned int *local_88;
  unsigned int *local_84;
  unsigned int *local_80;
  unsigned int *local_7c;
  code *local_78;
  int local_74;
  unsigned int local_70;
  code *local_6c;
  unsigned int local_68;
  unsigned int local_64;
  unsigned int local_60;
  int local_5c;
  unsigned int *local_58;
  int *local_54;
  char *local_50;
  int *local_4c;
  unsigned int local_48;
  unsigned int *local_44;
  unsigned int *local_40;
  int local_3c;
  int local_38;
  int *local_34;
  int local_30;
  int local_2c;
  
  local_c4 = param_8;
  local_c0 = param_9;
  local_c8 = param_11;
  local_b8 = param_7;
  local_bc = param_12;
  local_74 = param_13;
  local_b0 = (unsigned int *)param_5;
  local_54 = (int *)*param_14;
  local_68 = param_14[1];
  local_70 = param_14[2];
  local_9c = param_15;
  local_50 = param_16;
  uVar35 = *param_17;
  local_6c = (code *)param_4;
  memset(local_118,0,0x50);
  local_98 = *param_6;
  local_94 = param_6[1];
  local_4c = (int *)*param_18;
  local_48 = param_18[1];
  local_44 = (unsigned int *)param_18[2];
  local_64 = param_18[3];
  local_60 = param_18[4];
  local_40 = (unsigned int *)param_18[5];
  if (local_98 == (unsigned int *)0x1) {
    iVar10 = *local_b0;
    iVar11 = local_b0[1];
    iVar13 = 0x100 - (int)local_94 << (uVar35 & 0x1f);
    local_a4 = (code *)fix_point_div_32(uVar35,iVar13,local_b0[3] - local_b0[2] << (uVar35 & 0x1f));
    local_a0 = (int *)fix_point_div_32(uVar35,iVar13,iVar10 - iVar11 << (uVar35 & 0x1f));
  }
  else {
    local_a0 = (int *)0x0;
    local_a4 = (code *)0x0;
  }
  piVar27 = param_3 + (int)local_6c * 2;
  puVar18 = local_118;
  for (; param_3 != piVar27; param_3 = param_3 + 1) {
    *puVar18 = *param_3 - 1;
    puVar18 = puVar18 + 1;
  }
  uVar28 = *param_2;
  local_b4 = (int)local_c4 * 4;
  puVar18 = param_2;
  for (puVar2 = (unsigned int *)0x0; puVar2 != local_c0; puVar2 = (unsigned int *)((int)puVar2 + 1)) {
    puVar12 = (unsigned int *)0x0;
    puVar26 = puVar18;
    while (bVar1 = puVar12 != local_c4, puVar12 = (unsigned int *)((int)puVar12 + 1), bVar1) {
      if (uVar28 < *puVar26) {
        uVar28 = *puVar26;
      }
      puVar26 = puVar26 + 1;
    }
    puVar18 = puVar18 + (int)local_c4;
  }
  puVar18 = (unsigned int *)(uVar28 << (uVar35 & 0x1f));
  local_ac = (code *)0x20000;
  local_8c = local_118;
  for (puVar2 = (unsigned int *)0x0; puVar2 != local_c0; puVar2 = (unsigned int *)((int)puVar2 + 1)) {
    local_90 = (int)puVar2 * 0x3c;
    for (puVar26 = (unsigned int *)0x0; puVar26 != local_c4; puVar26 = (unsigned int *)((int)puVar26 + 1)) {
      if (uVar28 == 0) {
        (&zone_pix_wgh)[(int)puVar2 * 0xf + (int)puVar26] = 0;
        goto LAB_0002b120;
      }
      local_a8 = puVar18;
      uVar3 = (*(code *)((int)local_ac + 0xe94))
                        (uVar35,param_2[(int)puVar26] << (uVar35 & 0x1f),puVar18);
      *(int *)((int)&zone_pix_wgh + (int)puVar26 * 4 + local_90) = uVar3;
      puVar18 = local_a8;
    }
    param_2 = (unsigned int *)((int)param_2 + local_b4);
  }
  local_5c = (int)local_c4 * (int)local_c0;
  local_90 = local_5c * 4;
  puVar18 = param_1;
  for (puVar2 = (unsigned int *)0x0; puVar2 != local_c0; puVar2 = (unsigned int *)((int)puVar2 + 1)) {
    puVar12 = puVar18 + local_5c;
    puVar26 = puVar18;
    for (puVar15 = (unsigned int *)0x0; puVar15 != local_c4; puVar15 = (unsigned int *)((int)puVar15 + 1)) {
      uVar28 = param_10[0xe] << (uVar35 & 0x1f);
      if (uVar28 < *puVar26) {
        *puVar26 = uVar28;
      }
      else {
        uVar28 = *param_10 << (uVar35 & 0x1f);
        if (*puVar26 < uVar28) {
          *puVar26 = uVar28;
        }
      }
      uVar28 = local_c8[0xe] << (uVar35 & 0x1f);
      if (uVar28 < *puVar12) {
        *puVar12 = uVar28;
      }
      else {
        uVar28 = *local_c8 << (uVar35 & 0x1f);
        if (*puVar12 < uVar28) {
          *puVar12 = uVar28;
        }
      }
      puVar12 = puVar12 + 1;
      puVar26 = puVar26 + 1;
    }
    puVar18 = (unsigned int *)((int)puVar18 + local_b4);
  }
  local_34 = &rgbg_wght;
  local_ac = ISPAWBInterpolation1;
  local_30 = 0x30000;
  local_80 = param_1;
  local_7c = param_1;
  for (local_84 = (unsigned int *)0x0; local_84 != local_c0; local_84 = (unsigned int *)((int)local_84 + 1)) {
    piVar27 = local_34 + (int)local_84 * 0xf;
    local_a8 = (unsigned int *)(local_90 + (int)local_7c);
    local_88 = &Cluster_rgbg_index_num;
    puVar18 = local_7c;
    for (local_78 = (code *)0x0; (unsigned int *)local_78 != local_c4;
        local_78 = (code *)((int)local_78 + 1)) {
      uVar28 = *puVar18;
      iVar13 = 0;
      if ((((uint)(*param_10 << (uVar35 & 0x1f)) <= uVar28) &&
          (uVar22 = param_10[0xe] << (uVar35 & 0x1f), uVar28 <= uVar22)) &&
         (iVar13 = 0xf, uVar28 != uVar22)) {
        iVar13 = 0;
        piVar14 = param_10;
        while( true ) {
          if (((uint)(*piVar14 << (uVar35 & 0x1f)) <= uVar28) &&
             (uVar28 < (uint)(piVar14[1] << (uVar35 & 0x1f)))) {
            iVar13 = iVar13 + 1;
            goto LAB_0002a188;
          }
          piVar14 = piVar14 + 1;
          if (iVar13 == 0xe) break;
          iVar13 = iVar13 + 1;
        }
        iVar13 = 0xf;
      }
LAB_0002a188:
      uVar28 = *local_a8;
      if ((uVar28 < (uint)(*local_c8 << (uVar35 & 0x1f))) ||
         (uVar22 = local_c8[0xe] << (uVar35 & 0x1f), uVar22 < uVar28)) {
        iVar10 = 0;
        if (iVar13 == 0xf) {
LAB_0002a234:
          local_88[(iVar10 + -1) * 0xe + 0xd] = local_88[(iVar10 + -1) * 0xe + 0xd] + 1;
LAB_0002a2b8:
          if (iVar10 != 0) {
            if (iVar13 != 0xf) {
              iVar11 = (iVar10 * 0xf + iVar13 + 0x3ffffff0) * 4;
              local_2c = iVar11 + 4;
              piVar29 = param_10 + iVar13 + 0x3fffffff;
              piVar32 = param_10 + iVar13 + 0x40000000;
              local_58 = (unsigned int *)(*local_ac)(uVar35,*puVar18,*piVar29,*piVar32,
                                             *(int *)(local_b8 + iVar11),
                                             *(int *)(local_b8 + local_2c));
              local_3c = iVar11 + 0x3c;
              local_38 = iVar11 + 0x40;
              uVar8 = (*local_ac)(uVar35,*puVar18,*piVar29,*piVar32,
                                  *(int *)(local_b8 + iVar11 + 0x3c),
                                  *(int *)(local_b8 + iVar11 + 0x40));
              uVar3 = local_58;
              piVar33 = local_c8 + iVar10 + 0x3fffffff;
              piVar14 = local_c8 + iVar10 + 0x40000000;
              local_58 = (unsigned int *)(local_30 + -0x64a0);
              iVar13 = (*(code *)local_58)(uVar35,*local_a8,*piVar33,*piVar14,uVar3,uVar8);
              *piVar27 = iVar13;
              if (local_98 == (unsigned int *)0x1) {
                local_2c = (*local_ac)(uVar35,*puVar18,*piVar29,*piVar32,
                                       *(int *)(local_bc + iVar11),
                                       *(int *)(local_bc + local_2c));
                uVar3 = (*local_ac)(uVar35,*puVar18,*piVar29,*piVar32,
                                    *(int *)(local_bc + local_3c),
                                    *(int *)(local_bc + local_38));
                iVar11 = *piVar14;
                uVar28 = *local_a8;
                iVar10 = *piVar33;
                puVar2 = local_58;
                iVar13 = local_2c;
                goto LAB_0002a5e0;
              }
              goto LAB_0002a634;
            }
            piVar14 = local_c8 + iVar10 + 0x3fffffff;
            piVar32 = local_c8 + iVar10 + 0x40000000;
            iVar25 = iVar10 * 0x3c + -4;
            iVar17 = iVar10 * 0x3c + 0x38;
            iVar13 = (*local_ac)(uVar35,*local_a8,*piVar14,*piVar32,
                                 *(int *)(local_b8 + iVar25),
                                 *(int *)(local_b8 + iVar17));
            *piVar27 = iVar13;
            if (local_98 != (unsigned int *)0x1) goto LAB_0002a634;
            iVar11 = *piVar32;
            uVar28 = *local_a8;
            iVar10 = *piVar14;
            uVar3 = *(int *)(local_bc + iVar17);
            iVar13 = *(int *)(local_bc + iVar25);
            puVar2 = (unsigned int *)local_ac;
            goto LAB_0002a5e0;
          }
          *piVar27 = 0;
        }
        else {
          iVar11 = -1;
LAB_0002a28c:
          local_88[iVar11 * 0xe + iVar13 + -1] = local_88[iVar11 * 0xe + iVar13 + -1] + 1;
          if (iVar13 != 0) goto LAB_0002a2b8;
LAB_0002a280:
          *piVar27 = 0;
        }
      }
      else {
        if (uVar28 == uVar22) {
          if (iVar13 != 0xf) goto LAB_0002a264;
LAB_0002a21c:
          local_88[0xc3] = local_88[0xc3] + 1;
        }
        else {
          piVar14 = local_c8;
          for (iVar11 = 0;
              ((uVar28 < (uint)(*piVar14 << (uVar35 & 0x1f)) ||
               ((uint)(piVar14[1] << (uVar35 & 0x1f)) <= uVar28)) &&
              (piVar14 = piVar14 + 1, iVar11 != 0xe)); iVar11 = iVar11 + 1) {
          }
          iVar10 = iVar11 + 1;
          if (iVar13 == 0xf) {
            if (iVar10 != 0xf) goto LAB_0002a234;
            goto LAB_0002a21c;
          }
          if (iVar10 != 0xf) goto LAB_0002a28c;
LAB_0002a264:
          local_88[iVar13 + 0xb5] = local_88[iVar13 + 0xb5] + 1;
          if (iVar13 == 0) goto LAB_0002a280;
        }
        if (iVar13 == 0xf) {
          iVar13 = *(int *)(local_b8 + 0x380) << (uVar35 & 0x1f);
          *piVar27 = iVar13;
          if (local_98 == (unsigned int *)0x1) {
            uVar28 = *(unsigned int *)(local_bc + 0x380);
LAB_0002a608:
            iVar13 = func_zone_ct_weight(1000000 / uVar28,local_b0,local_94,uVar35,iVar13,local_a4,
                                         local_a0);
            *piVar27 = iVar13;
          }
        }
        else {
          iVar25 = iVar13 * 4 + 0x344;
          iVar17 = iVar13 * 4 + 0x348;
          iVar10 = (*local_ac)(uVar35,*puVar18,param_10[iVar13 + -1],param_10[iVar13],
                               *(int *)(local_b8 + iVar25),*(int *)(local_b8 + iVar17)
                              );
          *piVar27 = iVar10;
          if (local_98 == (unsigned int *)0x1) {
            iVar11 = param_10[iVar13];
            uVar3 = *(int *)(local_bc + iVar17);
            iVar10 = param_10[iVar13 + -1];
            iVar13 = *(int *)(local_bc + iVar25);
            uVar28 = *puVar18;
            puVar2 = (unsigned int *)local_ac;
LAB_0002a5e0:
            uVar28 = (*(code *)puVar2)(uVar35,uVar28,iVar10,iVar11,iVar13,uVar3);
            uVar28 = uVar28 >> (uVar35 & 0x1f);
            iVar13 = *piVar27;
            goto LAB_0002a608;
          }
        }
      }
LAB_0002a634:
      piVar27 = piVar27 + 1;
      puVar18 = puVar18 + 1;
      local_a8 = local_a8 + 1;
    }
    local_7c = (unsigned int *)((int)local_7c + local_b4);
  }
  local_b8 = 1 << (uVar35 - 1 & 0x1f);
  for (puVar18 = (unsigned int *)0x0; puVar18 != (unsigned int *)local_6c; puVar18 = (unsigned int *)((int)puVar18 + 1)) {
    puVar16 = &rgbg_wght;
    puVar2 = param_1;
    for (puVar26 = (unsigned int *)0x0; puVar26 != local_c0; puVar26 = (unsigned int *)((int)puVar26 + 1)) {
      for (iVar13 = 0; local_b4 != iVar13; iVar13 = iVar13 + 4) {
        uVar28 = (uint)(local_b8 + *(int *)((int)puVar2 + iVar13)) >> (uVar35 & 0x1f);
        uVar22 = *local_8c;
        iVar10 = uVar22 - uVar28;
        if (uVar22 <= uVar28) {
          iVar10 = uVar28 - uVar22;
        }
        uVar28 = (uint)(local_b8 + *(int *)((int)puVar2 + iVar13 + local_90)) >> (uVar35 & 0x1f);
        uVar22 = local_8c[1];
        iVar11 = uVar28 - uVar22;
        if (uVar28 < uVar22) {
          iVar11 = uVar22 - uVar28;
        }
        uVar28 = iVar11 * iVar11 + iVar10 * iVar10;
        iVar10 = 0;
        if ((((uVar28 < 0x332) && (iVar10 = 1, uVar28 < 0x2a7)) &&
            ((iVar10 = 2, uVar28 < 0x267 &&
             ((iVar10 = 3, uVar28 < 0x23c && (iVar10 = 4, uVar28 < 0x21c)))))) &&
           (iVar10 = 5, uVar28 < 0x202)) {
          iVar10 = *(int *)(local_50 + uVar28 * 4);
        }
        uVar28 = iVar10 << (uVar35 & 0x1f);
        if (*(unsigned int *)((int)puVar16 + iVar13) < uVar28) {
          *(unsigned int *)((int)puVar16 + iVar13) = uVar28;
        }
      }
      puVar16 = puVar16 + 0xf;
      puVar2 = (unsigned int *)((int)puVar2 + local_b4);
    }
    local_8c = local_8c + 2;
  }
  if (local_4c == (int *)0x1) {
    piVar14 = &Cluster_rgbg_index_max;
    piVar27 = piVar14;
    do {
      iVar13 = 0;
      iVar10 = 0;
      while( true ) {
        iVar17 = 0;
        iVar11 = 0;
        do {
          uVar28 = *(unsigned int *)((int)&Cluster_rgbg_index_num + iVar11 + iVar10);
          if ((uVar28 != 0) && ((uint)piVar27[0x18] < uVar28)) {
            *piVar27 = iVar17;
            piVar27[0xc] = iVar13;
            piVar27[0x18] = uVar28;
          }
          iVar17 = iVar17 + 1;
          iVar11 = iVar17 * 4;
        } while (iVar17 != 0xe);
        iVar13 = iVar13 + 1;
        if (iVar13 == 0xe) break;
        iVar10 = iVar13 * 0x38;
      }
      piVar32 = piVar27 + 0xc;
      iVar13 = *piVar27;
      piVar27 = piVar27 + 1;
      (&Cluster_rgbg_index_num)[*piVar32 * 0xe + iVar13] = 0;
    } while (piVar27 != &DAT_000b6d74);
    puVar18 = &Cluster_rgbg_value1;
    do {
      iVar13 = *piVar14;
      puVar24 = (unsigned int *)(param_10 + iVar13);
      *puVar18 = *puVar24;
      iVar10 = piVar14[0xc];
      puVar2 = puVar18 + 5;
      puVar12 = (unsigned int *)(local_c8 + iVar10);
      puVar18[0x3c] = *puVar12;
      piVar14 = piVar14 + 1;
      puVar18[1] = *puVar24;
      puVar26 = (unsigned int *)(local_c8 + iVar10 + 1);
      puVar18[0x3d] = *puVar26;
      puVar15 = (unsigned int *)(param_10 + iVar13 + 1);
      puVar18[2] = *puVar24 + 1 + *puVar15 >> 1;
      puVar18[0x3e] = *puVar12 + 1 + *puVar26 >> 1;
      puVar18[3] = *puVar15;
      puVar18[0x3f] = *puVar12;
      puVar18[4] = *puVar15;
      puVar18[0x40] = *puVar26;
      puVar18 = puVar2;
    } while (puVar2 != &DAT_000b6b64);
    iVar13 = 1;
    puVar18 = &Cluster_rgbg_value1;
    do {
      if ((*puVar18 != 0) && (puVar2 = puVar18, iVar10 = iVar13, puVar18[0x3c] != 0)) {
        while (iVar10 != 0x3c) {
          if ((*puVar18 == puVar2[1]) && (puVar18[0x3c] == puVar2[0x3d])) {
            puVar2[1] = 0;
            puVar2[0x3d] = 0;
          }
          puVar2 = puVar2 + 1;
          iVar10 = iVar10 + 1;
        }
      }
      iVar13 = iVar13 + 1;
      puVar18 = puVar18 + 1;
      uVar28 = Cluster_rgbg_value1;
      puVar2 = &Cluster_rgbg_value1;
    } while (iVar13 != 0x3d);
    do {
      if ((uVar28 != 0) && (puVar2[0x3c] != 0)) {
        puVar18 = (unsigned int *)0x0;
        while( true ) {
          puVar18 = (unsigned int *)((int)puVar18 + 1);
          uVar28 = 0;
          iVar13 = 0;
          iVar10 = 0;
          for (puVar26 = (unsigned int *)0x0; puVar26 != local_c0; puVar26 = (unsigned int *)((int)puVar26 + 1)) {
            puVar15 = (unsigned int *)0x0;
            puVar12 = param_1 + (int)puVar26 * 0xf;
            while (puVar15 != local_c4) {
              uVar23 = *puVar2;
              uVar22 = local_b8 + *puVar12 >> (uVar35 & 0x1f);
              iVar11 = uVar22 - uVar23;
              if (uVar22 < uVar23) {
                iVar11 = uVar23 - uVar22;
              }
              uVar23 = puVar2[0x3c];
              uVar22 = local_b8 + puVar12[0xe1] >> (uVar35 & 0x1f);
              iVar17 = uVar22 - uVar23;
              if (uVar22 < uVar23) {
                iVar17 = uVar23 - uVar22;
              }
              puVar15 = (unsigned int *)((int)puVar15 + 1);
              if ((uint)(iVar17 * iVar17 + iVar11 * iVar11) <= local_48) {
                iVar10 = iVar10 + *puVar12;
                iVar13 = iVar13 + puVar12[0xe1];
                uVar28 = uVar28 + 1;
              }
              puVar12 = puVar12 + 1;
            }
          }
          if (uVar28 == 0) break;
          uVar4 = *puVar2;
          uVar23 = (iVar10 + (uVar28 >> 1)) / uVar28 >> (uVar35 & 0x1f);
          uVar22 = uVar23 - uVar4;
          if (uVar23 <= uVar4) {
            uVar22 = uVar4 - uVar23;
          }
          uVar4 = (iVar13 + (uVar28 >> 1)) / uVar28 >> (uVar35 & 0x1f);
          if (uVar22 <= local_60) {
            uVar6 = puVar2[0x3c];
            uVar22 = uVar4 - uVar6;
            if (uVar4 <= uVar6) {
              uVar22 = uVar6 - uVar4;
            }
            if (uVar22 <= local_60) break;
          }
          if (local_40 < puVar18) break;
          *puVar2 = uVar23;
          puVar2[0x3c] = uVar4;
          puVar2[0x78] = uVar28;
        }
      }
      puVar2 = puVar2 + 1;
      if (puVar2 == &DAT_000b6b64) goto code_r0x0002ab04;
      uVar28 = *puVar2;
    } while( true );
  }
  goto LAB_0002a7ac;
code_r0x0002ab04:
  iVar13 = 0;
  puVar18 = &Cluster_rgbg_value1;
  uVar28 = DAT_000b6c54;
  puVar2 = &Cluster_rgbg_value2;
  do {
    while( true ) {
      if ((uVar28 != 0) && (puVar2[0x78] < uVar28)) {
        uVar22 = *puVar18;
        puVar2[0x78] = uVar28;
        *puVar2 = uVar22;
        puVar2[0x3c] = puVar18[0x3c];
      }
      if (puVar18 + 1 == &DAT_000b6b64) break;
      puVar26 = puVar18 + 0x79;
      puVar18 = puVar18 + 1;
      uVar28 = *puVar26;
    }
    puVar26 = &Cluster_rgbg_value2;
    uVar22 = Cluster_rgbg_value2;
    if (puVar2[0x78] == 0) break;
    uVar22 = 0;
    iVar10 = 0;
    iVar11 = 0;
    puVar18 = &Cluster_rgbg_value1;
    uVar28 = DAT_000b6c54;
    while( true ) {
      if (uVar28 != 0) {
        uVar23 = *puVar2;
        uVar4 = *puVar18;
        iVar17 = uVar23 - uVar4;
        if (uVar23 < uVar4) {
          iVar17 = uVar4 - uVar23;
        }
        uVar6 = puVar18[0x3c];
        uVar23 = puVar2[0x3c];
        iVar25 = uVar23 - uVar6;
        if (uVar23 < uVar6) {
          iVar25 = uVar6 - uVar23;
        }
        if ((uint)(iVar25 * iVar25 + iVar17 * iVar17) <= local_44) {
          uVar22 = uVar22 + uVar28;
          iVar11 = uVar28 * uVar4 + iVar11;
          puVar18[0x78] = 0;
          iVar10 = uVar28 * uVar6 + iVar10;
        }
      }
      if (puVar18 + 1 == &DAT_000b6b64) break;
      uVar28 = puVar18[0x79];
      puVar18 = puVar18 + 1;
    }
    iVar13 = iVar13 + 1;
    if (uVar22 != 0) {
      puVar2[0x78] = 0;
      *puVar2 = (iVar11 + (uVar22 >> 1)) / uVar22;
      puVar2[0x3c] = (iVar10 + (uVar22 >> 1)) / uVar22;
    }
    puVar2 = puVar2 + 1;
    puVar18 = &Cluster_rgbg_value1;
    uVar28 = DAT_000b6c54;
    uVar22 = Cluster_rgbg_value2;
  } while (iVar13 != 0x3c);
  while( true ) {
    if ((uVar22 != 0) && (uVar28 = puVar26[0x3c], uVar28 != 0)) {
      puVar26[0x78] = 0;
      puVar26[0xb4] = 0;
      for (puVar18 = (unsigned int *)0x0; puVar18 != local_c0; puVar18 = (unsigned int *)((int)puVar18 + 1)) {
        puVar2 = (unsigned int *)0x0;
        puVar12 = param_1 + (int)puVar18 * 0xf;
        while (puVar2 != local_c4) {
          iVar13 = (&rgbg_wght)[(int)puVar18 * 0xf + (int)puVar2];
          puVar2 = (unsigned int *)((int)puVar2 + 1);
          if (iVar13 != 0) {
            uVar23 = local_b8 + *puVar12 >> (uVar35 & 0x1f);
            iVar10 = uVar23 - uVar22;
            if (uVar23 < uVar22) {
              iVar10 = uVar22 - uVar23;
            }
            uVar23 = local_b8 + puVar12[0xe1] >> (uVar35 & 0x1f);
            iVar11 = uVar23 - uVar28;
            if (uVar23 < uVar28) {
              iVar11 = uVar28 - uVar23;
            }
            if ((uint)(iVar11 * iVar11 + iVar10 * iVar10) <= local_64) {
              puVar26[0x78] = puVar26[0x78] + 1;
              puVar26[0xb4] = puVar26[0xb4] + iVar13;
            }
          }
          puVar12 = puVar12 + 1;
        }
      }
    }
    puVar26 = puVar26 + 1;
    puVar18 = &Cluster_rgbg_value2;
    uVar28 = DAT_000b6894;
    if (puVar26 == &DAT_000b67a4) break;
    uVar22 = *puVar26;
  }
  while( true ) {
    if (uVar28 != 0) {
      puVar18[0xb4] = ((uVar28 >> 1) + puVar18[0xb4]) / uVar28;
    }
    if (puVar18 + 1 == &DAT_000b67a4) break;
    puVar2 = puVar18 + 0x79;
    puVar18 = puVar18 + 1;
    uVar28 = *puVar2;
  }
  uVar22 = 0;
  puVar18 = &Cluster_rgbg_value2;
  uVar28 = DAT_000b6984;
  while( true ) {
    if ((uVar28 != 0) && (uVar22 < uVar28)) {
      uVar22 = uVar28;
    }
    if (puVar18 + 1 == &DAT_000b67a4) break;
    uVar28 = puVar18[0xb5];
    puVar18 = puVar18 + 1;
  }
  uVar28 = DAT_000b6894;
  puVar18 = &Cluster_rgbg_value2;
  while( true ) {
    if (uVar28 != 0) {
      puVar18[0x78] = (uVar28 * puVar18[0xb4] + (uVar22 >> 1)) / uVar22;
    }
    if (puVar18 + 1 == &DAT_000b67a4) break;
    uVar28 = puVar18[0x79];
    puVar18 = puVar18 + 1;
  }
  uVar22 = 0;
  puVar18 = &Cluster_rgbg_value2;
  uVar28 = DAT_000b6894;
  while( true ) {
    if ((uVar28 != 0) && (uVar22 < uVar28)) {
      uVar22 = uVar28;
    }
    if (puVar18 + 1 == &DAT_000b67a4) break;
    uVar28 = puVar18[0x79];
    puVar18 = puVar18 + 1;
  }
  for (puVar18 = (unsigned int *)0x0; puVar18 != local_c0; puVar18 = (unsigned int *)((int)puVar18 + 1)) {
    puVar26 = param_1 + (int)puVar18 * 0xf;
    puVar2 = &rgbg_wght + (int)puVar18 * 0xf;
    for (puVar12 = (unsigned int *)0x0; puVar12 != local_c4; puVar12 = (unsigned int *)((int)puVar12 + 1)) {
      iVar10 = 1;
      iVar13 = 0;
      puVar15 = &Cluster_rgbg_value2;
      do {
        uVar28 = *puVar15;
        iVar11 = iVar13;
        if ((uVar28 != 0) && (uVar23 = puVar15[0x3c], uVar23 != 0)) {
          uVar4 = local_b8 + *puVar26 >> (uVar35 & 0x1f);
          iVar17 = uVar4 - uVar28;
          if (uVar4 < uVar28) {
            iVar17 = uVar28 - uVar4;
          }
          uVar28 = local_b8 + puVar26[0xe1] >> (uVar35 & 0x1f);
          iVar25 = uVar28 - uVar23;
          if (uVar28 < uVar23) {
            iVar25 = uVar23 - uVar28;
          }
          if ((((uint)(iVar25 * iVar25 + iVar17 * iVar17) <= local_64) &&
              (iVar11 = iVar10, iVar13 != 0)) &&
             (iVar11 = iVar13, (&Cluster_rgbg_value2)[iVar13 + 0x77] < puVar15[0x78])) {
            iVar11 = iVar10;
          }
        }
        iVar10 = iVar10 + 1;
        puVar15 = puVar15 + 1;
        iVar13 = iVar11;
      } while (iVar10 != 0x3d);
      if (iVar11 == 0) {
        uVar28 = *puVar2;
      }
      else {
        uVar28 = (&Cluster_rgbg_value2)[iVar11 + 0x77] * *puVar2;
      }
      puVar26 = puVar26 + 1;
      *puVar2 = ((uVar22 >> 1) + uVar28) / uVar22;
      puVar2 = puVar2 + 1;
    }
  }
LAB_0002a7ac:
  iVar13 = 0;
  for (puVar18 = (unsigned int *)0x0; puVar18 != local_c0; puVar18 = (unsigned int *)((int)puVar18 + 1)) {
    for (puVar2 = (unsigned int *)0x0; puVar2 != local_c4; puVar2 = (unsigned int *)((int)puVar2 + 1)) {
      iVar13 = iVar13 + (&rgbg_wght)[(int)puVar18 * 0xf + (int)puVar2];
    }
  }
  if (iVar13 == 0) {
LAB_0002b120:
    *param_20 = 1;
    *local_9c = 5000;
    *param_19 = 0x100;
    param_19[1] = 0x100;
    return;
  }
  *param_20 = 0;
  local_94 = (unsigned int *)((int)local_c4 * -4);
  local_84 = (unsigned int *)(local_90 - (int)param_1);
  puVar12 = (unsigned int *)0x0;
  uVar28 = 0;
  uVar23 = 0;
  uVar22 = 0;
  puVar20 = (unsigned int *)0x0;
  puVar2 = (unsigned int *)0x0;
  puVar15 = &zone_pix_wgh;
  puVar24 = &rgbg_wght;
  puVar16 = (int *)0x20000;
  puVar26 = param_1;
  for (puVar18 = (unsigned int *)0x0; puVar18 != local_c0; puVar18 = (unsigned int *)((int)puVar18 + 1)) {
    local_b0 = (unsigned int *)((int)local_84 + (int)puVar26);
    puVar19 = puVar26;
    puVar21 = (unsigned int *)((int)puVar18 * 0x3c);
    for (puVar34 = (unsigned int *)0x0; puVar34 != local_c4; puVar34 = (unsigned int *)((int)puVar34 + 1)) {
      puVar5 = puVar21 + (int)puVar34;
      local_ac = (code *)puVar12;
      local_a8 = puVar2;
      local_a0 = puVar16;
      local_98 = puVar24;
      local_8c = puVar15;
      local_88 = puVar21;
      local_7c = puVar18;
      local_78 = (code *)puVar19;
      local_6c = (code *)puVar20;
      iVar13 = (*(code *)(puVar16 + 0x39a))
                         (uVar35,*(int *)((int)puVar24 + (int)puVar5),
                          *(int *)((int)puVar15 + (int)puVar5),
                          *(int *)(local_74 + (int)puVar5) << (uVar35 & 0x1f));
      local_a4 = fix_point_mult2_32;
      iVar10 = fix_point_mult2_32(uVar35,*puVar26,iVar13);
      local_a8 = (unsigned int *)((int)local_a8 + iVar10);
      iVar10 = (*local_a4)(uVar35,*(int *)((int)local_ac + (int)puVar26 + (int)local_b0),
                           iVar13);
      puVar20 = (unsigned int *)((uint)(uVar22 + iVar10 < uVar22) + (int)local_6c);
      uVar23 = (uVar28 + iVar13 < uVar28) + uVar23;
      puVar26 = puVar26 + 1;
      puVar18 = local_7c;
      puVar2 = local_a8;
      puVar19 = (unsigned int *)local_78;
      puVar21 = local_88;
      puVar12 = (unsigned int *)local_ac;
      puVar15 = local_8c;
      puVar24 = local_98;
      puVar16 = local_a0;
      uVar28 = uVar28 + iVar13;
      uVar22 = uVar22 + iVar10;
    }
    puVar26 = (unsigned int *)((int)puVar19 + local_b4);
    puVar12 = (unsigned int *)((int)puVar12 + (int)local_94);
  }
  if ((uVar28 | uVar23) == 0) goto LAB_0002b120;
  local_b0 = puVar20;
  uVar4 = fix_point_div_64(uVar35);
  uVar22 = uVar28;
  uVar6 = fix_point_div_64(uVar35);
  local_78 = fix_point_div_64;
  if (local_54 == (int *)0x1) {
    local_a8 = (unsigned int *)0x20000;
    local_a4 = (code *)rgbg_dis;
    puVar18 = (unsigned int *)(local_5c * -4);
    puVar2 = (unsigned int *)0x0;
    iVar13 = 0;
    local_a0 = &rgbg_wght;
    for (puVar26 = (unsigned int *)0x0; puVar26 != local_c0; puVar26 = (unsigned int *)((int)puVar26 + 1)) {
      local_ac = (code *)((int)puVar26 * 0x3c);
      piVar27 = (int *)(local_74 + (int)local_ac);
      puVar15 = (unsigned int *)((int)param_1 + local_90 + (int)puVar2);
      for (puVar12 = (unsigned int *)0x0; puVar12 != local_c4; puVar12 = (unsigned int *)((int)puVar12 + 1)) {
        uVar7 = *(unsigned int *)((int)puVar18 + (int)puVar15 + (int)puVar2);
        iVar10 = uVar4 - uVar7;
        if (uVar4 <= uVar7) {
          iVar10 = uVar7 - uVar4;
        }
        uVar7 = *puVar15;
        local_8c = (unsigned int *)(uVar6 - uVar7);
        if (uVar6 <= uVar7) {
          local_8c = (unsigned int *)(uVar7 - uVar6);
        }
        local_b0 = local_a8 + 0x389;
        local_88 = puVar2;
        local_7c = puVar18;
        local_6c = (code *)puVar26;
        local_98 = (unsigned int *)(*(code *)local_b0)(uVar35,iVar10,iVar10,local_8c,uVar22,uVar23);
        iVar10 = (*(code *)local_b0)(uVar35,local_8c,local_8c);
        puVar2 = local_88;
        puVar24 = (unsigned int *)((int)local_ac + puVar12 * 4);
        *(int *)(local_a4 + (int)puVar24) = (int)local_98 + iVar10;
        puVar18 = local_7c;
        puVar26 = (unsigned int *)local_6c;
        if (((*(int *)((int)local_a0 + (int)puVar24) != 0) && (puVar24[0x2d484] != 0)) &&
           (*piVar27 != 0)) {
          local_88 = local_7c;
          local_8c = puVar2;
          local_98 = (unsigned int *)local_6c;
          uVar3 = fix_point_mult3_32(uVar35);
          iVar10 = (*(code *)local_b0)(uVar35,uVar3,*piVar27 << (uVar35 & 0x1f));
          iVar13 = iVar13 + iVar10;
          puVar18 = local_88;
          puVar2 = local_8c;
          puVar26 = local_98;
        }
        piVar27 = piVar27 + 1;
        puVar15 = puVar15 + 1;
      }
      puVar2 = (unsigned int *)((int)puVar2 + local_b4);
      puVar18 = (unsigned int *)((int)puVar18 + (int)local_94);
    }
    local_7c = (unsigned int *)fix_point_div_32(uVar35,iVar13,uVar28);
    local_6c = fix_point_div_32;
    if (local_7c == (unsigned int *)0x0) goto LAB_0002b63c;
    local_64 = 1 << (uVar35 & 0x1f);
    local_50 = rgbg_d_wght;
    local_4c = &rgbg_wght;
    local_a0 = (int *)0x0;
    uVar28 = 0;
    uVar22 = 0;
    local_a4 = (code *)0x0;
    local_8c = (unsigned int *)0x0;
    local_a8 = (unsigned int *)0x0;
    local_90 = 0;
    local_48 = 0xb0000;
    for (local_b0 = (unsigned int *)0x0; local_b0 != local_c0; local_b0 = (unsigned int *)((int)local_b0 + 1)) {
      local_98 = (unsigned int *)((int)local_b0 * 0x3c);
      ppuVar31 = (unsigned int **)(local_50 + (int)local_98);
      ppuVar30 = (unsigned int **)(local_4c + (int)local_b0 * 0xf);
      local_60 = (int)local_84 + (int)local_80;
      local_5c = local_48 + 0x5918;
      local_58 = (unsigned int *)0x20000;
      local_54 = &zone_pix_wgh;
      puVar18 = local_80;
      for (local_ac = (code *)0x0; (unsigned int *)local_ac != local_c4;
          local_ac = (code *)((int)local_ac + 1)) {
        local_44 = local_98 + (int)local_ac;
        uVar23 = (*local_6c)(uVar35,*(int *)(local_5c + (int)local_44),local_7c);
        local_88 = local_58 + 0x389;
        puVar2 = local_44;
        if (local_68 < uVar23) {
          *ppuVar31 = (unsigned int *)0x0;
        }
        else if (uVar23 < local_70) {
          *ppuVar31 = *ppuVar30;
        }
        else {
          local_40 = local_44;
          local_44 = *ppuVar30;
          iVar13 = (*local_6c)(uVar35,uVar23 - local_70,local_68 - local_70);
          puVar2 = (unsigned int *)(*(code *)local_88)(uVar35,local_44,local_64 - iVar13);
          *ppuVar31 = puVar2;
          puVar2 = local_40;
        }
        local_44 = (unsigned int *)fix_point_mult3_32(uVar35,*ppuVar31,
                                              *(int *)((int)local_54 + (int)puVar2),
                                              *(int *)(local_74 + (int)puVar2) << (uVar35 & 0x1f));
        iVar13 = (*(code *)local_88)(uVar35,*puVar18,local_44);
        ppuVar31 = ppuVar31 + 1;
        local_90 = (uint)((unsigned int *)((int)local_a8 + iVar13) < local_a8) + local_90;
        local_a8 = (unsigned int *)((int)local_a8 + iVar13);
        iVar13 = (*(code *)local_88)(uVar35,*(int *)((int)puVar18 + local_60 + (int)local_a0)
                                     ,local_44);
        puVar18 = puVar18 + 1;
        local_8c = (unsigned int *)((uint)(local_a4 + iVar13 < local_a4) + (int)local_8c);
        uVar22 = (uVar28 + (int)local_44 < uVar28) + uVar22;
        ppuVar30 = ppuVar30 + 1;
        uVar28 = uVar28 + (int)local_44;
        local_a4 = local_a4 + iVar13;
      }
      local_80 = (unsigned int *)((int)local_80 + local_b4);
      local_a0 = (int *)((int)local_a0 + (int)local_94);
    }
    if ((uVar28 | uVar22) != 0) {
      uVar4 = (*local_78)(uVar35);
      uVar6 = (*local_78)(uVar35);
      goto LAB_0002b63c;
    }
    iVar13 = param_10[0xe];
  }
  else {
LAB_0002b63c:
    iVar13 = param_10[0xe];
  }
  uVar22 = iVar13 << (uVar35 & 0x1f);
  uVar28 = uVar22;
  if ((uVar4 <= uVar22) && (uVar28 = *param_10 << (uVar35 & 0x1f), uVar28 <= uVar4)) {
    uVar28 = uVar4;
  }
  uVar4 = local_c8[0xe] << (uVar35 & 0x1f);
  uVar23 = uVar4;
  if ((uVar6 <= uVar4) && (uVar23 = *local_c8 << (uVar35 & 0x1f), uVar23 <= uVar6)) {
    uVar23 = uVar6;
  }
  uVar6 = uVar23;
  if (uVar28 == uVar22) {
    iVar13 = 0xf;
    if (uVar23 != uVar4) goto LAB_0002b6e4;
LAB_0002b74c:
    iVar10 = 0xf;
LAB_0002b750:
    iVar17 = (local_c8 + iVar10 + -1)[1];
    iVar11 = local_c8[iVar10 + -1];
    iVar13 = iVar10 * 0x3c + local_bc;
    uVar8 = *(int *)(iVar13 + 0x38);
    uVar3 = *(int *)(iVar13 + -4);
  }
  else {
    piVar27 = param_10;
    iVar10 = 0;
    do {
      iVar13 = iVar10 + 1;
      if (((uint)(*piVar27 << (uVar35 & 0x1f)) <= uVar28) &&
         (uVar28 < (uint)(piVar27[1] << (uVar35 & 0x1f)))) break;
      bVar1 = iVar10 != 0xe;
      piVar27 = piVar27 + 1;
      iVar10 = iVar13;
    } while (bVar1);
    if (uVar23 == uVar4) {
      if (iVar13 == 0xf) goto LAB_0002b74c;
    }
    else {
LAB_0002b6e4:
      piVar27 = local_c8;
      iVar10 = 0;
      do {
        iVar11 = iVar10;
        iVar10 = iVar11 + 1;
        if (((uint)(*piVar27 << (uVar35 & 0x1f)) <= uVar23) &&
           (uVar23 < (uint)(piVar27[1] << (uVar35 & 0x1f)))) break;
        piVar27 = piVar27 + 1;
      } while (iVar11 != 0xe);
      if (iVar13 == 0xf) goto LAB_0002b750;
      if (iVar10 != 0xf) {
        puVar16 = (int *)(local_bc + (iVar10 * 0xf + iVar13 + 0x3ffffff0) * 4);
        uVar3 = ISPAWBInterpolation1
                          (uVar35,uVar28,param_10[iVar13 + 0x3fffffff],param_10[iVar13 + 0x40000000]
                           ,*puVar16,puVar16[1]);
        uVar8 = ISPAWBInterpolation1
                          (uVar35,uVar28,param_10[iVar13 + 0x3fffffff],param_10[iVar13 + 0x40000000]
                           ,puVar16[0xf],puVar16[0x10]);
        iVar17 = (local_c8 + iVar11)[1];
        iVar11 = local_c8[iVar11];
        pcVar9 = ISPAWBInterpolation2;
        goto LAB_0002b88c;
      }
    }
    iVar17 = (param_10 + iVar13 + -1)[1];
    iVar11 = param_10[iVar13 + -1];
    iVar13 = local_bc + iVar13 * 4 + -4;
    uVar8 = *(int *)(iVar13 + 0x34c);
    uVar3 = *(int *)(iVar13 + 0x348);
    uVar6 = uVar28;
  }
  pcVar9 = ISPAWBInterpolation1;
LAB_0002b88c:
  iVar13 = (*pcVar9)(uVar35,uVar6,iVar11,iVar17,uVar3,uVar8);
  if (iVar13 == 0) {
    uVar22 = 5000;
  }
  else {
    iVar13 = fix_point_div_32(uVar35,1000000 << (uVar35 & 0x1f),iVar13);
    uVar22 = (uint)(local_b8 + iVar13) >> (uVar35 & 0x1f);
  }
  *local_9c = uVar22;
  *param_19 = uVar28 + local_b8 >> (uVar35 & 0x1f);
  param_19[1] = uVar23 + local_b8 >> (uVar35 & 0x1f);
  *param_20 = 0;
  return;
}



int subsection_map(int param_1,int param_2,int param_3,short *param_4,int param_5,int *param_6,
                  int param_7,unsigned int param_8,unsigned int param_9,int param_10)

{
  int iVar1;
  int uVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  short *psVar7;
  int iVar8;
  
  iVar8 = 10000;
  iVar3 = 0;
  iVar1 = 0;
  iVar6 = 0;
  do {
    iVar5 = *param_6;
    iVar4 = iVar5 - param_1;
    if (iVar5 <= param_1) {
      iVar4 = param_1 - iVar5;
    }
    if (iVar4 < iVar8) {
      iVar3 = 0;
      iVar1 = iVar6;
LAB_0002ba34:
      iVar3 = iVar3 + 1;
      iVar8 = iVar4;
    }
    else if (iVar4 == iVar8) {
      iVar1 = iVar1 + iVar6;
      goto LAB_0002ba34;
    }
    iVar6 = iVar6 + 1;
    param_6 = param_6 + 1;
  } while (iVar6 != 0x200);
  if (iVar3 < 1) {
    iVar3 = 1;
  }
  if (iVar1 < 1) {
    iVar1 = 1;
  }
  iVar1 = fix_point_div_32(param_9,iVar1 << (param_9 & 0x1f),iVar3 << (param_9 & 0x1f));
  iVar3 = (1 << (param_9 & 0x1f)) / 2;
  iVar8 = 0;
  iVar1 = (iVar1 + iVar3 >> (param_9 & 0x1f)) * param_7 + -1;
  psVar7 = param_4;
  do {
    iVar6 = (int)*psVar7;
    if (iVar1 < iVar6) {
      psVar7 = (short *)(param_5 + iVar8 * 2);
      uVar2 = fix_point_div_32(param_9,(int)*psVar7 - (int)*(short *)(param_5 + iVar8 * 2 + -2) <<
                                       (param_9 & 0x1f),
                               iVar6 - param_4[iVar8 + -1] << (param_9 & 0x1f));
      iVar1 = fix_point_mult2_32(param_9,uVar2,iVar6 - iVar1 << (param_9 & 0x1f));
      iVar1 = (int)*psVar7 - (iVar1 + iVar3 >> (param_9 & 0x1f));
      goto LAB_0002bb30;
    }
    iVar8 = iVar8 + 1;
    psVar7 = psVar7 + 1;
  } while (iVar8 != 0x81);
  iVar1 = (int)*(short *)(param_5 + 0x100);
LAB_0002bb30:
  if (param_10 == 1) {
    param_2 = param_2 * 100 + (iVar1 - param_2) * param_3;
  }
  else if (param_2 < iVar1) {
    param_2 = param_2 * 100;
  }
  else {
    param_2 = param_2 * 100 + (iVar1 - param_2) * param_3;
  }
  iVar1 = fix_point_div_32(param_8,param_2 << (param_8 & 0x1f),100 << (param_8 & 0x1f));
  return (1 << (param_8 & 0x1f)) / 2 + iVar1 >> (param_8 & 0x1f);
}



void subsection(int *param_1,int param_2,int param_3,short *param_4,int param_5,
               int param_6,unsigned int param_7,int param_8,int param_9)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int uVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  short *psVar8;
  int iVar9;
  short *local_3c;
  
  iVar1 = 2 << (param_7 & 0x1f);
  param_1[8] = 0xfff;
  *param_1 = 0;
  iVar2 = fix_point_div_32(param_7,0xfff << (param_7 & 0x1f),iVar1);
  iVar2 = subsection_map(5000,iVar2 + 0x200 >> (param_7 & 0x1f),param_2,param_3,param_4,param_5,
                         param_6,param_7,param_8,param_9);
  iVar3 = 0;
  psVar8 = param_4;
  do {
    iVar5 = (int)*psVar8;
    if (iVar2 < iVar5) {
      psVar8 = (short *)(param_3 + iVar3 * 2);
      uVar4 = fix_point_div_32(param_7,(int)*psVar8 - (int)*(short *)(param_3 + iVar3 * 2 + -2) <<
                                       (param_7 & 0x1f),
                               iVar5 - param_4[iVar3 + -1] << (param_7 & 0x1f));
      iVar3 = fix_point_mult2_32(param_7,uVar4,iVar5 - iVar2 << (param_7 & 0x1f));
      iVar3 = (int)*psVar8 - (iVar3 + 0x200 >> (param_7 & 0x1f));
      goto LAB_0002bd2c;
    }
    iVar3 = iVar3 + 1;
    psVar8 = psVar8 + 1;
  } while (iVar3 != 0x81);
  iVar3 = (int)*(short *)(param_3 + 0x100);
LAB_0002bd2c:
  param_1[4] = iVar3;
  iVar9 = param_6 << (param_7 & 0x1f);
  iVar3 = fix_point_div_32(param_7,iVar3 << (param_7 & 0x1f),iVar9);
  iVar3 = *(int *)(param_5 + (iVar3 + 0x200 >> (param_7 & 0x1f)) * 4);
  iVar5 = fix_point_div_32(param_7,iVar2 << (param_7 & 0x1f),iVar1);
  iVar3 = subsection_map(iVar3 / 2,iVar5 + 0x200 >> (param_7 & 0x1f),param_2,param_3,param_4,param_5
                         ,param_6,param_7,param_8,param_9);
  iVar5 = 0;
  psVar8 = param_4;
  do {
    iVar6 = (int)*psVar8;
    if (iVar3 < iVar6) {
      psVar8 = (short *)(param_3 + iVar5 * 2);
      uVar4 = fix_point_div_32(param_7,(int)*psVar8 - (int)*(short *)(param_3 + iVar5 * 2 + -2) <<
                                       (param_7 & 0x1f),
                               iVar6 - param_4[iVar5 + -1] << (param_7 & 0x1f));
      iVar5 = fix_point_mult2_32(param_7,uVar4,iVar6 - iVar3 << (param_7 & 0x1f));
      iVar5 = (int)*psVar8 - (iVar5 + 0x200 >> (param_7 & 0x1f));
      goto LAB_0002be60;
    }
    iVar5 = iVar5 + 1;
    psVar8 = psVar8 + 1;
  } while (iVar5 != 0x81);
  iVar5 = (int)*(short *)(param_3 + 0x100);
LAB_0002be60:
  param_1[2] = iVar5;
  iVar5 = fix_point_div_32(param_7,iVar5 << (param_7 & 0x1f),iVar9);
  iVar5 = *(int *)(param_5 + (iVar5 + 0x200 >> (param_7 & 0x1f)) * 4);
  iVar6 = fix_point_div_32(param_7,iVar3 << (param_7 & 0x1f),iVar1);
  iVar5 = subsection_map(iVar5 / 2,iVar6 + 0x200 >> (param_7 & 0x1f),param_2,param_3,param_4,param_5
                         ,param_6,param_7,param_8,param_9);
  iVar6 = 0;
  psVar8 = param_4;
  do {
    iVar7 = (int)*psVar8;
    if (iVar5 < iVar7) {
      psVar8 = (short *)(param_3 + iVar6 * 2);
      uVar4 = fix_point_div_32(param_7,(int)*psVar8 - (int)*(short *)(param_3 + iVar6 * 2 + -2) <<
                                       (param_7 & 0x1f),
                               iVar7 - param_4[iVar6 + -1] << (param_7 & 0x1f));
      iVar5 = fix_point_mult2_32(param_7,uVar4,iVar7 - iVar5 << (param_7 & 0x1f));
      iVar5 = (int)*psVar8 - (iVar5 + 0x200 >> (param_7 & 0x1f));
      goto LAB_0002bf90;
    }
    iVar6 = iVar6 + 1;
    psVar8 = psVar8 + 1;
  } while (iVar6 != 0x81);
  iVar5 = (int)*(short *)(param_3 + 0x100);
LAB_0002bf90:
  param_1[1] = iVar5;
  iVar5 = fix_point_div_32(param_7,param_1[2] << (param_7 & 0x1f),iVar9);
  iVar9 = fix_point_div_32(param_7,param_1[4] << (param_7 & 0x1f),iVar9);
  iVar6 = *(int *)(param_5 + (iVar5 + 0x200 >> (param_7 & 0x1f)) * 4);
  iVar5 = *(int *)(param_5 + (iVar9 + 0x200 >> (param_7 & 0x1f)) * 4);
  iVar1 = fix_point_div_32(param_7,iVar2 + iVar3 << (param_7 & 0x1f),iVar1);
  iVar1 = subsection_map((iVar5 + iVar6) / 2,iVar1 + 0x200 >> (param_7 & 0x1f),param_2,param_3,
                         param_4,param_5,param_6,param_7,param_8,param_9);
  iVar2 = 0;
  local_3c = param_4;
  do {
    iVar3 = (int)*local_3c;
    if (iVar1 < iVar3) {
      psVar8 = (short *)(param_3 + iVar2 * 2);
      uVar4 = fix_point_div_32(param_7,(int)*psVar8 - (int)*(short *)(param_3 + iVar2 * 2 + -2) <<
                                       (param_7 & 0x1f),
                               iVar3 - param_4[iVar2 + -1] << (param_7 & 0x1f));
      iVar1 = fix_point_mult2_32(param_7,uVar4,iVar3 - iVar1 << (param_7 & 0x1f));
      iVar1 = (int)*psVar8 - (iVar1 + 0x200 >> (param_7 & 0x1f));
      goto LAB_0002c0e8;
    }
    iVar2 = iVar2 + 1;
    local_3c = local_3c + 1;
  } while (iVar2 != 0x81);
  iVar1 = (int)*(short *)(param_3 + 0x100);
LAB_0002c0e8:
  iVar2 = param_1[4];
  param_1[3] = iVar1;
  param_1[5] = iVar2 + 1;
  param_1[7] = iVar2 + 3;
  param_1[6] = iVar2 + 2;
  if (0xffe < iVar2 + 3) {
    param_1[4] = 0xffb;
    param_1[5] = 0xffc;
    param_1[6] = 0xffd;
    param_1[7] = 0xffe;
  }
  if (0xfff < (int)param_1[8]) {
    param_1[8] = 0xfff;
  }
  return;
}



void subsection_up(int *param_1,int param_2,int *param_3,int param_4)

{
  int iVar1;
  int iVar2;
  int *piVar3;
  int iVar4;
  int iVar5;
  int *piVar6;
  int iVar7;
  int *piVar8;
  int iVar9;
  int iVar10;
  
  piVar6 = (int *)(param_2 + 4);
  *param_1 = 0;
  param_1[8] = 0xfff;
  piVar3 = param_1 + 1;
  do {
    iVar10 = *piVar6;
    iVar9 = 10000;
    iVar4 = 0;
    iVar1 = 0;
    iVar7 = 0;
    piVar8 = param_3;
    do {
      iVar5 = *piVar8;
      iVar2 = iVar5 - iVar10;
      if (iVar5 <= iVar10) {
        iVar2 = iVar10 - iVar5;
      }
      if (iVar2 < iVar9) {
        iVar4 = 0;
        iVar1 = iVar7;
LAB_0002c1f0:
        iVar4 = iVar4 + 1;
        iVar9 = iVar2;
      }
      else if (iVar2 == iVar9) {
        iVar1 = iVar1 + iVar7;
        goto LAB_0002c1f0;
      }
      iVar7 = iVar7 + 1;
      piVar8 = piVar8 + 1;
    } while (iVar7 != 0x200);
    if (iVar4 < 1) {
      iVar4 = 1;
    }
    piVar6 = piVar6 + 1;
    *piVar3 = (((iVar1 << 0xc) / iVar4 + 0x800) / 0x1000) * param_4 + -1;
    piVar3 = piVar3 + 1;
    if (piVar6 == (int *)(param_2 + 0x20)) {
      return;
    }
  } while( true );
}



void subsection_light(int *param_1,int *param_2,int param_3,int *param_4)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  
  piVar4 = param_2 + 9;
  do {
    iVar1 = *param_2;
    iVar3 = *param_1;
    if (iVar1 < iVar3) {
      iVar2 = iVar3 - iVar1;
    }
    else {
      iVar2 = iVar1 - iVar3;
      iVar3 = iVar1;
    }
    param_2 = param_2 + 1;
    param_1 = param_1 + 1;
    *param_4 = (iVar3 * 1000 - iVar2 * param_3) / 1000;
    param_4 = param_4 + 1;
  } while (param_2 != piVar4);
  return;
}



int interpolate_adr_x8_y12(int param_1,int param_2,int param_3,int param_4,int param_5)

{
  int iVar1;
  int iVar2;
  
  if (param_3 < param_4) {
    iVar1 = param_4 - param_3;
  }
  else {
    iVar1 = param_3 - param_4;
  }
  iVar2 = (iVar1 * (param_5 - param_1) * 0x400) / (param_2 - param_1);
  iVar1 = -iVar2;
  if (param_3 < param_4) {
    iVar1 = iVar2;
  }
  return (param_3 * 0x400 + iVar1 + 0x200) / 0x400;
}



void Tiziano_adr_fpga(int *param_1,int *param_2,int *param_3,int *param_4,int *param_5,int **param_6
                     ,int *param_7,int *param_8,int param_9,int *param_10,int param_11,
                     int param_12,int *param_13,int *param_14,int *param_15,int *param_16)

{
  int iVar1;
  int iVar2;
  int **ppiVar3;
  int iVar4;
  int **ppiVar5;
  int iVar6;
  int uVar7;
  int *piVar8;
  int *puVar9;
  int iVar10;
  int *puVar11;
  int iVar12;
  int iVar13;
  int *piVar14;
  int iVar15;
  int uVar16;
  char *puVar17;
  code *pcVar18;
  int *piVar19;
  int iVar20;
  int *piVar21;
  int *local_440 [2];
  int *local_420;
  int local_41c [2];
  int *local_414;
  int local_410 [4];
  int *local_400 [2];
  int aiStack_3f8 [62];
  int local_300 [11];
  char auStack_2d4 [36];
  char auStack_2b0 [36];
  char local_28c [36];
  char local_268 [36];
  char auStack_244 [36];
  int local_220 [9];
  int local_1fc;
  int local_1f8;
  int local_1f4;
  int local_1f0;
  int local_1ec;
  int local_1e8;
  int local_1e4;
  int local_1e0;
  int local_1dc;
  int *local_1d8 [2];
  int local_1d0;
  int *local_1cc;
  int local_1c8;
  int local_1c4;
  int local_1c0;
  int local_1bc;
  int *local_1b8;
  int *local_1b4;
  int local_1b0;
  int local_1ac;
  int local_1a8;
  int local_1a4;
  int local_1a0;
  int local_19c;
  int local_198;
  int local_194;
  int *local_190 [2];
  int local_188;
  int *local_184;
  int local_180;
  int local_17c;
  int local_178;
  int local_174;
  int *local_170;
  int *local_16c [4];
  int local_15c;
  int *local_14c;
  int *local_148 [8];
  int local_128;
  int *local_124;
  int *local_120;
  int **local_11c;
  code *local_118;
  int *local_114;
  int local_110;
  int local_10c;
  int *local_108;
  code *local_104;
  int *local_100;
  int local_fc;
  int *local_f8;
  int *local_f4;
  int *local_f0;
  int *local_ec;
  int *local_e8;
  int *local_e4;
  int **local_e0;
  int **local_dc;
  int *local_d8;
  int local_d4;
  int local_d0;
  int *local_cc;
  int local_c8;
  int *local_c4;
  int local_c0;
  int *local_bc;
  int *local_b8;
  int local_b4;
  int local_b0;
  int local_ac;
  int local_a8;
  int local_a4;
  int local_a0;
  int local_9c;
  int *local_98;
  int local_94;
  int *local_90;
  int *local_8c;
  int local_88;
  int local_84;
  int local_80;
  int local_7c;
  int local_78;
  int local_74;
  int local_70;
  int local_6c;
  int local_68;
  int local_64;
  int local_60;
  int local_5c;
  int local_58;
  int local_54;
  int local_50;
  int local_4c;
  int local_48;
  int local_44;
  int local_40;
  int local_3c;
  int local_38;
  code *local_34;
  int *local_30;
  int local_2c;
  
  local_100 = param_5;
  local_dc = param_6;
  local_114 = param_7;
  local_120 = param_10;
  local_124 = param_14;
  local_c4 = param_3;
  local_bc = param_1;
  local_b8 = param_2;
  memcpy(auStack_2b0,&DAT_0007ae40,0x24);
  memcpy(auStack_2d4,&DAT_0007ae64,0x24);
  local_118 = fix_point_div_32;
  local_b4 = fix_point_div_32(0x10,0x385b0000,0x27100000);
  piVar8 = local_124;
  local_fc = *param_16;
  local_110 = param_16[1];
  local_b0 = param_16[10];
  local_128 = param_16[2];
  local_300[0] = *param_15;
  local_11c = (int **)param_16[3];
  local_ac = param_16[0xb];
  local_300[1] = param_15[1];
  local_d8 = (int *)param_16[4];
  local_a8 = param_16[0xc];
  local_300[2] = param_15[2];
  piVar19 = (int *)param_16[6];
  local_f8 = (int *)param_16[7];
  iVar10 = param_16[9];
  iVar1 = param_16[8];
  local_a4 = param_16[0xd];
  iVar15 = param_16[0xe];
  local_300[3] = param_15[3];
  local_d4 = param_15[0x12];
  local_300[4] = param_15[4];
  local_a0 = param_15[0x13];
  local_300[5] = param_15[5];
  local_9c = param_15[0x14];
  local_300[6] = param_15[6];
  local_98 = (int *)param_15[0x15];
  local_300[7] = param_15[7];
  local_94 = param_15[0x16];
  local_300[8] = param_15[8];
  local_90 = (int *)param_15[0x17];
  local_300[9] = param_15[9];
  local_8c = (int *)param_15[0x18];
  local_300[10] = param_15[10];
  iVar20 = param_15[0xe];
  local_6c = param_15[0x19];
  iVar13 = param_15[0x1a];
  local_148[0] = (int *)0x0;
  local_88 = param_15[0x1c];
  local_84 = *local_124;
  local_80 = local_124[1];
  local_7c = local_124[2];
  local_78 = local_124[3];
  local_10c = local_124[4];
  local_124 = (int *)local_124[5];
  local_74 = piVar8[6];
  local_68 = piVar8[7];
  local_d0 = piVar8[8];
  local_70 = piVar8[9];
  local_64 = piVar8[10];
  local_148[1] = (int *)0x1e;
  local_148[2] = (int *)0x28;
  local_148[3] = (int *)0x32;
  local_148[4] = (int *)0x3c;
  local_148[5] = (int *)0x46;
  local_148[6] = (int *)0x50;
  local_148[7] = (int *)0x64;
  iVar6 = 0;
  local_104 = local_118;
  do {
    uVar7 = *(int *)((int)local_120 + iVar6);
    *(int *)((int)local_220 + iVar6) = uVar7;
    *(int *)((int)local_16c + iVar6) = uVar7;
    *(int *)((int)local_190 + iVar6) = uVar7;
    puVar9 = (int *)((int)local_1d8 + iVar6);
    iVar6 = iVar6 + 4;
    *puVar9 = uVar7;
  } while (iVar6 != 0x24);
  iVar1 = (iVar1 * iVar10) / 4;
  if (iVar1 < 0x1400) {
    iVar1 = 0x1400;
  }
  iVar6 = 0;
  piVar8 = param_8;
  do {
    iVar10 = *piVar8;
    piVar8 = piVar8 + 1;
    iVar6 = iVar6 + iVar10;
  } while (piVar8 != param_8 + 0x30);
  piVar8 = &adr_hist_512;
  iVar10 = 0;
  local_c0 = iVar6 / iVar1;
  param_15[0xb] = iVar6 / iVar1;
  piVar14 = local_114 + 0x200;
  do {
    iVar6 = *local_114;
    local_114 = local_114 + 1;
    iVar10 = iVar10 + iVar6;
    if (iVar1 <= iVar10) {
      iVar10 = iVar1;
    }
    *piVar8 = iVar10;
    piVar8 = piVar8 + 1;
  } while (piVar14 != local_114);
  iVar6 = 0;
  puVar9 = &adr_prod;
  do {
    piVar8 = (int *)((int)&adr_hist_512 + iVar6);
    piVar14 = (int *)((int)&adr_prod + iVar6);
    iVar6 = iVar6 + 4;
    *piVar14 = (((*piVar8 << 8) / (iVar1 >> 8)) * 10000) / 0x10000;
  } while (iVar6 != 0x800);
  iVar6 = 0;
  do {
    param_9 = param_9 + 0x78;
    iVar12 = 1;
    iVar10 = param_9;
    puVar11 = (int *)((int)&adr_block_hist_120 + iVar6);
    do {
      iVar12 = iVar12 + 1;
      *puVar11 = *(int *)(iVar10 + 0x14);
      puVar11[1] = *(int *)(iVar10 + 0x18);
      puVar11[2] = *(int *)(iVar10 + 0x1c);
      puVar11[3] = *(int *)(iVar10 + 0x20);
      puVar11[4] = *(int *)(iVar10 + 0x24);
      iVar10 = iVar10 + 0x14;
      puVar11 = puVar11 + 5;
    } while (iVar12 != 5);
    iVar6 = iVar6 + 0x50;
  } while (iVar6 != 0x1e0);
  iVar6 = 0;
  piVar14 = &adr_block_y_24;
  piVar8 = param_8;
  do {
    piVar8 = piVar8 + 6;
    iVar10 = 0;
    do {
      iVar12 = iVar10 + 4;
      iVar2 = iVar6 + iVar10;
      iVar10 = iVar10 + 4;
      *(int *)((int)&adr_block_y_24 + iVar2) = *(int *)((int)piVar8 + iVar12);
    } while (iVar10 != 0x10);
    iVar6 = iVar6 + 0x10;
  } while (iVar6 != 0x60);
  if (iVar15 == 1) {
    adr_block_y_24 = adr_block_y_24 + *param_8 + param_8[1] + param_8[6];
    DAT_000b6fc4 = DAT_000b6fc4 + param_8[2];
    DAT_000b6fc8 = DAT_000b6fc8 + param_8[3];
    DAT_000b6fcc = DAT_000b6fcc + param_8[4] + param_8[5] + param_8[0xb];
    DAT_000b6fd0 = DAT_000b6fd0 + param_8[0xc];
    DAT_000b6fdc = DAT_000b6fdc + param_8[0x11];
    DAT_000b6fe0 = DAT_000b6fe0 + param_8[0x12];
    DAT_000b6fec = DAT_000b6fec + param_8[0x17];
    DAT_000b6ff0 = DAT_000b6ff0 + param_8[0x18];
    DAT_000b6ffc = DAT_000b6ffc + param_8[0x1d];
    DAT_000b7000 = DAT_000b7000 + param_8[0x1e];
    DAT_000b700c = DAT_000b700c + param_8[0x23];
    DAT_000b7010 = DAT_000b7010 + param_8[0x24] + param_8[0x2a] + param_8[0x2b];
    DAT_000b7014 = DAT_000b7014 + param_8[0x2c];
    DAT_000b7018 = DAT_000b7018 + param_8[0x2d];
    DAT_000b701c = DAT_000b701c + param_8[0x29] + param_8[0x2e] + param_8[0x2f];
  }
  local_118 = (code *)&block_mean_y;
  iVar10 = 0;
  iVar6 = 0;
  local_114 = (int *)0xfff;
  piVar8 = (int *)0x0;
  iVar15 = 0;
  ppiVar5 = (int **)&block_mean_y;
  do {
    piVar21 = (int *)(*piVar14 / (iVar1 / 0x18));
    piVar14 = piVar14 + 1;
    if ((int)piVar8 < (int)piVar21) {
      piVar8 = piVar21;
      iVar6 = iVar15;
    }
    *ppiVar5 = piVar21;
    if ((int)piVar21 < (int)local_114) {
      local_114 = piVar21;
      iVar10 = iVar15;
    }
    iVar15 = iVar15 + 1;
    ppiVar5 = ppiVar5 + 1;
  } while (iVar15 != 0x18);
  param_15[0xc] = (int)piVar8 * 1000 + iVar6;
  iVar6 = 0;
  param_15[0xd] = (int)local_114 * 1000 + iVar10;
  uVar16 = 0x10;
  uVar7 = 10;
  iVar1 = 0x30000;
  puVar11 = &stack0xfffffbe0;
  do {
    local_108 = (int *)iVar1;
    local_f4 = puVar9;
    local_f0 = (int *)uVar7;
    local_ec = (int *)uVar16;
    local_e8 = (int *)iVar13;
    (*(code *)(iVar1 + -0x442c))
              (&local_1fc,*(int *)((int)local_148 + iVar6),param_11,param_12,puVar9,8,uVar7,
               uVar16,iVar13);
    iVar6 = iVar6 + 4;
    *puVar11 = local_1fc;
    puVar11[1] = local_1f8;
    iVar1 = (int)local_108;
    puVar11[2] = local_1f4;
    puVar9 = local_f4;
    puVar11[3] = local_1f0;
    uVar7 = local_f0;
    puVar11[4] = local_1ec;
    uVar16 = local_ec;
    puVar11[5] = local_1e8;
    iVar13 = (int)local_e8;
    puVar11[6] = local_1e4;
    puVar11[7] = local_1e0;
    puVar11[8] = local_1dc;
    puVar11 = puVar11 + 9;
  } while (iVar6 != 0x20);
  ppiVar5 = local_148;
  if (iVar20 != 1) {
    local_e0 = ppiVar5;
    iVar13 = 0;
LAB_0002d3d8:
    piVar8 = *ppiVar5;
    iVar1 = iVar13 * 9;
    if (piVar19 == piVar8) {
      iVar1 = 0;
      do {
        puVar9 = (int *)((int)local_16c + iVar1);
        iVar6 = iVar13 * 0x24 + iVar1;
        iVar1 = iVar1 + 4;
        *puVar9 = *(int *)((int)&stack0xfffffbe0 + iVar6);
      } while (iVar1 != 0x24);
    }
    else {
      if ((int)piVar8 <= (int)piVar19) goto code_r0x0002d424;
      if (iVar13 == 0) {
        iVar13 = 0;
        do {
          puVar11 = (int *)((int)local_16c + iVar13);
          puVar9 = (int *)((int)&stack0xfffffbe0 + iVar13);
          iVar13 = iVar13 + 4;
          *puVar11 = *puVar9;
        } while (iVar13 != 0x24);
      }
      else {
        iVar13 = (int)local_148[iVar13 + -1];
        pcVar18 = interpolate_adr_x8_y12;
        local_16c[1] = (int *)interpolate_adr_x8_y12
                                        (iVar13,piVar8,
                                         *(int *)((int)&stack0xfffffbe0 + (iVar1 + -8) * 4),
                                         *(int *)((int)&stack0xfffffbe0 + (iVar1 + 1) * 4),
                                         piVar19);
        local_16c[2] = (int *)(*pcVar18)(iVar13,piVar8,
                                         *(int *)((int)&stack0xfffffbe0 + (iVar1 + -7) * 4),
                                         *(int *)((int)&stack0xfffffbe0 + (iVar1 + 2) * 4),
                                         piVar19);
        local_16c[3] = (int *)(*pcVar18)(iVar13,piVar8,
                                         *(int *)((int)&stack0xfffffbe0 + (iVar1 + -6) * 4),
                                         *(int *)((int)&stack0xfffffbe0 + (iVar1 + 3) * 4),
                                         piVar19);
        local_15c = (*pcVar18)(iVar13,piVar8,
                               *(int *)((int)&stack0xfffffbe0 + (iVar1 + -5) * 4),
                               *(int *)((int)&stack0xfffffbe0 + (iVar1 + 4) * 4),piVar19);
      }
    }
    goto LAB_0002e338;
  }
  subsection_up(auStack_244,auStack_2b0,puVar9,8);
  puVar17 = local_268;
  pcVar18 = subsection_light;
  subsection_light(auStack_244,auStack_2d4,(int)local_f8 * 10,puVar17);
  local_34 = pcVar18;
  iVar13 = 0;
  do {
    puVar11 = (int *)(puVar17 + iVar13);
    puVar9 = (int *)((int)local_16c + iVar13);
    iVar13 = iVar13 + 4;
    *puVar9 = *puVar11;
  } while (iVar13 != 0x24);
  if ((int)local_16c[0] < 1) {
    local_16c[0] = (int *)0x0;
  }
  ppiVar5 = local_16c;
  piVar8 = local_16c[0];
  while( true ) {
    if ((int)ppiVar5[1] <= (int)piVar8) {
      ppiVar5[1] = (int *)((int)piVar8 + 1);
    }
    ppiVar5 = ppiVar5 + 1;
    if (ppiVar5 == &local_14c) break;
    piVar8 = *ppiVar5;
  }
  local_f8 = local_16c[0];
  local_e0 = (int **)local_120[8];
  local_f4 = local_16c[1];
  local_f0 = local_16c[2];
  local_ec = local_16c[3];
  local_e8 = (int *)local_15c;
  local_58 = (int)local_16c[1] - (int)local_16c[0];
  local_e4 = local_14c;
  local_108 = (int *)*local_120;
  iVar13 = local_120[1];
  iVar1 = (int)local_108 + local_58;
  if (local_58 <= iVar13 - (int)local_108) {
    iVar1 = iVar13;
  }
  iVar13 = (local_120[2] + iVar1) - iVar13;
  local_50 = (int)local_16c[2] - (int)local_16c[1];
  if (iVar13 - iVar1 < local_50) {
    iVar13 = local_50 + iVar1;
  }
  iVar6 = (local_120[3] + iVar13) - local_120[2];
  local_48 = (int)local_16c[3] - (int)local_16c[2];
  if (iVar6 - iVar13 < local_48) {
    iVar6 = local_48 + iVar13;
  }
  iVar10 = (local_120[4] + iVar6) - local_120[3];
  local_48 = local_48 * 0x400;
  local_40 = local_15c - (int)local_16c[3];
  if (iVar10 - iVar6 < local_40) {
    iVar10 = local_40 + iVar6;
  }
  local_40 = local_40 * 0x400;
  if (0xffe < iVar10) {
    iVar10 = 0xfff;
  }
  local_c8 = (int)local_108 << 10;
  local_44 = (iVar10 - iVar6) * 0x400;
  local_3c = ((int)local_e0 - iVar10) * 0x400;
  local_60 = (int)local_16c[0] << 10;
  local_38 = ((int)local_14c - local_15c) * 0x400;
  local_58 = local_58 * 0x400;
  local_50 = local_50 * 0x400;
  local_5c = (iVar1 - (int)local_108) * 0x400;
  local_54 = (iVar13 - iVar1) * 0x400;
  local_4c = (iVar6 - iVar13) * 0x400;
  local_cc = local_c4;
  local_c4 = param_4 + 0xb;
  do {
    iVar15 = *local_cc;
    if (iVar15 < (int)local_f8) {
      local_30 = (int *)((int)local_f8 - iVar15);
      uVar7 = fix_point_div_32(10,local_c8,local_60);
      iVar20 = fix_point_mult2_32(10,uVar7,(int)local_30 << 10);
      iVar15 = (int)local_108;
LAB_0002ce64:
      iVar20 = iVar15 - (iVar20 + 0x200 >> 10);
    }
    else if (iVar15 < (int)local_f4) {
      local_30 = (int *)((int)local_f4 - iVar15);
      uVar7 = fix_point_div_32(10,local_5c,local_58);
      iVar15 = fix_point_mult2_32(10,uVar7,(int)local_30 << 10);
      iVar20 = iVar1 - (iVar15 + 0x200 >> 10);
    }
    else if (iVar15 < (int)local_f0) {
      local_30 = (int *)((int)local_f0 - iVar15);
      uVar7 = fix_point_div_32(10,local_54,local_50);
      iVar15 = fix_point_mult2_32(10,uVar7,(int)local_30 << 10);
      iVar20 = iVar13 - (iVar15 + 0x200 >> 10);
    }
    else if (iVar15 < (int)local_ec) {
      local_30 = (int *)((int)local_ec - iVar15);
      uVar7 = fix_point_div_32(10,local_4c,local_48);
      iVar15 = fix_point_mult2_32(10,uVar7,(int)local_30 << 10);
      iVar20 = iVar6 - (iVar15 + 0x200 >> 10);
    }
    else if (iVar15 < (int)local_e8) {
      local_30 = (int *)((int)local_e8 - iVar15);
      uVar7 = fix_point_div_32(10,local_44,local_40);
      iVar15 = fix_point_mult2_32(10,uVar7,(int)local_30 << 10);
      iVar20 = iVar10 - (iVar15 + 0x200 >> 10);
    }
    else {
      iVar20 = (int)local_e0;
      if (iVar15 < (int)local_e4) {
        local_30 = (int *)((int)local_e4 - iVar15);
        uVar7 = fix_point_div_32(10,local_3c,local_38);
        iVar20 = fix_point_mult2_32(10,uVar7,(int)local_30 << 10);
        iVar15 = (int)local_e0;
        goto LAB_0002ce64;
      }
    }
    *param_4 = iVar20;
    param_4 = param_4 + 1;
    local_cc = local_cc + 1;
  } while (param_4 != local_c4);
  puVar17 = local_28c;
  (*local_34)(auStack_244,auStack_2d4,0,puVar17);
  iVar13 = 0;
  do {
    uVar7 = *(int *)(puVar17 + iVar13);
    *(int *)((int)local_190 + iVar13) = uVar7;
    puVar9 = (int *)((int)&local_1b4 + iVar13);
    iVar13 = iVar13 + 4;
    *puVar9 = uVar7;
  } while (iVar13 != 0x24);
  local_108 = param_13 + 9;
  piVar8 = local_b8;
  piVar19 = param_13;
  piVar14 = local_bc;
  do {
    *piVar8 = *piVar19;
    iVar13 = *piVar14;
    if (iVar13 < (int)local_1b4) {
      iVar13 = *param_13;
LAB_0002cf74:
      *piVar8 = iVar13;
    }
    else {
      if (iVar13 < local_1b0) {
        iVar1 = param_13[1] - *param_13;
        iVar13 = (local_1b0 - iVar13) * 0x400;
        if (-1 < iVar1) {
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar1 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = param_13[1];
          iVar1 = iVar1 + 0x200 >> 10;
          goto LAB_0002cf70;
        }
        uVar7 = fix_point_div_32(10,(*param_13 - param_13[1]) * 0x400,
                                 (local_1b0 - (int)local_1b4) * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar13 = iVar13 + 0x200 >> 10;
        iVar1 = param_13[1];
LAB_0002d394:
        iVar13 = iVar13 + iVar1;
        goto LAB_0002cf74;
      }
      if (iVar13 < local_1ac) {
        iVar1 = param_13[2] - param_13[1];
        iVar13 = (local_1ac - iVar13) * 0x400;
        if (iVar1 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[1] - param_13[2]) * 0x400,
                                   (local_1ac - local_1b0) * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[2];
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar1 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[2];
LAB_0002cf70:
        iVar13 = iVar13 - iVar1;
        goto LAB_0002cf74;
      }
      if (iVar13 < local_1a8) {
        iVar1 = param_13[3] - param_13[2];
        iVar13 = (local_1a8 - iVar13) * 0x400;
        if (iVar1 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[2] - param_13[3]) * 0x400,
                                   (local_1a8 - local_1ac) * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[3];
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar1 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[3];
        goto LAB_0002cf70;
      }
      if (iVar13 < local_1a4) {
        iVar1 = param_13[4] - param_13[3];
        iVar13 = (local_1a4 - iVar13) * 0x400;
        if (iVar1 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[3] - param_13[4]) * 0x400,
                                   (local_1a4 - local_1a8) * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[4];
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar1 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[4];
        goto LAB_0002cf70;
      }
      if (iVar13 < local_1a0) {
        iVar1 = param_13[5] - param_13[4];
        iVar13 = (local_1a0 - iVar13) * 0x400;
        if (iVar1 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[4] - param_13[5]) * 0x400,
                                   (local_1a0 - local_1a4) * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[5];
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar1 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[5];
        goto LAB_0002cf70;
      }
      if (iVar13 < local_19c) {
        iVar1 = param_13[6] - param_13[5];
        iVar13 = (local_19c - iVar13) * 0x400;
        if (iVar1 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[5] - param_13[6]) * 0x400,
                                   (local_19c - local_1a0) * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[6];
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar1 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[6];
        goto LAB_0002cf70;
      }
      if (iVar13 < local_198) {
        iVar1 = param_13[7] - param_13[6];
        iVar13 = (local_198 - iVar13) * 0x400;
        if (iVar1 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[6] - param_13[7]) * 0x400,
                                   (local_198 - local_19c) * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[7];
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar1 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[7];
        goto LAB_0002cf70;
      }
      iVar1 = param_13[8];
      if (iVar13 < local_194) {
        iVar6 = iVar1 - param_13[7];
        iVar13 = (local_194 - iVar13) * 0x400;
        if (iVar6 < 0) {
          uVar7 = fix_point_div_32(10,(param_13[7] - iVar1) * 0x400,(local_194 - local_198) * 0x400)
          ;
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar1 = param_13[8];
          iVar13 = iVar13 + 0x200 >> 10;
          goto LAB_0002d394;
        }
        uVar7 = fix_point_div_32(10,iVar6 * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[8];
        goto LAB_0002cf70;
      }
      *piVar8 = iVar1;
    }
    piVar19 = piVar19 + 1;
    piVar8 = piVar8 + 1;
    piVar14 = piVar14 + 1;
  } while (piVar19 != local_108);
LAB_0002d3b8:
  ppiVar5 = local_dc;
  iVar13 = local_128;
  if ((((local_fc != 0) && (iVar13 = local_c0, local_fc != 1)) && (iVar13 = local_84, local_fc != 2)
      ) && (iVar13 = local_128, local_fc == 3)) {
    iVar13 = (local_84 * local_80 + (0x100 - local_80) * local_c0) / 0x100;
  }
  local_128 = iVar13;
  if (local_d4 == 1) {
    if (local_128 < local_a0) {
      local_128 = local_a0;
    }
    iVar13 = local_9c;
    if (local_128 < local_9c) {
      iVar13 = local_128;
    }
    local_128 = iVar13;
    if (local_110 != 0) {
LAB_0002d674:
      if (local_110 == 1) {
        iVar13 = local_128 - (int)local_114;
        iVar1 = 2;
LAB_0002d6e0:
        iVar13 = iVar13 / iVar1;
      }
      else {
        iVar13 = local_7c;
        if ((local_110 != 2) && (iVar13 = (int)local_11c, local_110 == 3)) {
          iVar1 = 0x100;
          iVar13 = local_7c * local_78 + ((local_128 - (int)local_114) / 2) * (0x100 - local_78);
          goto LAB_0002d6e0;
        }
      }
      local_11c = (int **)iVar13;
      if (local_d4 != 1) goto LAB_0002d748;
    }
    if ((int)local_11c < (int)local_98) {
      local_11c = (int **)local_98;
    }
    iVar13 = local_94;
    if ((int)local_11c < local_94) {
      iVar13 = (int)local_11c;
    }
    local_11c = (int **)iVar13;
    if (local_10c != 0) {
LAB_0002d780:
      if (local_10c == 1) {
        iVar13 = 2;
        piVar8 = local_d8 + 0x32;
LAB_0002d7e8:
        piVar8 = (int *)((int)piVar8 / iVar13);
      }
      else {
        piVar8 = local_d8;
        if ((local_10c != 2) && (piVar8 = local_124, local_10c == 3)) {
          iVar13 = 0x100;
          piVar8 = (int *)((int)local_124 * local_74 +
                          ((int)(local_d8 + 0x32) / 2) * (0x100 - local_74));
          goto LAB_0002d7e8;
        }
      }
      local_124 = piVar8;
      if (local_d4 != 1) goto LAB_0002d83c;
    }
    if ((int)local_124 < (int)local_90) {
      local_124 = local_90;
    }
    piVar8 = local_8c;
    if ((int)local_124 < (int)local_8c) {
      piVar8 = local_124;
    }
  }
  else {
    if (local_128 < 0x14) {
      local_128 = 0x14;
    }
    else if (4000 < local_128) {
      local_128 = 4000;
    }
    if (local_110 != 0) goto LAB_0002d674;
LAB_0002d748:
    if ((int)local_11c < 0x14) {
      local_11c = (int **)0x14;
    }
    else if (600 < (int)local_11c) {
      local_11c = (int **)0x258;
    }
    if (local_10c != 0) goto LAB_0002d780;
LAB_0002d83c:
    if ((int)local_124 < 0x14) {
      local_124 = (int *)0x14;
      piVar8 = local_124;
    }
    else {
      piVar8 = local_124;
      if (600 < (int)local_124) {
        piVar8 = (int *)0x258;
      }
    }
  }
  local_124 = piVar8;
  iVar13 = (int)local_11c;
  param_15[0xf] = local_128;
  param_15[0x10] = (int)local_11c;
  param_15[0x11] = (int)local_124;
  local_e4 = (int *)((int)local_124 * 2 * (int)local_124 * 0x400);
  local_f8 = (int *)(local_88 << 0x10);
  local_11c = local_dc;
  local_e0 = (int **)(iVar13 * 2 * iVar13 * 0x400);
  local_98 = &adr_hist_512;
  local_8c = (int *)0x20000;
  local_e8 = (int *)0x3ffffc;
  do {
    if (*(int *)local_118 < 2) {
      *(int *)local_118 = 1;
    }
    iVar13 = *(int *)local_118;
    pcVar18 = (code *)((int)local_8c + 0xe24);
    if (local_128 < iVar13) {
      iVar13 = (iVar13 - local_128) * (iVar13 - local_128);
      if (0x3ffffc < iVar13) {
        iVar13 = (int)local_e8;
      }
      iVar13 = (*local_104)(10,iVar13 << 10,local_e4);
      iVar1 = (*pcVar18)(0x10,iVar13 << 6,local_b4);
      iVar13 = 0xeffff;
      if (iVar1 < 0xf0000) {
        iVar13 = iVar1;
      }
      uVar7 = tisp_math_exp2(iVar13,0x10,0x10);
      iVar13 = (*local_104)(0x10,local_f8,uVar7);
      iVar13 = iVar13 >> 0x10;
    }
    else {
      iVar13 = (local_128 - iVar13) * (local_128 - iVar13);
      if (0x3ffffc < iVar13) {
        iVar13 = (int)local_e8;
      }
      iVar13 = (*local_104)(10,iVar13 << 10,local_e0);
      iVar1 = (*pcVar18)(0x10,iVar13 << 6,local_b4);
      iVar13 = 0xeffff;
      if (iVar1 < 0xf0000) {
        iVar13 = iVar1;
      }
      uVar7 = tisp_math_exp2(iVar13,0x10,0x10);
      iVar13 = (*local_104)(0x10,local_f8,uVar7);
      iVar13 = ((int)local_f8 - iVar13 >> 0x10) + local_88;
    }
    iVar1 = 10000;
    if (iVar13 < 0x2711) {
      iVar1 = iVar13;
    }
    iVar13 = (*local_104)(10,iVar1 << 10,0x19000);
    iVar13 = iVar13 + 0x200 >> 10;
    piVar8 = (int *)local_148;
    iVar1 = 0;
    do {
      iVar6 = *piVar8;
      if (iVar13 == iVar6) {
        iVar13 = iVar1 * 9;
        local_1d8[0] = *(int **)((int)&stack0xfffffbe0 + iVar1 * 0x24);
        local_1d8[1] = (int *)*(int *)((int)&stack0xfffffbe0 + (iVar13 + 1) * 4);
        local_1d0 = *(int *)((int)&stack0xfffffbe0 + (iVar13 + 2) * 4);
        local_1cc = *(int **)((int)&stack0xfffffbe0 + (iVar13 + 3) * 4);
        local_1c8 = *(int *)((int)&stack0xfffffbe0 + (iVar13 + 4) * 4);
        local_1c4 = *(int *)((int)&stack0xfffffbe0 + (iVar13 + 5) * 4);
        local_1c0 = *(int *)((int)&stack0xfffffbe0 + (iVar13 + 6) * 4);
        local_1bc = *(int *)((int)&stack0xfffffbe0 + (iVar13 + 7) * 4);
        local_1b8 = *(int **)((int)&stack0xfffffbe0 + (iVar13 + 8) * 4);
LAB_0002db94:
        break;
      }
      if (iVar13 < iVar6) {
        if (iVar1 == 0) {
          local_1d8[0] = local_420;
          local_1d8[1] = (int *)local_41c[0];
          local_1d0 = local_41c[1];
          local_1cc = local_414;
          local_1c8 = local_410[0];
          local_1c4 = local_410[1];
          local_1c0 = local_410[2];
          local_1bc = local_410[3];
          local_1b8 = local_400[0];
          goto LAB_0002db94;
        }
        iVar10 = iVar1 * 9;
        iVar15 = (int)local_148[iVar1 + -1];
        iVar1 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + 1) * 4);
        iVar20 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + -8) * 4);
        if (iVar20 < iVar1) {
          iVar12 = iVar1 - iVar20;
        }
        else {
          iVar12 = iVar20 - iVar1;
        }
        iVar2 = (iVar6 - iVar15) * 0x400;
        uVar7 = fix_point_div_32(10,iVar12 << 10,iVar2);
        iVar6 = (iVar13 - iVar15) * 0x400;
        iVar13 = (*pcVar18)(10,uVar7,iVar6);
        iVar13 = iVar13 + 0x200 >> 10;
        if (iVar20 >= iVar1) {
          iVar13 = -iVar13;
        }
        iVar1 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + 2) * 4);
        local_1d8[1] = (int *)(iVar20 + iVar13);
        iVar13 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + -7) * 4);
        if (iVar13 < iVar1) {
          iVar15 = iVar1 - iVar13;
        }
        else {
          iVar15 = iVar13 - iVar1;
        }
        uVar7 = fix_point_div_32(10,iVar15 << 10,iVar2);
        iVar15 = (*pcVar18)(10,uVar7,iVar6);
        iVar15 = iVar15 + 0x200 >> 10;
        if (iVar13 >= iVar1) {
          iVar15 = -iVar15;
        }
        iVar1 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + 3) * 4);
        local_1d0 = iVar13 + iVar15;
        iVar13 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + -6) * 4);
        if (iVar13 < iVar1) {
          iVar15 = iVar1 - iVar13;
        }
        else {
          iVar15 = iVar13 - iVar1;
        }
        uVar7 = fix_point_div_32(10,iVar15 << 10,iVar2);
        iVar15 = (*pcVar18)(10,uVar7,iVar6);
        iVar15 = iVar15 + 0x200 >> 10;
        if (iVar13 >= iVar1) {
          iVar15 = -iVar15;
        }
        local_1cc = (int *)(iVar13 + iVar15);
        iVar13 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + 4) * 4);
        iVar1 = *(int *)((int)&stack0xfffffbe0 + (iVar10 + -5) * 4);
        if (iVar13 <= iVar1) {
          iVar10 = iVar1 - iVar13;
        }
        else {
          iVar10 = iVar13 - iVar1;
        }
        uVar7 = fix_point_div_32(10,iVar10 << 10,iVar2);
        iVar6 = (*pcVar18)(10,uVar7,iVar6);
        iVar6 = iVar6 + 0x200 >> 10;
        if (iVar13 <= iVar1) {
          iVar6 = -iVar6;
        }
        local_1c8 = iVar1 + iVar6;
        break;
      }
      iVar1 = iVar1 + 1;
      piVar8 = piVar8 + 1;
    } while (iVar1 != 8);
    if ((int)local_1d8[0] < 2) {
      local_1d8[0] = (int *)0x1;
    }
    ppiVar3 = local_1d8;
    piVar8 = local_1d8[0];
    while( true ) {
      if ((int)ppiVar3[1] <= (int)piVar8) {
        ppiVar3[1] = (int *)((int)piVar8 + 1);
      }
      ppiVar3 = ppiVar3 + 1;
      if (&local_1b8 == ppiVar3) break;
      piVar8 = *ppiVar3;
    }
    iVar6 = 0;
    local_114 = local_1d8[0];
    local_110 = (int)local_1d8[1];
    local_10c = local_1d0;
    local_108 = local_1cc;
    local_fc = local_1c8;
    local_f4 = local_1b8;
    iVar10 = *local_120;
    local_ec = (int *)local_120[8];
    iVar1 = (int)local_1d8[1] - (int)local_1d8[0];
    iVar13 = local_b0;
    if (local_b0 < iVar1) {
      iVar13 = iVar1;
    }
    iVar13 = iVar13 + iVar10;
    iVar20 = local_1d0 - (int)local_1d8[1];
    iVar15 = local_ac;
    if (local_ac < iVar20) {
      iVar15 = iVar20;
    }
    iVar15 = iVar15 + iVar13;
    iVar2 = (int)local_1cc - local_1d0;
    iVar12 = local_a8;
    if (local_a8 < iVar2) {
      iVar12 = iVar2;
    }
    local_124 = (int *)(iVar12 + iVar15);
    iVar4 = local_1c8 - (int)local_1cc;
    iVar12 = local_a4;
    if (local_a4 < iVar4) {
      iVar12 = iVar4;
    }
    local_f0 = (int *)(iVar12 + (int)local_124);
    local_d8 = (int *)(iVar10 << 10);
    local_c0 = iVar20 * 0x400;
    local_b8 = (int *)(iVar2 * 0x400);
    local_bc = (int *)(((int)local_124 - iVar15) * 0x400);
    local_a0 = ((int)local_f0 - (int)local_124) * 0x400;
    local_9c = iVar4 * 0x400;
    local_94 = ((int)(int *)local_120[8] - (int)local_f0) * 0x400;
    local_d4 = (int)local_1d8[0] << 10;
    local_c8 = iVar1 * 0x400;
    local_cc = (int *)((iVar13 - iVar10) * 0x400);
    local_c4 = (int *)((iVar15 - iVar13) * 0x400);
    local_90 = (int *)(((int)local_1b8 - local_1c8) * 0x400);
    ppiVar3 = local_11c;
    piVar8 = local_100;
    do {
      iVar1 = *piVar8;
      if (iVar1 < (int)local_114) {
        local_84 = (int)local_114 - iVar1;
        uVar7 = fix_point_div_32(10,local_d8,local_d4);
        iVar1 = (*pcVar18)(10,uVar7,local_84 << 10);
        piVar19 = (int *)(iVar10 - (iVar1 + 0x200 >> 10));
      }
      else if (iVar1 < local_110) {
        local_84 = local_110 - iVar1;
        uVar7 = fix_point_div_32(10,local_cc,local_c8);
        iVar1 = (*pcVar18)(10,uVar7,local_84 << 10);
        piVar19 = (int *)(iVar13 - (iVar1 + 0x200 >> 10));
      }
      else if (iVar1 < local_10c) {
        local_84 = local_10c - iVar1;
        uVar7 = fix_point_div_32(10,local_c4,local_c0);
        iVar1 = (*pcVar18)(10,uVar7,local_84 << 10);
        piVar19 = (int *)(iVar15 - (iVar1 + 0x200 >> 10));
      }
      else {
        if (iVar1 < (int)local_108) {
          local_84 = (int)local_108 - iVar1;
          uVar7 = fix_point_div_32(10,local_bc,local_b8);
          iVar1 = (*pcVar18)(10,uVar7,local_84 << 10);
          iVar1 = iVar1 + 0x200 >> 10;
          piVar19 = local_124;
        }
        else if (iVar1 < local_fc) {
          local_84 = local_fc - iVar1;
          uVar7 = fix_point_div_32(10,local_a0,local_9c);
          iVar1 = (*pcVar18)(10,uVar7,local_84 << 10);
          iVar1 = iVar1 + 0x200 >> 10;
          piVar19 = local_f0;
        }
        else {
          piVar19 = local_ec;
          if ((int)local_f4 <= iVar1) goto LAB_0002e150;
          local_84 = (int)local_f4 - iVar1;
          uVar7 = fix_point_div_32(10,local_94,local_90);
          iVar1 = (*pcVar18)(10,uVar7,local_84 << 10);
          iVar1 = iVar1 + 0x200 >> 10;
          piVar19 = local_ec;
        }
        piVar19 = (int *)((int)piVar19 - iVar1);
      }
LAB_0002e150:
      *ppiVar3 = piVar19;
      if (local_6c == 1) {
        iVar1 = *piVar8;
        if (iVar6 == 0) {
          if (local_300[0] < ((int)*local_11c << 0x10) / iVar1) {
            *local_11c = (int *)((iVar1 * local_300[0]) / 0x10000);
          }
        }
        else if (local_300[iVar6] <
                 (((int)*ppiVar3 - (int)ppiVar3[-1]) * 0x10000) / (iVar1 - piVar8[-1])) {
          *ppiVar3 = (int *)(((iVar1 - piVar8[-1]) * local_300[iVar6] + (int)ppiVar3[-1] * 0x10000)
                            / 0x10000);
        }
      }
      iVar6 = iVar6 + 1;
      piVar8 = piVar8 + 1;
      ppiVar3 = ppiVar3 + 1;
    } while (iVar6 != 0xb);
    local_118 = (code *)((int)local_118 + 4);
    local_11c = local_11c + 0xb;
    if (local_98 == (int *)local_118) {
      if ((local_68 == 1) && (iVar13 = (&adr_prod)[local_64], local_d0 <= iVar13)) {
        if (local_70 < iVar13) {
          iVar13 = 0;
          while( true ) {
            do {
              puVar9 = (int *)((int)local_100 + iVar13);
              puVar11 = (int *)((int)ppiVar5 + iVar13);
              iVar13 = iVar13 + 4;
              *puVar11 = *puVar9;
            } while (iVar13 != 0x2c);
            ppiVar5 = ppiVar5 + 0xb;
            if (local_dc + 0x108 == ppiVar5) break;
            iVar13 = 0;
          }
        }
        else {
          piVar8 = local_100;
          ppiVar3 = ppiVar5;
          do {
            do {
              piVar19 = piVar8 + 1;
              *ppiVar5 = (int *)(((int)*ppiVar5 * 0x400 -
                                 (((int)*ppiVar5 - *piVar8) * (iVar13 - local_d0) * 0x400) /
                                 (local_70 - local_d0)) / 0x400);
              piVar8 = piVar19;
              ppiVar5 = ppiVar5 + 1;
            } while (piVar19 != local_100 + 0xb);
            ppiVar5 = ppiVar3 + 0xb;
            piVar8 = local_100;
            ppiVar3 = ppiVar5;
          } while (local_dc + 0x108 != ppiVar5);
        }
      }
      return;
    }
  } while( true );
code_r0x0002d424:
  iVar13 = iVar13 + 1;
  ppiVar5 = ppiVar5 + 1;
  if (iVar13 == 8) goto code_r0x0002d568;
  goto LAB_0002d3d8;
code_r0x0002d568:
  iVar13 = 0;
  do {
    puVar9 = (int *)((int)local_300 + iVar13);
    puVar11 = (int *)((int)local_16c + iVar13);
    iVar13 = iVar13 + 4;
    *puVar11 = *puVar9;
  } while (iVar13 != 0x24);
LAB_0002e338:
  if ((int)local_16c[0] < 1) {
    local_16c[0] = (int *)0x0;
  }
  ppiVar5 = local_16c;
  piVar8 = local_16c[0];
  while( true ) {
    if ((int)ppiVar5[1] <= (int)piVar8) {
      ppiVar5[1] = (int *)((int)piVar8 + 1);
    }
    ppiVar5 = ppiVar5 + 1;
    if (ppiVar5 == &local_14c) break;
    piVar8 = *ppiVar5;
  }
  local_f4 = local_16c[0];
  local_f0 = local_16c[1];
  local_c8 = local_120[8];
  local_ec = local_16c[2];
  local_e8 = local_16c[3];
  local_e4 = (int *)local_15c;
  iVar6 = (int)local_16c[1] - (int)local_16c[0];
  local_cc = local_14c;
  local_108 = (int *)*local_120;
  iVar13 = local_120[1];
  iVar1 = (int)local_108 + iVar6;
  if (iVar6 <= iVar13 - (int)local_108) {
    iVar1 = iVar13;
  }
  iVar13 = (local_120[2] + iVar1) - iVar13;
  iVar10 = (int)local_16c[2] - (int)local_16c[1];
  if (iVar13 - iVar1 < iVar10) {
    iVar13 = iVar10 + iVar1;
  }
  iVar15 = (local_120[3] + iVar13) - local_120[2];
  iVar20 = (int)local_16c[3] - (int)local_16c[2];
  if (iVar15 - iVar13 < iVar20) {
    iVar15 = iVar20 + iVar13;
  }
  iVar12 = (local_120[4] + iVar15) - local_120[3];
  iVar2 = local_15c - (int)local_16c[3];
  if (iVar12 - iVar15 < iVar2) {
    iVar12 = iVar2 + iVar15;
  }
  if (0xffe < iVar12) {
    iVar12 = 0xfff;
  }
  local_3c = iVar2 * 0x400;
  local_60 = (int)local_108 << 10;
  local_44 = iVar20 * 0x400;
  local_40 = (iVar12 - iVar15) * 0x400;
  local_38 = (local_120[8] - iVar12) * 0x400;
  local_5c = (int)local_16c[0] << 10;
  local_54 = iVar6 * 0x400;
  local_4c = iVar10 * 0x400;
  local_34 = (code *)(((int)local_14c - local_15c) * 0x400);
  local_58 = (iVar1 - (int)local_108) * 0x400;
  local_50 = (iVar13 - iVar1) * 0x400;
  local_48 = (iVar15 - iVar13) * 0x400;
  local_30 = param_4 + 0xb;
  do {
    iVar6 = *local_c4;
    if (iVar6 < (int)local_f4) {
      local_2c = (int)local_f4 - iVar6;
      uVar7 = fix_point_div_32(10,local_60,local_5c);
      iVar10 = fix_point_mult2_32(10,uVar7,local_2c << 10);
      iVar6 = (int)local_108;
LAB_0002e70c:
      iVar10 = iVar6 - (iVar10 + 0x200 >> 10);
    }
    else if (iVar6 < (int)local_f0) {
      local_2c = (int)local_f0 - iVar6;
      uVar7 = fix_point_div_32(10,local_58,local_54);
      iVar6 = fix_point_mult2_32(10,uVar7,local_2c << 10);
      iVar10 = iVar1 - (iVar6 + 0x200 >> 10);
    }
    else if (iVar6 < (int)local_ec) {
      local_2c = (int)local_ec - iVar6;
      uVar7 = fix_point_div_32(10,local_50,local_4c);
      iVar6 = fix_point_mult2_32(10,uVar7,local_2c << 10);
      iVar10 = iVar13 - (iVar6 + 0x200 >> 10);
    }
    else if (iVar6 < (int)local_e8) {
      local_2c = (int)local_e8 - iVar6;
      uVar7 = fix_point_div_32(10,local_48,local_44);
      iVar6 = fix_point_mult2_32(10,uVar7,local_2c << 10);
      iVar10 = iVar15 - (iVar6 + 0x200 >> 10);
    }
    else if (iVar6 < (int)local_e4) {
      local_2c = (int)local_e4 - iVar6;
      uVar7 = fix_point_div_32(10,local_40,local_3c);
      iVar6 = fix_point_mult2_32(10,uVar7,local_2c << 10);
      iVar10 = iVar12 - (iVar6 + 0x200 >> 10);
    }
    else {
      iVar10 = local_c8;
      if (iVar6 < (int)local_cc) {
        local_2c = (int)local_cc - iVar6;
        uVar7 = fix_point_div_32(10,local_38,local_34);
        iVar10 = fix_point_mult2_32(10,uVar7,local_2c << 10);
        iVar6 = local_c8;
        goto LAB_0002e70c;
      }
    }
    *param_4 = iVar10;
    param_4 = param_4 + 1;
    local_c4 = local_c4 + 1;
  } while (local_30 != param_4);
  iVar13 = 0;
  do {
    piVar8 = *local_e0;
    if (local_f8 == piVar8) {
      iVar1 = iVar13 * 9;
      local_190[0] = *(int **)((int)&stack0xfffffbe0 + iVar13 * 0x24);
      local_190[1] = (int *)*(int *)((int)&stack0xfffffbe0 + (iVar1 + 1) * 4);
      local_188 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 2) * 4);
      local_184 = *(int **)((int)&stack0xfffffbe0 + (iVar1 + 3) * 4);
      local_180 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 4) * 4);
      local_17c = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 5) * 4);
      local_178 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 6) * 4);
      local_174 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 7) * 4);
      local_170 = *(int **)((int)&stack0xfffffbe0 + (iVar1 + 8) * 4);
LAB_0002e85c:
      break;
    }
    if ((int)local_f8 < (int)piVar8) {
      if (iVar13 == 0) {
        local_190[0] = local_420;
        local_190[1] = (int *)local_41c[0];
        local_188 = local_41c[1];
        local_184 = local_414;
        local_180 = local_410[0];
        local_17c = local_410[1];
        local_178 = local_410[2];
        local_174 = local_410[3];
        local_170 = local_400[0];
        goto LAB_0002e85c;
      }
      iVar1 = iVar13 * 9;
      iVar10 = (int)local_f8 - (int)local_148[iVar13 + -1];
      iVar6 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 1) * 4);
      iVar15 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + -8) * 4);
      if (iVar15 < iVar6) {
        iVar20 = iVar6 - iVar15;
      }
      else {
        iVar20 = iVar15 - iVar6;
      }
      iVar12 = ((int)piVar8 - (int)local_148[iVar13 + -1]) * 0x400;
      uVar7 = fix_point_div_32(10,iVar20 << 10,iVar12);
      iVar10 = iVar10 * 0x400;
      iVar13 = fix_point_mult2_32(10,uVar7,iVar10);
      iVar13 = iVar13 + 0x200 >> 10;
      if (iVar15 >= iVar6) {
        iVar13 = -iVar13;
      }
      iVar6 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 2) * 4);
      local_190[1] = (int *)(iVar15 + iVar13);
      iVar13 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + -7) * 4);
      if (iVar13 < iVar6) {
        iVar15 = iVar6 - iVar13;
      }
      else {
        iVar15 = iVar13 - iVar6;
      }
      uVar7 = fix_point_div_32(10,iVar15 << 10,iVar12);
      iVar15 = fix_point_mult2_32(10,uVar7,iVar10);
      iVar15 = iVar15 + 0x200 >> 10;
      if (iVar13 >= iVar6) {
        iVar15 = -iVar15;
      }
      iVar6 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 3) * 4);
      local_188 = iVar13 + iVar15;
      iVar13 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + -6) * 4);
      if (iVar13 < iVar6) {
        iVar15 = iVar6 - iVar13;
      }
      else {
        iVar15 = iVar13 - iVar6;
      }
      uVar7 = fix_point_div_32(10,iVar15 << 10,iVar12);
      iVar15 = fix_point_mult2_32(10,uVar7,iVar10);
      iVar15 = iVar15 + 0x200 >> 10;
      if (iVar13 >= iVar6) {
        iVar15 = -iVar15;
      }
      local_184 = (int *)(iVar13 + iVar15);
      iVar13 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + 4) * 4);
      iVar1 = *(int *)((int)&stack0xfffffbe0 + (iVar1 + -5) * 4);
      if (iVar13 <= iVar1) {
        iVar6 = iVar1 - iVar13;
      }
      else {
        iVar6 = iVar13 - iVar1;
      }
      uVar7 = fix_point_div_32(10,iVar6 << 10,iVar12);
      iVar6 = fix_point_mult2_32(10,uVar7,iVar10);
      iVar6 = iVar6 + 0x200 >> 10;
      if (iVar13 <= iVar1) {
        iVar6 = -iVar6;
      }
      local_180 = iVar1 + iVar6;
      break;
    }
    iVar13 = iVar13 + 1;
    local_e0 = local_e0 + 1;
  } while (iVar13 != 8);
  if ((int)local_190[1] < 2) {
    local_190[1] = (int *)0x1;
  }
  ppiVar5 = local_190;
  ppiVar3 = &local_1b4;
  iVar13 = 0;
  do {
    piVar8 = *ppiVar5;
    if ((iVar13 != 8) && ((int)ppiVar5[1] <= (int)piVar8)) {
      ppiVar5[1] = (int *)((int)piVar8 + 1);
      piVar8 = *ppiVar5;
    }
    iVar13 = iVar13 + 1;
    *ppiVar3 = piVar8;
    ppiVar5 = ppiVar5 + 1;
    ppiVar3 = ppiVar3 + 1;
  } while (iVar13 != 9);
  local_108 = param_13 + 8;
  piVar8 = local_b8;
  piVar19 = param_13;
  piVar14 = local_bc;
  do {
    *piVar8 = *piVar19;
    iVar13 = *piVar14;
    if (iVar13 < (int)local_1b4) {
      if (-1 < *param_13) {
        local_f8 = local_1b4;
        uVar7 = fix_point_div_32(10,*param_13 << 10,(int)local_1b4 << 10);
        iVar13 = fix_point_mult2_32(10,uVar7,((int)local_f8 - iVar13) * 0x400);
        iVar13 = iVar13 + 0x200 >> 10;
        iVar1 = *param_13;
        goto LAB_0002ec74;
      }
    }
    else {
      if (iVar13 < local_1b0) {
        iVar1 = param_13[1] - *param_13;
        iVar13 = (local_1b0 - iVar13) * 0x400;
        if (-1 < iVar1) {
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[1];
          goto LAB_0002ec74;
        }
        uVar7 = fix_point_div_32(10,(*param_13 - param_13[1]) * 0x400,
                                 (local_1b0 - (int)local_1b4) * 0x400);
        iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
        iVar1 = iVar13 + 0x200 >> 10;
        iVar13 = param_13[1];
LAB_0002ecac:
        iVar1 = iVar1 + iVar13;
      }
      else {
        if (iVar13 < local_1ac) {
          iVar1 = param_13[2] - param_13[1];
          iVar13 = (local_1ac - iVar13) * 0x400;
          if (iVar1 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[1] - param_13[2]) * 0x400,
                                     (local_1ac - local_1b0) * 0x400);
            iVar1 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar13 = param_13[2];
            iVar1 = iVar1 + 0x200 >> 10;
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar1 = param_13[2];
          iVar13 = iVar13 + 0x200 >> 10;
        }
        else if (iVar13 < local_1a8) {
          iVar1 = param_13[3] - param_13[2];
          iVar13 = (local_1a8 - iVar13) * 0x400;
          if (iVar1 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[2] - param_13[3]) * 0x400,
                                     (local_1a8 - local_1ac) * 0x400);
            iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar1 = iVar13 + 0x200 >> 10;
            iVar13 = param_13[3];
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[3];
        }
        else if (iVar13 < local_1a4) {
          iVar1 = param_13[4] - param_13[3];
          iVar13 = (local_1a4 - iVar13) * 0x400;
          if (iVar1 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[3] - param_13[4]) * 0x400,
                                     (local_1a4 - local_1a8) * 0x400);
            iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar1 = iVar13 + 0x200 >> 10;
            iVar13 = param_13[4];
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[4];
        }
        else if (iVar13 < local_1a0) {
          iVar1 = param_13[5] - param_13[4];
          iVar13 = (local_1a0 - iVar13) * 0x400;
          if (iVar1 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[4] - param_13[5]) * 0x400,
                                     (local_1a0 - local_1a4) * 0x400);
            iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar1 = iVar13 + 0x200 >> 10;
            iVar13 = param_13[5];
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[5];
        }
        else if (iVar13 < local_19c) {
          iVar1 = param_13[6] - param_13[5];
          iVar13 = (local_19c - iVar13) * 0x400;
          if (iVar1 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[5] - param_13[6]) * 0x400,
                                     (local_19c - local_1a0) * 0x400);
            iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar1 = iVar13 + 0x200 >> 10;
            iVar13 = param_13[6];
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[6];
        }
        else if (iVar13 < local_198) {
          iVar1 = param_13[7] - param_13[6];
          iVar13 = (local_198 - iVar13) * 0x400;
          if (iVar1 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[6] - param_13[7]) * 0x400,
                                     (local_198 - local_19c) * 0x400);
            iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar1 = iVar13 + 0x200 >> 10;
            iVar13 = param_13[7];
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar1 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[7];
        }
        else {
          iVar1 = param_13[8];
          if (local_194 <= iVar13) {
            *piVar8 = iVar1;
            goto LAB_0002f014;
          }
          iVar6 = iVar1 - param_13[7];
          iVar13 = (local_194 - iVar13) * 0x400;
          if (iVar6 < 0) {
            uVar7 = fix_point_div_32(10,(param_13[7] - iVar1) * 0x400,
                                     (local_194 - local_198) * 0x400);
            iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
            iVar1 = iVar13 + 0x200 >> 10;
            iVar13 = param_13[8];
            goto LAB_0002ecac;
          }
          uVar7 = fix_point_div_32(10,iVar6 * 0x400);
          iVar13 = fix_point_mult2_32(10,uVar7,iVar13);
          iVar13 = iVar13 + 0x200 >> 10;
          iVar1 = param_13[8];
        }
LAB_0002ec74:
        iVar1 = iVar1 - iVar13;
      }
      *piVar8 = iVar1;
    }
LAB_0002f014:
    piVar19 = piVar19 + 1;
    piVar8 = piVar8 + 1;
    piVar14 = piVar14 + 1;
  } while (local_108 != piVar19);
  goto LAB_0002d3b8;
}



void cm_control(int *param_1,int param_2,int *param_3)

{
  int *piVar1;
  int *puVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int *piVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int local_50 [10];
  
  local_50[0] = ((uint)(param_2 * 0xb375) >> 8) + 0x4c8b;
  local_50[4] = ((uint)(param_2 * 0x69ba) >> 8) + 0x9646;
  local_50[2] = 0x1d2f - ((uint)(param_2 * 0x1d2f) >> 8);
  local_50[1] = 0x9646 - ((uint)(param_2 * 0x9646) >> 8);
  local_50[3] = 0x4c8b - ((uint)(param_2 * 0x4c8b) >> 8);
  local_50[7] = local_50[1];
  piVar6 = &cm_in;
  local_50[6] = local_50[3];
  local_50[5] = local_50[2];
  local_50[8] = ((uint)(param_2 * 0xe2d1) >> 8) + 0x1d2f;
  piVar1 = piVar6;
  do {
    if (*param_1 < 0) {
      *piVar1 = -1;
      iVar5 = -*param_1;
    }
    else {
      *piVar1 = 1;
      iVar5 = *param_1;
    }
    piVar1[1] = iVar5;
    piVar1 = piVar1 + 2;
    param_1 = param_1 + 1;
  } while (piVar1 != &mapG_before);
  puVar2 = &s_in;
  iVar5 = 0;
  do {
    iVar4 = *(int *)((int)local_50 + iVar5);
    if (iVar4 < 0) {
      *puVar2 = 0xffffffff;
      iVar4 = -iVar4;
    }
    else {
      *puVar2 = 1;
    }
    iVar5 = iVar5 + 4;
    puVar2[1] = iVar4;
    puVar2 = puVar2 + 2;
  } while (iVar5 != 0x24);
  piVar1 = param_3 + 9;
  do {
    iVar9 = *piVar6 * s_in;
    iVar5 = fix_point_mult2_32(0x10,piVar6[1] << 6,DAT_000b8084);
    iVar7 = piVar6[2] * DAT_000b8098;
    iVar4 = fix_point_mult2_32(0x10,piVar6[3] << 6,DAT_000b809c);
    iVar8 = piVar6[4] * DAT_000b80b0;
    iVar3 = fix_point_mult2_32(0x10,piVar6[5] << 6,DAT_000b80b4);
    *param_3 = iVar8 * iVar3 + iVar7 * iVar4 + iVar9 * iVar5;
    iVar9 = *piVar6 * DAT_000b8088;
    iVar5 = fix_point_mult2_32(0x10,piVar6[1] << 6,DAT_000b808c);
    iVar7 = piVar6[2] * DAT_000b80a0;
    iVar4 = fix_point_mult2_32(0x10,piVar6[3] << 6,DAT_000b80a4);
    iVar8 = piVar6[4] * DAT_000b80b8;
    iVar3 = fix_point_mult2_32(0x10,piVar6[5] << 6,DAT_000b80bc);
    param_3[1] = iVar8 * iVar3 + iVar7 * iVar4 + iVar9 * iVar5;
    iVar9 = *piVar6 * DAT_000b8090;
    iVar5 = fix_point_mult2_32(0x10,piVar6[1] << 6,DAT_000b8094);
    iVar7 = piVar6[2] * DAT_000b80a8;
    iVar4 = fix_point_mult2_32(0x10,piVar6[3] << 6,DAT_000b80ac);
    iVar8 = piVar6[4] * DAT_000b80c0;
    iVar3 = fix_point_mult2_32(0x10,piVar6[5] << 6,DAT_000b80c4);
    iVar4 = iVar8 * iVar3 + iVar7 * iVar4 + iVar9 * iVar5;
    iVar5 = *param_3;
    param_3[2] = iVar4;
    if (iVar5 < 0) {
      iVar5 = -(-iVar5 >> 6);
    }
    else {
      iVar5 = iVar5 >> 6;
    }
    *param_3 = iVar5;
    iVar5 = param_3[1];
    if (iVar5 < 0) {
      iVar5 = -(-iVar5 >> 6);
    }
    else {
      iVar5 = iVar5 >> 6;
    }
    param_3[1] = iVar5;
    if (iVar4 < 0) {
      iVar4 = -(-iVar4 >> 6);
    }
    else {
      iVar4 = iVar4 >> 6;
    }
    param_3[2] = iVar4;
    param_3 = param_3 + 3;
    piVar6 = piVar6 + 6;
  } while (param_3 != piVar1);
  return;
}



int minFun(int param_1,int param_2)

{
  if (param_1 <= param_2) {
    param_2 = param_1;
  }
  return param_2;
}



int maxFun(int param_1,int param_2)

{
  if (param_2 <= param_1) {
    param_2 = param_1;
  }
  return param_2;
}



int Log2(int param_1)

{
  bool bVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  iVar2 = 0;
  while( true ) {
    iVar3 = 1;
    iVar5 = 1;
    iVar4 = iVar2 + 1;
    while (bVar1 = iVar5 < iVar4, iVar5 = iVar5 + 1, bVar1) {
      iVar3 = iVar3 << 1;
    }
    if (param_1 <= iVar3) break;
    iVar2 = iVar4;
    if (iVar4 == 0xc) {
      return 0xb;
    }
  }
  return iVar2;
}



int absFun(int param_1,int param_2)

{
  int iVar1;
  
  iVar1 = param_1 - param_2;
  if (param_1 <= param_2) {
    iVar1 = param_2 - param_1;
  }
  return iVar1;
}



int getVar(int param_1)

{
  int *piVar1;
  bool bVar2;
  int *piVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  
  piVar3 = (int *)(param_1 + 4);
  iVar7 = 0;
  iVar6 = 0;
  iVar4 = *piVar3;
  while( true ) {
    if ((iVar4 < 200) && (piVar3[1] < 200)) {
      iVar6 = iVar6 + 1;
      iVar7 = iVar7 + ((piVar3[1] - piVar3[-1]) + 1) / 2;
    }
    piVar3 = piVar3 + 1;
    if ((int *)(param_1 + 0x400) == piVar3) break;
    iVar4 = *piVar3;
  }
  piVar3 = (int *)(param_1 + 8);
  iVar8 = 1;
  iVar4 = 0;
  while (bVar2 = iVar8 < iVar6 + 1, iVar8 = iVar8 + 1, bVar2) {
    piVar1 = piVar3 + -2;
    iVar5 = *piVar3;
    piVar3 = piVar3 + 1;
    iVar5 = (((iVar5 - *piVar1) + 1) / 2) * 10 - (iVar7 * 10 + (iVar6 >> 1)) / iVar6;
    iVar4 = iVar5 * iVar5 + iVar4;
  }
  return (iVar4 + (iVar6 >> 1)) / iVar6;
}



void wdr_detail_para_rgb(int *param_1,int *param_2,int *param_3)

{
  int iVar1;
  int *piVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  
  iVar9 = *param_2 - param_2[2];
  iVar8 = param_2[3] - param_2[5];
  iVar6 = 0;
  iVar7 = 0;
  iVar3 = iVar9;
  do {
    iVar1 = iVar3 - iVar9;
    if (*param_2 + param_2[1] < iVar3) {
      iVar9 = 0;
      iVar5 = 0;
      iVar3 = iVar8;
      do {
        iVar4 = iVar3 - iVar8;
        if (param_2[3] + param_2[4] < iVar3) {
          iVar3 = (iVar7 + iVar1 / 2) / iVar1;
          iVar1 = (iVar6 + iVar1 / 2) / iVar1;
          *param_1 = iVar3;
          param_1[1] = iVar1;
          iVar3 = (iVar5 + iVar4 / 2) / iVar4 - iVar3;
          param_1[2] = (((iVar9 + iVar4 / 2) / iVar4 - iVar1) * 0x1000 + iVar3 / 2) / iVar3;
          return;
        }
        iVar4 = param_3[0xff];
        iVar10 = 0x1f;
        piVar2 = param_3;
        do {
          if (iVar3 < iVar10) {
            iVar4 = ((piVar2[1] * 0x1000 -
                     ((piVar2[1] - *piVar2) * (iVar10 - iVar3) * 0x1000 + 8) / 0x10) + 0x800) /
                    0x1000;
            break;
          }
          iVar10 = iVar10 + 0x10;
          piVar2 = piVar2 + 1;
        } while (iVar10 != 0x100f);
        iVar5 = iVar5 + iVar3;
        iVar9 = iVar9 + iVar4;
        iVar3 = iVar3 + 1;
      } while( true );
    }
    iVar1 = param_3[0xff];
    iVar5 = 0x1f;
    piVar2 = param_3;
    do {
      if (iVar3 < iVar5) {
        iVar1 = ((piVar2[1] * 0x1000 - ((piVar2[1] - *piVar2) * (iVar5 - iVar3) * 0x1000 + 8) / 0x10
                 ) + 0x800) / 0x1000;
        break;
      }
      iVar5 = iVar5 + 0x10;
      piVar2 = piVar2 + 1;
    } while (iVar5 != 0x100f);
    iVar7 = iVar7 + iVar3;
    iVar6 = iVar6 + iVar1;
    iVar3 = iVar3 + 1;
  } while( true );
}



void Tiziano_wdr_fpga(int *param_1,int *param_2,int *param_3,int *param_4,int *param_5,int *param_6,
                     int *param_7,int *param_8,int *param_9,int *param_10,int *param_11,
                     int *param_12,int *param_13,int *param_14,int *param_15,int *param_16,
                     int *param_17,int *param_18,int *param_19,int *param_20,
                     int *param_21,int *param_22,int *param_23,int *param_24,int param_25,
                     int *param_26,int *param_27,int *param_28,int param_29,
                     int *param_30)

{
  bool bVar1;
  int *piVar2;
  int iVar3;
  int iVar4;
  int uVar5;
  int *piVar6;
  int iVar7;
  int iVar8;
  int *piVar9;
  int iVar10;
  int iVar11;
  int *piVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int *piVar16;
  int *puVar17;
  int *puVar18;
  int iVar19;
  int *piVar20;
  int *piVar21;
  int iVar22;
  int iVar23;
  int iVar24;
  int *piVar25;
  int *piVar26;
  int iVar27;
  int iVar28;
  int iVar29;
  int iVar30;
  int local_1d8 [26];
  int local_170;
  int local_16c;
  int local_168;
  int local_164;
  int local_160;
  int local_15c;
  int local_158;
  int local_154;
  int local_150;
  int *local_148;
  int local_144;
  int *local_140;
  int *local_13c;
  int *local_138;
  int local_134;
  int *local_130;
  int local_12c;
  int local_128;
  int local_124;
  int local_120;
  int local_11c;
  int *local_118;
  int *local_114;
  int local_110;
  int *local_10c;
  int *local_108;
  int local_104;
  int *local_100;
  int *local_fc;
  int local_f8;
  int local_f4;
  int local_f0;
  int *local_ec;
  int local_e8;
  int local_e4;
  int local_e0;
  int local_dc;
  int local_d8;
  int local_d4;
  int local_d0;
  int local_cc;
  int local_c8;
  int local_c4;
  int local_c0;
  int local_bc;
  int local_b8;
  unsigned int local_b4;
  int local_b0;
  int *local_ac;
  int *local_a8;
  int *local_a4;
  int *local_a0;
  int local_9c;
  int local_98;
  int local_94;
  int local_90;
  int local_8c;
  int local_88;
  int local_84;
  int local_80;
  int local_7c;
  int local_78;
  int local_74;
  int local_70;
  int local_6c;
  int local_68;
  int local_64;
  int local_60;
  int local_5c;
  int local_58;
  int local_54;
  int local_50;
  int local_4c;
  int local_48;
  int local_44;
  int local_40;
  int local_3c;
  int local_38;
  int local_34;
  int *local_30;
  
  local_13c = param_9;
  local_118 = param_12;
  local_ac = param_10;
  local_a8 = param_11;
  local_100 = param_13;
  local_130 = param_5;
  local_108 = param_14;
  local_140 = param_15;
  local_138 = param_22;
  local_12c = param_25;
  local_a4 = param_26;
  local_148 = param_28;
  local_fc = (int *)param_29;
  local_a0 = (int *)*param_1;
  local_e0 = param_1[1];
  local_124 = *param_2;
  local_f8 = param_2[1];
  local_9c = param_2[2];
  iVar27 = *param_3;
  local_11c = param_2[3];
  local_dc = param_2[4];
  local_98 = param_3[1];
  iVar29 = param_8[3];
  local_94 = param_3[2];
  local_90 = param_3[3];
  local_8c = param_1[2];
  local_144 = *param_8;
  local_104 = param_8[1];
  local_88 = param_8[2];
  local_84 = param_8[4];
  local_80 = param_3[4];
  local_7c = param_3[5];
  local_78 = param_3[6];
  local_134 = param_8[5];
  local_74 = *param_6;
  local_d8 = param_6[1];
  local_70 = param_6[2];
  local_d4 = param_6[3];
  local_6c = param_6[4];
  local_68 = param_6[5];
  local_64 = param_6[6];
  local_d0 = param_6[7];
  local_60 = param_6[0xb];
  local_f4 = param_6[0xd];
  local_5c = param_6[0xe];
  local_58 = param_6[0xf];
  local_120 = param_6[0x10];
  local_cc = param_6[0x11];
  local_54 = param_6[0x12];
  local_c8 = param_6[0x13];
  local_c4 = param_8[6];
  piVar12 = &claHistG1;
  local_c0 = param_8[7];
  local_50 = param_8[8];
  local_bc = param_8[9];
  local_4c = param_8[10];
  local_b8 = param_8[0xb];
  local_48 = param_8[0xc];
  local_44 = param_8[0xd];
  local_40 = param_8[0xe];
  local_b4 = param_1[3];
  local_b0 = param_8[0xf];
  local_f0 = param_8[0x10];
  local_110 = param_7[0xe];
  local_128 = param_7[0xf];
  claHistR0 = *param_16;
  claHistG0 = *param_17;
  claHistB0 = *param_18;
  claHistR1 = *param_19;
  claHistG1 = *param_20;
  piVar6 = &claHistR1;
  claHistB1 = *param_21;
  piVar9 = &claHistG0;
  piVar2 = &claHistB1;
  local_114 = &claHistG0;
  iVar10 = 0;
  piVar21 = piVar2;
  piVar20 = piVar12;
  piVar16 = piVar6;
  piVar25 = &claHistB0;
  piVar26 = &claHistR0;
  do {
    iVar14 = *piVar26;
    piVar26 = piVar26 + 1;
    *piVar26 = *(int *)((int)param_16 + iVar10 + 4) + iVar14;
    piVar9[1] = *(int *)((int)param_17 + iVar10 + 4) + *piVar9;
    piVar9 = piVar9 + 1;
    piVar25[1] = *(int *)((int)param_18 + iVar10 + 4) + *piVar25;
    piVar16[1] = *(int *)((int)param_19 + iVar10 + 4) + *piVar16;
    piVar16 = piVar16 + 1;
    piVar20[1] = *(int *)((int)param_20 + iVar10 + 4) + *piVar20;
    iVar14 = iVar10 + 4;
    iVar10 = iVar10 + 4;
    piVar21[1] = *(int *)((int)param_21 + iVar14) + *piVar21;
    piVar21 = piVar21 + 1;
    piVar20 = piVar20 + 1;
    piVar25 = piVar25 + 1;
  } while (iVar10 != 0x3fc);
  local_e8 = claHistG1;
  local_e4 = DAT_000ba0e0;
  local_3c = DAT_000ba0e4;
  local_38 = DAT_000ba0e8;
  local_34 = 0xc0000;
  local_ec = &tmpMapR_8bit;
  local_30 = &tmpMapR;
  piVar21 = &tmpMapR_8bit;
  if (local_a0 == (int *)0x0) {
    piVar21 = &tmpMapR_8bit;
    piVar20 = &tmpMapR;
    iVar10 = 0;
    do {
      iVar10 = iVar10 + 1;
      iVar24 = *piVar6;
      *piVar21 = iVar10;
      iVar14 = 1;
      piVar16 = &claHistR0;
      do {
        if ((*piVar16 < iVar24) && (iVar24 <= piVar16[1])) {
          if (iVar14 < iVar10) {
            iVar14 = *piVar21;
            goto LAB_0002fb4c;
          }
          *piVar21 = iVar14;
          break;
        }
        iVar14 = iVar14 + 1;
        piVar16 = piVar16 + 1;
      } while (iVar14 != 0x100);
      iVar14 = *piVar21;
LAB_0002fb4c:
      piVar6 = piVar6 + 1;
      *piVar20 = iVar14 * 0x10 + -1;
      piVar21 = piVar21 + 1;
      piVar20 = piVar20 + 1;
    } while (iVar10 != 0x100);
    piVar21 = &tmpMapG_8bit;
    piVar20 = &tmpMapG;
    iVar10 = 0;
    do {
      iVar10 = iVar10 + 1;
      iVar24 = *piVar12;
      piVar16 = &claHistG0;
      *piVar21 = iVar10;
      iVar14 = 1;
      do {
        if ((*piVar16 < iVar24) && (iVar24 <= piVar16[1])) {
          if (iVar14 < iVar10) {
            iVar14 = *piVar21;
            goto LAB_0002fbd4;
          }
          *piVar21 = iVar14;
          break;
        }
        iVar14 = iVar14 + 1;
        piVar16 = piVar16 + 1;
      } while (iVar14 != 0x100);
      iVar14 = *piVar21;
LAB_0002fbd4:
      piVar12 = piVar12 + 1;
      *piVar20 = iVar14 * 0x10 + -1;
      piVar21 = piVar21 + 1;
      piVar20 = piVar20 + 1;
    } while (iVar10 != 0x100);
    piVar21 = &tmpMapB_8bit;
    piVar20 = &tmpMapB;
    iVar10 = 0;
    do {
      iVar10 = iVar10 + 1;
      iVar24 = *piVar2;
      *piVar21 = iVar10;
      iVar14 = 1;
      piVar16 = &claHistB0;
      do {
        if ((*piVar16 < iVar24) && (iVar24 <= piVar16[1])) {
          if (iVar14 < iVar10) {
            iVar14 = *piVar21;
            goto LAB_0002fc5c;
          }
          *piVar21 = iVar14;
          break;
        }
        iVar14 = iVar14 + 1;
        piVar16 = piVar16 + 1;
      } while (iVar14 != 0x100);
      iVar14 = *piVar21;
LAB_0002fc5c:
      piVar2 = piVar2 + 1;
      *piVar20 = iVar14 * 0x10 + -1;
      piVar21 = piVar21 + 1;
      piVar20 = piVar20 + 1;
    } while (iVar10 != 0x100);
  }
  else {
    piVar16 = &tmpMapR;
    iVar10 = 0;
    piVar20 = &claHistR0;
    do {
      iVar19 = *piVar20;
      iVar24 = *piVar6;
      iVar10 = iVar10 + 1;
      *piVar16 = iVar10 * 0x10 + -1;
      iVar14 = iVar19 - iVar24;
      if (iVar19 < iVar24) {
        iVar14 = iVar24 - iVar19;
      }
      *piVar21 = iVar10;
      iVar19 = 2;
      piVar25 = &claHistR0;
      do {
        iVar7 = piVar25[1];
        iVar3 = iVar24 - iVar7;
        if (iVar24 < iVar7) {
          iVar3 = iVar7 - iVar24;
        }
        if (iVar3 < iVar14) {
          iVar14 = iVar19;
          if (iVar19 < iVar10) {
            iVar14 = iVar10;
          }
          *piVar16 = iVar14 * 0x10 + -1;
          *piVar21 = iVar14;
          iVar14 = iVar3;
        }
        iVar19 = iVar19 + 1;
        piVar25 = piVar25 + 1;
      } while (iVar19 != 0x101);
      piVar6 = piVar6 + 1;
      piVar20 = piVar20 + 1;
      piVar21 = piVar21 + 1;
      piVar16 = piVar16 + 1;
    } while (iVar10 != 0x100);
    piVar16 = &claHistG0;
    piVar20 = &tmpMapG_8bit;
    piVar21 = &tmpMapG;
    iVar10 = 0;
    do {
      iVar19 = *piVar16;
      iVar24 = *piVar12;
      iVar10 = iVar10 + 1;
      puVar17 = &claHistG0;
      *piVar21 = iVar10 * 0x10 + -1;
      iVar14 = iVar19 - iVar24;
      if (iVar19 < iVar24) {
        iVar14 = iVar24 - iVar19;
      }
      *piVar20 = iVar10;
      iVar19 = 2;
      do {
        iVar7 = puVar17[1];
        iVar3 = iVar24 - iVar7;
        if (iVar24 < iVar7) {
          iVar3 = iVar7 - iVar24;
        }
        if (iVar3 < iVar14) {
          iVar14 = iVar19;
          if (iVar19 < iVar10) {
            iVar14 = iVar10;
          }
          *piVar21 = iVar14 * 0x10 + -1;
          *piVar20 = iVar14;
          iVar14 = iVar3;
        }
        iVar19 = iVar19 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar19 != 0x101);
      piVar12 = piVar12 + 1;
      piVar16 = piVar16 + 1;
      piVar20 = piVar20 + 1;
      piVar21 = piVar21 + 1;
    } while (iVar10 != 0x100);
    piVar16 = &tmpMapB_8bit;
    piVar20 = &tmpMapB;
    iVar10 = 0;
    piVar21 = &claHistB0;
    do {
      iVar19 = *piVar21;
      iVar24 = *piVar2;
      iVar10 = iVar10 + 1;
      *piVar20 = iVar10 * 0x10 + -1;
      iVar14 = iVar19 - iVar24;
      if (iVar19 < iVar24) {
        iVar14 = iVar24 - iVar19;
      }
      *piVar16 = iVar10;
      iVar19 = 2;
      piVar25 = &claHistB0;
      do {
        iVar7 = piVar25[1];
        iVar3 = iVar24 - iVar7;
        if (iVar24 < iVar7) {
          iVar3 = iVar7 - iVar24;
        }
        if (iVar3 < iVar14) {
          iVar14 = iVar19;
          if (iVar19 < iVar10) {
            iVar14 = iVar10;
          }
          *piVar20 = iVar14 * 0x10 + -1;
          *piVar16 = iVar14;
          iVar14 = iVar3;
        }
        iVar19 = iVar19 + 1;
        piVar25 = piVar25 + 1;
      } while (iVar19 != 0x101);
      piVar2 = piVar2 + 1;
      piVar21 = piVar21 + 1;
      piVar16 = piVar16 + 1;
      piVar20 = piVar20 + 1;
    } while (iVar10 != 0x100);
  }
  local_10c = param_4;
  wdr_detail_para_rgb(&local_158,param_29,&tmpMapR);
  local_a0 = (int *)0xc0000;
  wdr_detail_para_rgb(&local_164,local_fc,&tmpMapG);
  local_114 = (int *)0xc0000;
  wdr_detail_para_rgb(&local_170,local_fc,&tmpMapB);
  iVar14 = (int)local_a0;
  iVar10 = (int)local_114;
  *param_30 = local_158;
  param_30[1] = local_154;
  param_30[2] = local_150;
  param_30[3] = local_164;
  iVar24 = 0;
  param_30[4] = local_160;
  param_30[5] = local_15c;
  param_30[6] = local_170;
  param_30[7] = local_16c;
  param_30[8] = local_168;
  do {
    local_114 = &mapR_before;
    *(int *)((int)&mapR_before + iVar24) = *(int *)((int)local_138 + iVar24);
    *(int *)((int)&mapG_before + iVar24) = *(int *)((int)param_24 + iVar24);
    puVar17 = (int *)((int)param_23 + iVar24);
    puVar18 = (int *)((int)&mapB_before + iVar24);
    iVar24 = iVar24 + 4;
    *puVar18 = *puVar17;
    local_fc = &mapG_before;
    local_a0 = &mapB_before;
  } while (iVar24 != 0x144);
  puVar18 = &tmpMapR;
  local_138[1] = tmpMapR;
  iVar7 = iVar14 + -0x7b24;
  param_24[1] = *(int *)(iVar14 + -0x7b24);
  iVar3 = iVar10 + -0x7324;
  param_23[1] = *(int *)(iVar10 + -0x7324);
  piVar16 = local_138 + 2;
  piVar20 = param_24 + 2;
  piVar21 = param_23 + 2;
  iVar15 = 0;
  iVar11 = 1;
  iVar10 = iVar3;
  iVar14 = iVar7;
  iVar24 = iVar3;
  iVar19 = iVar7;
  puVar17 = puVar18;
  do {
    if (iVar11 < 0x10) {
      *piVar16 = *(int *)((int)local_30 + iVar15 + 4);
      *piVar20 = *(int *)(iVar7 + iVar15 + 4);
      iVar22 = *(int *)(iVar3 + iVar15 + 4);
    }
    else if (iVar11 - 0x10U < 8) {
      *piVar16 = puVar18[-0xd];
      *piVar20 = *(int *)(iVar19 + -0x34);
      iVar22 = *(int *)(iVar24 + -0x34);
    }
    else {
      *piVar16 = puVar17[-0x39];
      *piVar20 = *(int *)(iVar14 + -0xe4);
      iVar22 = *(int *)(iVar10 + -0xe4);
    }
    iVar11 = iVar11 + 1;
    *piVar21 = iVar22;
    iVar15 = iVar15 + 4;
    piVar16 = piVar16 + 1;
    piVar20 = piVar20 + 1;
    piVar21 = piVar21 + 1;
    puVar18 = puVar18 + 2;
    iVar19 = iVar19 + 8;
    iVar24 = iVar24 + 8;
    puVar17 = puVar17 + 4;
    iVar14 = iVar14 + 0x10;
    iVar10 = iVar10 + 0x10;
  } while (iVar11 != 0x50);
  iVar10 = getVar(local_34 + -0x6b24);
  iVar14 = getVar(&tmpMapG_8bit);
  iVar24 = getVar(&tmpMapB_8bit);
  iVar14 = (iVar10 + iVar14 + iVar24) / 3;
  iVar10 = 0;
  if (param_7[0xc] == 1) {
    iVar24 = param_7[4];
    if (iVar24 <= iVar14) {
      iVar19 = param_7[5];
      iVar10 = param_7[7];
      if (iVar14 < iVar19) {
        iVar3 = iVar19 - iVar24;
        iVar10 = (iVar19 * iVar3 + (iVar10 - param_7[6]) * (iVar14 - iVar24) + iVar3 / 2) / iVar3;
      }
      iVar24 = 0;
      iVar19 = 0x10 - iVar10;
      piVar21 = param_23;
      piVar20 = param_24;
      piVar16 = local_138;
      do {
        piVar16 = piVar16 + 1;
        piVar20 = piVar20 + 1;
        piVar21 = piVar21 + 1;
        *piVar16 = (iVar19 * *piVar16 + iVar10 * *(int *)((int)local_114 + iVar24 + 4) + 8) / 0x10;
        *piVar20 = (iVar19 * *piVar20 + iVar10 * *(int *)((int)local_fc + iVar24 + 4) + 8) / 0x10;
        iVar3 = iVar24 + 4;
        iVar24 = iVar24 + 4;
        *piVar21 = (iVar19 * *piVar21 + iVar10 * *(int *)((int)local_a0 + iVar3) + 8) / 0x10;
      } while (iVar24 != 0x140);
      goto LAB_000301f8;
    }
    iVar24 = param_7[0xd];
  }
  else {
LAB_000301f8:
    iVar24 = param_7[0xd];
  }
  if (iVar24 == 1) {
    iVar24 = param_7[8];
    if (iVar24 <= iVar14) {
      local_110 = param_7[0xb];
      if (iVar14 < param_7[9]) {
        iVar19 = param_7[9] - iVar24;
        local_110 = (param_7[10] * iVar19 + (param_7[0xb] - param_7[10]) * (iVar14 - iVar24) +
                    iVar19 / 2) / iVar19;
      }
    }
    param_7[0xe] = local_110;
  }
  iVar24 = (local_138[2] * -0xf + local_138[1] * 0x1f + 8) / 0x10;
  piVar16 = &DAT_000b98e0;
  piVar20 = &DAT_000b90e0;
  piVar21 = &DAT_000b94e0;
  iVar14 = 0;
  iVar19 = 1;
  if (iVar24 < 0) {
    iVar24 = 0;
  }
  *local_138 = iVar24;
  iVar24 = (param_24[2] * -0xf + param_24[1] * 0x1f + 8) / 0x10;
  if (iVar24 < 0) {
    iVar24 = 0;
  }
  *param_24 = iVar24;
  iVar24 = (param_23[2] * -0xf + param_23[1] * 0x1f + 8) / 0x10;
  local_114 = &tmpMapG_8bit;
  if (iVar24 < 0) {
    iVar24 = 0;
  }
  *param_23 = iVar24;
  iVar24 = 0;
  while ((((iVar19 < local_9c && (iVar3 = *piVar21, iVar3 <= local_128)) &&
          (iVar7 = *piVar20, iVar7 <= local_128)) && (iVar11 = *piVar16, iVar11 <= local_128))) {
    iVar15 = iVar19 - local_f8;
    if (iVar15 < 0) {
      iVar15 = 0;
    }
    iVar22 = iVar19 + local_f8;
    local_138 = piVar20 + local_f8;
    for (iVar28 = 0;
        ((iVar8 = *(int *)((int)piVar21 + iVar28 + local_f8 * 4), local_128 < iVar8 ||
         (iVar13 = *(int *)((int)(piVar20 + local_f8) + iVar28), local_128 < iVar13)) ||
        (iVar4 = *(int *)((int)piVar16 + iVar28 + local_f8 * 4), local_128 < iVar4));
        iVar28 = iVar28 + -4) {
      iVar22 = iVar22 + -1;
    }
    iVar22 = iVar22 - iVar15;
    iVar23 = iVar19 - iVar15;
    iVar30 = iVar22 / 2;
    iVar19 = iVar19 + 1;
    piVar16 = piVar16 + 1;
    piVar20 = piVar20 + 1;
    piVar21 = piVar21 + 1;
    iVar8 = (local_ec[iVar15] * iVar22 + (iVar8 - local_ec[iVar15]) * iVar23 + iVar30) / iVar22;
    iVar28 = iVar3 - iVar8;
    if (iVar3 < iVar8) {
      iVar28 = iVar8 - iVar3;
    }
    if (local_11c < iVar28) {
      iVar24 = 1;
    }
    iVar8 = (iVar22 * (&tmpMapG_8bit)[iVar15] + (iVar13 - (&tmpMapG_8bit)[iVar15]) * iVar23 + iVar30
            ) / iVar22;
    iVar3 = iVar7 - iVar8;
    if (iVar7 < iVar8) {
      iVar3 = iVar8 - iVar7;
    }
    if (iVar28 <= iVar3) {
      iVar28 = iVar3;
    }
    if (local_11c < iVar3) {
      iVar24 = 1;
    }
    if (iVar28 <= iVar14) {
      iVar28 = iVar14;
    }
    iVar22 = (iVar22 * (&tmpMapB_8bit)[iVar15] + (iVar4 - (&tmpMapB_8bit)[iVar15]) * iVar23 + iVar30
             ) / iVar22;
    iVar3 = iVar11 - iVar22;
    if (iVar11 < iVar22) {
      iVar3 = iVar22 - iVar11;
    }
    if (local_11c < iVar3) {
      iVar24 = 1;
    }
    iVar14 = iVar28;
    if (iVar28 <= iVar3) {
      iVar14 = iVar3;
    }
    if (local_124 < iVar14) {
      local_124 = iVar14;
    }
  }
  iVar19 = (local_98 * 0x80 + iVar27 / 2) / iVar27;
  iVar14 = -1;
  if (local_94 <= iVar19) {
    iVar14 = 1;
  }
  if (iVar19 < local_90) {
    iVar24 = 2;
  }
  if ((param_7[0xc] == 1) && (8 < iVar10)) {
    iVar24 = 0;
  }
  iVar10 = local_10c[1];
  if (iVar10 < iVar27) {
    iVar3 = local_10c[2];
    if (iVar3 < iVar27) {
      if (local_5c < iVar27) {
        if (local_58 < iVar27) goto LAB_00030734;
        local_120 = local_60 * 4 * iVar19 +
                    (((iVar27 - local_64) + local_d0 / 2) / local_d0 + local_68) * 0x200;
      }
      else {
        iVar10 = local_10c[3] - iVar3;
        local_120 = iVar19 * 4 * local_6c +
                    ((local_130[2] * iVar10 + (local_130[3] - local_130[2]) * (iVar27 - iVar3) +
                     iVar10 / 2) / iVar10) * 0x200;
      }
    }
    else {
      iVar3 = iVar3 - iVar10;
      local_120 = (((local_130[1] * iVar3 + (local_130[2] - local_130[1]) * (iVar27 - iVar10) +
                    iVar3 / 2) / iVar3) * 0x2000 +
                   (local_d4 / 2 + (iVar10 * -3 + local_70 * 0x10 + iVar27) * iVar19 * 4) / local_d4
                  + 8) / 0x10;
    }
  }
  else {
    iVar10 = iVar10 - *local_10c;
    local_120 = (((*local_130 * iVar10 + (local_130[1] - *local_130) * (iVar27 - *local_10c) +
                  iVar10 / 2) / iVar10) * 0x1000 +
                 (local_d8 / 2 + (local_74 * 8 - iVar27) * 4 * iVar19) / local_d8 + 4) / 8;
  }
LAB_00030734:
  iVar10 = iVar19 + local_f4 * -0x80;
  if (iVar19 < local_f4 * 0x80) {
    iVar10 = local_f4 * 0x80 - iVar19;
  }
  if (local_b4 < 2) {
    piVar16 = local_1d8;
    piVar25 = (int *)(local_12c + 4);
    piVar26 = (int *)(local_12c + 0x6c);
    piVar21 = piVar25;
    piVar20 = piVar16;
    do {
      iVar3 = *piVar21;
      piVar2 = piVar21 + -1;
      piVar21 = piVar21 + 1;
      *piVar20 = iVar3 - *piVar2;
      piVar20 = piVar20 + 1;
    } while (piVar21 != piVar26);
    iVar3 = 0;
    if (local_b4 == 1) {
      do {
        uVar5 = *(int *)((int)local_1d8 + iVar3);
        *(int *)((int)local_13c + iVar3) = uVar5;
        *(int *)((int)local_118 + iVar3) = uVar5;
        *(int *)((int)local_108 + iVar3) = uVar5;
        puVar17 = (int *)((int)local_140 + iVar3);
        iVar3 = iVar3 + 4;
        *puVar17 = uVar5;
      } while (iVar3 != 0x68);
      *local_108 = local_c4;
      local_108[1] = local_c4;
      *local_140 = local_c0;
      local_140[1] = local_c0;
      piVar21 = piVar16;
      piVar20 = local_140 + 2;
      for (iVar3 = 2; iVar3 < local_48; iVar3 = iVar3 + 1) {
        *piVar20 = (local_50 * piVar21[2] + local_bc / 2) / local_bc;
        piVar21 = piVar21 + 1;
        piVar20 = piVar20 + 1;
      }
      piVar21 = local_100;
      do {
        iVar3 = *piVar16;
        piVar20 = piVar21 + 1;
        piVar16 = piVar16 + 1;
        *piVar21 = (local_4c * iVar3 + local_b8 / 2) / local_b8;
        piVar21 = piVar20;
      } while (local_100 + 0x1a != piVar20);
    }
    if (local_e0 == 1) {
      iVar3 = local_f0 - local_b0;
      piVar21 = local_ac;
      piVar20 = local_13c;
      piVar16 = local_a8;
      do {
        if (local_b0 < iVar27) {
          if (local_f0 < iVar27) {
            iVar7 = *piVar16;
          }
          else {
            iVar7 = (*piVar16 * iVar3 + (*piVar16 - *piVar21) * (iVar27 - local_f0) + iVar3 / 2) /
                    iVar3;
          }
        }
        else {
          iVar7 = *piVar21;
        }
        piVar21 = piVar21 + 1;
        *piVar20 = iVar7;
        piVar16 = piVar16 + 1;
        piVar20 = piVar20 + 1;
      } while (piVar21 != local_ac + 0x1a);
    }
    else if (local_e0 == 2) {
      piVar21 = local_118;
      piVar20 = local_13c;
      do {
        iVar27 = *piVar21;
        piVar21 = piVar21 + 1;
        *piVar20 = iVar27;
        piVar20 = piVar20 + 1;
      } while (piVar21 != local_118 + 0x1a);
    }
    iVar10 = ((local_f4 / 2 + iVar14 * 4 * iVar10) / local_f4 + local_120 + 0x40) / 0x80;
    if (iVar10 < 0) {
      iVar10 = 0;
    }
    iVar14 = param_7[1] - *param_7;
    iVar27 = local_84;
    if (iVar10 < local_88) {
      iVar27 = iVar29;
    }
    iVar14 = (param_7[2] * iVar14 +
              ((local_e8 + local_e4 + local_3c + local_38 + 0x400) / 0x800 - *param_7) *
              (param_7[3] - param_7[2]) + iVar14 / 2) / iVar14;
    if (local_7c < iVar19) {
      local_134 = local_134 + (uint)(iVar19 <= local_78);
    }
    else if (local_80 < iVar19) {
      local_134 = local_134 + 2;
    }
    piVar21 = param_27 + 1;
    if (local_8c == 0) {
      iVar29 = local_144;
      if (iVar14 < local_144) {
        iVar29 = iVar14;
      }
      iVar19 = 0;
      piVar20 = local_13c;
      do {
        if (iVar19 < 2) {
          iVar3 = iVar10 - (3 - iVar19) * iVar29;
          if (0x4b0 < iVar3) {
            iVar3 = 0x4b0;
          }
          if (iVar3 < 0) {
            iVar3 = 0;
          }
        }
        else if (iVar19 - 2U < 2) {
          iVar3 = piVar21[-1] + *piVar20;
          if (0x4b0 < iVar3) {
            iVar3 = 0x4b0;
          }
        }
        else {
          iVar3 = piVar21[-1] + *piVar20;
          if (iVar27 <= iVar3) {
            iVar3 = iVar27;
          }
        }
        iVar19 = iVar19 + 1;
        *piVar21 = iVar3;
        piVar20 = piVar20 + 1;
        piVar21 = piVar21 + 1;
      } while (iVar19 != 0x1a);
      iVar29 = param_27[1];
    }
    else {
      iVar19 = (1 - local_134) * local_c8;
      iVar29 = local_144;
      if (iVar14 < local_144) {
        iVar29 = iVar14;
      }
      iVar11 = 0;
      iVar7 = 0;
      iVar3 = local_cc;
      do {
        iVar3 = iVar3 + 1;
        if (iVar7 < 2) {
          iVar15 = iVar10 - (3 - iVar7) * iVar29;
          if (0x4b0 < iVar15) {
            iVar15 = 0x4b0;
          }
          if (iVar15 < 0) {
            iVar15 = 0;
          }
        }
        else if (local_44 < iVar7) {
          if (local_40 < iVar7) {
            iVar15 = (iVar19 + 4 + iVar11) * (iVar19 + -1 + iVar11) + iVar10;
            if (iVar27 <= iVar15) {
              iVar15 = iVar27;
            }
          }
          else {
            iVar15 = (local_54 - local_cc) + iVar10 + iVar3;
            if (iVar27 < iVar15) {
              iVar15 = iVar27;
            }
          }
        }
        else {
          iVar15 = iVar3 * iVar7 + iVar10;
          if (0x4b0 < iVar15) {
            iVar15 = 0x4b0;
          }
        }
        *piVar21 = iVar15;
        iVar7 = iVar7 + 1;
        piVar21 = piVar21 + 1;
        iVar11 = iVar11 + local_c8;
      } while (iVar7 != 0x1a);
      iVar29 = param_27[1];
    }
    *local_13c = iVar29;
    piVar20 = param_27 + 2;
    piVar21 = local_13c;
    do {
      piVar21 = piVar21 + 1;
      iVar29 = *piVar20;
      piVar16 = piVar20 + -1;
      piVar20 = piVar20 + 1;
      *piVar21 = iVar29 - *piVar16;
    } while (piVar20 != param_27 + 0x1b);
    puVar17 = local_a4;
    if (iVar24 == 0) {
      iVar29 = 0;
      piVar16 = local_13c;
      piVar21 = param_27;
      piVar20 = local_148;
      if (local_144 <= iVar14) {
        iVar14 = local_144;
      }
      do {
        piVar20 = piVar20 + 1;
        piVar2 = piVar21 + 1;
        if (iVar29 < 2) {
          iVar24 = iVar10 - iVar14 * (3 - iVar29);
          if (0x4b0 < iVar24) {
            iVar24 = 0x4b0;
          }
          if (iVar24 < 0) {
            iVar24 = 0;
          }
        }
        else {
          iVar24 = *piVar21 + *piVar16;
          if (iVar27 <= *piVar21 + *piVar16) {
            iVar24 = iVar27;
          }
        }
        *piVar2 = iVar24;
        iVar24 = *piVar2;
        if (iVar24 == 0) {
          *piVar20 = 0x10000;
        }
        else {
          *piVar20 = (iVar24 / 2 + local_104 * 0x4000) / iVar24;
        }
        iVar29 = iVar29 + 1;
        piVar16 = piVar16 + 1;
        piVar21 = piVar2;
      } while (iVar29 != 0x1a);
    }
    else if (iVar24 == 1) {
      if (local_124 < local_dc) {
        iVar29 = local_dc - local_11c;
        piVar16 = local_140 + 0x1a;
        piVar21 = local_118;
        piVar20 = local_108;
        do {
          iVar14 = *piVar20;
          iVar24 = *local_140;
          local_140 = local_140 + 1;
          piVar20 = piVar20 + 1;
          *piVar21 = (iVar14 * iVar29 + (iVar24 - iVar14) * (local_124 - local_11c) + iVar29 / 2) /
                     iVar29;
          piVar21 = piVar21 + 1;
        } while (local_140 != piVar16);
        local_140 = local_118;
      }
      iVar29 = 0;
      piVar16 = local_140;
      piVar21 = param_27;
      piVar20 = local_148;
      do {
        piVar20 = piVar20 + 1;
        piVar2 = piVar21 + 1;
        bVar1 = iVar29 < 2;
        iVar29 = iVar29 + 1;
        if (bVar1) {
          iVar14 = iVar29 * *piVar16 + iVar10;
          if (0x4b0 < iVar14) {
            iVar14 = 0x4b0;
          }
        }
        else {
          iVar14 = *piVar21 + *piVar16;
          if (iVar27 <= *piVar21 + *piVar16) {
            iVar14 = iVar27;
          }
        }
        *piVar2 = iVar14;
        iVar14 = *piVar2;
        if (iVar14 == 0) {
          *piVar20 = 0x10000;
        }
        else {
          *piVar20 = (iVar14 / 2 + local_104 * 0x4000) / iVar14;
        }
        piVar16 = piVar16 + 1;
        piVar21 = piVar2;
      } while (iVar29 != 0x1a);
    }
    else {
      iVar29 = 0;
      piVar16 = local_100;
      piVar21 = param_27;
      piVar20 = local_148;
      if (local_144 <= iVar14) {
        iVar14 = local_144;
      }
      do {
        piVar20 = piVar20 + 1;
        piVar2 = piVar21 + 1;
        if (iVar29 < 2) {
          iVar24 = iVar10 - iVar14 * (3 - iVar29);
          if (0x4b0 < iVar24) {
            iVar24 = 0x4b0;
          }
          if (iVar24 < 0) {
            iVar24 = 0;
          }
        }
        else {
          iVar24 = *piVar21 + *piVar16;
          if (iVar27 <= *piVar21 + *piVar16) {
            iVar24 = iVar27;
          }
        }
        *piVar2 = iVar24;
        iVar24 = *piVar2;
        if (iVar24 == 0) {
          *piVar20 = 0x10000;
        }
        else {
          *piVar20 = (iVar24 / 2 + local_104 * 0x4000) / iVar24;
        }
        iVar29 = iVar29 + 1;
        piVar16 = piVar16 + 1;
        piVar21 = piVar2;
      } while (iVar29 != 0x1a);
    }
    do {
      piVar21 = piVar25 + -1;
      iVar10 = *piVar25;
      piVar25 = piVar25 + 1;
      uVar5 = Log2(iVar10 - *piVar21);
      *puVar17 = uVar5;
      puVar17 = puVar17 + 1;
    } while (piVar26 != piVar25);
    iVar10 = local_148[2];
    iVar27 = local_148[1];
    iVar29 = *(int *)(local_12c + 8) - *(int *)(local_12c + 4);
    iVar29 = ((param_27[1] * iVar29 - (param_27[2] - param_27[1]) * *(int *)(local_12c + 4)) +
             iVar29 / 2) / iVar29;
    if (iVar29 < 0) {
      iVar29 = 0;
    }
    *param_27 = iVar29;
    iVar29 = *(int *)(local_12c + 8) - *(int *)(local_12c + 4);
    iVar29 = ((iVar29 * local_148[1] - (iVar10 - iVar27) * *(int *)(local_12c + 4)) + iVar29 / 2) /
             iVar29;
    if (0x10000 < iVar29) {
      iVar29 = 0x10000;
    }
    *local_148 = iVar29;
  }
  else {
    piVar21 = local_148 + 0x1b;
    do {
      iVar10 = *param_27;
      if (iVar10 == 0) {
        *local_148 = 0x10000;
      }
      else {
        *local_148 = (iVar10 / 2 + local_104 * 0x4000) / iVar10;
      }
      local_148 = local_148 + 1;
      param_27 = param_27 + 1;
    } while (local_148 != piVar21);
  }
  return;
}



int tiziano_gamma_lut_parameter(void)

{
  ushort *puVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  
  iVar3 = 0x40000;
  iVar2 = 2;
  do {
    iVar4 = iVar2 + -2;
    system_reg_write(iVar3,(uint)*(ushort *)(tiziano_gamma_lut_now + iVar2) << 0xc |
                           (uint)*(ushort *)(tiziano_gamma_lut_now + iVar4));
    system_reg_write(iVar3 + 0x8000,
                     (uint)*(ushort *)(tiziano_gamma_lut_now + iVar2) << 0xc |
                     (uint)*(ushort *)(tiziano_gamma_lut_now + iVar4));
    puVar1 = (ushort *)(tiziano_gamma_lut_now + iVar2);
    iVar2 = iVar2 + 2;
    system_reg_write(iVar3 + 0x10000,
                     (uint)*puVar1 << 0xc | (uint)*(ushort *)(tiziano_gamma_lut_now + iVar4));
    iVar3 = iVar3 + 4;
  } while (iVar2 != 0x102);
  return 0;
}



int tiziano_gamma_params_refresh(void)

{
  memcpy(&tiziano_gamma_lut,&DAT_00096c44,0x102);
  memcpy(tiziano_gamma_lut_wdr,&DAT_00096d46,0x102);
  return 0;
}



int tisp_gamma_wdr_en(int param_1)

{
  char *puVar1;
  
  gamma_wdr_en = param_1;
  if (param_1 == 0) {
    puVar1 = (char *)&tiziano_gamma_lut;
  }
  else {
    puVar1 = tiziano_gamma_lut_wdr;
  }
  tiziano_gamma_lut_now = puVar1;
  return 0;
}



int tiziano_gamma_dn_params_refresh(void)

{
  tiziano_gamma_params_refresh();
  tiziano_gamma_lut_parameter();
  return 0;
}



int tiziano_gamma_init(void)

{
  char *puVar1;
  
  if (gamma_wdr_en == 0) {
    puVar1 = (char *)&tiziano_gamma_lut;
  }
  else {
    puVar1 = tiziano_gamma_lut_wdr;
  }
  tiziano_gamma_lut_now = puVar1;
  tiziano_gamma_params_refresh();
  tiziano_gamma_lut_parameter();
  return 0;
}



int tisp_gamma_param_array_get(int param_1,void *param_2,int *param_3)

{
  char *__src;
  
  if (param_1 == 0x3c) {
    __src = (char *)&tiziano_gamma_lut;
  }
  else {
    if (param_1 != 0x3d) {
      isp_printf(2,"%s,%d: gamma not support param id %d\n","tisp_gamma_param_array_get",0x60,
                 param_1);
      return 0xffffffff;
    }
    __src = tiziano_gamma_lut_wdr;
  }
  memcpy(param_2,__src,0x102);
  *param_3 = 0x102;
  return 0;
}



int tisp_gamma_param_array_set(int param_1,void *param_2,int *param_3)

{
  char *__dest;
  
  if (param_1 == 0x3c) {
    __dest = (char *)&tiziano_gamma_lut;
  }
  else {
    if (param_1 != 0x3d) {
      isp_printf(2,"%s,%d: gamma not support param id %d\n","tisp_gamma_param_array_set",0x78,
                 param_1);
      return 0xffffffff;
    }
    __dest = tiziano_gamma_lut_wdr;
  }
  *param_3 = 0x102;
  memcpy(__dest,param_2,0x102);
  tiziano_gamma_lut_parameter();
  tiziano_adr_gamma_refresh();
  tiziano_wdr_gamma_refresh();
  return 0;
}



void system_reg_write_gib(int param_1,int param_2,int param_3)

{
  if (param_1 == 1) {
    system_reg_write(0x1070,1);
  }
  system_reg_write(param_2,param_3);
  return;
}



int tisp_gib_gain_interpolation(unsigned int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  
  uVar9 = param_1 & 0xffff;
  uVar7 = param_1 >> 0x10;
  uVar1 = tisp_simple_intp(uVar7,uVar9,tiziano_gib_deirm_blc_r_linear);
  uVar2 = tisp_simple_intp(uVar7,uVar9,tiziano_gib_deirm_blc_gr_linear);
  uVar3 = tisp_simple_intp(uVar7,uVar9,tiziano_gib_deirm_blc_gb_linear);
  uVar4 = tisp_simple_intp(uVar7,uVar9,tiziano_gib_deirm_blc_b_linear);
  uVar5 = tisp_simple_intp(uVar7,uVar9,tiziano_gib_deirm_blc_ir_linear);
  uVar6 = system_reg_read(8);
  uVar7 = uVar1;
  uVar9 = uVar1;
  uVar8 = uVar1;
  uVar10 = uVar1;
  switch(uVar6 & 0x1f) {
  case 0:
    uVar9 = uVar5;
    uVar8 = uVar3;
    uVar10 = uVar4;
    break;
  case 1:
    uVar7 = uVar4;
    uVar9 = uVar5;
    uVar8 = uVar2;
    uVar2 = uVar3;
    break;
  case 2:
    uVar7 = uVar2;
    uVar9 = uVar5;
    uVar8 = uVar4;
    uVar10 = uVar3;
    uVar2 = uVar1;
    break;
  case 3:
    uVar7 = uVar3;
    uVar9 = uVar5;
    uVar10 = uVar2;
    uVar2 = uVar4;
    break;
  default:
    isp_printf(2,"gib byper error!!!\n");
    uVar7 = 0;
    uVar9 = 0;
    uVar8 = 0;
    uVar10 = 0;
    uVar2 = 0;
    break;
  case 8:
    uVar9 = uVar3;
    uVar8 = uVar5;
    uVar10 = uVar4;
    break;
  case 9:
    uVar7 = uVar4;
    uVar9 = uVar2;
    uVar8 = uVar5;
    uVar2 = uVar3;
    break;
  case 10:
    uVar9 = uVar2;
    uVar8 = uVar3;
    uVar10 = uVar4;
    uVar2 = uVar5;
    break;
  case 0xb:
    uVar7 = uVar4;
    uVar9 = uVar3;
    uVar8 = uVar2;
    uVar2 = uVar5;
    break;
  case 0xc:
    uVar7 = uVar2;
    uVar9 = uVar3;
    uVar8 = uVar4;
    uVar10 = uVar5;
    uVar2 = uVar1;
    break;
  case 0xd:
    uVar7 = uVar3;
    uVar9 = uVar2;
    uVar10 = uVar5;
    uVar2 = uVar4;
    break;
  case 0xe:
    uVar7 = uVar5;
    uVar9 = uVar2;
    uVar8 = uVar4;
    uVar10 = uVar3;
    uVar2 = uVar1;
    break;
  case 0xf:
    uVar7 = uVar5;
    uVar9 = uVar3;
    uVar10 = uVar2;
    uVar2 = uVar4;
    break;
  case 0x10:
    uVar9 = uVar4;
    uVar8 = uVar3;
    uVar10 = uVar5;
    break;
  case 0x11:
    uVar7 = uVar4;
    uVar8 = uVar2;
    uVar10 = uVar5;
    uVar2 = uVar3;
    break;
  case 0x12:
    uVar7 = uVar2;
    uVar9 = uVar4;
    uVar8 = uVar5;
    uVar10 = uVar3;
    uVar2 = uVar1;
    break;
  case 0x13:
    uVar7 = uVar3;
    uVar8 = uVar5;
    uVar10 = uVar2;
    uVar2 = uVar4;
    break;
  case 0x14:
    uVar7 = uVar3;
    uVar9 = uVar4;
    uVar10 = uVar2;
    uVar2 = uVar5;
    break;
  case 0x15:
    uVar7 = uVar2;
    uVar8 = uVar4;
    uVar10 = uVar3;
    uVar2 = uVar5;
    break;
  case 0x16:
    uVar7 = uVar5;
    uVar9 = uVar4;
    uVar8 = uVar2;
    uVar2 = uVar3;
    break;
  case 0x17:
    uVar7 = uVar5;
    uVar8 = uVar3;
    uVar10 = uVar4;
  }
  system_reg_write_gib(1,0x1060,uVar7);
  system_reg_write_gib(1,0x1064,uVar8 << 0x10 | uVar2);
  system_reg_write_gib(1,0x1068,uVar9 << 0x10 | uVar10);
  tisp_gib_blc_ag = param_1;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_gib_lut_parameter(void)

{
  system_reg_write(0x1038,_DAT_000a9bfc << 0x10 | _DAT_000a9bf8);
  system_reg_write(0x103c,_DAT_000a9bec << 0x10 | _DAT_000a9be0 << 0xe |
                          tiziano_gib_config_line << 0xc | DAT_000a9bd4 << 10 | DAT_000a9be8 << 8 |
                          DAT_000a9bf4 << 4 | DAT_000a9bf0 << 2);
  system_reg_write_gib(1,0x106c,DAT_000a9bdc << 0x10 | DAT_000a9bd8 << 3 | DAT_000a9be4);
  tisp_gib_gain_interpolation(tisp_gib_blc_ag);
  if (init_31779 == 0) {
    system_reg_write_gib(1,0x1030,_DAT_000a9bcc << 0x10 | tiziano_gib_r_g_linear);
    system_reg_write_gib(1,0x1034,_DAT_000a9bc4 << 0x10 | tiziano_gib_b_ir_linear);
    init_31779 = 1;
  }
  return 0;
}



int tiziano_gib_params_refresh(void)

{
  memcpy(&tiziano_gib_config_line,&DAT_00096e48,0x30);
  memcpy(&tiziano_gib_r_g_linear,&DAT_00096e78,8);
  memcpy(&tiziano_gib_b_ir_linear,&DAT_00096e80,8);
  memcpy(tiziano_gib_deirm_blc_r_linear,&DAT_00096e88,0x24);
  memcpy(tiziano_gib_deirm_blc_gr_linear,&DAT_00096eac,0x24);
  memcpy(tiziano_gib_deirm_blc_gb_linear,&DAT_00096ed0,0x24);
  memcpy(tiziano_gib_deirm_blc_b_linear,&DAT_00096ef4,0x24);
  memcpy(tiziano_gib_deirm_blc_ir_linear,&DAT_00096f18,0x24);
  memcpy(&gib_ir_point,&DAT_00096f3c,0x10);
  memcpy(gib_ir_reser,&DAT_00096f4c,0x3c);
  memcpy(tiziano_gib_deir_r_h,&DAT_00096f88,0x84);
  memcpy(tiziano_gib_deir_g_h,&DAT_0009700c,0x84);
  memcpy(tiziano_gib_deir_b_h,&DAT_00097090,0x84);
  memcpy(tiziano_gib_deir_r_m,&DAT_00097114,0x84);
  memcpy(tiziano_gib_deir_g_m,&DAT_00097198,0x84);
  memcpy(tiziano_gib_deir_b_m,&DAT_0009721c,0x84);
  memcpy(tiziano_gib_deir_r_l,&DAT_000972a0,0x84);
  memcpy(tiziano_gib_deir_g_l,&DAT_00097324,0x84);
  memcpy(tiziano_gib_deir_b_l,&DAT_000973a8,0x84);
  memcpy(tiziano_gib_deir_matrix_h,&DAT_0009742c,0x3c);
  memcpy(tiziano_gib_deir_matrix_m,&DAT_00097468,0x3c);
  memcpy(tiziano_gib_deir_matrix_l,&DAT_000974a4,0x3c);
  return 0;
}



int tiziano_gib_dn_params_refresh(void)

{
  tiziano_gib_params_refresh();
  if (deir_en == 1) {
    if (day_night == 0) {
      DAT_000a9bdc = deir_en;
    }
    else {
      DAT_000a9bdc = 0;
    }
  }
  else {
    DAT_000a9bdc = 0;
  }
  tiziano_gib_lut_parameter();
  return 0;
}



void tiziano_gib_deir_reg(int param_1,int param_2,int param_3)

{
  char *pcVar1;
  char *pcVar2;
  int *piVar3;
  int *piVar4;
  int *piVar5;
  
  pcVar2 = "ce";
  piVar5 = (int *)(param_1 + 4);
  piVar4 = (int *)(param_2 + 4);
  piVar3 = (int *)(param_3 + 4);
  do {
    system_reg_write(pcVar2,*piVar5 << 0xc | piVar5[-1]);
    system_reg_write(pcVar2 + 0x80,*piVar4 << 0xc | piVar4[-1]);
    pcVar1 = pcVar2 + 0x100;
    pcVar2 = pcVar2 + 4;
    system_reg_write(pcVar1,*piVar3 << 0xc | piVar3[-1]);
    piVar5 = piVar5 + 1;
    piVar4 = piVar4 + 1;
    piVar3 = piVar3 + 1;
  } while (pcVar2 != "s outpads\n");
  return;
}



void tiziano_gib_deir_interpolate
               (unsigned int *param_1,int param_2,int param_3,int param_4,int *param_5,int *param_6)

{
  int iVar1;
  int iVar2;
  unsigned int uVar3;
  int *piVar4;
  
  piVar4 = param_6 + 0x21;
  uVar3 = (param_3 + (uint)(param_3 == param_4)) - param_4;
  do {
    iVar1 = *param_6;
    iVar2 = *param_5;
    param_6 = param_6 + 1;
    param_5 = param_5 + 1;
    *param_1 = (iVar1 * uVar3 + (iVar2 - iVar1) * (param_2 - param_4)) / uVar3;
    param_1 = param_1 + 1;
  } while (piVar4 != param_6);
  return;
}



void tiziano_gib_deir_ir_interpolation(unsigned int param_1)

{
  char *puVar1;
  char *puVar2;
  char *puVar3;
  int iVar4;
  code *pcVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  int iVar8;
  int iVar9;
  code *UNRECOVERED_JUMPTABLE;
  
  if (DAT_000a9af8 < param_1) {
    deir_flag_31810 = 0;
  }
  else if (DAT_000a9af4 < param_1) {
    deir_flag_31810 = 1;
  }
  else if (DAT_000a9af0 < param_1) {
    deir_flag_31810 = 2;
  }
  else if (gib_ir_point < param_1) {
    deir_flag_31810 = 3;
  }
  else {
    deir_flag_31810 = 4;
  }
  if (deir_flag_31810 == 0) {
    if (deir_flag_last_31811 == 0) {
      return;
    }
  }
  else if (((deir_flag_31810 == 2) || (deir_flag_31810 == 4)) &&
          (deir_flag_last_31811 == deir_flag_31810)) {
    return;
  }
  deir_flag_last_31811 = deir_flag_31810;
  if (4 < deir_flag_31810) {
    return;
  }
  UNRECOVERED_JUMPTABLE = tiziano_gib_deir_reg;
  switch(deir_flag_31810) {
  case 0:
    puVar3 = tiziano_gib_deir_b_h;
    puVar2 = tiziano_gib_deir_g_h;
    puVar1 = tiziano_gib_deir_r_h;
    break;
  case 1:
    iVar8 = 0xc0000;
    pcVar5 = tiziano_gib_deir_interpolate;
    uVar6 = DAT_000a9af8;
    uVar7 = DAT_000a9af4;
    tiziano_gib_deir_interpolate
              (gib_deir_r_31816,param_1,DAT_000a9af8,DAT_000a9af4,tiziano_gib_deir_r_h,
               tiziano_gib_deir_r_m);
    iVar9 = 0xc0000;
    (*pcVar5)(gib_deir_g_31817,param_1,uVar6,uVar7,tiziano_gib_deir_g_h,tiziano_gib_deir_g_m);
    iVar4 = 0xc0000;
    (*pcVar5)(gib_deir_b_31818,param_1,uVar6,uVar7,tiziano_gib_deir_b_h,tiziano_gib_deir_b_m);
    puVar3 = (char *)(iVar4 + -0x4508);
    puVar2 = (char *)(iVar9 + -0x4484);
    puVar1 = (char *)(iVar8 + -0x4400);
    break;
  case 2:
    puVar3 = tiziano_gib_deir_b_m;
    puVar2 = tiziano_gib_deir_g_m;
    puVar1 = tiziano_gib_deir_r_m;
    break;
  case 3:
    iVar8 = 0xc0000;
    pcVar5 = tiziano_gib_deir_interpolate;
    uVar6 = DAT_000a9af0;
    uVar7 = gib_ir_point;
    tiziano_gib_deir_interpolate
              (gib_deir_r_31816,param_1,DAT_000a9af0,gib_ir_point,tiziano_gib_deir_r_m,
               tiziano_gib_deir_r_l);
    iVar9 = 0xc0000;
    (*pcVar5)(gib_deir_g_31817,param_1,uVar6,uVar7,tiziano_gib_deir_g_m,tiziano_gib_deir_g_l);
    iVar4 = 0xc0000;
    (*pcVar5)(gib_deir_b_31818,param_1,uVar6,uVar7,tiziano_gib_deir_b_m,tiziano_gib_deir_b_l);
    puVar3 = (char *)(iVar4 + -0x4508);
    puVar2 = (char *)(iVar9 + -0x4484);
    puVar1 = (char *)(iVar8 + -0x4400);
    break;
  case 4:
    puVar3 = tiziano_gib_deir_b_l;
    puVar2 = tiziano_gib_deir_g_l;
    puVar1 = tiziano_gib_deir_r_l;
  }
                    // WARNING: Could not recover jumptable at 0x00031f38. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)(puVar1,puVar2,puVar3);
  return;
}



int tisp_gib_deir_ir_update(unsigned int param_1)

{
  unsigned int uVar1;
  
  gib_ir_value = param_1;
  if ((DAT_000a9bdc == 1) && (gib_ir_mode == 1)) {
    uVar1 = param_1 - DAT_000a9b00;
    if (param_1 <= DAT_000a9b00) {
      uVar1 = DAT_000a9b00 - param_1;
    }
    if ((DAT_000a9b08 < uVar1) || (trig_set_deir == 1)) {
      trig_set_deir = 0;
      tiziano_gib_deir_ir_interpolation();
      DAT_000a9b00 = gib_ir_value;
    }
  }
  return 0;
}



int tiziano_gib_init(void)

{
  tiziano_gib_params_refresh();
  if (deir_en == 1) {
    if (day_night == 0) {
      DAT_000a9bdc = deir_en;
    }
    else {
      DAT_000a9bdc = 0;
    }
  }
  else {
    DAT_000a9bdc = 0;
  }
  tiziano_gib_lut_parameter();
  tiziano_gib_deir_reg(tiziano_gib_deir_r_m,tiziano_gib_deir_g_m,tiziano_gib_deir_b_m);
  return 0;
}



int tisp_gib_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x3e:
    __src = (char *)&tiziano_gib_config_line;
    __n = 0x30;
    goto LAB_00032208;
  case 0x3f:
    __src = (char *)&tiziano_gib_r_g_linear;
    goto LAB_00032204;
  case 0x40:
    __src = (char *)&tiziano_gib_b_ir_linear;
LAB_00032204:
    __n = 8;
    goto LAB_00032208;
  case 0x41:
    __src = tiziano_gib_deirm_blc_r_linear;
    goto LAB_000320dc;
  case 0x42:
    __src = tiziano_gib_deirm_blc_gr_linear;
    goto LAB_000320dc;
  case 0x43:
    __src = tiziano_gib_deirm_blc_gb_linear;
    goto LAB_000320dc;
  case 0x44:
    __src = tiziano_gib_deirm_blc_b_linear;
    goto LAB_000320dc;
  case 0x45:
    __src = tiziano_gib_deirm_blc_ir_linear;
LAB_000320dc:
    __n = 0x24;
    goto LAB_00032208;
  case 0x46:
    __src = (char *)&gib_ir_point;
    __n = 0x10;
    goto LAB_00032208;
  case 0x47:
    __src = gib_ir_reser;
    goto LAB_000321b4;
  case 0x48:
    __src = tiziano_gib_deir_r_h;
    break;
  case 0x49:
    __src = tiziano_gib_deir_g_h;
    break;
  case 0x4a:
    __src = tiziano_gib_deir_b_h;
    break;
  case 0x4b:
    __src = tiziano_gib_deir_r_m;
    break;
  case 0x4c:
    __src = tiziano_gib_deir_g_m;
    break;
  case 0x4d:
    __src = tiziano_gib_deir_b_m;
    break;
  case 0x4e:
    __src = tiziano_gib_deir_r_l;
    break;
  case 0x4f:
    __src = tiziano_gib_deir_g_l;
    break;
  case 0x50:
    __src = tiziano_gib_deir_b_l;
    break;
  case 0x51:
    __src = tiziano_gib_deir_matrix_h;
    goto LAB_000321b4;
  case 0x52:
    __src = tiziano_gib_deir_matrix_m;
    goto LAB_000321b4;
  case 0x53:
    __src = tiziano_gib_deir_matrix_l;
LAB_000321b4:
    __n = 0x3c;
    goto LAB_00032208;
  default:
    isp_printf(2,"%s,%d: gib not support param id %d\n","tisp_gib_param_array_get",0x221,param_1);
    return 0xffffffff;
  }
  __n = 0x84;
LAB_00032208:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_gib_param_array_set(int param_1,void *param_2,int *param_3)

{
  int *__dest;
  char *puVar1;
  int uVar2;
  
  switch(param_1) {
  case 0x3e:
    memcpy(&tiziano_gib_config_line,param_2,0x30);
    uVar2 = 0x30;
    goto LAB_0003244c;
  case 0x3f:
    __dest = &tiziano_gib_r_g_linear;
    goto LAB_000322ac;
  case 0x40:
    __dest = &tiziano_gib_b_ir_linear;
LAB_000322ac:
    uVar2 = 8;
    memcpy(__dest,param_2,8);
    goto LAB_0003244c;
  case 0x41:
    puVar1 = tiziano_gib_deirm_blc_r_linear;
    goto LAB_000322d8;
  case 0x42:
    puVar1 = tiziano_gib_deirm_blc_gr_linear;
    goto LAB_000322d8;
  case 0x43:
    puVar1 = tiziano_gib_deirm_blc_gb_linear;
    goto LAB_000322d8;
  case 0x44:
    puVar1 = tiziano_gib_deirm_blc_b_linear;
    goto LAB_000322d8;
  case 0x45:
    puVar1 = tiziano_gib_deirm_blc_ir_linear;
LAB_000322d8:
    uVar2 = 0x24;
    memcpy(puVar1,param_2,0x24);
    goto LAB_0003244c;
  case 0x46:
    memcpy(&gib_ir_point,param_2,0x10);
    uVar2 = 0x10;
    goto LAB_0003244c;
  case 0x47:
    puVar1 = gib_ir_reser;
    goto LAB_00032408;
  case 0x48:
    puVar1 = tiziano_gib_deir_r_h;
    break;
  case 0x49:
    puVar1 = tiziano_gib_deir_g_h;
    break;
  case 0x4a:
    puVar1 = tiziano_gib_deir_b_h;
    break;
  case 0x4b:
    puVar1 = tiziano_gib_deir_r_m;
    break;
  case 0x4c:
    puVar1 = tiziano_gib_deir_g_m;
    break;
  case 0x4d:
    puVar1 = tiziano_gib_deir_b_m;
    break;
  case 0x4e:
    puVar1 = tiziano_gib_deir_r_l;
    break;
  case 0x4f:
    puVar1 = tiziano_gib_deir_g_l;
    break;
  case 0x50:
    puVar1 = tiziano_gib_deir_b_l;
    break;
  case 0x51:
    puVar1 = tiziano_gib_deir_matrix_h;
    goto LAB_00032408;
  case 0x52:
    puVar1 = tiziano_gib_deir_matrix_m;
    goto LAB_00032408;
  case 0x53:
    puVar1 = tiziano_gib_deir_matrix_l;
LAB_00032408:
    uVar2 = 0x3c;
    memcpy(puVar1,param_2,0x3c);
    goto LAB_0003244c;
  default:
    isp_printf(2,"%s,%d: gib not support param id %d\n","tisp_gib_param_array_set",0x2a0,param_1);
    return 0xffffffff;
  }
  uVar2 = 0x84;
  memcpy(puVar1,param_2,0x84);
LAB_0003244c:
  tiziano_gib_lut_parameter();
  trig_set_deir = 1;
  *param_3 = uVar2;
  return 0;
}



void system_reg_write_gb(int param_1,int param_2,int param_3)

{
  if (param_1 == 1) {
    system_reg_write(0x1070,1);
  }
  system_reg_write(param_2,param_3);
  return;
}



int tisp_gb_blc_again_interp(unsigned int param_1,int param_2)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int iVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  int uVar12;
  int uVar13;
  int uVar14;
  
  uVar11 = param_1 & 0xffff;
  uVar9 = param_1 >> 0x10;
  uVar1 = tisp_simple_intp(uVar9,uVar11,tisp_gb_blc_r);
  uVar2 = tisp_simple_intp(uVar9,uVar11,tisp_gb_blc_gr);
  uVar3 = tisp_simple_intp(uVar9,uVar11,tisp_gb_blc_gb);
  uVar4 = tisp_simple_intp(uVar9,uVar11,tisp_gb_blc_b);
  uVar5 = tisp_simple_intp(uVar9,uVar11,tisp_gb_blc_ir);
  iVar6 = tisp_simple_intp(uVar9,uVar11,tisp_gb_blc_min);
  uVar9 = param_1;
  if ((param_2 == 0) || (uVar9 = tisp_gb_blc_ag, param_2 != 1)) {
    tisp_gb_blc_ag = uVar9;
    uVar12 = 0x1020;
    uVar13 = 0x101c;
    uVar14 = 0x1018;
  }
  else {
    uVar12 = 0x102c;
    uVar13 = 0x1028;
    uVar14 = 0x1024;
    DAT_000bbca4 = param_1;
  }
  uVar7 = system_reg_read(8);
  uVar9 = uVar1;
  uVar11 = uVar1;
  uVar8 = uVar1;
  uVar10 = uVar1;
  switch(uVar7 & 0x1f) {
  case 0:
    uVar9 = uVar3;
    uVar8 = uVar4;
    uVar10 = uVar2;
    break;
  case 1:
    uVar9 = uVar2;
    uVar11 = uVar4;
    uVar10 = uVar3;
    break;
  case 2:
    uVar9 = uVar4;
    uVar11 = uVar2;
    uVar8 = uVar3;
    break;
  case 3:
    uVar11 = uVar3;
    uVar8 = uVar2;
    uVar10 = uVar4;
    break;
  default:
    isp_printf(2,"blc byper error!!!\n");
    uVar9 = 0;
    uVar11 = 0;
    uVar8 = 0;
    uVar10 = 0;
    uVar5 = 0;
    break;
  case 8:
    uVar9 = uVar5;
    uVar8 = uVar4;
    uVar10 = uVar2;
    uVar5 = uVar3;
    break;
  case 9:
    uVar9 = uVar5;
    uVar11 = uVar4;
    uVar10 = uVar3;
    uVar5 = uVar2;
    break;
  case 10:
    uVar9 = uVar3;
    uVar8 = uVar4;
    uVar10 = uVar5;
    uVar5 = uVar2;
    break;
  case 0xb:
    uVar9 = uVar2;
    uVar11 = uVar4;
    uVar10 = uVar5;
    uVar5 = uVar3;
    break;
  case 0xc:
    uVar9 = uVar4;
    uVar11 = uVar2;
    uVar8 = uVar5;
    uVar5 = uVar3;
    break;
  case 0xd:
    uVar11 = uVar3;
    uVar8 = uVar5;
    uVar10 = uVar4;
    uVar5 = uVar2;
    break;
  case 0xe:
    uVar9 = uVar4;
    uVar11 = uVar5;
    uVar8 = uVar3;
    uVar5 = uVar2;
    break;
  case 0xf:
    uVar11 = uVar5;
    uVar8 = uVar2;
    uVar10 = uVar4;
    uVar5 = uVar3;
    break;
  case 0x10:
    uVar9 = uVar3;
    uVar8 = uVar5;
    uVar10 = uVar2;
    uVar5 = uVar4;
    break;
  case 0x11:
    uVar9 = uVar2;
    uVar11 = uVar4;
    uVar8 = uVar5;
    uVar10 = uVar3;
    uVar5 = uVar1;
    break;
  case 0x12:
    uVar9 = uVar5;
    uVar11 = uVar2;
    uVar8 = uVar3;
    uVar5 = uVar4;
    break;
  case 0x13:
    uVar9 = uVar5;
    uVar11 = uVar3;
    uVar8 = uVar2;
    uVar10 = uVar4;
    uVar5 = uVar1;
    break;
  case 0x14:
    uVar11 = uVar3;
    uVar8 = uVar2;
    uVar10 = uVar5;
    uVar5 = uVar4;
    break;
  case 0x15:
    uVar9 = uVar4;
    uVar11 = uVar2;
    uVar8 = uVar3;
    uVar10 = uVar5;
    uVar5 = uVar1;
    break;
  case 0x16:
    uVar9 = uVar2;
    uVar11 = uVar5;
    uVar10 = uVar3;
    uVar5 = uVar4;
    break;
  case 0x17:
    uVar9 = uVar3;
    uVar11 = uVar5;
    uVar8 = uVar4;
    uVar10 = uVar2;
    uVar5 = uVar1;
  }
  system_reg_write(0x1014,DAT_000bbcd0 << 0x10 | tisp_gb_blc_min_en);
  system_reg_write(uVar14,uVar10 << 0x10 | uVar11);
  system_reg_write(uVar13,uVar8 << 0x10 | uVar9);
  system_reg_write(uVar12,iVar6 << 0x10 | uVar5);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_gb_init_reg(void)

{
  system_reg_write_gb(1,0x1008,_DAT_000bbcd8 << 2 | tisp_gb_dgain_shift);
  if (init_31768 == 0) {
    system_reg_write_gb(1,0x1000,_DAT_000a9cc8 << 0x10 | tisp_gb_dgain_rgbir_l);
    system_reg_write_gb(1,0x1004,DAT_000a9cd0 << 0x10 | DAT_000a9ccc);
    system_reg_write_gb(1,0x100c,_DAT_000a9cb8 << 0x10 | tisp_gb_dgain_rgbir_s);
    system_reg_write_gb(1,0x1010,DAT_000a9cc0 << 0x10 | DAT_000a9cbc);
  }
  tisp_gb_blc_again_interp(tisp_gb_blc_ag,0);
  tisp_gb_blc_again_interp(DAT_000bbca4,1);
  init_31768 = 1;
  return 0;
}



int tisp_gb_params_refresh(void)

{
  memcpy(&tisp_gb_dgain_shift,&DAT_000a6bfc,8);
  memcpy(&tisp_gb_dgain_rgbir_l,&DAT_000a6c04,0x10);
  memcpy(&tisp_gb_dgain_rgbir_s,&DAT_000a6c14,0x10);
  memcpy(tisp_gb_blc_r,&DAT_000a6c24,0x24);
  memcpy(tisp_gb_blc_gr,&DAT_000a6c48,0x24);
  memcpy(tisp_gb_blc_gb,&DAT_000a6c6c,0x24);
  memcpy(tisp_gb_blc_b,&DAT_000a6c90,0x24);
  memcpy(tisp_gb_blc_ir,&DAT_000a6cb4,0x24);
  memcpy(&tisp_gb_blc_min_en,&DAT_000a6cd8,8);
  memcpy(tisp_gb_blc_min,&DAT_000a6ce0,0x24);
  return 0;
}



int tisp_gb_dn_params_refresh(void)

{
  tisp_gb_params_refresh();
  tisp_gb_init_reg();
  return 0;
}



int tisp_gb_init(void)

{
  tisp_gb_params_refresh();
  tisp_gb_init_reg();
  return 0;
}



int tisp_gb_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x3f5:
    __src = (char *)&tisp_gb_dgain_shift;
    goto LAB_00032bf0;
  case 0x3f6:
    __src = (char *)&tisp_gb_dgain_rgbir_l;
    goto LAB_00032c00;
  case 0x3f7:
    __src = (char *)&tisp_gb_dgain_rgbir_s;
LAB_00032c00:
    __n = 0x10;
    goto LAB_00032c04;
  case 0x3f8:
    __src = tisp_gb_blc_r;
    break;
  case 0x3f9:
    __src = tisp_gb_blc_gr;
    break;
  case 0x3fa:
    __src = tisp_gb_blc_gb;
    break;
  case 0x3fb:
    __src = tisp_gb_blc_b;
    break;
  case 0x3fc:
    __src = tisp_gb_blc_ir;
    break;
  case 0x3fd:
    __src = (char *)&tisp_gb_blc_min_en;
LAB_00032bf0:
    __n = 8;
    goto LAB_00032c04;
  case 0x3fe:
    __src = tisp_gb_blc_min;
    break;
  default:
    isp_printf(2,"%s,%d: gb not support param id %d\n","tisp_gb_param_array_get",0x110,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_00032c04:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_gb_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  char *__dest;
  int *puVar2;
  
  switch(param_1) {
  case 0x3f5:
    puVar2 = &tisp_gb_dgain_shift;
    goto LAB_00032d10;
  case 0x3f6:
    puVar2 = &tisp_gb_dgain_rgbir_l;
    goto LAB_00032c98;
  case 0x3f7:
    puVar2 = &tisp_gb_dgain_rgbir_s;
LAB_00032c98:
    memcpy(puVar2,param_2,0x10);
    uVar1 = 0x10;
    goto LAB_00032d78;
  case 0x3f8:
    __dest = tisp_gb_blc_r;
    break;
  case 0x3f9:
    __dest = tisp_gb_blc_gr;
    break;
  case 0x3fa:
    __dest = tisp_gb_blc_gb;
    break;
  case 0x3fb:
    __dest = tisp_gb_blc_b;
    break;
  case 0x3fc:
    __dest = tisp_gb_blc_ir;
    break;
  case 0x3fd:
    puVar2 = &tisp_gb_blc_min_en;
LAB_00032d10:
    memcpy(puVar2,param_2,8);
    uVar1 = 8;
    goto LAB_00032d78;
  case 0x3fe:
    memcpy(tisp_gb_blc_min,param_2,0x24);
    tisp_gb_init_reg();
    uVar1 = 0x24;
    goto LAB_00032d78;
  default:
    isp_printf(2,"%s,%d: gb not support param id %d\n","tisp_gb_param_array_set",0x154,param_1);
    return 0xffffffff;
  }
  memcpy(__dest,param_2,0x24);
  uVar1 = 0x24;
LAB_00032d78:
  *param_3 = uVar1;
  return 0;
}



void tisp_lsc_wdr_en(int param_1)

{
  char *puVar1;
  
  lsc_wdr_en = param_1;
  if (param_1 == 0) {
    puVar1 = lsc_mesh_str;
  }
  else {
    puVar1 = lsc_mesh_str_wdr;
  }
  lsc_mesh_str_now = puVar1;
  lsc_force_update_flag = 1;
  return;
}



int tisp_lsc_ct_update(int param_1)

{
  lsc_ct_curr = param_1;
  return 0;
}



int tisp_lsc_gain_update(int param_1)

{
  lsc_gain_curr = param_1;
  return 0;
}



int tiziano_lsc_params_refresh(void)

{
  memcpy(&lsc_lut_num,&DAT_000974e0,4);
  memcpy(&lsc_mesh_scale,&DAT_000974e4,4);
  memcpy(&lsc_lut_stride,&DAT_000974e8,4);
  memcpy(&lsc_mesh_size,&DAT_000974ec,8);
  memcpy(&lsc_ct_points,&DAT_000974f4,0x10);
  memcpy(&lsc_a_lut,&DAT_00097504,0x1ffc);
  memcpy(&lsc_t_lut,&DAT_00099500,0x1ffc);
  memcpy(&lsc_d_lut,&DAT_0009b4fc,0x1ffc);
  memcpy(lsc_mesh_str,&DAT_0009d4f8,0x24);
  memcpy(lsc_mesh_str_wdr,&DAT_0009d51c,0x24);
  memcpy(&lsc_mean_en,&DAT_0009d540,4);
  return 0;
}



int tiziano_lsc_dn_params_refresh(void)

{
  tiziano_lsc_params_refresh();
  lsc_force_update_flag = 1;
  return 0;
}



int tisp_lsc_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x54:
    __src = (char *)&lsc_lut_num;
    break;
  case 0x55:
    __src = (char *)&lsc_mesh_scale;
    break;
  case 0x56:
    __src = (char *)&lsc_lut_stride;
    break;
  case 0x57:
    __src = (char *)&lsc_mesh_size;
    __n = 8;
    goto LAB_00033050;
  case 0x58:
    __src = (char *)&lsc_ct_points;
    __n = 0x10;
    goto LAB_00033050;
  case 0x59:
    __src = (char *)&lsc_a_lut;
    goto LAB_00032fd8;
  case 0x5a:
    __src = (char *)&lsc_t_lut;
    goto LAB_00032fd8;
  case 0x5b:
    __src = (char *)&lsc_d_lut;
LAB_00032fd8:
    __n = 0x1ffc;
    goto LAB_00033050;
  case 0x5c:
    __src = lsc_mesh_str;
    goto LAB_00032ff4;
  case 0x5d:
    __src = lsc_mesh_str_wdr;
LAB_00032ff4:
    __n = 0x24;
    goto LAB_00033050;
  case 0x5e:
    __src = (char *)&lsc_mean_en;
    break;
  default:
    isp_printf(2,"%s,%d: lsc not support param id %d\n","tisp_lsc_param_array_get",0xf6,param_1);
    return 0xffffffff;
  }
  __n = 4;
LAB_00033050:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_lsc_judge_ct_update_flag(void)

{
  bool bVar1;
  
  if (lsc_ct_update_flag != '\x01') {
    if (lsc_ct_points < lsc_ct_curr) {
      if (DAT_000a9cf4 < lsc_ct_curr) {
        if (DAT_000a9cf8 < lsc_ct_curr) {
          if (DAT_000a9cfc < lsc_ct_curr) {
            lsc_ct_part_curr = 4;
          }
          else {
            lsc_ct_part_curr = 3;
          }
        }
        else {
          lsc_ct_part_curr = 2;
        }
      }
      else {
        lsc_ct_part_curr = 1;
      }
    }
    else {
      lsc_ct_part_curr = 0;
    }
    if (lsc_ct_part_curr != lsc_ct_part_last) {
      lsc_ct_part_last = lsc_ct_part_curr;
      lsc_ct_last = lsc_ct_curr;
      return 1;
    }
    if ((lsc_ct_part_curr & 1) == 0) {
      lsc_ct_last = lsc_ct_curr;
    }
    else {
      if (lsc_ct_last < lsc_ct_curr) {
        bVar1 = lsc_ct_curr < lsc_ct_last + 0x1e;
      }
      else {
        bVar1 = lsc_ct_last < lsc_ct_curr + 0x1e;
      }
      if (!bVar1) {
        lsc_ct_last = lsc_ct_curr;
        return 1;
      }
    }
  }
  return 0;
}



bool tisp_lsc_judge_gain_update_flag(void)

{
  bool bVar1;
  
  if (lsc_gain_update_flag == '\x01') {
    return false;
  }
  lsc_curr_str = tisp_simple_intp(lsc_gain_curr >> 0x10,lsc_gain_curr & 0xffff,lsc_mesh_str_now);
  bVar1 = lsc_curr_str != lsc_last_str;
  if (bVar1) {
    lsc_last_str = lsc_curr_str;
  }
  return bVar1;
}



// WARNING: Restarted to delay deadcode elimination for space: ram

int tisp_lsc_write_lut_datas(void)

{
  int iVar1;
  int iVar2;
  int *__src;
  unsigned int uVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  int iVar7;
  int iVar8;
  unsigned int *puVar9;
  int iVar10;
  
  lsc_count = lsc_count + 1;
  if (lsc_api_flag == '\0') {
    lsc_ct_update_flag = tisp_lsc_judge_ct_update_flag();
    lsc_gain_update_flag = tisp_lsc_judge_gain_update_flag();
  }
  if (((lsc_ct_update_flag == '\x01') || (lsc_force_update_flag == '\x01')) ||
     (lsc_api_flag == '\x01')) {
    if (lsc_ct_part_curr == 0) {
      __src = &lsc_a_lut;
    }
    else {
      if (lsc_ct_part_curr == 1) {
        uVar6 = (uint)((lsc_ct_curr - lsc_ct_points) * 0x1000) /
                (uint)(DAT_000a9cf4 - lsc_ct_points);
        iVar10 = lsc_lut_num << 2;
        for (iVar7 = 0; iVar10 != iVar7; iVar7 = iVar7 + 4) {
          iVar1 = (int)*(unsigned int *)((int)&lsc_a_lut + iVar7) >> 0xc;
          uVar5 = *(unsigned int *)((int)&lsc_a_lut + iVar7) & 0xfff;
          iVar1 = ((int)((((int)*(unsigned int *)((int)&lsc_t_lut + iVar7) >> 0xc) - iVar1) * uVar6) >> 0xc)
                  + iVar1;
          uVar5 = ((int)(((*(unsigned int *)((int)&lsc_t_lut + iVar7) & 0xfff) - uVar5) * uVar6) >> 0xc) +
                  uVar5;
          if (iVar1 < 0) {
            iVar1 = 0;
          }
          if ((int)uVar5 < 0) {
            uVar5 = 0;
          }
          if (0xfff < iVar1) {
            iVar1 = 0xfff;
          }
          if (0xfff < (int)uVar5) {
            uVar5 = 0xfff;
          }
          *(unsigned int *)((int)&lsc_final_lut + iVar7) = iVar1 << 0xc | uVar5;
        }
        goto LAB_00033480;
      }
      if (lsc_ct_part_curr == 2) {
        __src = &lsc_t_lut;
      }
      else {
        if (lsc_ct_part_curr == 3) {
          uVar6 = (uint)((lsc_ct_curr - DAT_000a9cf8) * 0x1000) /
                  (uint)(DAT_000a9cfc - DAT_000a9cf8);
          iVar10 = lsc_lut_num << 2;
          for (iVar7 = 0; iVar7 != iVar10; iVar7 = iVar7 + 4) {
            iVar1 = (int)*(unsigned int *)((int)&lsc_t_lut + iVar7) >> 0xc;
            uVar5 = *(unsigned int *)((int)&lsc_t_lut + iVar7) & 0xfff;
            iVar1 = ((int)((((int)*(unsigned int *)((int)&lsc_d_lut + iVar7) >> 0xc) - iVar1) * uVar6) >>
                    0xc) + iVar1;
            uVar5 = ((int)(((*(unsigned int *)((int)&lsc_d_lut + iVar7) & 0xfff) - uVar5) * uVar6) >> 0xc) +
                    uVar5;
            if (iVar1 < 0) {
              iVar1 = 0;
            }
            if ((int)uVar5 < 0) {
              uVar5 = 0;
            }
            if (0xfff < iVar1) {
              iVar1 = 0xfff;
            }
            if (0xfff < (int)uVar5) {
              uVar5 = 0xfff;
            }
            *(unsigned int *)((int)&lsc_final_lut + iVar7) = iVar1 << 0xc | uVar5;
          }
          goto LAB_00033480;
        }
        __src = &lsc_d_lut;
      }
    }
    memcpy(&lsc_final_lut,__src,0x1ffc);
  }
LAB_00033480:
  iVar7 = 0x800;
  if (((lsc_mesh_scale != 0) && (iVar7 = 0x400, lsc_mesh_scale != 1)) &&
     (iVar7 = 0x100, lsc_mesh_scale == 2)) {
    iVar7 = 0x200;
  }
  if (((lsc_gain_update_flag == '\x01') || (lsc_ct_update_flag == '\x01')) ||
     ((lsc_force_update_flag == '\x01' || (lsc_api_flag == '\x01')))) {
    puVar9 = &lsc_final_lut;
    for (iVar10 = 0; (uint)(iVar10 * 3) < lsc_lut_num; iVar10 = iVar10 + 1) {
      uVar6 = iVar7 + ((int)(((*puVar9 & 0xfff) - iVar7) * lsc_curr_str) >> 0xc);
      iVar4 = iVar7 + ((int)(((*puVar9 >> 0xc) - iVar7) * lsc_curr_str) >> 0xc);
      iVar1 = iVar7 + ((int)(((puVar9[2] >> 0xc) - iVar7) * lsc_curr_str) >> 0xc);
      if ((int)uVar6 < 0) {
        uVar6 = 0;
      }
      uVar5 = iVar7 + ((int)(((puVar9[1] & 0xfff) - iVar7) * lsc_curr_str) >> 0xc);
      if (iVar1 < 0) {
        iVar1 = 0;
      }
      if (iVar4 < 0) {
        iVar4 = 0;
      }
      uVar3 = iVar7 + ((int)(((puVar9[2] & 0xfff) - iVar7) * lsc_curr_str) >> 0xc);
      if ((int)uVar5 < 0) {
        uVar5 = 0;
      }
      iVar2 = iVar7 + ((int)(((puVar9[1] >> 0xc) - iVar7) * lsc_curr_str) >> 0xc);
      if ((int)uVar3 < 0) {
        uVar3 = 0;
      }
      if (0xfff < iVar4) {
        iVar4 = 0xfff;
      }
      if (0xfff < (int)uVar6) {
        uVar6 = 0xfff;
      }
      if (iVar2 < 0) {
        iVar2 = 0;
      }
      iVar8 = iVar10 * 0x10;
      system_reg_write(iVar8 + 0x28000,iVar4 << 0xc | uVar6);
      if (0xfff < iVar2) {
        iVar2 = 0xfff;
      }
      if (0xfff < (int)uVar5) {
        uVar5 = 0xfff;
      }
      system_reg_write(iVar8 + 0x28004,iVar2 << 0xc | uVar5);
      if (0xfff < iVar1) {
        iVar1 = 0xfff;
      }
      uVar6 = 0xfff;
      if ((int)uVar3 < 0x1000) {
        uVar6 = uVar3;
      }
      system_reg_write(iVar8 + 0x28008,iVar1 << 0xc | uVar6);
      puVar9 = puVar9 + 3;
    }
    system_reg_write(0x2800c,0);
  }
  if (lsc_api_flag == '\0') {
    lsc_ct_update_flag = '\0';
    lsc_gain_update_flag = '\0';
    lsc_force_update_flag = '\0';
  }
  return 0;
}



int tiziano_lsc_init(void)

{
  char *puVar1;
  
  if (lsc_wdr_en == 0) {
    puVar1 = lsc_mesh_str;
  }
  else {
    puVar1 = lsc_mesh_str_wdr;
  }
  lsc_mesh_str_now = puVar1;
  tiziano_lsc_params_refresh();
  system_reg_write(0x3800,DAT_000c3d40 << 0x10 | lsc_mesh_size);
  system_reg_write(0x3804,lsc_lut_stride << 0x10 | lsc_mean_en << 0xf | lsc_mesh_scale);
  lsc_ct_part_last = 5;
  lsc_last_str = 0;
  lsc_force_update_flag = 1;
  tisp_lsc_write_lut_datas();
  return 0;
}



int tisp_lsc_param_array_set(int param_1,void *param_2,size_t *param_3)

{
  size_t __n;
  char *__dest;
  
  if (10 < param_1 - 0x54U) {
    isp_printf(2,"%s,%d: lsc not support param id %d\n","tisp_lsc_param_array_set",0x133,param_1);
    return 0xffffffff;
  }
  __dest = (char *)&lsc_mesh_size;
  switch(param_1) {
  case 0x54:
    __dest = (char *)&lsc_lut_num;
    break;
  case 0x55:
    __dest = (char *)&lsc_mesh_scale;
    break;
  case 0x56:
    __dest = (char *)&lsc_lut_stride;
    break;
  case 0x57:
    __n = 8;
    goto LAB_000338d8;
  case 0x58:
    __dest = (char *)&lsc_ct_points;
    __n = 0x10;
    goto LAB_000338d8;
  case 0x59:
    __dest = (char *)&lsc_a_lut;
    goto LAB_00033868;
  case 0x5a:
    __dest = (char *)&lsc_t_lut;
    goto LAB_00033868;
  case 0x5b:
    __dest = (char *)&lsc_d_lut;
LAB_00033868:
    __n = 0x1ffc;
    goto LAB_000338d8;
  case 0x5c:
    __dest = lsc_mesh_str;
    goto LAB_00033884;
  case 0x5d:
    __dest = lsc_mesh_str_wdr;
LAB_00033884:
    __n = 0x24;
    goto LAB_000338d8;
  case 0x5e:
    __dest = (char *)&lsc_mean_en;
  }
  __n = 4;
LAB_000338d8:
  memcpy(__dest,param_2,__n);
  system_reg_write(0x3800,DAT_000c3d40 << 0x10 | lsc_mesh_size);
  system_reg_write(0x3804,lsc_lut_stride << 0x10 | lsc_mean_en << 0xf | lsc_mesh_scale);
  lsc_ct_part_last = 5;
  lsc_last_str = 0;
  lsc_force_update_flag = 1;
  *param_3 = __n;
  tisp_lsc_write_lut_datas();
  return 0;
}



int tisp_lsc_upside_down_lut(void *param_1,int param_2,int param_3)

{
  void *__s;
  int iVar1;
  void *__src;
  size_t __n;
  int iVar2;
  int iVar3;
  
  __n = param_3 * 6;
  __s = (void *)private_vmalloc(__n);
  memset(__s,0,__n);
  iVar3 = (param_3 * 3) / 2;
  iVar1 = iVar3 * 4;
  __src = (void *)((param_2 + 0x3fffffff) * iVar1 + (int)param_1);
  for (iVar2 = 0; iVar2 != param_2 >> 1; iVar2 = iVar2 + 1) {
    memcpy(__s,param_1,__n);
    memmove(param_1,__src,__n);
    memcpy(__src,__s,__n);
    param_1 = (void *)((int)param_1 + iVar1);
    __src = (void *)((int)__src + iVar3 * -4);
  }
  private_vfree(__s);
  return 0;
}



void tisp_lsc_lut_mirror_exchange(int param_1,int param_2,int param_3,int param_4,int param_5)

{
  unsigned int uVar1;
  unsigned int *puVar2;
  unsigned int *puVar3;
  unsigned int uVar4;
  
  puVar3 = (unsigned int *)(param_1 + param_2 * 4);
  puVar2 = (unsigned int *)(param_1 + param_3 * 4);
  uVar4 = *puVar2;
  uVar1 = *puVar3;
  *puVar3 = ((uVar4 >> (param_5 * 0xc & 0x1fU) & 0xfff) << (param_4 * 0xc & 0x1fU) |
            0xfff << ((1 - param_4) * 0xc & 0x1fU) & uVar1) & 0xffffff;
  *puVar2 = ((uVar1 >> (param_4 * 0xc & 0x1fU) & 0xfff) << (param_5 * 0xc & 0x1fU) |
            0xfff << ((1 - param_5) * 0xc & 0x1fU) & uVar4) & 0xffffff;
  return;
}



int tisp_lsc_mirror_flip(int param_1,int param_2,int param_3,int param_4)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  code *pcVar8;
  unsigned int uVar9;
  int iVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  unsigned int uVar15;
  unsigned int uVar16;
  int iVar17;
  
  iVar10 = param_2 / DAT_000c3d40 + 1 + (uint)(0 < param_2 % DAT_000c3d40);
  uVar9 = param_1 / lsc_mesh_size + 1 + (uint)(0 < param_1 % lsc_mesh_size);
  iVar11 = (uVar9 & 1) + uVar9;
  if (param_3 == 1) {
    tisp_lsc_upside_down_lut(&lsc_a_lut,iVar10,iVar11);
    tisp_lsc_upside_down_lut(&lsc_t_lut,iVar10,iVar11);
    tisp_lsc_upside_down_lut(&lsc_d_lut,iVar10,iVar11);
  }
  if (param_4 == 1) {
    iVar3 = 0;
    for (iVar4 = 0; iVar4 < iVar10; iVar4 = iVar4 + 1) {
      uVar1 = 0;
      uVar2 = uVar9;
      while( true ) {
        uVar2 = uVar2 - 1;
        if ((int)uVar9 >> 1 <= (int)uVar1) break;
        uVar15 = uVar1 & 1;
        uVar16 = uVar2 & 1;
        pcVar8 = tisp_lsc_lut_mirror_exchange;
        iVar5 = ((int)(uVar1 + iVar3) / 2) * 3;
        iVar12 = iVar5 + 1;
        iVar14 = iVar5 + 2;
        iVar7 = ((int)(uVar2 + iVar3) / 2) * 3;
        iVar13 = iVar7 + 1;
        iVar17 = iVar7 + 2;
        tisp_lsc_lut_mirror_exchange(&lsc_a_lut,iVar5,iVar7,uVar15,uVar16);
        (*pcVar8)(&lsc_a_lut,iVar14,iVar17,uVar15,uVar16);
        (*pcVar8)(&lsc_a_lut,iVar12,iVar13,uVar15,uVar16);
        (*pcVar8)(&lsc_t_lut,iVar5,iVar7,uVar15,uVar16);
        (*pcVar8)(&lsc_t_lut,iVar14,iVar17,uVar15,uVar16);
        (*pcVar8)(&lsc_t_lut,iVar12,iVar13,uVar15,uVar16);
        iVar6 = 0xc0000;
        (*pcVar8)(&lsc_d_lut,iVar5,iVar7,uVar15,uVar16);
        (*pcVar8)(iVar6 + -0x22b8,iVar14,iVar17,uVar15,uVar16);
        (*pcVar8)(iVar6 + -0x22b8,iVar12,iVar13,uVar15,uVar16);
        uVar1 = uVar1 + 1;
      }
      iVar3 = iVar3 + iVar11;
    }
  }
  lsc_api_flag = 1;
  lsc_force_update_flag = 1;
  tisp_lsc_write_lut_datas();
  lsc_api_flag = 0;
  return 0;
}



int tisp_dmsc_out_opt_cfg(void)

{
  system_reg_write(0x4800,dmsc_out_opt);
  return 0;
}



int tisp_dmsc_uu_par_cfg(void)

{
  system_reg_write(0x4808,dmsc_uu_thres_intp << 0x10 | dmsc_uu_stren_intp);
  system_reg_write(0x4804,dmsc_uu_par_array << 0x1f | DAT_000c44fc << 10 | DAT_000c4504 |
                          DAT_000c4500 << 8);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_alias_par_cfg(void)

{
  system_reg_write(0x480c,(dmsc_alias_dir_thres_intp - _DAT_000c4464) * 0x10000 |
                          dmsc_alias_dir_thres_intp);
  system_reg_write(0x4834,dmsc_alias_stren_intp << 0x12 | dmsc_alias_par_array | DAT_000c4460 << 10
                          | DAT_000c445c << 6);
  system_reg_write(0x4838,dmsc_alias_thres_2_intp << 0x10 | dmsc_alias_thres_1_intp);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_uu_np_cfg(void)

{
  system_reg_write(0x48c8,_DAT_000c4854 << 0x10 | dmsc_uu_np_array);
  system_reg_write(0x48cc,DAT_000c485c << 0x10 | DAT_000c4858);
  system_reg_write(0x48d0,DAT_000c4864 << 0x10 | DAT_000c4860);
  system_reg_write(0x48d4,DAT_000c486c << 0x10 | DAT_000c4868);
  system_reg_write(0x48d8,DAT_000c4874 << 0x10 | DAT_000c4870);
  system_reg_write(0x48dc,DAT_000c487c << 0x10 | DAT_000c4878);
  system_reg_write(0x48e0,DAT_000c4884 << 0x10 | DAT_000c4880);
  system_reg_write(0x48e4,DAT_000c488c << 0x10 | DAT_000c4888);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_sp_d_sigma_3_np_cfg(void)

{
  system_reg_write(0x48e8,_DAT_000c47c4 << 0x19 | DAT_000c47c0 << 0x14 | dmsc_sp_d_sigma_3_np_array
                          | DAT_000c47bc << 0xf | DAT_000c47b8 << 10 | DAT_000c47b4 << 5);
  system_reg_write(0x48ec,DAT_000c47dc << 0x19 | DAT_000c47d8 << 0x14 | DAT_000c47c8 |
                          DAT_000c47d4 << 0xf | DAT_000c47d0 << 10 | DAT_000c47cc << 5);
  system_reg_write(0x48f0,DAT_000c47ec << 0xf | DAT_000c47e8 << 10 | DAT_000c47e0 |
                          DAT_000c47e4 << 5);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_sp_d_w_wei_np_cfg(void)

{
  system_reg_write(0x48f4,_DAT_000c4768 << 0x18 | DAT_000c4764 << 0x12 | dmsc_sp_d_w_wei_np_array |
                          DAT_000c4760 << 0xc | DAT_000c475c << 6);
  system_reg_write(0x48f8,DAT_000c477c << 0x18 | DAT_000c4778 << 0x12 | DAT_000c476c |
                          DAT_000c4774 << 0xc | DAT_000c4770 << 6);
  system_reg_write(0x48fc,DAT_000c4790 << 0x18 | DAT_000c478c << 0x12 | DAT_000c4780 |
                          DAT_000c4788 << 0xc | DAT_000c4784 << 6);
  system_reg_write(0x4900,DAT_000c47a4 << 0x18 | DAT_000c47a0 << 0x12 | DAT_000c4794 |
                          DAT_000c479c << 0xc | DAT_000c4798 << 6);
  system_reg_write(0x4904,DAT_000c47ac << 6 | DAT_000c47a8);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_sp_d_b_wei_np_cfg(void)

{
  system_reg_write(0x4908,_DAT_000c4710 << 0x18 | DAT_000c470c << 0x12 | dmsc_sp_d_b_wei_np_array |
                          DAT_000c4708 << 0xc | DAT_000c4704 << 6);
  system_reg_write(0x490c,DAT_000c4724 << 0x18 | DAT_000c4720 << 0x12 | DAT_000c4714 |
                          DAT_000c471c << 0xc | DAT_000c4718 << 6);
  system_reg_write(0x4910,DAT_000c4738 << 0x18 | DAT_000c4734 << 0x12 | DAT_000c4728 |
                          DAT_000c4730 << 0xc | DAT_000c472c << 6);
  system_reg_write(0x4914,DAT_000c474c << 0x18 | DAT_000c4748 << 0x12 | DAT_000c473c |
                          DAT_000c4744 << 0xc | DAT_000c4740 << 6);
  system_reg_write(0x4918,DAT_000c4754 << 6 | DAT_000c4750);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_sp_ud_w_wei_np_cfg(void)

{
  system_reg_write(0x491c,_DAT_000c46b8 << 0x18 | DAT_000c46b4 << 0x12 | dmsc_sp_ud_w_wei_np_array |
                          DAT_000c46b0 << 0xc | DAT_000c46ac << 6);
  system_reg_write(0x4920,DAT_000c46cc << 0x18 | DAT_000c46c8 << 0x12 | DAT_000c46bc |
                          DAT_000c46c4 << 0xc | DAT_000c46c0 << 6);
  system_reg_write(0x4924,DAT_000c46e0 << 0x18 | DAT_000c46dc << 0x12 | DAT_000c46d0 |
                          DAT_000c46d8 << 0xc | DAT_000c46d4 << 6);
  system_reg_write(0x4928,DAT_000c46f4 << 0x18 | DAT_000c46f0 << 0x12 | DAT_000c46e4 |
                          DAT_000c46ec << 0xc | DAT_000c46e8 << 6);
  system_reg_write(0x492c,DAT_000c46fc << 6 | DAT_000c46f8);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_sp_ud_b_wei_np_cfg(void)

{
  system_reg_write(0x4930,_DAT_000c4660 << 0x18 | DAT_000c465c << 0x12 | dmsc_sp_ud_b_wei_np_array |
                          DAT_000c4658 << 0xc | DAT_000c4654 << 6);
  system_reg_write(0x4934,DAT_000c4674 << 0x18 | DAT_000c4670 << 0x12 | DAT_000c4664 |
                          DAT_000c466c << 0xc | DAT_000c4668 << 6);
  system_reg_write(0x4938,DAT_000c4688 << 0x18 | DAT_000c4684 << 0x12 | DAT_000c4678 |
                          DAT_000c4680 << 0xc | DAT_000c467c << 6);
  system_reg_write(0x493c,DAT_000c469c << 0x18 | DAT_000c4698 << 0x12 | DAT_000c468c |
                          DAT_000c4694 << 0xc | DAT_000c4690 << 6);
  system_reg_write(0x4940,DAT_000c46a4 << 6 | DAT_000c46a0);
  return 0;
}



int tisp_dmsc_dir_par_cfg(void)

{
  system_reg_write(0x4810,(dmsc_dir_par_array - (dmsc_dir_par_array >> 3)) * 0x10000 |
                          dmsc_hv_thres_1_intp - (dmsc_hv_thres_1_intp >> 3));
  system_reg_write(0x4814,dmsc_dir_par_array << 0x10 | dmsc_hv_thres_1_intp);
  system_reg_write(0x4820,DAT_000c4554 << 0x18 | DAT_000c4558 << 0x10 | dmsc_hv_stren_intp);
  system_reg_write(0x4824,DAT_000c455c << 0x10 | dmsc_aa_thres_1_intp);
  system_reg_write(0x4828,DAT_000c4560 << 0x18 | DAT_000c4564 << 0x10 | dmsc_aa_stren_intp);
  system_reg_write(0x482c,DAT_000c4568 << 0x10 | dmsc_hvaa_thres_1_intp);
  system_reg_write(0x4830,DAT_000c456c << 0x18 | DAT_000c4570 << 0x10 | dmsc_hvaa_stren_intp);
  return 0;
}



int tisp_dmsc_nor_par_cfg(void)

{
  system_reg_write(0x483c,dmsc_nor_par_array << 0x10 | dmsc_nor_alias_thres_intp);
  system_reg_write(0x4840,DAT_000c4428 << 0x10 | DAT_000c442c << 6 | DAT_000c4430);
  return 0;
}



int tisp_dmsc_sp_d_par_cfg(void)

{
  system_reg_write(0x4844,dmsc_sp_d_par_array << 0x11 | DAT_000c42dc << 7 | DAT_000c42e4 |
                          DAT_000c42e0 << 6 | DAT_000c42e4 << 4 | DAT_000c42e4 << 2);
  system_reg_write(0x4848,dmsc_sp_d_w_stren_intp << 0x10 | dmsc_sp_d_b_stren_intp);
  system_reg_write(0x484c,DAT_000c42e8 << 0x10 | DAT_000c42ec);
  system_reg_write(0x4850,dmsc_sp_d_brig_thres_intp << 0x10 | dmsc_sp_d_dark_thres_intp);
  system_reg_write(0x4854,DAT_000c42f0);
  system_reg_write(0x4858,DAT_000c42f4);
  system_reg_write(0x48a4,dmsc_sp_d_v2_win5_thres_intp << 0x10 | DAT_000c42f8);
  system_reg_write(0x48a8,dmsc_sp_d_flat_thres_intp << 0x14 | dmsc_sp_d_flat_stren_intp |
                          DAT_000c42fc << 0xb);
  system_reg_write(0x48ac,DAT_000c42f8 << 0x10 | dmsc_sp_d_oe_stren_intp);
  return 0;
}



int tisp_dmsc_sp_ud_par_cfg(void)

{
  system_reg_write(0x485c,dmsc_sp_ud_par_array << 0x10 | DAT_000c4164 << 0xc | DAT_000c4170 |
                          DAT_000c4168 << 8 | DAT_000c416c << 4 | DAT_000c4170 << 2);
  system_reg_write(0x4860,dmsc_sp_ud_w_stren_intp << 0x10 | dmsc_sp_ud_b_stren_intp);
  system_reg_write(0x4864,DAT_000c4174 << 0x10 | DAT_000c4178);
  system_reg_write(0x4868,dmsc_sp_ud_brig_thres_intp << 0x10 | dmsc_sp_ud_dark_thres_intp);
  system_reg_write(0x486c,DAT_000c417c);
  system_reg_write(0x4870,DAT_000c4180);
  system_reg_write(0x48b0,dmsc_sp_ud_v1_v2_par_array << 0x1b | DAT_000c413c << 0xf | DAT_000c4144 |
                          DAT_000c4140 << 8);
  system_reg_write(0x48b4,DAT_000c4148 << 0x1b | DAT_000c414c << 0x18 | DAT_000c415c |
                          DAT_000c4150 << 0x10 | DAT_000c4154 << 8 | DAT_000c4158 << 4);
  system_reg_write(0x48b8,dmsc_sp_ud_std_thres_intp << 0x10 | dmsc_sp_ud_std_stren_intp |
                          DAT_000c4184 << 8);
  system_reg_write(0x48bc,dmsc_sp_ud_flat_stren_intp << 0x10 | DAT_000c4188);
  system_reg_write(0x48c0,dmsc_sp_ud_flat_stren_intp);
  system_reg_write(0x48c4,dmsc_sp_ud_oe_stren_intp << 8 | DAT_000c418c | DAT_000c4190 << 0x1b);
  return 0;
}



int tisp_dmsc_sp_alias_par_cfg(void)

{
  system_reg_write(0x4874,dmsc_sp_alias_thres_intp << 0x10 | dmsc_sp_alias_par_array);
  return 0;
}



int tisp_dmsc_rgb_alias_par_cfg(void)

{
  system_reg_write(0x4878,dmsc_rgb_alias_par_array << 0x10 | dmsc_rgb_dir_thres_intp);
  system_reg_write(0x487c,dmsc_rgb_alias_stren_intp << 5 | DAT_000c40c0 | DAT_000c4110 << 0x10);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_fc_par_cfg(void)

{
  int iVar1;
  int iVar2;
  
  system_reg_write(0x4880,dmsc_fc_alias_stren_intp << 0x15 | dmsc_fc_t1_stren_intp << 0xe |
                          dmsc_fc_t2_stren_intp << 7 | _DAT_000c3fb8);
  system_reg_write(0x4884,_DAT_000c3f9c << 0x10 | dmsc_fc_t1_thres_intp);
  system_reg_write(0x4888,_DAT_000c3fa0 << 0x10 | _DAT_000c3fa4);
  system_reg_write(0x488c,(DAT_000c3fa8 + dmsc_fc_t1_thres_intp) * 0x20000 |
                          _DAT_000c3fb4 << 0xc | _DAT_000c3fbc);
  system_reg_write(0x4890,dmsc_fc_par_array << 0x10 | dmsc_fc_par_array << 6 | dmsc_fc_par_array);
  system_reg_write(0x4894,dmsc_fc_t3_stren_intp);
  system_reg_write(0x4898,DAT_000c3fa8 + DAT_000c3fac + dmsc_fc_t1_thres_intp |
                          dmsc_fc_par_array << 0x10);
  system_reg_write(0x489c,(DAT_000c3fa8 + dmsc_fc_t1_thres_intp + DAT_000c3fac) * 0x10000 |
                          DAT_000c3fa8 + dmsc_fc_t1_thres_intp);
  iVar1 = DAT_000c3fa8 + DAT_000c3fac + dmsc_fc_t1_thres_intp + DAT_000c3fb0;
  iVar2 = 0xfff;
  if (iVar1 < 0x1000) {
    iVar2 = iVar1;
  }
  system_reg_write(0x48a0,iVar2);
  system_reg_write(0x4980,dmsc_fc_lum_thres_intp << 0x10 | dmsc_fc_lum_stren_intp);
  return 0;
}



int tisp_dmsc_deir_par_cfg(void)

{
  system_reg_write(0x4944,dmsc_deir_oe_en << 8 | DAT_000c3f94);
  system_reg_write(0x4948,dmsc_deir_rgb_ir_oe_slope << 0x10 | DAT_000c3f80);
  system_reg_write(0x494c,DAT_000c3f84 << 0x10 | DAT_000c3f88);
  system_reg_write(0x4988,dmsc_deir_fusion_thres_intp << 0x10 | dmsc_deir_fusion_stren_intp << 8 |
                          DAT_000c3f8c);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dmsc_awb_gain_par_cfg(void)

{
  system_reg_write(0x4984,_DAT_000c3ee0 << 0x1c | _DAT_000c3edc << 0x10 | dmsc_awb_gain);
  return 0;
}



int tisp_dmsc_deir_rgb_par_cfg(void)

{
  system_reg_write(0x4950,dmsc_r_deir_array << 0x10 | DAT_000c4834);
  system_reg_write(0x4954,DAT_000c4838 << 0x10 | DAT_000c483c);
  system_reg_write(0x4958,DAT_000c4840 << 0x10 | DAT_000c4844);
  system_reg_write(0x495c,DAT_000c4848 << 0x10 | DAT_000c484c);
  system_reg_write(0x4960,dmsc_g_deir_array << 0x10 | DAT_000c4814);
  system_reg_write(0x4964,DAT_000c4818 << 0x10 | DAT_000c481c);
  system_reg_write(0x4968,DAT_000c4820 << 0x10 | DAT_000c4824);
  system_reg_write(0x496c,DAT_000c4808 << 0x10 | DAT_000c480c);
  system_reg_write(0x4970,dmsc_b_deir_array << 0x10 | DAT_000c47f4);
  system_reg_write(0x4974,DAT_000c47f8 << 0x10 | DAT_000c47fc);
  system_reg_write(0x4978,DAT_000c4800 << 0x10 | DAT_000c4804);
  system_reg_write(0x497c,DAT_000c4808 << 0x10 | DAT_000c480c);
  return 0;
}



int tisp_dmsc_d_ud_ns_par_cfg(void)

{
  system_reg_write(0x49a0,dmsc_sp_d_ud_ns_opt << 0x10 | dmsc_sp_d_ns_thres_intp);
  system_reg_write(0x49a4,DAT_000c3ee8 << 0x10 | dmsc_sp_ud_ns_thres_intp);
  return 0;
}



int tisp_dmsc_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  dmsc_hv_thres_1_intp = tisp_simple_intp(iVar1,param_1,dmsc_hv_thres_1_array);
  dmsc_hv_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_hv_stren_array);
  dmsc_aa_thres_1_intp = tisp_simple_intp(iVar1,param_1,dmsc_aa_thres_1_array);
  dmsc_aa_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_aa_stren_array);
  dmsc_hvaa_thres_1_intp = tisp_simple_intp(iVar1,param_1,dmsc_hvaa_thres_1_array);
  dmsc_hvaa_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_hvaa_stren_array);
  dmsc_uu_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_uu_thres_array_now);
  dmsc_uu_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_uu_stren_array_now);
  dmsc_alias_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_alias_stren_array);
  dmsc_alias_thres_1_intp = tisp_simple_intp(iVar1,param_1,dmsc_alias_thres_1_array);
  dmsc_alias_thres_2_intp = tisp_simple_intp(iVar1,param_1,dmsc_alias_thres_2_array);
  dmsc_alias_dir_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_alias_dir_thres_array);
  dmsc_nor_alias_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_nor_alias_thres_array);
  dmsc_sp_d_w_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_w_stren_array_now);
  dmsc_sp_d_b_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_b_stren_array_now);
  dmsc_sp_d_brig_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_brig_thres_array);
  dmsc_sp_d_dark_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_dark_thres_array);
  dmsc_sp_ud_w_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_w_stren_array_now);
  dmsc_sp_ud_b_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_b_stren_array_now);
  dmsc_sp_ud_brig_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_brig_thres_array);
  dmsc_sp_ud_dark_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_dark_thres_array);
  dmsc_sp_alias_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_alias_thres_array);
  dmsc_rgb_dir_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_rgb_dir_thres_array);
  dmsc_rgb_alias_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_rgb_alias_stren_array);
  dmsc_fc_alias_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_alias_stren_array);
  dmsc_fc_t1_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_t1_thres_array);
  dmsc_fc_t1_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_t1_stren_array);
  dmsc_fc_t2_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_t2_stren_array);
  dmsc_fc_t3_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_t3_stren_array);
  dmsc_deir_fusion_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_deir_fusion_thres_array);
  dmsc_deir_fusion_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_deir_fusion_stren_array);
  dmsc_sp_d_v2_win5_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_v2_win5_thres_array);
  dmsc_sp_d_flat_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_flat_stren_array);
  dmsc_sp_d_flat_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_flat_thres_array);
  dmsc_sp_d_oe_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_oe_stren_array);
  dmsc_sp_ud_std_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_std_stren_array);
  dmsc_sp_ud_std_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_std_thres_array);
  dmsc_sp_ud_flat_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_flat_thres_array);
  dmsc_sp_ud_flat_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_flat_stren_array);
  dmsc_sp_ud_oe_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_oe_stren_array);
  dmsc_fc_lum_stren_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_lum_stren_array);
  dmsc_fc_lum_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_fc_lum_thres_array);
  dmsc_sp_d_ns_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_d_ns_thres_array);
  dmsc_sp_ud_ns_thres_intp = tisp_simple_intp(iVar1,param_1,dmsc_sp_ud_ns_thres_array);
  return 0;
}



void tisp_dmsc_wdr_en(int param_1)

{
  char *puVar1;
  
  dmsc_wdr_en = param_1;
  if (param_1 == 0) {
    dmsc_uu_thres_array_now = dmsc_uu_thres_array;
    dmsc_uu_stren_array_now = (char *)&dmsc_uu_stren_array;
    dmsc_sp_d_w_stren_array_now = (char *)&dmsc_sp_d_w_stren_array;
    dmsc_sp_d_b_stren_array_now = (char *)&dmsc_sp_d_b_stren_array;
    dmsc_sp_ud_w_stren_array_now = (char *)&dmsc_sp_ud_w_stren_array;
    puVar1 = (char *)&dmsc_sp_ud_b_stren_array;
  }
  else {
    dmsc_uu_thres_array_now = dmsc_uu_thres_wdr_array;
    dmsc_uu_stren_array_now = dmsc_uu_stren_wdr_array;
    dmsc_sp_d_w_stren_array_now = dmsc_sp_d_w_stren_wdr_array;
    dmsc_sp_d_b_stren_array_now = dmsc_sp_d_b_stren_wdr_array;
    dmsc_sp_ud_w_stren_array_now = dmsc_sp_ud_w_stren_wdr_array;
    puVar1 = dmsc_sp_ud_b_stren_wdr_array;
  }
  dmsc_sp_ud_b_stren_array_now = puVar1;
  return;
}



int tisp_dmsc_all_reg_refresh(void)

{
  tisp_dmsc_intp();
  tisp_dmsc_out_opt_cfg();
  tisp_dmsc_uu_par_cfg();
  tisp_dmsc_alias_par_cfg();
  tisp_dmsc_uu_np_cfg();
  tisp_dmsc_sp_d_sigma_3_np_cfg();
  tisp_dmsc_sp_d_w_wei_np_cfg();
  tisp_dmsc_sp_d_b_wei_np_cfg();
  tisp_dmsc_sp_ud_w_wei_np_cfg();
  tisp_dmsc_sp_ud_b_wei_np_cfg();
  tisp_dmsc_dir_par_cfg();
  tisp_dmsc_nor_par_cfg();
  tisp_dmsc_sp_d_par_cfg();
  tisp_dmsc_sp_ud_par_cfg();
  tisp_dmsc_sp_alias_par_cfg();
  tisp_dmsc_rgb_alias_par_cfg();
  tisp_dmsc_fc_par_cfg();
  tisp_dmsc_deir_par_cfg();
  tisp_dmsc_awb_gain_par_cfg();
  tisp_dmsc_deir_rgb_par_cfg();
  tisp_dmsc_d_ud_ns_par_cfg();
  system_reg_write(0x499c,1);
  return 0;
}



int tisp_dmsc_intp_reg_refresh(void)

{
  tisp_dmsc_intp();
  tisp_dmsc_uu_par_cfg();
  tisp_dmsc_alias_par_cfg();
  tisp_dmsc_dir_par_cfg();
  tisp_dmsc_nor_par_cfg();
  tisp_dmsc_sp_d_par_cfg();
  tisp_dmsc_sp_ud_par_cfg();
  tisp_dmsc_sp_alias_par_cfg();
  tisp_dmsc_rgb_alias_par_cfg();
  tisp_dmsc_fc_par_cfg();
  tisp_dmsc_deir_par_cfg();
  tisp_dmsc_d_ud_ns_par_cfg();
  return 0;
}



int tisp_dmsc_par_refresh(unsigned int param_1,unsigned int param_2,int param_3)

{
  code *pcVar1;
  unsigned int uVar2;
  
  if (gain_old == 0xffffffff) {
    pcVar1 = tisp_dmsc_all_reg_refresh;
  }
  else {
    uVar2 = gain_old - param_1;
    if (gain_old <= param_1) {
      uVar2 = param_1 - gain_old;
    }
    if (uVar2 < param_2) goto LAB_0003593c;
    pcVar1 = tisp_dmsc_intp_reg_refresh;
  }
  gain_old = param_1;
  (*pcVar1)();
LAB_0003593c:
  if (param_3 == 1) {
    system_reg_write(0x499c,1);
  }
  return 0;
}



int tisp_dmsc_refresh(int param_1)

{
  tisp_dmsc_par_refresh(param_1,0x100,1);
  return 0;
}



int tisp_dmsc_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x5f:
    __src = (char *)&dmsc_uu_np_array;
    goto LAB_00035d94;
  case 0x60:
    __src = (char *)&dmsc_r_deir_array;
    goto LAB_00035da4;
  case 0x61:
    __src = (char *)&dmsc_g_deir_array;
    goto LAB_00035da4;
  case 0x62:
    __src = (char *)&dmsc_b_deir_array;
LAB_00035da4:
    __n = 0x20;
    goto LAB_00035da8;
  case 99:
    __src = (char *)&dmsc_sp_d_sigma_3_np_array;
LAB_00035d94:
    __n = 0x40;
    goto LAB_00035da8;
  case 100:
    __src = (char *)&dmsc_sp_d_w_wei_np_array;
    goto LAB_00035a0c;
  case 0x65:
    __src = (char *)&dmsc_sp_d_b_wei_np_array;
    goto LAB_00035a0c;
  case 0x66:
    __src = (char *)&dmsc_sp_ud_w_wei_np_array;
    goto LAB_00035a0c;
  case 0x67:
    __src = (char *)&dmsc_sp_ud_b_wei_np_array;
LAB_00035a0c:
    __n = 0x58;
    goto LAB_00035da8;
  case 0x68:
    __src = (char *)&dmsc_out_opt;
    __n = 4;
    goto LAB_00035da8;
  case 0x69:
    __src = dmsc_hv_thres_1_array;
    break;
  case 0x6a:
    __src = dmsc_hv_stren_array;
    break;
  case 0x6b:
    __src = dmsc_aa_thres_1_array;
    break;
  case 0x6c:
    __src = dmsc_aa_stren_array;
    break;
  case 0x6d:
    __src = dmsc_hvaa_thres_1_array;
    break;
  case 0x6e:
    __src = dmsc_hvaa_stren_array;
    break;
  case 0x6f:
    __src = (char *)&dmsc_dir_par_array;
    break;
  case 0x70:
    __src = dmsc_uu_thres_array;
    break;
  case 0x71:
    __src = (char *)&dmsc_uu_stren_array;
    break;
  case 0x72:
    __src = (char *)&dmsc_uu_par_array;
    goto LAB_00035b04;
  case 0x73:
    __src = dmsc_alias_stren_array;
    break;
  case 0x74:
    __src = dmsc_alias_thres_1_array;
    break;
  case 0x75:
    __src = dmsc_alias_thres_2_array;
    break;
  case 0x76:
    __src = dmsc_alias_dir_thres_array;
    break;
  case 0x77:
    __src = (char *)&dmsc_alias_par_array;
    goto LAB_00035b04;
  case 0x78:
    __src = dmsc_nor_alias_thres_array;
    break;
  case 0x79:
    __src = (char *)&dmsc_nor_par_array;
LAB_00035b04:
    __n = 0x10;
    goto LAB_00035da8;
  case 0x7a:
    __src = (char *)&dmsc_sp_d_w_stren_array;
    break;
  case 0x7b:
    __src = (char *)&dmsc_sp_d_b_stren_array;
    break;
  case 0x7c:
    __src = dmsc_sp_d_brig_thres_array;
    break;
  case 0x7d:
    __src = dmsc_sp_d_dark_thres_array;
    break;
  case 0x7e:
    __src = dmsc_sp_d_v2_win5_thres_array;
    break;
  case 0x7f:
    __src = dmsc_sp_d_flat_stren_array;
    break;
  case 0x80:
    __src = dmsc_sp_d_flat_thres_array;
    break;
  case 0x81:
    __src = dmsc_sp_d_oe_stren_array;
    break;
  case 0x82:
    __src = (char *)&dmsc_sp_d_par_array;
    __n = 0x2c;
    goto LAB_00035da8;
  case 0x83:
    __src = (char *)&dmsc_sp_ud_w_stren_array;
    break;
  case 0x84:
    __src = (char *)&dmsc_sp_ud_b_stren_array;
    break;
  case 0x85:
    __src = dmsc_sp_ud_brig_thres_array;
    break;
  case 0x86:
    __src = dmsc_sp_ud_dark_thres_array;
    break;
  case 0x87:
    __src = dmsc_sp_ud_std_stren_array;
    break;
  case 0x88:
    __src = dmsc_sp_ud_std_thres_array;
    break;
  case 0x89:
    __src = dmsc_sp_ud_flat_thres_array;
    break;
  case 0x8a:
    __src = dmsc_sp_ud_flat_stren_array;
    break;
  case 0x8b:
    __src = dmsc_sp_ud_oe_stren_array;
    break;
  case 0x8c:
    __src = (char *)&dmsc_sp_ud_par_array;
    __n = 0x34;
    goto LAB_00035da8;
  case 0x8d:
    __src = (char *)&dmsc_sp_ud_v1_v2_par_array;
    goto LAB_00035c9c;
  case 0x8e:
    __src = dmsc_sp_alias_thres_array;
    break;
  case 0x8f:
    __src = (char *)&dmsc_sp_alias_par_array;
    goto LAB_00035cf8;
  case 0x90:
    __src = dmsc_rgb_dir_thres_array;
    break;
  case 0x91:
    __src = dmsc_rgb_alias_stren_array;
    break;
  case 0x92:
    __src = (char *)&dmsc_rgb_alias_par_array;
    goto LAB_00035cf8;
  case 0x93:
    __src = dmsc_fc_alias_stren_array;
    break;
  case 0x94:
    __src = dmsc_fc_t1_thres_array;
    break;
  case 0x95:
    __src = dmsc_fc_t1_stren_array;
    break;
  case 0x96:
    __src = dmsc_fc_t2_stren_array;
    break;
  case 0x97:
    __src = dmsc_fc_t3_stren_array;
    break;
  case 0x98:
    __src = dmsc_fc_lum_stren_array;
    break;
  case 0x99:
    __src = dmsc_fc_lum_thres_array;
    break;
  case 0x9a:
    __src = (char *)&dmsc_fc_par_array;
LAB_00035c9c:
    __n = 0x28;
    goto LAB_00035da8;
  case 0x9b:
    __src = (char *)&dmsc_deir_oe_en;
    goto LAB_00035cf8;
  case 0x9c:
    __src = (char *)&dmsc_deir_rgb_ir_oe_slope;
    __n = 0x14;
    goto LAB_00035da8;
  case 0x9d:
    __src = dmsc_deir_fusion_thres_array;
    break;
  case 0x9e:
    __src = dmsc_deir_fusion_stren_array;
    break;
  case 0x9f:
    __src = dmsc_sp_d_ns_thres_array;
    break;
  case 0xa0:
    __src = dmsc_sp_ud_ns_thres_array;
    break;
  case 0xa1:
    __src = (char *)&dmsc_sp_d_ud_ns_opt;
LAB_00035cf8:
    __n = 8;
    goto LAB_00035da8;
  case 0xa2:
    __src = dmsc_uu_thres_wdr_array;
    break;
  case 0xa3:
    __src = dmsc_uu_stren_wdr_array;
    break;
  case 0xa4:
    __src = dmsc_sp_d_w_stren_wdr_array;
    break;
  case 0xa5:
    __src = dmsc_sp_d_b_stren_wdr_array;
    break;
  case 0xa6:
    __src = dmsc_sp_ud_w_stren_wdr_array;
    break;
  case 0xa7:
    __src = dmsc_sp_ud_b_stren_wdr_array;
    break;
  case 0xa8:
    __src = (char *)&dmsc_awb_gain;
    __n = 0xc;
    goto LAB_00035da8;
  default:
    isp_printf(2,"%s,%d: dmsc not support param id %d\n","tisp_dmsc_param_array_get",0x69c,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_00035da8:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_dmsc_param_array_set(int param_1,void *param_2,size_t *param_3)

{
  char *__dest;
  size_t __n;
  
  switch(param_1) {
  case 0x5f:
    __dest = (char *)&dmsc_uu_np_array;
    goto LAB_000361cc;
  case 0x60:
    __dest = (char *)&dmsc_r_deir_array;
    goto LAB_000361dc;
  case 0x61:
    __dest = (char *)&dmsc_g_deir_array;
    goto LAB_000361dc;
  case 0x62:
    __dest = (char *)&dmsc_b_deir_array;
LAB_000361dc:
    __n = 0x20;
    goto LAB_000361e0;
  case 99:
    __dest = (char *)&dmsc_sp_d_sigma_3_np_array;
LAB_000361cc:
    __n = 0x40;
    goto LAB_000361e0;
  case 100:
    __dest = (char *)&dmsc_sp_d_w_wei_np_array;
    goto LAB_00035e44;
  case 0x65:
    __dest = (char *)&dmsc_sp_d_b_wei_np_array;
    goto LAB_00035e44;
  case 0x66:
    __dest = (char *)&dmsc_sp_ud_w_wei_np_array;
    goto LAB_00035e44;
  case 0x67:
    __dest = (char *)&dmsc_sp_ud_b_wei_np_array;
LAB_00035e44:
    __n = 0x58;
    goto LAB_000361e0;
  case 0x68:
    __dest = (char *)&dmsc_out_opt;
    __n = 4;
    goto LAB_000361e0;
  case 0x69:
    __dest = dmsc_hv_thres_1_array;
    break;
  case 0x6a:
    __dest = dmsc_hv_stren_array;
    break;
  case 0x6b:
    __dest = dmsc_aa_thres_1_array;
    break;
  case 0x6c:
    __dest = dmsc_aa_stren_array;
    break;
  case 0x6d:
    __dest = dmsc_hvaa_thres_1_array;
    break;
  case 0x6e:
    __dest = dmsc_hvaa_stren_array;
    break;
  case 0x6f:
    __dest = (char *)&dmsc_dir_par_array;
    break;
  case 0x70:
    __dest = dmsc_uu_thres_array;
    break;
  case 0x71:
    __dest = (char *)&dmsc_uu_stren_array;
    break;
  case 0x72:
    __dest = (char *)&dmsc_uu_par_array;
    goto LAB_00035f3c;
  case 0x73:
    __dest = dmsc_alias_stren_array;
    break;
  case 0x74:
    __dest = dmsc_alias_thres_1_array;
    break;
  case 0x75:
    __dest = dmsc_alias_thres_2_array;
    break;
  case 0x76:
    __dest = dmsc_alias_dir_thres_array;
    break;
  case 0x77:
    __dest = (char *)&dmsc_alias_par_array;
    goto LAB_00035f3c;
  case 0x78:
    __dest = dmsc_nor_alias_thres_array;
    break;
  case 0x79:
    __dest = (char *)&dmsc_nor_par_array;
LAB_00035f3c:
    __n = 0x10;
    goto LAB_000361e0;
  case 0x7a:
    __dest = (char *)&dmsc_sp_d_w_stren_array;
    break;
  case 0x7b:
    __dest = (char *)&dmsc_sp_d_b_stren_array;
    break;
  case 0x7c:
    __dest = dmsc_sp_d_brig_thres_array;
    break;
  case 0x7d:
    __dest = dmsc_sp_d_dark_thres_array;
    break;
  case 0x7e:
    __dest = dmsc_sp_d_v2_win5_thres_array;
    break;
  case 0x7f:
    __dest = dmsc_sp_d_flat_stren_array;
    break;
  case 0x80:
    __dest = dmsc_sp_d_flat_thres_array;
    break;
  case 0x81:
    __dest = dmsc_sp_d_oe_stren_array;
    break;
  case 0x82:
    __dest = (char *)&dmsc_sp_d_par_array;
    __n = 0x2c;
    goto LAB_000361e0;
  case 0x83:
    __dest = (char *)&dmsc_sp_ud_w_stren_array;
    break;
  case 0x84:
    __dest = (char *)&dmsc_sp_ud_b_stren_array;
    break;
  case 0x85:
    __dest = dmsc_sp_ud_brig_thres_array;
    break;
  case 0x86:
    __dest = dmsc_sp_ud_dark_thres_array;
    break;
  case 0x87:
    __dest = dmsc_sp_ud_std_stren_array;
    break;
  case 0x88:
    __dest = dmsc_sp_ud_std_thres_array;
    break;
  case 0x89:
    __dest = dmsc_sp_ud_flat_thres_array;
    break;
  case 0x8a:
    __dest = dmsc_sp_ud_flat_stren_array;
    break;
  case 0x8b:
    __dest = dmsc_sp_ud_oe_stren_array;
    break;
  case 0x8c:
    __dest = (char *)&dmsc_sp_ud_par_array;
    __n = 0x34;
    goto LAB_000361e0;
  case 0x8d:
    __dest = (char *)&dmsc_sp_ud_v1_v2_par_array;
    goto LAB_000360d4;
  case 0x8e:
    __dest = dmsc_sp_alias_thres_array;
    break;
  case 0x8f:
    __dest = (char *)&dmsc_sp_alias_par_array;
    goto LAB_00036130;
  case 0x90:
    __dest = dmsc_rgb_dir_thres_array;
    break;
  case 0x91:
    __dest = dmsc_rgb_alias_stren_array;
    break;
  case 0x92:
    __dest = (char *)&dmsc_rgb_alias_par_array;
    goto LAB_00036130;
  case 0x93:
    __dest = dmsc_fc_alias_stren_array;
    break;
  case 0x94:
    __dest = dmsc_fc_t1_thres_array;
    break;
  case 0x95:
    __dest = dmsc_fc_t1_stren_array;
    break;
  case 0x96:
    __dest = dmsc_fc_t2_stren_array;
    break;
  case 0x97:
    __dest = dmsc_fc_t3_stren_array;
    break;
  case 0x98:
    __dest = dmsc_fc_lum_stren_array;
    break;
  case 0x99:
    __dest = dmsc_fc_lum_thres_array;
    break;
  case 0x9a:
    __dest = (char *)&dmsc_fc_par_array;
LAB_000360d4:
    __n = 0x28;
    goto LAB_000361e0;
  case 0x9b:
    __dest = (char *)&dmsc_deir_oe_en;
    goto LAB_00036130;
  case 0x9c:
    __dest = (char *)&dmsc_deir_rgb_ir_oe_slope;
    __n = 0x14;
    goto LAB_000361e0;
  case 0x9d:
    __dest = dmsc_deir_fusion_thres_array;
    break;
  case 0x9e:
    __dest = dmsc_deir_fusion_stren_array;
    break;
  case 0x9f:
    __dest = dmsc_sp_d_ns_thres_array;
    break;
  case 0xa0:
    __dest = dmsc_sp_ud_ns_thres_array;
    break;
  case 0xa1:
    __dest = (char *)&dmsc_sp_d_ud_ns_opt;
LAB_00036130:
    __n = 8;
    goto LAB_000361e0;
  case 0xa2:
    __dest = dmsc_uu_thres_wdr_array;
    break;
  case 0xa3:
    __dest = dmsc_uu_stren_wdr_array;
    break;
  case 0xa4:
    __dest = dmsc_sp_d_w_stren_wdr_array;
    break;
  case 0xa5:
    __dest = dmsc_sp_d_b_stren_wdr_array;
    break;
  case 0xa6:
    __dest = dmsc_sp_ud_w_stren_wdr_array;
    break;
  case 0xa7:
    __dest = dmsc_sp_ud_b_stren_wdr_array;
    break;
  case 0xa8:
    __dest = (char *)&dmsc_awb_gain;
    __n = 0xc;
    goto LAB_000361e0;
  default:
    isp_printf(2,"%s,%d: dmsc not support param id %d\n","tisp_dmsc_param_array_set",0x7d5,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_000361e0:
  *param_3 = __n;
  memcpy(__dest,param_2,__n);
  tisp_dmsc_all_reg_refresh(gain_old);
  return 0;
}



int tisp_dmsc_sharpness_set(char param_1)

{
  int *piVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int *puVar4;
  unsigned int *puVar5;
  unsigned int *puVar6;
  unsigned int *puVar7;
  unsigned int *puVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  
  uVar3 = (uint)param_1;
  iVar9 = uVar3 - 0x80;
  piVar1 = (int *)&DAT_0009d9b0;
  puVar8 = &dmsc_sp_d_w_stren_array;
  puVar7 = &dmsc_sp_d_b_stren_array;
  puVar6 = &dmsc_sp_ud_w_stren_array;
  puVar5 = &dmsc_sp_ud_b_stren_array;
  puVar4 = &dmsc_uu_stren_array;
  dmsc_ratio = param_1;
  do {
    if (uVar3 < 0x81) {
      *puVar8 = uVar3 * *piVar1 >> 7;
      *puVar7 = uVar3 * piVar1[9] >> 7;
      *puVar6 = uVar3 * piVar1[0x53] >> 7;
      *puVar5 = uVar3 * piVar1[0x5c] >> 7;
      uVar2 = uVar3 * piVar1[-0x42] >> 7;
    }
    else {
      iVar10 = piVar1[9];
      *puVar8 = ((uint)((600 - *piVar1) * iVar9) >> 7) + *piVar1;
      iVar11 = piVar1[0x53];
      *puVar7 = ((uint)((600 - iVar10) * iVar9) >> 7) + iVar10;
      iVar10 = piVar1[0x5c];
      *puVar6 = ((uint)((600 - iVar11) * iVar9) >> 7) + iVar11;
      iVar11 = piVar1[-0x42];
      *puVar5 = ((uint)((600 - iVar10) * iVar9) >> 7) + iVar10;
      uVar2 = ((uint)((800 - iVar11) * iVar9) >> 7) + iVar11;
    }
    piVar1 = piVar1 + 1;
    *puVar4 = uVar2;
    puVar8 = puVar8 + 1;
    puVar7 = puVar7 + 1;
    puVar6 = puVar6 + 1;
    puVar5 = puVar5 + 1;
    puVar4 = puVar4 + 1;
  } while (piVar1 != (int *)&DAT_0009d9d4);
  tisp_dmsc_intp(gain_old);
  tisp_dmsc_out_opt_cfg();
  tisp_dmsc_uu_par_cfg();
  tisp_dmsc_alias_par_cfg();
  tisp_dmsc_uu_np_cfg();
  tisp_dmsc_sp_d_sigma_3_np_cfg();
  tisp_dmsc_sp_d_w_wei_np_cfg();
  tisp_dmsc_sp_d_b_wei_np_cfg();
  tisp_dmsc_sp_ud_w_wei_np_cfg();
  tisp_dmsc_sp_ud_b_wei_np_cfg();
  tisp_dmsc_dir_par_cfg();
  tisp_dmsc_nor_par_cfg();
  tisp_dmsc_sp_d_par_cfg();
  tisp_dmsc_sp_ud_par_cfg();
  tisp_dmsc_sp_alias_par_cfg();
  tisp_dmsc_rgb_alias_par_cfg();
  tisp_dmsc_fc_par_cfg();
  tisp_dmsc_deir_par_cfg();
  tisp_dmsc_awb_gain_par_cfg();
  tisp_dmsc_deir_rgb_par_cfg();
  tisp_dmsc_d_ud_ns_par_cfg();
  system_reg_write(0x499c,1);
  return 0;
}



int tiziano_dmsc_params_refresh(void)

{
  memcpy(&dmsc_uu_np_array,&DAT_0009d544,0x40);
  memcpy(&dmsc_r_deir_array,&DAT_0009d584,0x20);
  memcpy(&dmsc_g_deir_array,&DAT_0009d5a4,0x20);
  memcpy(&dmsc_b_deir_array,&DAT_0009d5c4,0x20);
  memcpy(&dmsc_sp_d_sigma_3_np_array,&DAT_0009d5e4,0x40);
  memcpy(&dmsc_sp_d_w_wei_np_array,&DAT_0009d624,0x58);
  memcpy(&dmsc_sp_d_b_wei_np_array,&DAT_0009d67c,0x58);
  memcpy(&dmsc_sp_ud_w_wei_np_array,&DAT_0009d6d4,0x58);
  memcpy(&dmsc_sp_ud_b_wei_np_array,&DAT_0009d72c,0x58);
  memcpy(&dmsc_out_opt,&DAT_0009d784,4);
  memcpy(dmsc_hv_thres_1_array,&DAT_0009d788,0x24);
  memcpy(dmsc_hv_stren_array,&DAT_0009d7ac,0x24);
  memcpy(dmsc_aa_thres_1_array,&DAT_0009d7d0,0x24);
  memcpy(dmsc_aa_stren_array,&DAT_0009d7f4,0x24);
  memcpy(dmsc_hvaa_thres_1_array,&DAT_0009d818,0x24);
  memcpy(dmsc_hvaa_stren_array,&DAT_0009d83c,0x24);
  memcpy(&dmsc_dir_par_array,&DAT_0009d860,0x24);
  memcpy(dmsc_uu_thres_array,&DAT_0009d884,0x24);
  memcpy(&dmsc_uu_stren_array,&DAT_0009d8a8,0x24);
  memcpy(&dmsc_uu_par_array,&DAT_0009d8cc,0x10);
  memcpy(dmsc_alias_stren_array,&DAT_0009d8dc,0x24);
  memcpy(dmsc_alias_thres_1_array,&DAT_0009d900,0x24);
  memcpy(dmsc_alias_thres_2_array,&DAT_0009d924,0x24);
  memcpy(dmsc_alias_dir_thres_array,&DAT_0009d948,0x24);
  memcpy(&dmsc_alias_par_array,&DAT_0009d96c,0x10);
  memcpy(dmsc_nor_alias_thres_array,&DAT_0009d97c,0x24);
  memcpy(&dmsc_nor_par_array,&DAT_0009d9a0,0x10);
  memcpy(&dmsc_sp_d_w_stren_array,&DAT_0009d9b0,0x24);
  memcpy(&dmsc_sp_d_b_stren_array,&DAT_0009d9d4,0x24);
  memcpy(dmsc_sp_d_brig_thres_array,&DAT_0009d9f8,0x24);
  memcpy(dmsc_sp_d_dark_thres_array,&DAT_0009da1c,0x24);
  memcpy(dmsc_sp_d_v2_win5_thres_array,&DAT_0009da40,0x24);
  memcpy(dmsc_sp_d_flat_stren_array,&DAT_0009da64,0x24);
  memcpy(dmsc_sp_d_flat_thres_array,&DAT_0009da88,0x24);
  memcpy(dmsc_sp_d_oe_stren_array,&DAT_0009daac,0x24);
  memcpy(&dmsc_sp_d_par_array,&DAT_0009dad0,0x2c);
  memcpy(&dmsc_sp_ud_w_stren_array,&DAT_0009dafc,0x24);
  memcpy(&dmsc_sp_ud_b_stren_array,&DAT_0009db20,0x24);
  memcpy(dmsc_sp_ud_brig_thres_array,&DAT_0009db44,0x24);
  memcpy(dmsc_sp_ud_dark_thres_array,&DAT_0009db68,0x24);
  memcpy(dmsc_sp_ud_std_stren_array,&DAT_0009db8c,0x24);
  memcpy(dmsc_sp_ud_std_thres_array,&DAT_0009dbb0,0x24);
  memcpy(dmsc_sp_ud_flat_thres_array,&DAT_0009dbd4,0x24);
  memcpy(dmsc_sp_ud_flat_stren_array,&DAT_0009dbf8,0x24);
  memcpy(dmsc_sp_ud_oe_stren_array,&DAT_0009dc1c,0x24);
  memcpy(&dmsc_sp_ud_par_array,&DAT_0009dc40,0x34);
  memcpy(&dmsc_sp_ud_v1_v2_par_array,&DAT_0009dc74,0x28);
  memcpy(dmsc_sp_alias_thres_array,&DAT_0009dc9c,0x24);
  memcpy(&dmsc_sp_alias_par_array,&DAT_0009dcc0,8);
  memcpy(dmsc_rgb_dir_thres_array,&DAT_0009dcc8,0x24);
  memcpy(dmsc_rgb_alias_stren_array,&DAT_0009dcec,0x24);
  memcpy(&dmsc_rgb_alias_par_array,&DAT_0009dd10,8);
  memcpy(dmsc_fc_alias_stren_array,&DAT_0009dd18,0x24);
  memcpy(dmsc_fc_t1_thres_array,&DAT_0009dd3c,0x24);
  memcpy(dmsc_fc_t1_stren_array,&DAT_0009dd60,0x24);
  memcpy(dmsc_fc_t2_stren_array,&DAT_0009dd84,0x24);
  memcpy(dmsc_fc_t3_stren_array,&DAT_0009dda8,0x24);
  memcpy(dmsc_fc_lum_stren_array,&DAT_0009ddcc,0x24);
  memcpy(dmsc_fc_lum_thres_array,&DAT_0009ddf0,0x24);
  memcpy(&dmsc_fc_par_array,&DAT_0009de14,0x28);
  memcpy(&dmsc_deir_oe_en,&DAT_0009de3c,8);
  memcpy(&dmsc_deir_rgb_ir_oe_slope,&DAT_0009de44,0x14);
  memcpy(dmsc_deir_fusion_thres_array,&DAT_0009de58,0x24);
  memcpy(dmsc_deir_fusion_stren_array,&DAT_0009de7c,0x24);
  memcpy(dmsc_sp_d_ns_thres_array,&DAT_0009dea0,0x24);
  memcpy(dmsc_sp_ud_ns_thres_array,&DAT_0009dec4,0x24);
  memcpy(&dmsc_sp_d_ud_ns_opt,&DAT_0009dee8,8);
  memcpy(dmsc_uu_thres_wdr_array,&DAT_0009def0,0x24);
  memcpy(dmsc_uu_stren_wdr_array,&DAT_0009df14,0x24);
  memcpy(dmsc_sp_d_w_stren_wdr_array,&DAT_0009df38,0x24);
  memcpy(dmsc_sp_d_b_stren_wdr_array,&DAT_0009df5c,0x24);
  memcpy(dmsc_sp_ud_w_stren_wdr_array,&DAT_0009df80,0x24);
  memcpy(dmsc_sp_ud_b_stren_wdr_array,&DAT_0009dfa4,0x24);
  memcpy(&dmsc_awb_gain,&DAT_0009dfc8,0xc);
  if (dmsc_ratio != -0x80) {
    tisp_dmsc_sharpness_set();
  }
  return 0;
}



int tiziano_dmsc_dn_params_refresh(void)

{
  gain_old = gain_old + 0x200;
  tiziano_dmsc_params_refresh();
  tisp_dmsc_all_reg_refresh(gain_old);
  return 0;
}



int tiziano_dmsc_init(void)

{
  char *puVar1;
  
  if (dmsc_wdr_en == 0) {
    dmsc_uu_thres_array_now = dmsc_uu_thres_array;
    dmsc_uu_stren_array_now = (char *)&dmsc_uu_stren_array;
    dmsc_sp_d_w_stren_array_now = (char *)&dmsc_sp_d_w_stren_array;
    dmsc_sp_d_b_stren_array_now = (char *)&dmsc_sp_d_b_stren_array;
    dmsc_sp_ud_w_stren_array_now = (char *)&dmsc_sp_ud_w_stren_array;
    puVar1 = (char *)&dmsc_sp_ud_b_stren_array;
  }
  else {
    dmsc_uu_thres_array_now = dmsc_uu_thres_wdr_array;
    dmsc_uu_stren_array_now = dmsc_uu_stren_wdr_array;
    dmsc_sp_d_w_stren_array_now = dmsc_sp_d_w_stren_wdr_array;
    dmsc_sp_d_b_stren_array_now = dmsc_sp_d_b_stren_wdr_array;
    dmsc_sp_ud_w_stren_array_now = dmsc_sp_ud_w_stren_wdr_array;
    puVar1 = dmsc_sp_ud_b_stren_wdr_array;
  }
  gain_old = 0xffffffff;
  dmsc_sp_ud_b_stren_array_now = puVar1;
  tiziano_dmsc_params_refresh();
  tisp_dmsc_par_refresh(0x10000,0x10000,1);
  return 0;
}



char tisp_dmsc_sharpness_get(void)

{
  return dmsc_ratio;
}



int tiziano_ccm_lut_parameter(int param_1)

{
  int iVar1;
  unsigned int uVar2;
  int iVar3;
  int *piVar4;
  
  piVar4 = (int *)(param_1 + 4);
  iVar3 = 0;
  do {
    if (iVar3 == 8) {
      uVar2 = *(unsigned int *)(param_1 + 0x20);
    }
    else {
      uVar2 = *piVar4 << 0x10 | piVar4[-1];
    }
    system_reg_write(0x5000,1);
    iVar1 = iVar3 + 0x2802;
    iVar3 = iVar3 + 2;
    system_reg_write(iVar1 * 2,uVar2);
    piVar4 = piVar4 + 2;
  } while (iVar3 != 10);
  if (ccm_real == 1) {
    system_reg_write(0x5018,DAT_000a9d50 << 0x10 | tiziano_ccm_dp_cfg << 0xc | DAT_000a9d54);
    if (DAT_000a9d50 == DAT_000a9d54) {
      uVar2 = 1;
    }
    else {
      if (DAT_000a9d54 < DAT_000a9d50) {
        uVar2 = DAT_000a9d50 - DAT_000a9d54;
      }
      else {
        uVar2 = DAT_000a9d54 - DAT_000a9d50;
      }
      uVar2 = 0x20 / uVar2;
    }
    system_reg_write(0x501c,uVar2);
    system_reg_write(0x5020,DAT_000a9d5c << 0x10 | DAT_000a9d58);
  }
  return 0;
}



void jz_isp_ccm_reg2par(unsigned int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int *puVar2;
  
  puVar2 = param_1 + 9;
  do {
    uVar1 = *param_2;
    if (0x1fff < uVar1) {
      uVar1 = uVar1 - 0x4000;
    }
    *param_1 = uVar1;
    param_1 = param_1 + 1;
    param_2 = param_2 + 1;
  } while (param_1 != puVar2);
  return;
}



void jz_isp_ccm_para2reg(unsigned int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int *puVar2;
  
  puVar2 = param_1 + 9;
  do {
    uVar1 = *param_2;
    if ((int)uVar1 < 0) {
      uVar1 = uVar1 & 0x3fff;
    }
    *param_1 = uVar1;
    param_1 = param_1 + 1;
    param_2 = param_2 + 1;
  } while (param_1 != puVar2);
  return;
}



void jz_isp_ccm_parameter_convert(void)

{
  code *UNRECOVERED_JUMPTABLE;
  
  UNRECOVERED_JUMPTABLE = jz_isp_ccm_reg2par;
  jz_isp_ccm_reg2par(&_ccm_a_parameter,tiziano_ccm_a_now);
  (*UNRECOVERED_JUMPTABLE)(&_ccm_t_parameter,tiziano_ccm_t_now);
                    // WARNING: Could not recover jumptable at 0x00036df8. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)(&_ccm_d_parameter,tiziano_ccm_d_now);
  return;
}



void tiziano_ct_ccm_interpolation(unsigned int param_1,int param_2)

{
  int iVar1;
  unsigned int uVar2;
  int iVar3;
  unsigned int uVar4;
  int iVar5;
  int *piVar6;
  int *__src;
  unsigned int uVar7;
  int iVar8;
  unsigned int uVar9;
  
  uVar9 = 0xed8 - param_2;
  uVar2 = param_2 + 0xaf0;
  uVar7 = param_2 + 0xed8;
  uVar4 = 5000 - param_2;
  if (uVar4 < param_1) {
    ct_flag_31782 = 0;
  }
  else if (uVar7 < param_1) {
    ct_flag_31782 = 1;
  }
  else if (uVar9 < param_1) {
    ct_flag_31782 = 2;
  }
  else if (uVar2 < param_1) {
    ct_flag_31782 = 3;
  }
  else {
    ct_flag_31782 = 4;
  }
  if (ccm_real == 0) {
    if (ct_flag_31782 == 0) {
      if (ct_flag_last_31783 == 0) {
        return;
      }
    }
    else if (((ct_flag_31782 == 2) || (ct_flag_31782 == 4)) && (ct_flag_last_31783 == ct_flag_31782)
            ) {
      return;
    }
  }
  ct_flag_last_31783 = ct_flag_31782;
  switch(ct_flag_31782) {
  case 0:
    __src = &_ccm_d_parameter;
    break;
  case 1:
    iVar3 = uVar7 - param_1;
    if (uVar7 < param_1) {
      iVar3 = param_1 - uVar7;
    }
    uVar2 = uVar4 - uVar7;
    if (uVar4 < uVar7) {
      uVar2 = uVar7 - uVar4;
    }
    iVar8 = 0;
    do {
      iVar5 = *(int *)((int)&_ccm_t_parameter + iVar8);
      iVar1 = *(int *)((int)&_ccm_d_parameter + iVar8);
      if (iVar1 < iVar5) {
        uVar4 = -((uint)((iVar5 - iVar1) * iVar3) / uVar2);
      }
      else {
        uVar4 = (uint)((iVar1 - iVar5) * iVar3) / uVar2;
      }
      piVar6 = (int *)((int)&ccm_parameter + iVar8);
      iVar8 = iVar8 + 4;
      *piVar6 = uVar4 + iVar5;
    } while (iVar8 != 0x24);
    goto switchD_00036ee0_caseD_5;
  case 2:
    __src = &_ccm_t_parameter;
    break;
  case 3:
    iVar3 = uVar2 - param_1;
    if (uVar2 < param_1) {
      iVar3 = param_1 - uVar2;
    }
    uVar4 = uVar9 - uVar2;
    if (uVar9 < uVar2) {
      uVar4 = uVar2 - uVar9;
    }
    iVar8 = 0;
    do {
      iVar5 = *(int *)((int)&_ccm_a_parameter + iVar8);
      iVar1 = *(int *)((int)&_ccm_t_parameter + iVar8);
      if (iVar1 < iVar5) {
        uVar2 = -((uint)((iVar5 - iVar1) * iVar3) / uVar4);
      }
      else {
        uVar2 = (uint)((iVar1 - iVar5) * iVar3) / uVar4;
      }
      piVar6 = (int *)((int)&ccm_parameter + iVar8);
      iVar8 = iVar8 + 4;
      *piVar6 = uVar2 + iVar5;
    } while (iVar8 != 0x24);
    goto switchD_00036ee0_caseD_5;
  case 4:
    __src = &_ccm_a_parameter;
    break;
  default:
    goto switchD_00036ee0_caseD_5;
  }
  memcpy(&ccm_parameter,__src,0x24);
switchD_00036ee0_caseD_5:
  memcpy(&DAT_000c4ac8,&ccm_parameter,0x24);
  return;
}



int jz_isp_ccm(void)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int *puVar3;
  unsigned int uVar4;
  int iVar5;
  int iVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  char auStack_58 [36];
  char auStack_34 [40];
  
  DAT_000c4ab8 = 100;
  uVar2 = _ev >> 10;
  if (ccm_real == 1) {
LAB_000370fc:
    iVar5 = 0;
    puVar3 = (unsigned int *)cm_ev_list_now;
    do {
      uVar7 = *puVar3;
      if (uVar2 <= uVar7) {
        if (iVar5 == 0) {
          DAT_000c4abc = *(unsigned int *)cm_sat_list_now;
        }
        else {
          iVar6 = iVar5 * 4 + -4;
          uVar4 = *(unsigned int *)(cm_ev_list_now + iVar6);
          if (uVar7 == uVar4) {
            DAT_000c4abc = *(unsigned int *)(cm_sat_list_now + iVar5 * 4);
          }
          else {
            uVar8 = *(unsigned int *)(cm_sat_list_now + iVar6);
            uVar1 = *(unsigned int *)(cm_sat_list_now + iVar5 * 4);
            if (uVar1 < uVar8) {
              iVar5 = uVar2 - uVar4;
              if (uVar2 <= uVar4) {
                iVar5 = uVar4 - uVar2;
              }
              uVar2 = uVar7 - uVar4;
              if (uVar7 < uVar4) {
                uVar2 = uVar4 - uVar7;
              }
              DAT_000c4abc = uVar8 - (iVar5 * (uVar8 - uVar1)) / uVar2;
            }
            else {
              iVar5 = uVar2 - uVar4;
              if (uVar2 <= uVar4) {
                iVar5 = uVar4 - uVar2;
              }
              uVar2 = uVar7 - uVar4;
              if (uVar7 < uVar4) {
                uVar2 = uVar4 - uVar7;
              }
              DAT_000c4abc = (iVar5 * (uVar1 - uVar8)) / uVar2 + uVar8;
            }
          }
        }
        goto LAB_000371e8;
      }
      iVar5 = iVar5 + 1;
      puVar3 = puVar3 + 1;
    } while (iVar5 != 9);
    DAT_000c4abc = *(unsigned int *)(cm_sat_list_now + 0x20);
  }
  else {
    uVar7 = uVar2 - DAT_000c4aac;
    if (uVar2 <= DAT_000c4aac) {
      uVar7 = DAT_000c4aac - uVar2;
    }
    if (DAT_000c4ab0 < uVar7) goto LAB_000370fc;
  }
LAB_000371e8:
  uVar2 = _ct;
  jz_isp_ccm_parameter_convert();
  if (ccm_real != 1) {
    uVar7 = uVar2 - DAT_000c4ab4;
    if (uVar2 <= DAT_000c4ab4) {
      uVar7 = DAT_000c4ab4 - uVar2;
    }
    if (uVar7 <= DAT_000c4ab8) goto LAB_00037238;
  }
  tiziano_ct_ccm_interpolation(uVar2,DAT_000c4ab8);
LAB_00037238:
  cm_control(&ccm_parameter,DAT_000c4abc,auStack_34);
  jz_isp_ccm_para2reg(auStack_58,auStack_34);
  tiziano_ccm_lut_parameter(auStack_58);
  ccm_real = 0;
  return 0;
}



int tisp_ccm_ev_update(unsigned int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  
  uVar2 = param_1 >> 10;
  uVar1 = uVar2 - DAT_000c4aac;
  if (uVar2 <= DAT_000c4aac) {
    uVar1 = DAT_000c4aac - uVar2;
  }
  _ev = param_1;
  if (DAT_000c4ab0 < uVar1) {
    jz_isp_ccm();
    DAT_000c4aac = uVar2;
  }
  return 0;
}



int tisp_ccm_ct_update(unsigned int param_1)

{
  unsigned int uVar1;
  
  uVar1 = param_1 - DAT_000c4ab4;
  if (param_1 <= DAT_000c4ab4) {
    uVar1 = DAT_000c4ab4 - param_1;
  }
  _ct = param_1;
  if (DAT_000c4ab8 < uVar1) {
    jz_isp_ccm();
    DAT_000c4ab4 = param_1;
  }
  return 0;
}



int tiziano_ccm_params_refresh(void)

{
  if (ccm_ctrl == '\0') {
    memcpy(tiziano_ccm_a_linear,&DAT_0009dfe8,0x24);
    memcpy(tiziano_ccm_t_linear,&DAT_0009e00c,0x24);
    memcpy(&cm_sat_list,&DAT_0009e078,0x24);
    memcpy(tiziano_ccm_a_wdr,&DAT_0009e09c,0x24);
    memcpy(tiziano_ccm_t_wdr,&DAT_0009e0c0,0x24);
    memcpy(tiziano_ccm_d_wdr,&DAT_0009e0e4,0x24);
    memcpy(tiziano_ccm_d_linear,&DAT_0009e030,0x24);
    memcpy(&cm_sat_list_wdr,&DAT_0009e12c,0x24);
  }
  memcpy(&tiziano_ccm_dp_cfg,&DAT_0009dfd4,0x14);
  memcpy(&cm_ev_list,&DAT_0009e054,0x24);
  memcpy(cm_ev_list_wdr,&DAT_0009e108,0x24);
  memcpy(&cm_awb_list,&DAT_0009e150,8);
  return 0;
}



int tisp_ccm_wdr_en(int param_1)

{
  ccm_wdr_en = param_1;
  if (param_1 == 1) {
    tiziano_ccm_a_now = tiziano_ccm_a_wdr;
    tiziano_ccm_t_now = tiziano_ccm_t_wdr;
    tiziano_ccm_d_now = tiziano_ccm_d_wdr;
    cm_ev_list_now = cm_ev_list_wdr;
    cm_sat_list_now = (char *)&cm_sat_list_wdr;
  }
  else {
    tiziano_ccm_a_now = tiziano_ccm_a_linear;
    tiziano_ccm_t_now = tiziano_ccm_t_linear;
    tiziano_ccm_d_now = tiziano_ccm_d_linear;
    cm_ev_list_now = (char *)&cm_ev_list;
    cm_sat_list_now = (char *)&cm_sat_list;
  }
  return 0;
}



int tiziano_ccm_dn_params_refresh(void)

{
  tiziano_ccm_params_refresh();
  ccm_real = 1;
  jz_isp_ccm();
  return 0;
}



int tiziano_ccm_init(void)

{
  if (ccm_wdr_en == 1) {
    tiziano_ccm_a_now = tiziano_ccm_a_wdr;
    tiziano_ccm_t_now = tiziano_ccm_t_wdr;
    tiziano_ccm_d_now = tiziano_ccm_d_wdr;
    cm_ev_list_now = cm_ev_list_wdr;
    cm_sat_list_now = (char *)&cm_sat_list_wdr;
  }
  else {
    tiziano_ccm_a_now = tiziano_ccm_a_linear;
    tiziano_ccm_t_now = tiziano_ccm_t_linear;
    tiziano_ccm_d_now = tiziano_ccm_d_linear;
    cm_ev_list_now = (char *)&cm_ev_list;
    cm_sat_list_now = (char *)&cm_sat_list;
  }
  memset(&ccm_real,0,0x18);
  memset(&ccm_ctrl,0,0x28);
  DAT_000c4aac = _ev >> 10;
  DAT_000c4ab4 = _ct;
  DAT_000c4abc = 0x100;
  ccm_real = 1;
  DAT_000c4ab8 = 100;
  DAT_000c4ab0 = 0x28;
  tiziano_ccm_params_refresh();
  memcpy(&ccm_parameter,&_ccm_d_parameter,0x24);
  jz_isp_ccm();
  return 0;
}



void tisp_ccm_get_attr(void *param_1)

{
  memcpy(param_1,&ccm_ctrl,0x28);
  return;
}



// WARNING: Removing unreachable block (ram,0x000370d8)
// WARNING: Removing unreachable block (ram,0x000370e8)
// WARNING: Removing unreachable block (ram,0x000370ec)

int tisp_ccm_set_attr(void *param_1)

{
  unsigned int uVar1;
  int iVar2;
  unsigned int uVar3;
  unsigned int *puVar4;
  unsigned int uVar5;
  int iVar6;
  int *puVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  char auStack_58 [36];
  char auStack_34 [16];
  
  memcpy(&ccm_ctrl,param_1,0x28);
  if (ccm_ctrl == '\x01') {
    memcpy(tiziano_ccm_a_linear,&DAT_000c4ac8,0x24);
    memcpy(tiziano_ccm_t_linear,&DAT_000c4ac8,0x24);
    memcpy(tiziano_ccm_d_linear,&DAT_000c4ac8,0x24);
    memcpy(tiziano_ccm_a_wdr,&DAT_000c4ac8,0x24);
    memcpy(tiziano_ccm_t_wdr,&DAT_000c4ac8,0x24);
    memcpy(tiziano_ccm_d_wdr,&DAT_000c4ac8,0x24);
    iVar2 = 0;
    if (DAT_000c4ac5 == '\0') {
      do {
        *(int *)((int)&cm_sat_list_wdr + iVar2) = 0x100;
        puVar7 = (int *)((int)&cm_sat_list + iVar2);
        iVar2 = iVar2 + 4;
        *puVar7 = 0x100;
      } while (iVar2 != 0x24);
    }
  }
  else {
    memcpy(tiziano_ccm_a_linear,&DAT_0009dfe8,0x24);
    memcpy(tiziano_ccm_t_linear,&DAT_0009e00c,0x24);
    memcpy(tiziano_ccm_d_linear,&DAT_0009e030,0x24);
    memcpy(&cm_sat_list,&DAT_0009e078,0x24);
    memcpy(tiziano_ccm_a_wdr,&DAT_0009e09c,0x24);
    memcpy(tiziano_ccm_t_wdr,&DAT_0009e0c0,0x24);
    memcpy(tiziano_ccm_d_wdr,&DAT_0009e0e4,0x24);
    memcpy(&cm_sat_list_wdr,&DAT_0009e12c,0x24);
  }
  ccm_real = 1;
  DAT_000c4ab8 = 100;
  uVar3 = _ev >> 10;
  iVar2 = 0;
  puVar4 = (unsigned int *)cm_ev_list_now;
  do {
    uVar8 = *puVar4;
    if (uVar3 <= uVar8) {
      if (iVar2 == 0) {
        DAT_000c4abc = *(unsigned int *)cm_sat_list_now;
      }
      else {
        iVar6 = iVar2 * 4 + -4;
        uVar5 = *(unsigned int *)(cm_ev_list_now + iVar6);
        if (uVar8 == uVar5) {
          DAT_000c4abc = *(unsigned int *)(cm_sat_list_now + iVar2 * 4);
        }
        else {
          uVar9 = *(unsigned int *)(cm_sat_list_now + iVar6);
          uVar1 = *(unsigned int *)(cm_sat_list_now + iVar2 * 4);
          if (uVar1 < uVar9) {
            iVar2 = uVar3 - uVar5;
            if (uVar3 <= uVar5) {
              iVar2 = uVar5 - uVar3;
            }
            uVar3 = uVar8 - uVar5;
            if (uVar8 < uVar5) {
              uVar3 = uVar5 - uVar8;
            }
            DAT_000c4abc = uVar9 - (iVar2 * (uVar9 - uVar1)) / uVar3;
          }
          else {
            iVar2 = uVar3 - uVar5;
            if (uVar3 <= uVar5) {
              iVar2 = uVar5 - uVar3;
            }
            uVar3 = uVar8 - uVar5;
            if (uVar8 < uVar5) {
              uVar3 = uVar5 - uVar8;
            }
            DAT_000c4abc = (iVar2 * (uVar1 - uVar9)) / uVar3 + uVar9;
          }
        }
      }
      goto LAB_000371e0;
    }
    iVar2 = iVar2 + 1;
    puVar4 = puVar4 + 1;
  } while (iVar2 != 9);
  DAT_000c4abc = *(unsigned int *)(cm_sat_list_now + 0x20);
LAB_000371e0:
  uVar3 = _ct;
  jz_isp_ccm_parameter_convert();
  if (ccm_real != 1) {
    uVar8 = uVar3 - DAT_000c4ab4;
    if (uVar3 <= DAT_000c4ab4) {
      uVar8 = DAT_000c4ab4 - uVar3;
    }
    if (uVar8 <= DAT_000c4ab8) goto LAB_00037238;
  }
  tiziano_ct_ccm_interpolation(uVar3,DAT_000c4ab8);
LAB_00037238:
  cm_control(&ccm_parameter,DAT_000c4abc,auStack_34);
  jz_isp_ccm_para2reg(auStack_58,auStack_34);
  tiziano_ccm_lut_parameter(auStack_58);
  ccm_real = 0;
  return 0;
}



int tisp_ccm_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0xa9:
    __src = (char *)&tiziano_ccm_dp_cfg;
    __n = 0x14;
    goto LAB_00037a3c;
  case 0xaa:
    __src = tiziano_ccm_a_linear;
    break;
  case 0xab:
    __src = tiziano_ccm_t_linear;
    break;
  case 0xac:
    __src = tiziano_ccm_d_linear;
    break;
  case 0xad:
    __src = (char *)&cm_ev_list;
    break;
  case 0xae:
    __src = (char *)&cm_sat_list;
    break;
  case 0xaf:
    __src = tiziano_ccm_a_wdr;
    break;
  case 0xb0:
    __src = tiziano_ccm_t_wdr;
    break;
  case 0xb1:
    __src = tiziano_ccm_d_wdr;
    break;
  case 0xb2:
    __src = cm_ev_list_wdr;
    break;
  case 0xb3:
    __src = (char *)&cm_sat_list_wdr;
    break;
  case 0xb4:
    __src = (char *)&cm_awb_list;
    __n = 8;
    goto LAB_00037a3c;
  default:
    isp_printf(2,"%s,%d: ccm not support param id %d\n","tisp_ccm_param_array_get",0x1d3,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_00037a3c:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_ccm_param_array_set(int param_1,void *param_2,size_t *param_3)

{
  size_t __n;
  char *__dest;
  
  switch(param_1) {
  case 0xa9:
    __dest = (char *)&tiziano_ccm_dp_cfg;
    __n = 0x14;
    goto LAB_00037b60;
  case 0xaa:
    __dest = tiziano_ccm_a_linear;
    break;
  case 0xab:
    __dest = tiziano_ccm_t_linear;
    break;
  case 0xac:
    __dest = tiziano_ccm_d_linear;
    break;
  case 0xad:
    __dest = (char *)&cm_ev_list;
    break;
  case 0xae:
    __dest = (char *)&cm_sat_list;
    break;
  case 0xaf:
    __dest = tiziano_ccm_a_wdr;
    break;
  case 0xb0:
    __dest = tiziano_ccm_t_wdr;
    break;
  case 0xb1:
    __dest = tiziano_ccm_d_wdr;
    break;
  case 0xb2:
    __dest = cm_ev_list_wdr;
    break;
  case 0xb3:
    __dest = (char *)&cm_sat_list_wdr;
    break;
  case 0xb4:
    __dest = (char *)&cm_awb_list;
    __n = 8;
    goto LAB_00037b60;
  default:
    isp_printf(2,"%s,%d: ccm not support param id %d\n","tisp_ccm_param_array_set",0x214,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_00037b60:
  *param_3 = __n;
  memcpy(__dest,param_2,__n);
  ccm_real = 1;
  jz_isp_ccm();
  return 0;
}



unsigned int tiziano_bcsh_StrenCal_part_0(unsigned int param_1,unsigned int param_2,unsigned int param_3,unsigned int param_4,unsigned int param_5)

{
  int iVar1;
  unsigned int uVar2;
  int iVar3;
  
  iVar1 = param_2 - param_1;
  if (param_2 < param_1) {
    iVar1 = param_1 - param_2;
  }
  uVar2 = param_2 - param_3;
  if (param_2 < param_3) {
    uVar2 = param_3 - param_2;
  }
  iVar3 = param_4 - param_5;
  if (param_4 < param_5) {
    iVar3 = param_5 - param_4;
  }
  return (iVar1 * iVar3 + uVar2 * param_4) / uVar2;
}



void tiziano_bcsh_dump2(int *param_1,int *param_2,int *param_3,
                       int *param_4,int *param_5,int *param_6,
                       int *param_7,int *param_8,int *param_9,
                       int *param_10,int *param_11,int *param_12,
                       int *param_13,int *param_14,int *param_15,
                       int *param_16,int *param_17,int *param_18,
                       int *param_19)

{
  isp_printf(2,"-----BCSH regs dump-----\n");
  isp_printf(2,"%d:  %d:\n",*param_1,param_1[1]);
  isp_printf(2,"%d:   %d:\n",*param_2,param_2[1]);
  isp_printf(2,"%d:   %d:\n",*param_3,param_3[1]);
  isp_printf(2,"%d:   %d:\n",param_1[2],param_1[3]);
  isp_printf(2,"%d:   %d:\n",param_2[2],param_2[3]);
  isp_printf(2,"%d:   %d:\n",param_3[2],param_3[3]);
  isp_printf(2,"%d:   %d:\n",*param_5,*param_4);
  isp_printf(2,"%d:   %d:\n",param_5[1],param_4[1]);
  isp_printf(2,"%d:   %d:\n",param_5[2],param_4[2]);
  isp_printf(2,"%d:   %d:\n",param_13[1],*param_13);
  isp_printf(2,&_LC4,param_13[2]);
  isp_printf(2,"%d:   %d:\n",param_13[4],param_13[3]);
  isp_printf(2,&_LC5,param_13[5]);
  isp_printf(2,"%d:   %d:\n",param_13[7],param_13[6]);
  isp_printf(2,&_LC5,param_13[8]);
  isp_printf(2,"%d:   %d:\n",*param_15,*param_14);
  isp_printf(2,"%d:   %d:\n",param_14[2],param_14[1]);
  isp_printf(2,"%d:   %d:\n",*param_17,*param_16);
  isp_printf(2,"%d:   %d:\n",param_16[2],param_16[1]);
  isp_printf(2,"%d:   %d:\n",*param_19,*param_18);
  isp_printf(2,"%d:   %d:\n",param_18[2],param_18[1]);
  isp_printf(2,"%d:   %d:\n",*param_7,*param_6);
  isp_printf(2,"%d:   %d:\n",*param_9,*param_8);
  isp_printf(2,"%d:   %d:\n",param_6[2],param_6[1]);
  isp_printf(2,"%d:   %d:\n",param_6[4],param_6[3]);
  isp_printf(2,"%d    %d  %d\n",param_12[1],*param_12,*param_10);
  isp_printf(2,"%d    %d \n",param_10[2],param_10[1]);
  isp_printf(2,"%d    %d \n",*param_11,param_11[1]);
  isp_printf(2,"%d    %d \n",param_11[2],param_11[3]);
  return;
}



int
tiziano_bcsh_lut_parameter
          (int *param_1,int *param_2,int *param_3,unsigned int *param_4,int *param_5,unsigned int *param_6,
          int *param_7,unsigned int *param_8,int *param_9,unsigned int *param_10,int *param_11,int *param_12,
          unsigned int *param_13,unsigned int *param_14,int *param_15,unsigned int *param_16,int *param_17,unsigned int *param_18,
          int *param_19)

{
  int iVar1;
  unsigned int uVar2;
  int iVar3;
  char bVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  int iVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  int iVar11;
  unsigned int uVar12;
  int iVar13;
  unsigned int uVar14;
  int iVar15;
  int iVar16;
  int iVar17;
  unsigned int uVar18;
  unsigned int uVar19;
  char bVar20;
  unsigned int uVar21;
  unsigned int uVar22;
  unsigned int uVar23;
  unsigned int uVar24;
  unsigned int uVar25;
  unsigned int uVar26;
  unsigned int uVar27;
  unsigned int uVar28;
  unsigned int uVar29;
  unsigned int uVar30;
  int iVar31;
  unsigned int uVar32;
  int iVar33;
  unsigned int uVar34;
  int iVar35;
  unsigned int uVar36;
  int iVar37;
  unsigned int uVar38;
  int iVar39;
  unsigned int uVar40;
  int iVar41;
  unsigned int uVar42;
  int iVar43;
  unsigned int uVar44;
  unsigned int uVar45;
  unsigned int uVar46;
  int iVar47;
  unsigned int uVar48;
  int iVar49;
  unsigned int uVar50;
  int iVar51;
  unsigned int uVar52;
  unsigned int uVar53;
  unsigned int uVar54;
  unsigned int uVar55;
  unsigned int uVar56;
  unsigned int uVar57;
  unsigned int uVar58;
  int iVar59;
  unsigned int uVar60;
  unsigned int uVar61;
  
  iVar43 = *param_2;
  iVar41 = *param_3;
  uVar44 = param_2[1];
  iVar39 = param_1[2];
  uVar42 = param_3[1];
  uVar40 = param_1[3];
  iVar37 = param_2[2];
  iVar35 = param_3[2];
  uVar38 = param_2[3];
  iVar33 = *param_5;
  uVar36 = param_3[3];
  iVar31 = param_5[1];
  uVar34 = *param_4;
  uVar60 = param_13[1];
  uVar32 = param_4[1];
  uVar30 = param_4[2];
  iVar7 = param_5[2];
  uVar57 = param_13[4];
  uVar61 = *param_13;
  uVar21 = param_13[6];
  uVar58 = param_13[3];
  uVar45 = param_13[2];
  uVar8 = param_13[5];
  uVar9 = param_13[7];
  uVar10 = param_13[8];
  uVar22 = *param_14;
  iVar11 = *param_15;
  uVar12 = param_14[2];
  uVar23 = param_14[1];
  uVar24 = *param_16;
  iVar13 = *param_17;
  uVar14 = param_16[2];
  uVar25 = param_16[1];
  uVar26 = *param_18;
  iVar15 = *param_19;
  uVar27 = *param_6;
  uVar46 = param_18[2] << 0x10 | param_18[1];
  uVar55 = param_6[4];
  iVar16 = *param_7;
  iVar47 = *param_12;
  iVar17 = *param_9;
  uVar28 = *param_8;
  uVar18 = param_6[2];
  uVar29 = param_6[1];
  uVar56 = param_6[3];
  iVar1 = param_12[1];
  uVar53 = param_10[2];
  uVar48 = *param_10;
  iVar51 = *param_11;
  uVar54 = param_10[1];
  iVar49 = param_11[2];
  uVar52 = param_11[1];
  uVar50 = param_11[3];
  uVar2 = BCSH_ev >> 10;
  if (DAT_000c4ba4 < 10) {
    bVar4 = DAT_000c4ba4;
    if (DAT_000c4ba4 == 0) {
      bVar4 = 1;
    }
  }
  else {
    bVar4 = 9;
  }
  if (DAT_000c4bac < 10) {
    bVar20 = DAT_000c4bac;
    if (DAT_000c4bac == 0) {
      bVar20 = 1;
    }
  }
  else {
    bVar20 = 9;
  }
  if ((tisp_BCSH_au32clip0 == '\x01') &&
     (uVar5 = *(unsigned int *)(tisp_BCSH_au32EvList_now + (uint)(char)(bVar4 - 1) * 4), uVar2 < uVar5)) {
    iVar59 = uVar2 - 1;
    if (uVar2 < 2) {
      iVar59 = 1 - uVar2;
    }
    uVar46 = uVar5 - 1;
    if (uVar5 == 0) {
      uVar46 = 1;
    }
    iVar3 = 1 - uVar2;
    if (uVar2 >= 2) {
      iVar3 = uVar2 - 1;
    }
    uVar2 = 1;
    if (uVar5 != 0) {
      uVar2 = uVar5 - 1;
    }
    uVar46 = (uint)(iVar3 * *(int *)(tisp_BCSH_au32HLSP_now + 4)) / uVar2 |
             (uint)(iVar59 * *(int *)(tisp_BCSH_au32HLSP_now + 8)) / uVar46 << 0x10;
  }
  else if (DAT_000c4ba8 == '\x01') {
    uVar5 = *(unsigned int *)(tisp_BCSH_au32EvList_now + 0x20);
    if (uVar2 < uVar5) {
      uVar19 = *(unsigned int *)(tisp_BCSH_au32EvList_now + (uint)(char)(bVar20 - 1) * 4);
      if (uVar19 < uVar2) {
        iVar59 = *(int *)(tisp_BCSH_au32HLSP_now + 8);
        if (iVar59 == 0) {
          iVar59 = *(int *)(tisp_BCSH_au32HLSP_now + 4);
          uVar46 = 0;
        }
        else {
          uVar46 = uVar19 - uVar5;
          if (uVar19 <= uVar5) {
            uVar46 = uVar5 - uVar19;
          }
          uVar46 = (iVar59 - ((uVar2 - uVar19) * iVar59) / uVar46) * 0x10000;
          iVar59 = *(int *)(tisp_BCSH_au32HLSP_now + 4);
        }
        if (iVar59 != 0) {
          uVar6 = uVar5 - uVar19;
          if (uVar5 < uVar19) {
            uVar6 = uVar19 - uVar5;
          }
          uVar46 = uVar46 | iVar59 - ((uVar2 - uVar19) * iVar59) / uVar6;
        }
      }
    }
    else {
      uVar46 = 0;
    }
  }
  system_reg_write(0x8000,*param_1 << 0x10 | param_1[1]);
  system_reg_write(0x8004,iVar43 << 0x10 | uVar44);
  system_reg_write(0x8008,iVar41 << 0x10 | uVar42);
  system_reg_write(0x800c,iVar39 << 0x10 | uVar40);
  system_reg_write(0x8010,iVar37 << 0x10 | uVar38);
  system_reg_write(0x8014,iVar35 << 0x10 | uVar36);
  system_reg_write(0x8018,iVar33 << 0x10 | uVar34);
  system_reg_write(0x801c,iVar31 << 0x10 | uVar32);
  system_reg_write(0x8020,iVar7 << 0x10 | uVar30);
  system_reg_write(0x8024,uVar60 << 0x10 | uVar61);
  system_reg_write(0x8028,uVar45);
  system_reg_write(0x802c,uVar57 << 0x10 | uVar58);
  system_reg_write(0x8030,uVar8);
  system_reg_write(0x8034,uVar9 << 0x10 | uVar21);
  system_reg_write(0x8038,uVar10);
  system_reg_write(0x803c,iVar11 << 0x10 | uVar22);
  system_reg_write(0x8040,uVar12 << 0x10 | uVar23);
  system_reg_write(0x8044,iVar13 << 0x10 | uVar24);
  system_reg_write(0x8048,uVar14 << 0x10 | uVar25);
  system_reg_write(0x804c,iVar15 << 0x10 | uVar26);
  system_reg_write(0x8050,uVar46);
  system_reg_write(0x8054,iVar16 << 0x10 | uVar27);
  system_reg_write(0x8058,iVar17 << 0x10 | uVar28);
  system_reg_write(0x805c,uVar18 << 0x10 | uVar29);
  system_reg_write(0x8060,uVar55 << 0x10 | uVar56);
  system_reg_write(0x8064,iVar1 << 0x10 | iVar47 << 3 | uVar48);
  system_reg_write(0x8068,uVar53 << 0x10 | uVar54);
  system_reg_write(0x806c,iVar51 << 0x10 | uVar52);
  system_reg_write(0x8070,iVar49 << 0x10 | uVar50);
  return 0;
}



void tiziano_bcsh_reg2para(unsigned int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int *puVar2;
  
  puVar2 = param_1 + 9;
  do {
    uVar1 = *param_2;
    if (0x1fff < uVar1) {
      uVar1 = uVar1 - 0x4000;
    }
    *param_1 = uVar1;
    param_1 = param_1 + 1;
    param_2 = param_2 + 1;
  } while (param_1 != puVar2);
  return;
}



void tiziano_bcsh_para2reg(unsigned int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int *puVar2;
  
  puVar2 = param_1 + 9;
  do {
    uVar1 = *param_2;
    if ((int)uVar1 < 0) {
      uVar1 = uVar1 & 0x3fff;
    }
    *param_1 = uVar1;
    param_1 = param_1 + 1;
    param_2 = param_2 + 1;
  } while (param_1 != puVar2);
  return;
}



void tiziano_bcsh_Tccm_Comp2Orig(void)

{
  code *UNRECOVERED_JUMPTABLE;
  
  UNRECOVERED_JUMPTABLE = tiziano_bcsh_reg2para;
  tiziano_bcsh_reg2para(&tisp_BCSH_as32CCMMatrix_d,tisp_BCSH_au32CCMMatrix_d_now);
  (*UNRECOVERED_JUMPTABLE)(&tisp_BCSH_as32CCMMatrix_t,tisp_BCSH_au32CCMMatrix_t_now);
                    // WARNING: Could not recover jumptable at 0x000385e8. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)(&tisp_BCSH_as32CCMMatrix_a,tisp_BCSH_au32CCMMatrix_a_now);
  return;
}



void tiziano_ct_bcsh_interpolation(unsigned int param_1)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  int iVar5;
  int *__src;
  unsigned int uVar6;
  
  if (param_1 < 0x1357) {
    if (param_1 < 0xf0b) {
      if (param_1 < 0xea7) {
        if (param_1 < 0xb23) {
          ct_flag_31949 = 4;
        }
        else {
          ct_flag_31949 = 3;
        }
      }
      else {
        ct_flag_31949 = 2;
      }
    }
    else {
      ct_flag_31949 = 1;
    }
  }
  else {
    ct_flag_31949 = 0;
  }
  if (BCSH_real == 0) {
    if (ct_flag_31949 == 0) {
      if (ct_flag_last_31950 == 0) {
        return;
      }
    }
    else if (((ct_flag_31949 == 2) || (ct_flag_31949 == 4)) && (ct_flag_last_31950 == ct_flag_31949)
            ) {
      return;
    }
  }
  ct_flag_last_31950 = ct_flag_31949;
  switch(ct_flag_31949) {
  case 0:
    __src = &tisp_BCSH_as32CCMMatrix_d;
    break;
  case 1:
    iVar2 = 0xf0a - param_1;
    if (0xf0a < param_1) {
      iVar2 = param_1 - 0xf0a;
    }
    iVar5 = 0;
    do {
      iVar3 = *(int *)((int)&tisp_BCSH_as32CCMMatrix_t + iVar5);
      iVar1 = *(int *)((int)&tisp_BCSH_as32CCMMatrix_d + iVar5);
      if (iVar1 < iVar3) {
        uVar6 = -((uint)((iVar3 - iVar1) * iVar2) / 0x44c);
      }
      else {
        uVar6 = (uint)((iVar1 - iVar3) * iVar2) / 0x44c;
      }
      piVar4 = (int *)((int)&tisp_BCSH_as32CCMMatrix + iVar5);
      iVar5 = iVar5 + 4;
      *piVar4 = uVar6 + iVar3;
    } while (iVar5 != 0x24);
    goto switchD_000386b8_caseD_5;
  case 2:
    __src = &tisp_BCSH_as32CCMMatrix_t;
    break;
  case 3:
    iVar2 = 0xb22 - param_1;
    if (0xb22 < param_1) {
      iVar2 = param_1 - 0xb22;
    }
    iVar5 = 0;
    do {
      iVar3 = *(int *)((int)&tisp_BCSH_as32CCMMatrix_a + iVar5);
      iVar1 = *(int *)((int)&tisp_BCSH_as32CCMMatrix_t + iVar5);
      if (iVar1 < iVar3) {
        uVar6 = -((uint)((iVar3 - iVar1) * iVar2) / 900);
      }
      else {
        uVar6 = (uint)((iVar1 - iVar3) * iVar2) / 900;
      }
      piVar4 = (int *)((int)&tisp_BCSH_as32CCMMatrix + iVar5);
      iVar5 = iVar5 + 4;
      *piVar4 = uVar6 + iVar3;
    } while (iVar5 != 0x24);
    goto switchD_000386b8_caseD_5;
  case 4:
    __src = &tisp_BCSH_as32CCMMatrix_a;
    break;
  default:
    goto switchD_000386b8_caseD_5;
  }
  memcpy(&tisp_BCSH_as32CCMMatrix,__src,0x24);
switchD_000386b8_caseD_5:
  memcpy(&DAT_000c4c50,&tisp_BCSH_as32CCMMatrix,0x24);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tiziano_bcsh_Tccm_RGBYUV(int *param_1,int *param_2,int *param_3,int *param_4)

{
  int uVar1;
  int uVar2;
  int iVar3;
  int *piVar4;
  unsigned int uVar5;
  int *piVar6;
  int iVar7;
  int *piVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  unsigned int uVar12;
  int iVar13;
  int iVar14;
  unsigned int uVar15;
  int local_190 [6];
  int local_178 [77];
  int local_44;
  int *local_40;
  int local_3c;
  int local_38;
  int local_34;
  int local_30;
  int local_2c;
  
  piVar8 = local_178 + 0x36;
  piVar6 = piVar8;
  do {
    iVar7 = *param_2;
    if (iVar7 < 0) {
      *piVar6 = -1;
      iVar7 = -iVar7;
    }
    else {
      *piVar6 = 1;
    }
    piVar6[1] = iVar7;
    piVar6 = piVar6 + 2;
    param_2 = param_2 + 1;
  } while (local_178 + 0x48 != piVar6);
  piVar6 = local_178 + 0x24;
  do {
    iVar7 = *param_3;
    if (iVar7 < 0) {
      *piVar6 = -1;
      iVar7 = -iVar7;
    }
    else {
      *piVar6 = 1;
    }
    piVar6[1] = iVar7;
    piVar6 = piVar6 + 2;
    param_3 = param_3 + 1;
  } while (piVar8 != piVar6);
  piVar6 = local_178 + 0x12;
  do {
    iVar7 = *param_4;
    if (iVar7 < 0) {
      *piVar6 = -1;
      iVar7 = -iVar7;
    }
    else {
      *piVar6 = 1;
    }
    piVar6[1] = iVar7;
    piVar6 = piVar6 + 2;
    param_4 = param_4 + 1;
  } while (local_178 + 0x24 != piVar6);
  local_40 = param_1 + 9;
  piVar6 = param_1;
  do {
    local_30 = *piVar8;
    local_34 = piVar8[1];
    iVar9 = local_30 * local_178[36];
    iVar7 = fix_point_mult2_32(0x10,local_34,local_178[37] << 6);
    iVar14 = piVar8[2];
    iVar13 = piVar8[3];
    iVar10 = iVar14 * local_178[42];
    iVar3 = fix_point_mult2_32(0x10,iVar13,local_178[43] << 6);
    iVar11 = piVar8[4];
    local_38 = iVar10 * iVar3 + iVar9 * iVar7;
    local_3c = iVar11 * local_178[48];
    iVar3 = piVar8[5];
    iVar7 = fix_point_mult2_32(0x10,iVar3,local_178[49] << 6);
    iVar7 = local_3c * iVar7;
    local_3c = local_30 * local_178[38];
    *piVar6 = iVar7 + local_38;
    local_38 = fix_point_mult2_32(0x10,local_34,local_178[39] << 6);
    local_38 = local_3c * local_38;
    local_3c = iVar14 * local_178[44];
    iVar7 = fix_point_mult2_32(0x10,iVar13,local_178[45] << 6);
    iVar7 = local_3c * iVar7;
    local_3c = iVar11 * local_178[50];
    local_38 = iVar7 + local_38;
    iVar7 = fix_point_mult2_32(0x10,iVar3,local_178[51] << 6);
    piVar6[1] = local_3c * iVar7 + local_38;
    local_3c = local_30 * local_178[40];
    iVar7 = fix_point_mult2_32(0x10,local_34,local_178[41] << 6);
    local_3c = local_3c * iVar7;
    iVar14 = iVar14 * local_178[46];
    iVar7 = fix_point_mult2_32(0x10,iVar13,local_178[47] << 6);
    iVar7 = local_3c + iVar14 * iVar7;
    iVar11 = iVar11 * local_178[52];
    iVar3 = fix_point_mult2_32(0x10,iVar3,local_178[53] << 6);
    iVar9 = 0;
    piVar6[2] = iVar11 * iVar3 + iVar7;
    piVar4 = local_178 + 0x48;
    do {
      iVar7 = *(int *)((int)piVar6 + iVar9);
      if (iVar7 < 0) {
        *piVar4 = -1;
        iVar7 = -iVar7;
      }
      else {
        *piVar4 = 1;
      }
      iVar9 = iVar9 + 4;
      piVar4[1] = iVar7;
      piVar4 = piVar4 + 2;
    } while (iVar9 != 0xc);
    iVar10 = local_178[72] * local_178[18];
    local_2c = local_178[72];
    local_30 = local_178[73];
    iVar3 = fix_point_mult2_32(0x10,local_178[73],local_178[19]);
    uVar1 = local_178[75];
    iVar11 = local_178[74] * local_178[24];
    local_34 = local_178[74];
    iVar9 = fix_point_mult2_32(0x10,local_178[75],local_178[25]);
    uVar2 = local_44;
    iVar7 = local_178[76];
    local_38 = iVar11 * iVar9 + iVar10 * iVar3;
    local_3c = local_178[76] * local_178[30];
    iVar3 = fix_point_mult2_32(0x10,local_44,local_178[31]);
    iVar3 = local_3c * iVar3;
    local_3c = local_2c * local_178[20];
    *piVar6 = iVar3 + local_38;
    local_38 = fix_point_mult2_32(0x10,local_30,local_178[21]);
    local_38 = local_3c * local_38;
    local_3c = local_34 * local_178[26];
    iVar3 = fix_point_mult2_32(0x10,uVar1,local_178[27]);
    iVar3 = local_3c * iVar3;
    local_3c = iVar7 * local_178[32];
    local_38 = iVar3 + local_38;
    iVar3 = fix_point_mult2_32(0x10,uVar2,local_178[33]);
    piVar6[1] = local_3c * iVar3 + local_38;
    local_3c = local_2c * local_178[22];
    local_38 = fix_point_mult2_32(0x10,local_30,local_178[23]);
    local_38 = local_3c * local_38;
    local_3c = local_34 * local_178[28];
    iVar3 = fix_point_mult2_32(0x10,uVar1,local_178[29]);
    local_38 = local_38 + local_3c * iVar3;
    local_3c = iVar7 * local_178[34];
    iVar7 = fix_point_mult2_32(0x10,uVar2,local_178[35]);
    piVar4 = piVar6 + 3;
    piVar6[2] = local_3c * iVar7 + local_38;
    piVar8 = piVar8 + 6;
    piVar6 = piVar4;
  } while (local_40 != piVar4);
  uVar5 = (uint)bcsh_hue;
  uVar12 = DAT_000a9ff0;
  uVar15 = DAT_000a9fe4;
  if (uVar5 != 0x3c) {
    if (uVar5 < 0x3d) {
      if (DAT_000a9ff0 < CosValue) {
        iVar7 = HueIndex - uVar5;
        if (HueIndex < uVar5) {
          iVar7 = uVar5 - HueIndex;
        }
        uVar12 = HueIndex - DAT_000a9ffc;
        if (HueIndex <= DAT_000a9ffc) {
          uVar12 = DAT_000a9ffc - HueIndex;
        }
        uVar12 = -((iVar7 * (CosValue - DAT_000a9ff0)) / uVar12);
      }
      else {
        iVar7 = HueIndex - uVar5;
        if (HueIndex < uVar5) {
          iVar7 = uVar5 - HueIndex;
        }
        uVar12 = HueIndex - DAT_000a9ffc;
        if (HueIndex <= DAT_000a9ffc) {
          uVar12 = DAT_000a9ffc - HueIndex;
        }
        uVar12 = (iVar7 * (DAT_000a9ff0 - CosValue)) / uVar12;
      }
      uVar12 = CosValue + uVar12;
      if (DAT_000a9fe4 < SinValue) {
        iVar7 = HueIndex - uVar5;
        if (HueIndex < uVar5) {
          iVar7 = uVar5 - HueIndex;
        }
        uVar15 = HueIndex - DAT_000a9ffc;
        if (HueIndex <= DAT_000a9ffc) {
          uVar15 = DAT_000a9ffc - HueIndex;
        }
        uVar15 = -((iVar7 * (SinValue - DAT_000a9fe4)) / uVar15);
      }
      else {
        iVar7 = HueIndex - uVar5;
        if (HueIndex < uVar5) {
          iVar7 = uVar5 - HueIndex;
        }
        uVar15 = HueIndex - DAT_000a9ffc;
        if (HueIndex <= DAT_000a9ffc) {
          uVar15 = DAT_000a9ffc - HueIndex;
        }
        uVar15 = (iVar7 * (DAT_000a9fe4 - SinValue)) / uVar15;
      }
      uVar15 = SinValue + uVar15;
      iVar7 = -1;
      goto LAB_00038f84;
    }
    if (_DAT_000a9ff4 < DAT_000a9ff0) {
      iVar7 = DAT_000a9ffc - uVar5;
      if (DAT_000a9ffc < uVar5) {
        iVar7 = uVar5 - DAT_000a9ffc;
      }
      uVar12 = DAT_000a9ffc - _DAT_000aa000;
      if (DAT_000a9ffc <= _DAT_000aa000) {
        uVar12 = _DAT_000aa000 - DAT_000a9ffc;
      }
      uVar15 = -((iVar7 * (DAT_000a9ff0 - _DAT_000a9ff4)) / uVar12);
    }
    else {
      iVar7 = DAT_000a9ffc - uVar5;
      if (DAT_000a9ffc < uVar5) {
        iVar7 = uVar5 - DAT_000a9ffc;
      }
      uVar15 = DAT_000a9ffc - _DAT_000aa000;
      if (DAT_000a9ffc <= _DAT_000aa000) {
        uVar15 = _DAT_000aa000 - DAT_000a9ffc;
      }
      uVar15 = (iVar7 * (_DAT_000a9ff4 - DAT_000a9ff0)) / uVar15;
    }
    uVar12 = DAT_000a9ff0 + uVar15;
    if (_DAT_000a9fe8 < DAT_000a9fe4) {
      iVar7 = DAT_000a9ffc - uVar5;
      if (DAT_000a9ffc < uVar5) {
        iVar7 = uVar5 - DAT_000a9ffc;
      }
      uVar5 = DAT_000a9ffc - _DAT_000aa000;
      if (DAT_000a9ffc <= _DAT_000aa000) {
        uVar5 = _DAT_000aa000 - DAT_000a9ffc;
      }
      uVar15 = DAT_000a9fe4 - (iVar7 * (DAT_000a9fe4 - _DAT_000a9fe8)) / uVar5;
    }
    else {
      iVar7 = DAT_000a9ffc - uVar5;
      if (DAT_000a9ffc < uVar5) {
        iVar7 = uVar5 - DAT_000a9ffc;
      }
      uVar5 = DAT_000a9ffc - _DAT_000aa000;
      if (DAT_000a9ffc <= _DAT_000aa000) {
        uVar5 = _DAT_000aa000 - DAT_000a9ffc;
      }
      uVar15 = (iVar7 * (_DAT_000a9fe8 - DAT_000a9fe4)) / uVar5 + DAT_000a9fe4;
    }
  }
  iVar7 = 1;
LAB_00038f84:
  piVar4 = local_178;
  piVar6 = piVar4;
  piVar8 = param_1;
  do {
    iVar3 = *piVar8;
    if (iVar3 < 0) {
      *piVar6 = -1;
      iVar3 = -iVar3;
    }
    else {
      *piVar6 = 1;
    }
    piVar6[1] = iVar3;
    piVar6 = piVar6 + 2;
    piVar8 = piVar8 + 1;
  } while (local_178 + 0x12 != piVar6);
  local_3c = -iVar7;
  iVar3 = 0;
  piVar6 = param_1;
  do {
    if (iVar3 < 3) {
      iVar9 = *piVar4 * piVar4[1];
    }
    else if (iVar3 < 6) {
      local_38 = *piVar4;
      local_34 = fix_point_mult2_32(0x10,uVar12,piVar4[1]);
      local_34 = local_38 * local_34;
      local_38 = iVar7 * piVar4[6];
      iVar9 = fix_point_mult2_32(0x10,uVar15,piVar4[7]);
      iVar9 = local_38 * iVar9 + local_34;
    }
    else {
      local_38 = local_3c * piVar4[-6];
      local_34 = fix_point_mult2_32(0x10,uVar15,piVar4[-5]);
      local_34 = local_38 * local_34;
      local_38 = *piVar4;
      iVar9 = fix_point_mult2_32(0x10,uVar12,piVar4[1]);
      iVar9 = local_38 * iVar9 + local_34;
    }
    iVar3 = iVar3 + 1;
    *piVar6 = iVar9;
    piVar4 = piVar4 + 2;
    piVar6 = piVar6 + 1;
  } while (iVar3 != 9);
  iVar7 = *param_1;
  while( true ) {
    if (iVar7 < 0) {
      iVar7 = -(-iVar7 >> 6);
    }
    else {
      iVar7 = iVar7 >> 6;
    }
    *param_1 = iVar7;
    param_1 = param_1 + 1;
    if (local_40 == param_1) break;
    iVar7 = *param_1;
  }
  return;
}



void tiziano_bcsh_Tccm_RGB2YUV(int param_1,int param_2)

{
  char auStack_38 [44];
  
  memcpy(auStack_38,&DAT_0007b4f4,0x24);
  tiziano_bcsh_Tccm_RGBYUV(auStack_38,MMatrix,param_2,MinvMatrix);
  tiziano_bcsh_para2reg(param_1,auStack_38);
  return;
}



void tiziano_bcsh_Toffset_RGBYUV(int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int local_c0 [38];
  
  piVar1 = local_c0 + 0x12;
  do {
    iVar3 = *param_2;
    if (iVar3 < 0) {
      *piVar1 = -1;
      iVar3 = -iVar3;
    }
    else {
      *piVar1 = 1;
    }
    piVar1[1] = iVar3;
    piVar1 = piVar1 + 2;
    param_2 = param_2 + 1;
  } while (local_c0 + 0x24 != piVar1);
  piVar1 = local_c0;
  do {
    iVar3 = *param_3;
    if (iVar3 < 0) {
      *piVar1 = -1;
      iVar3 = -iVar3;
    }
    else {
      *piVar1 = 1;
    }
    piVar1[1] = iVar3;
    piVar1 = piVar1 + 2;
    param_3 = param_3 + 1;
  } while (local_c0 + 0x12 != piVar1);
  iVar4 = local_c0[1] << 6;
  iVar3 = fix_point_mult2_32(0x10,local_c0[19],iVar4);
  iVar6 = local_c0[3] << 6;
  iVar2 = fix_point_mult2_32(0x10,local_c0[21],iVar6);
  local_c0[36] = local_c0[2] * local_c0[20] * iVar2 + local_c0[0] * local_c0[18] * iVar3;
  iVar5 = local_c0[5] << 6;
  iVar3 = fix_point_mult2_32(0x10,local_c0[23],iVar5);
  *param_1 = local_c0[4] * local_c0[22] * iVar3 + local_c0[36];
  local_c0[36] = fix_point_mult2_32(0x10,local_c0[25],iVar4);
  local_c0[36] = local_c0[0] * local_c0[24] * local_c0[36];
  iVar3 = fix_point_mult2_32(0x10,local_c0[27],iVar6);
  local_c0[36] = local_c0[2] * local_c0[26] * iVar3 + local_c0[36];
  iVar3 = fix_point_mult2_32(0x10,local_c0[29],iVar5);
  param_1[1] = local_c0[4] * local_c0[28] * iVar3 + local_c0[36];
  iVar3 = fix_point_mult2_32(0x10,local_c0[31],iVar4);
  iVar2 = fix_point_mult2_32(0x10,local_c0[33],iVar6);
  iVar4 = fix_point_mult2_32(0x10,local_c0[35],iVar5);
  param_1[2] = local_c0[4] * local_c0[34] * iVar4 +
               local_c0[2] * local_c0[32] * iVar2 + local_c0[0] * local_c0[30] * iVar3;
  piVar1 = param_1 + 3;
  iVar3 = *param_1;
  while( true ) {
    if (iVar3 < 0) {
      iVar3 = -(-iVar3 >> 6);
    }
    else {
      iVar3 = iVar3 >> 6;
    }
    *param_1 = iVar3;
    param_1 = param_1 + 1;
    if (piVar1 == param_1) break;
    iVar3 = *param_1;
  }
  return;
}



void tiziano_bcsh_Toffset_RGB2YUV(int *param_1,int *param_2)

{
  int local_20;
  int local_1c;
  int local_18;
  int local_14;
  int local_10;
  int local_c;
  
  local_14 = *param_2 + -0x400;
  local_10 = param_2[1] + -0x400;
  local_c = param_2[2] + -0x400;
  local_20 = 0;
  local_1c = 0;
  local_18 = 0;
  tiziano_bcsh_Toffset_RGBYUV(&local_20,MMatrix,&local_14);
  *param_1 = local_20 + 0x400;
  param_1[1] = local_1c + 0x400;
  param_1[2] = local_18 + 0x400;
  return;
}



unsigned int tiziano_bcsh_StrenCal
               (unsigned int param_1,unsigned int param_2,unsigned int param_3,unsigned int param_4,unsigned int param_5,int param_6)

{
  int iVar1;
  unsigned int uVar2;
  int iVar3;
  
  if (param_6 != 0) {
    uVar2 = param_2 - param_3;
    if (param_2 < param_3) {
      uVar2 = param_3 - param_2;
    }
    iVar1 = param_4 - param_5;
    if (param_4 < param_5) {
      iVar1 = param_5 - param_4;
    }
    iVar3 = param_3 - param_1;
    if (param_3 <= param_1) {
      iVar3 = param_1 - param_3;
    }
    return (iVar3 * iVar1 + uVar2 * param_5) / uVar2;
  }
  iVar1 = param_2 - param_1;
  if (param_2 < param_1) {
    iVar1 = param_1 - param_2;
  }
  uVar2 = param_2 - param_3;
  if (param_2 < param_3) {
    uVar2 = param_3 - param_2;
  }
  iVar3 = param_4 - param_5;
  if (param_4 < param_5) {
    iVar3 = param_5 - param_4;
  }
  return (iVar1 * iVar3 + uVar2 * param_4) / uVar2;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tiziano_bcsh_TransitParam(void)

{
  unsigned int uVar1;
  char cVar2;
  int iVar3;
  int uVar4;
  int uVar5;
  int uVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  int uVar9;
  
  cVar2 = bcsh_saturation;
  tisp_BCSH = tisp_BCSH_au32clip;
  _DAT_000c4bc0 = &tisp_BCSH_au32Offset1;
  DAT_000c4bb8 = tisp_BCSH_au32clip2;
  tisp_BCSH_au32Offset0 = tisp_BCSH_au32OffsetYUVy;
  DAT_000c4bbc = &tisp_BCSH_au32Offset0;
  DAT_000a9f50 = 0x400;
  DAT_000a9f54 = 0x400;
  DAT_000c4bb4 = tisp_BCSH_au32clip1;
  if (bcsh_saturation == -0x80) {
    memcpy(&tisp_BCSH_ai32Svalue,&tisp_BCSH_au32Svalue,0x10);
  }
  else {
    if (bcsh_saturation < '\0') {
      tisp_BCSH_ai32Svalue =
           tiziano_bcsh_StrenCal_part_0(bcsh_saturation,0x80,0x100,tisp_BCSH_au32Svalue,0x1800);
      DAT_000c4c14 = tiziano_bcsh_StrenCal_part_0(cVar2,0x80,0x100,DAT_000a9f68,0x1800);
      DAT_000c4c18 = tiziano_bcsh_StrenCal_part_0(cVar2,0x80,0x100,DAT_000a9f6c,0x1800);
      uVar5 = 0x100;
      uVar9 = 0x1800;
      uVar4 = 0x80;
      uVar6 = DAT_000a9f70;
    }
    else {
      tisp_BCSH_ai32Svalue =
           tiziano_bcsh_StrenCal_part_0(bcsh_saturation,0,0x80,0,tisp_BCSH_au32Svalue);
      DAT_000c4c14 = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,0,DAT_000a9f68);
      DAT_000c4c18 = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,0,DAT_000a9f6c);
      uVar5 = 0x80;
      uVar4 = 0;
      uVar6 = 0;
      uVar9 = DAT_000a9f70;
    }
    DAT_000c4c1c = tiziano_bcsh_StrenCal_part_0(cVar2,uVar4,uVar5,uVar6,uVar9);
  }
  uVar7 = (uint)bcsh_brightness;
  uVar8 = uVar7 * tisp_BCSH_u32B >> 7;
  if (0x76c < uVar8) {
    uVar8 = 0x76c;
  }
  if (-1 < (char)bcsh_brightness) {
    tisp_BCSH_ai32Svalue = tiziano_bcsh_StrenCal_part_0(uVar7,0,0x80,0,tisp_BCSH_ai32Svalue);
    DAT_000c4c14 = tiziano_bcsh_StrenCal_part_0(uVar7,0,0x80,0,DAT_000c4c14);
    DAT_000c4c18 = tiziano_bcsh_StrenCal_part_0(uVar7,0,0x80,0,DAT_000c4c18);
    DAT_000c4c1c = tiziano_bcsh_StrenCal_part_0(uVar7,0,0x80,0,DAT_000c4c1c);
  }
  *_DAT_000c4bc0 = DAT_000a9fcc + tisp_BCSH_u32OffsetRGB2yuv + -0x800 + uVar8;
  _DAT_000c4bc0[1] = DAT_000a9f5c;
  _DAT_000c4bc0[2] = DAT_000a9f60;
  cVar2 = bcsh_contrast;
  uVar1 = DAT_000aa0a8;
  uVar8 = DAT_000aa0a4;
  uVar7 = DAT_000aa0a0;
  if ((tisp_BCSH_au32C == 0) || (bcsh_contrast == -0x80)) {
    memcpy(&tisp_BCSH_ai32C,&tisp_BCSH_au32C,0x14);
  }
  else {
    tisp_BCSH_ai32C = tisp_BCSH_au32C;
    if (bcsh_contrast < '\0') {
      uVar8 = DAT_000aa0a0 - DAT_000aa09c;
      if (DAT_000aa0a0 <= DAT_000aa09c) {
        uVar8 = DAT_000aa09c - DAT_000aa0a0;
      }
      iVar3 = (uVar8 >> 1) + DAT_000aa09c;
      DAT_000c4c24 = tiziano_bcsh_StrenCal_part_0(bcsh_contrast,0x80,0xff,DAT_000aa09c,iVar3);
      DAT_000c4c28 = tiziano_bcsh_StrenCal(cVar2,0x80,0xff,uVar7,iVar3,1);
      DAT_000c4c2c = tiziano_bcsh_StrenCal(cVar2,0x80,0xff,DAT_000aa0a4,0,1);
      DAT_000c4c30 = tiziano_bcsh_StrenCal_part_0(cVar2,0x80,0xff,DAT_000aa0a8,0x3ff);
    }
    else {
      uVar7 = DAT_000aa0a8 - DAT_000aa0a4;
      if (DAT_000aa0a8 <= DAT_000aa0a4) {
        uVar7 = DAT_000aa0a4 - DAT_000aa0a8;
      }
      DAT_000c4c24 = tiziano_bcsh_StrenCal_part_0(bcsh_contrast,0,0x80,0,DAT_000aa09c);
      DAT_000c4c28 = tiziano_bcsh_StrenCal(cVar2,0,0x80,0x3ff,DAT_000aa0a0,1);
      iVar3 = (uVar7 >> 1) + uVar8;
      DAT_000c4c2c = tiziano_bcsh_StrenCal(cVar2,0,0x80,iVar3,uVar8,1);
      DAT_000c4c30 = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,iVar3,uVar1);
      tisp_BCSH_ai32Svalue = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,0,tisp_BCSH_ai32Svalue);
      DAT_000c4c14 = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,0,DAT_000c4c14);
      DAT_000c4c18 = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,0,DAT_000c4c18);
      DAT_000c4c1c = tiziano_bcsh_StrenCal_part_0(cVar2,0,0x80,0,DAT_000c4c1c);
    }
  }
  if (s_bcsh_mjpeg_mode == '\x01') {
    DAT_000c4c2c = 0;
    DAT_000c4c24 = (uint)s_bcsh_mjpeg_y_range_low << 2;
    DAT_000c4c28 = (uint)s_bcsh_mjpeg_y_range_high * 4 + 3;
    DAT_000c4c30 = 0x3ff;
    tisp_BCSH_ai32C = 1;
  }
  DAT_000c4bc8 = &tisp_BCSH_u32Cslope0;
  DAT_000c4bcc = &tisp_BCSH_u32Cslope1;
  DAT_000c4bc4 = &tisp_BCSH_ai32C;
  DAT_000c4bd0 = &tisp_BCSH_u32Cslope2;
  if (DAT_000c4c24 == 0) {
    tisp_BCSH_u32Cslope0 = 0;
  }
  else {
    tisp_BCSH_u32Cslope0 = (DAT_000c4c2c << 10) / DAT_000c4c24;
  }
  if (DAT_000c4c24 < DAT_000c4c28) {
    if (DAT_000c4c2c < DAT_000c4c30) {
      iVar3 = DAT_000c4c30 - DAT_000c4c2c;
    }
    else {
      iVar3 = DAT_000c4c2c - DAT_000c4c30;
    }
    tisp_BCSH_u32Cslope1 = (uint)(iVar3 << 10) / (DAT_000c4c28 - DAT_000c4c24);
  }
  else {
    DAT_000c4c24 = DAT_000c4c28;
    tisp_BCSH_u32Cslope1 = 0;
  }
  if (DAT_000c4c28 < (uint)tisp_BCSH_au32clip1._4_4_) {
    if (DAT_000c4c30 < (uint)tisp_BCSH_au32clip1._4_4_) {
      iVar3 = tisp_BCSH_au32clip1._4_4_ - DAT_000c4c30;
    }
    else {
      iVar3 = DAT_000c4c30 - tisp_BCSH_au32clip1._4_4_;
    }
    tisp_BCSH_u32Cslope2 = (uint)(iVar3 << 10) / (tisp_BCSH_au32clip1._4_4_ - DAT_000c4c28);
  }
  else {
    DAT_000c4c28 = tisp_BCSH_au32clip1._4_4_;
    tisp_BCSH_u32Cslope2 = 0;
  }
  DAT_000c4bd4 = tisp_BCSH_au32Sthres_now;
  DAT_000c4bd8 = &tisp_BCSH_ai32Svalue;
  DAT_000c4bdc = &tisp_BCSH_u32Sstep;
  uVar7 = *(unsigned int *)(tisp_BCSH_au32Sthres_now + 8);
  if (*(unsigned int *)(tisp_BCSH_au32Sthres_now + 4) < uVar7) {
    uVar7 = uVar7 - *(unsigned int *)(tisp_BCSH_au32Sthres_now + 4);
    uVar8 = DAT_000c4c14 - tisp_BCSH_ai32Svalue;
    if (DAT_000c4c14 <= tisp_BCSH_ai32Svalue) {
      uVar8 = tisp_BCSH_ai32Svalue - DAT_000c4c14;
    }
    tisp_BCSH_u32Sstep = uVar8 / uVar7;
    uVar8 = DAT_000c4c18 - DAT_000c4c1c;
    if (DAT_000c4c18 < DAT_000c4c1c) {
      uVar8 = DAT_000c4c1c - DAT_000c4c18;
    }
    DAT_000c4b18 = uVar8 / uVar7;
  }
  else {
    *(unsigned int *)(tisp_BCSH_au32Sthres_now + 4) = uVar7;
    *DAT_000c4bdc = 0;
    DAT_000c4bdc[1] = 0;
  }
  DAT_000c4be0 = tisp_BCSH_au32HMatrix;
  DAT_000c4bec = tisp_BCSH_au32HBP_now;
  DAT_000c4be4 = tisp_BCSH_au32HDP_now;
  DAT_000c4bf4 = tisp_BCSH_au32HLSP_now;
  DAT_000c4be8 = &tisp_BCSH_u32HDPslope;
  DAT_000c4bf0 = &tisp_BCSH_u32HBPslope;
  DAT_000c4bf8 = &tisp_BCSH_u32HLSPslope;
  uVar7 = *(unsigned int *)(tisp_BCSH_au32HDP_now + 8);
  if (*(unsigned int *)(tisp_BCSH_au32HDP_now + 4) < uVar7) {
    tisp_BCSH_u32HDPslope = 0x400 / (uVar7 - *(unsigned int *)(tisp_BCSH_au32HDP_now + 4));
  }
  else {
    *(unsigned int *)(tisp_BCSH_au32HDP_now + 4) = uVar7;
    *DAT_000c4be8 = 0;
  }
  uVar7 = *(unsigned int *)(DAT_000c4bec + 8);
  if (*(unsigned int *)(DAT_000c4bec + 4) < uVar7) {
    *DAT_000c4bf0 = 0x400 / (uVar7 - *(unsigned int *)(DAT_000c4bec + 4));
  }
  else {
    *(unsigned int *)(DAT_000c4bec + 4) = uVar7;
    *DAT_000c4bf0 = 0;
  }
  uVar7 = *(unsigned int *)(DAT_000c4bf4 + 8);
  if (*(unsigned int *)(DAT_000c4bf4 + 4) < uVar7) {
    *DAT_000c4bf8 = 0x400 / (uVar7 - *(unsigned int *)(DAT_000c4bf4 + 4));
  }
  else {
    *(unsigned int *)(DAT_000c4bf4 + 4) = uVar7;
    *DAT_000c4bf8 = 0;
  }
  return;
}



int tiziano_bcsh_update(void)

{
  char *puVar1;
  unsigned int uVar2;
  int iVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int *puVar7;
  int iVar8;
  int uVar9;
  unsigned int *puVar10;
  unsigned int uVar11;
  int iVar12;
  int iVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  char local_50 [64];
  
  puVar1 = tisp_BCSH_au32OffsetRGB_now;
  uVar2 = BCSH_ev >> 10;
  if (*(unsigned int *)tisp_BCSH_au32EvList_now < uVar2) {
    puVar7 = (unsigned int *)(tisp_BCSH_au32EvList_now + 4);
    if (uVar2 < *(unsigned int *)(tisp_BCSH_au32EvList_now + 0x20)) {
      iVar3 = 0;
      do {
        uVar14 = puVar7[-1];
        iVar8 = iVar3 * 4;
        puVar10 = puVar7 + -1;
        iVar13 = iVar3 + 1;
        if (uVar14 <= uVar2) {
          uVar6 = *puVar7;
          iVar12 = (int)puVar7 - (int)tisp_BCSH_au32EvList_now;
          if (uVar2 <= uVar6) {
            uVar5 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar8);
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar12);
            if (uVar11 < uVar5) {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = -((iVar4 * (uVar5 - uVar11)) / uVar15);
            }
            else {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = (iVar4 * (uVar11 - uVar5)) / uVar15;
            }
            tisp_BCSH_au32Svalue = uVar5 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar8);
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar12);
            uVar14 = *puVar10;
            uVar5 = *puVar7;
            if (uVar6 < uVar11) {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar5 - uVar14;
              if (uVar5 < uVar14) {
                uVar15 = uVar14 - uVar5;
              }
              uVar15 = -((iVar4 * (uVar11 - uVar6)) / uVar15);
            }
            else {
              iVar4 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar4 = uVar2 - uVar14;
              }
              uVar15 = uVar14 - uVar5;
              if (uVar14 <= uVar5) {
                uVar15 = uVar5 - uVar14;
              }
              uVar15 = (iVar4 * (uVar6 - uVar11)) / uVar15;
            }
            DAT_000a9f68 = uVar11 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar8);
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar12);
            uVar14 = *puVar10;
            uVar5 = *puVar7;
            if (uVar6 < uVar11) {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar5 - uVar14;
              if (uVar5 < uVar14) {
                uVar15 = uVar14 - uVar5;
              }
              uVar15 = -((iVar4 * (uVar11 - uVar6)) / uVar15);
            }
            else {
              iVar4 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar4 = uVar2 - uVar14;
              }
              uVar15 = uVar14 - uVar5;
              if (uVar14 <= uVar5) {
                uVar15 = uVar5 - uVar14;
              }
              uVar15 = (iVar4 * (uVar6 - uVar11)) / uVar15;
            }
            DAT_000a9f6c = uVar11 + uVar15;
            uVar5 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar8);
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar12);
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000a9f70 = uVar5 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cxl)[iVar13];
            uVar5 = (&tisp_BCSH_au32Cxl)[iVar3];
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000aa09c = uVar5 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cxh)[iVar13];
            uVar5 = (&tisp_BCSH_au32Cxh)[iVar3];
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000aa0a0 = uVar5 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cyl)[iVar13];
            uVar5 = (&tisp_BCSH_au32Cyl)[iVar3];
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000aa0a4 = uVar5 + uVar15;
            uVar5 = (&tisp_BCSH_au32Cyh)[iVar13];
            uVar11 = (&tisp_BCSH_au32Cyh)[iVar3];
            uVar14 = *puVar10;
            uVar6 = *puVar7;
            if (uVar5 < uVar11) {
              iVar3 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar3 = uVar2 - uVar14;
              }
              uVar2 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar2 = uVar14 - uVar6;
              }
              uVar2 = -((iVar3 * (uVar11 - uVar5)) / uVar2);
            }
            else {
              iVar3 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar3 = uVar2 - uVar14;
              }
              uVar2 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar2 = uVar14 - uVar6;
              }
              uVar2 = (iVar3 * (uVar5 - uVar11)) / uVar2;
            }
            DAT_000aa0a8 = uVar11 + uVar2;
            break;
          }
        }
        puVar7 = puVar7 + 1;
        iVar3 = iVar13;
      } while (iVar13 != 8);
    }
    else {
      tisp_BCSH_au32Svalue = *(int *)(tisp_BCSH_au32SminListS_now + 0x20);
      DAT_000a9f68 = *(int *)(tisp_BCSH_au32SmaxListS_now + 0x20);
      DAT_000a9f6c = *(int *)(tisp_BCSH_au32SminListM_now + 0x20);
      DAT_000a9f70 = *(int *)(tisp_BCSH_au32SmaxListM_now + 0x20);
      DAT_000aa09c = DAT_000aa094;
      DAT_000aa0a0 = DAT_000aa070;
      DAT_000aa0a4 = DAT_000aa04c;
      DAT_000aa0a8 = DAT_000aa028;
    }
  }
  else {
    tisp_BCSH_au32Svalue = *(int *)tisp_BCSH_au32SminListS_now;
    DAT_000a9f68 = *(int *)tisp_BCSH_au32SmaxListS_now;
    DAT_000a9f6c = *(int *)tisp_BCSH_au32SminListM_now;
    DAT_000a9f70 = *(int *)tisp_BCSH_au32SmaxListM_now;
    DAT_000aa09c = tisp_BCSH_au32Cxl;
    DAT_000aa0a0 = tisp_BCSH_au32Cxh;
    DAT_000aa0a4 = tisp_BCSH_au32Cyl;
    DAT_000aa0a8 = tisp_BCSH_au32Cyh;
  }
  uVar9 = BCSH_ct;
  tiziano_bcsh_Tccm_Comp2Orig();
  tiziano_ct_bcsh_interpolation(uVar9);
  tiziano_bcsh_Tccm_RGB2YUV(tisp_BCSH_au32HMatrix,&tisp_BCSH_as32CCMMatrix);
  tiziano_bcsh_Toffset_RGB2YUV(&tisp_BCSH_u32OffsetRGB2yuv,puVar1);
  tiziano_bcsh_TransitParam();
  for (uVar2 = 0; uVar2 < 0x3c; uVar2 = uVar2 + 1) {
    local_50[uVar2] = (&DAT_000c4bc0)[uVar2];
  }
  tiziano_bcsh_lut_parameter(tisp_BCSH,DAT_000c4bb4,DAT_000c4bb8,DAT_000c4bbc);
  BCSH_real = 0;
  return 0;
}



int tisp_bcsh_ev_update(unsigned int param_1)

{
  unsigned int uVar1;
  
  cm_ev_31983 = param_1 >> 10;
  if (BCSH_real != 1) {
    uVar1 = DAT_000c4c38 - cm_ev_31983;
    if (DAT_000c4c38 < cm_ev_31983) {
      uVar1 = cm_ev_31983 - DAT_000c4c38;
    }
    if (uVar1 <= DAT_000c4c3c) {
      BCSH_ev = param_1;
      return 0;
    }
  }
  BCSH_ev = param_1;
  tiziano_bcsh_update();
  DAT_000c4c38 = cm_ev_31983;
  BCSH_real = 0;
  return 0;
}



int tisp_bcsh_ct_update(unsigned int param_1)

{
  unsigned int uVar1;
  
  if (BCSH_real != 1) {
    uVar1 = param_1 - DAT_000c4c40;
    if (param_1 <= DAT_000c4c40) {
      uVar1 = DAT_000c4c40 - param_1;
    }
    if (uVar1 <= DAT_000c4c44) {
      BCSH_ct = param_1;
      cm_ct_31987 = param_1;
      return 0;
    }
  }
  BCSH_ct = param_1;
  cm_ct_31987 = param_1;
  tiziano_bcsh_update();
  DAT_000c4c40 = cm_ct_31987;
  BCSH_real = 0;
  return 0;
}



int tisp_bcsh_wdr_en(int param_1)

{
  char *puVar1;
  
  if (param_1 == 0) {
    tisp_BCSH_au32CCMMatrix_d_now = tisp_BCSH_au32CCMMatrix_d;
    tisp_BCSH_au32CCMMatrix_t_now = tisp_BCSH_au32CCMMatrix_t;
    tisp_BCSH_au32CCMMatrix_a_now = tisp_BCSH_au32CCMMatrix_a;
    tisp_BCSH_au32HDP_now = tisp_BCSH_au32HDP;
    tisp_BCSH_au32HBP_now = tisp_BCSH_au32HBP;
    tisp_BCSH_au32HLSP_now = tisp_BCSH_au32HLSP;
    tisp_BCSH_au32Sthres_now = (char *)&tisp_BCSH_au32Sthres;
    tisp_BCSH_au32EvList_now = (char *)&tisp_BCSH_au32EvList;
    tisp_BCSH_au32SminListS_now = (char *)&tisp_BCSH_au32SminListS;
    tisp_BCSH_au32SmaxListS_now = (char *)&tisp_BCSH_au32SmaxListS;
    tisp_BCSH_au32SminListM_now = (char *)&tisp_BCSH_au32SminListM;
    tisp_BCSH_au32SmaxListM_now = (char *)&tisp_BCSH_au32SmaxListM;
    puVar1 = (char *)&tisp_BCSH_au32OffsetRGB;
  }
  else {
    tisp_BCSH_au32CCMMatrix_d_now = tisp_BCSH_au32CCMMatrix_d_wdr;
    tisp_BCSH_au32CCMMatrix_t_now = tisp_BCSH_au32CCMMatrix_t_wdr;
    tisp_BCSH_au32CCMMatrix_a_now = tisp_BCSH_au32CCMMatrix_a_wdr;
    tisp_BCSH_au32HDP_now = tisp_BCSH_au32HDP_wdr;
    tisp_BCSH_au32HBP_now = tisp_BCSH_au32HBP_wdr;
    tisp_BCSH_au32HLSP_now = tisp_BCSH_au32HLSP_wdr;
    tisp_BCSH_au32Sthres_now = (char *)&tisp_BCSH_au32Sthres_wdr;
    tisp_BCSH_au32EvList_now = tisp_BCSH_au32EvList_wdr;
    tisp_BCSH_au32SminListS_now = tisp_BCSH_au32SminListS_wdr;
    tisp_BCSH_au32SmaxListS_now = tisp_BCSH_au32SmaxListS_wdr;
    tisp_BCSH_au32SminListM_now = tisp_BCSH_au32SminListM_wdr;
    tisp_BCSH_au32SmaxListM_now = tisp_BCSH_au32SmaxListM_wdr;
    puVar1 = tisp_BCSH_au32OffsetRGB_wdr;
  }
  BCSH_real = 1;
  tisp_BCSH_au32OffsetRGB_now = puVar1;
  bcsh_wdr_en = param_1;
  tiziano_bcsh_update();
  return 0;
}



void tiziano_bcsh_dump(void)

{
  int uVar1;
  
  isp_printf(2,"-----BCSH regs dump-----\n");
  uVar1 = system_reg_read(0x8000);
  isp_printf(2,"0x%x: 0x%x\n",0x8000,uVar1);
  uVar1 = system_reg_read(0x8004);
  isp_printf(2,"0x%x: 0x%x\n",0x8004,uVar1);
  uVar1 = system_reg_read(0x8008);
  isp_printf(2,"0x%x: 0x%x\n",0x8008,uVar1);
  uVar1 = system_reg_read(0x800c);
  isp_printf(2,"0x%x: 0x%x\n",0x800c,uVar1);
  uVar1 = system_reg_read(0x8010);
  isp_printf(2,"0x%x: 0x%x\n",0x8010,uVar1);
  uVar1 = system_reg_read(0x8014);
  isp_printf(2,"0x%x: 0x%x\n",0x8014,uVar1);
  uVar1 = system_reg_read(0x8018);
  isp_printf(2,"0x%x: 0x%x\n",0x8018,uVar1);
  uVar1 = system_reg_read(0x801c);
  isp_printf(2,"0x%x: 0x%x\n",0x801c,uVar1);
  uVar1 = system_reg_read(0x8020);
  isp_printf(2,"0x%x: 0x%x\n",0x8020,uVar1);
  uVar1 = system_reg_read(0x8024);
  isp_printf(2,"0x%x: 0x%x\n",0x8024,uVar1);
  uVar1 = system_reg_read(0x8028);
  isp_printf(2,"0x%x: 0x%x\n",0x8028,uVar1);
  uVar1 = system_reg_read(0x802c);
  isp_printf(2,"0x%x: 0x%x\n",0x802c,uVar1);
  uVar1 = system_reg_read(0x8030);
  isp_printf(2,"0x%x: 0x%x\n",0x8030,uVar1);
  uVar1 = system_reg_read(0x8034);
  isp_printf(2,"0x%x: 0x%x\n",0x8034,uVar1);
  uVar1 = system_reg_read(0x8038);
  isp_printf(2,"0x%x: 0x%x\n",0x8038,uVar1);
  uVar1 = system_reg_read(0x803c);
  isp_printf(2,"0x%x: 0x%x\n",0x803c,uVar1);
  uVar1 = system_reg_read(0x8040);
  isp_printf(2,"0x%x: 0x%x\n",0x8040,uVar1);
  uVar1 = system_reg_read(0x8044);
  isp_printf(2,"0x%x: 0x%x\n",0x8044,uVar1);
  uVar1 = system_reg_read(0x8048);
  isp_printf(2,"0x%x: 0x%x\n",0x8048,uVar1);
  uVar1 = system_reg_read(0x804c);
  isp_printf(2,"0x%x: 0x%x\n",0x804c,uVar1);
  uVar1 = system_reg_read(0x8050);
  isp_printf(2,"0x%x: 0x%x\n",0x8050,uVar1);
  uVar1 = system_reg_read(0x8054);
  isp_printf(2,"0x%x: 0x%x\n",0x8054,uVar1);
  uVar1 = system_reg_read(0x8058);
  isp_printf(2,"0x%x: 0x%x\n",0x8058,uVar1);
  uVar1 = system_reg_read(0x805c);
  isp_printf(2,"0x%x: 0x%x\n",0x805c,uVar1);
  uVar1 = system_reg_read(0x8060);
  isp_printf(2,"0x%x: 0x%x\n",0x8060,uVar1);
  uVar1 = system_reg_read(0x8064);
  isp_printf(2,"0x%x: 0x%x\n",0x8064,uVar1);
  uVar1 = system_reg_read(0x8068);
  isp_printf(2,"0x%x: 0x%x\n",0x8068,uVar1);
  uVar1 = system_reg_read(0x806c);
  isp_printf(2,"0x%x: 0x%x\n",0x806c,uVar1);
  uVar1 = system_reg_read(0x8070);
  isp_printf(2,"0x%x: 0x%x\n",0x8070,uVar1);
  return;
}



int tiziano_bcsh_params_refresh(void)

{
  if (bcsh_ctrl == '\0') {
    memcpy(tisp_BCSH_au32CCMMatrix_d,&DAT_000a6620,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_t,&DAT_000a6644,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_a,&DAT_000a6668,0x24);
    memcpy(&tisp_BCSH_au32Sthres,&DAT_000a66b0,0xc);
    memcpy(tisp_BCSH_au32CCMMatrix_d_wdr,&DAT_000a684c,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_t_wdr,&DAT_000a6870,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_a_wdr,&DAT_000a6894,0x24);
    memcpy(&tisp_BCSH_au32Sthres_wdr,&DAT_000a68dc,0xc);
  }
  memcpy(tisp_BCSH_au32HDP,&DAT_000a668c,0xc);
  memcpy(tisp_BCSH_au32HBP,&DAT_000a6698,0xc);
  memcpy(tisp_BCSH_au32HLSP,&DAT_000a66a4,0xc);
  memcpy(&tisp_BCSH_au32EvList,&DAT_000a66bc,0x24);
  memcpy(&tisp_BCSH_au32SminListS,&DAT_000a66e0,0x24);
  memcpy(&tisp_BCSH_au32SmaxListS,&DAT_000a6704,0x24);
  memcpy(&tisp_BCSH_au32SminListM,&DAT_000a6728,0x24);
  memcpy(&tisp_BCSH_au32SmaxListM,&DAT_000a674c,0x24);
  memcpy(&tisp_BCSH_au32C,&DAT_000a6770,0x14);
  memcpy(&tisp_BCSH_au32Cxl,&DAT_000a6784,0x24);
  memcpy(&tisp_BCSH_au32Cxh,&DAT_000a67a8,0x24);
  memcpy(&tisp_BCSH_au32Cyl,&DAT_000a67cc,0x24);
  memcpy(&tisp_BCSH_au32Cyh,&DAT_000a67f0,0x24);
  memcpy(&tisp_BCSH_u32B,&DAT_000a6814,4);
  memcpy(&tisp_BCSH_au32OffsetRGB,&DAT_000a6818,0xc);
  memcpy(&tisp_BCSH_au32OffsetYUVy,&DAT_000a6824,8);
  memcpy(&tisp_BCSH_au32clip0,&DAT_000a682c,0x10);
  memcpy(tisp_BCSH_au32clip1,&DAT_000a683c,0x10);
  memcpy(tisp_BCSH_au32HDP_wdr,&DAT_000a68b8,0xc);
  memcpy(tisp_BCSH_au32HBP_wdr,&DAT_000a68c4,0xc);
  memcpy(tisp_BCSH_au32HLSP_wdr,&DAT_000a68d0,0xc);
  memcpy(tisp_BCSH_au32EvList_wdr,&DAT_000a68e8,0x24);
  memcpy(tisp_BCSH_au32SminListS_wdr,&DAT_000a690c,0x24);
  memcpy(tisp_BCSH_au32SmaxListS_wdr,&DAT_000a6930,0x24);
  memcpy(tisp_BCSH_au32SminListM_wdr,&DAT_000a6954,0x24);
  memcpy(tisp_BCSH_au32SmaxListM_wdr,&DAT_000a6978,0x24);
  memcpy(tisp_BCSH_au32OffsetRGB_wdr,&DAT_000a699c,0xc);
  memcpy(MMatrix,&DAT_000a69a8,0x24);
  memcpy(MinvMatrix,&DAT_000a69cc,0x24);
  memcpy(tisp_BCSH_au32clip2,&DAT_000a69f0,0x10);
  return 0;
}



int tiziano_bcsh_dn_params_refresh(void)

{
  tiziano_bcsh_params_refresh();
  BCSH_real = 1;
  tiziano_bcsh_update();
  return 0;
}



int tiziano_bcsh_init(void)

{
  char *puVar1;
  
  if (bcsh_wdr_en == 0) {
    tisp_BCSH_au32CCMMatrix_d_now = tisp_BCSH_au32CCMMatrix_d;
    tisp_BCSH_au32CCMMatrix_t_now = tisp_BCSH_au32CCMMatrix_t;
    tisp_BCSH_au32CCMMatrix_a_now = tisp_BCSH_au32CCMMatrix_a;
    tisp_BCSH_au32HDP_now = tisp_BCSH_au32HDP;
    tisp_BCSH_au32HBP_now = tisp_BCSH_au32HBP;
    tisp_BCSH_au32HLSP_now = tisp_BCSH_au32HLSP;
    tisp_BCSH_au32Sthres_now = (char *)&tisp_BCSH_au32Sthres;
    tisp_BCSH_au32EvList_now = (char *)&tisp_BCSH_au32EvList;
    tisp_BCSH_au32SminListS_now = (char *)&tisp_BCSH_au32SminListS;
    tisp_BCSH_au32SmaxListS_now = (char *)&tisp_BCSH_au32SmaxListS;
    tisp_BCSH_au32SminListM_now = (char *)&tisp_BCSH_au32SminListM;
    tisp_BCSH_au32SmaxListM_now = (char *)&tisp_BCSH_au32SmaxListM;
    puVar1 = (char *)&tisp_BCSH_au32OffsetRGB;
  }
  else {
    tisp_BCSH_au32CCMMatrix_d_now = tisp_BCSH_au32CCMMatrix_d_wdr;
    tisp_BCSH_au32CCMMatrix_t_now = tisp_BCSH_au32CCMMatrix_t_wdr;
    tisp_BCSH_au32CCMMatrix_a_now = tisp_BCSH_au32CCMMatrix_a_wdr;
    tisp_BCSH_au32HDP_now = tisp_BCSH_au32HDP_wdr;
    tisp_BCSH_au32HBP_now = tisp_BCSH_au32HBP_wdr;
    tisp_BCSH_au32HLSP_now = tisp_BCSH_au32HLSP_wdr;
    tisp_BCSH_au32Sthres_now = (char *)&tisp_BCSH_au32Sthres_wdr;
    tisp_BCSH_au32EvList_now = tisp_BCSH_au32EvList_wdr;
    tisp_BCSH_au32SminListS_now = tisp_BCSH_au32SminListS_wdr;
    tisp_BCSH_au32SmaxListS_now = tisp_BCSH_au32SmaxListS_wdr;
    tisp_BCSH_au32SminListM_now = tisp_BCSH_au32SminListM_wdr;
    tisp_BCSH_au32SmaxListM_now = tisp_BCSH_au32SmaxListM_wdr;
    puVar1 = tisp_BCSH_au32OffsetRGB_wdr;
  }
  tisp_BCSH_au32OffsetRGB_now = puVar1;
  memset(&bcsh_ctrl,0,0x28);
  memset(&BCSH_real,0,0x14);
  BCSH_real = 1;
  DAT_000c4c38 = BCSH_ev >> 10;
  DAT_000c4c3c = 0x28;
  DAT_000c4c40 = BCSH_ct;
  DAT_000c4c44 = 100;
  tiziano_bcsh_params_refresh();
  memcpy(&tisp_BCSH_as32CCMMatrix,&tisp_BCSH_as32CCMMatrix_d,0x24);
  tiziano_bcsh_update();
  return 0;
}



int tisp_bcsh_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x3c0:
    __src = tisp_BCSH_au32CCMMatrix_d;
    break;
  case 0x3c1:
    __src = tisp_BCSH_au32CCMMatrix_t;
    break;
  case 0x3c2:
    __src = tisp_BCSH_au32CCMMatrix_a;
    break;
  case 0x3c3:
    __src = tisp_BCSH_au32HDP;
    goto LAB_0003b2cc;
  case 0x3c4:
    __src = tisp_BCSH_au32HBP;
    goto LAB_0003b2cc;
  case 0x3c5:
    __src = tisp_BCSH_au32HLSP;
    goto LAB_0003b2cc;
  case 0x3c6:
    __src = (char *)&tisp_BCSH_au32Sthres;
    goto LAB_0003b2cc;
  case 0x3c7:
    __src = (char *)&tisp_BCSH_au32EvList;
    break;
  case 0x3c8:
    __src = (char *)&tisp_BCSH_au32SminListS;
    break;
  case 0x3c9:
    __src = (char *)&tisp_BCSH_au32SmaxListS;
    break;
  case 0x3ca:
    __src = (char *)&tisp_BCSH_au32SminListM;
    break;
  case 0x3cb:
    __src = (char *)&tisp_BCSH_au32SmaxListM;
    break;
  case 0x3cc:
    __src = (char *)&tisp_BCSH_au32C;
    __n = 0x14;
    goto LAB_0003b344;
  case 0x3cd:
    __src = (char *)&tisp_BCSH_au32Cxl;
    break;
  case 0x3ce:
    __src = (char *)&tisp_BCSH_au32Cxh;
    break;
  case 0x3cf:
    __src = (char *)&tisp_BCSH_au32Cyl;
    break;
  case 0x3d0:
    __src = (char *)&tisp_BCSH_au32Cyh;
    break;
  case 0x3d1:
    __src = (char *)&tisp_BCSH_u32B;
    __n = 4;
    goto LAB_0003b344;
  case 0x3d2:
    __src = (char *)&tisp_BCSH_au32OffsetRGB;
    goto LAB_0003b2cc;
  case 0x3d3:
    __src = (char *)&tisp_BCSH_au32OffsetYUVy;
    __n = 8;
    goto LAB_0003b344;
  case 0x3d4:
    __src = &tisp_BCSH_au32clip0;
    goto LAB_0003b2f4;
  case 0x3d5:
    __src = tisp_BCSH_au32clip1;
    goto LAB_0003b2f4;
  case 0x3d6:
    __src = tisp_BCSH_au32CCMMatrix_d_wdr;
    break;
  case 0x3d7:
    __src = tisp_BCSH_au32CCMMatrix_t_wdr;
    break;
  case 0x3d8:
    __src = tisp_BCSH_au32CCMMatrix_a_wdr;
    break;
  case 0x3d9:
    __src = tisp_BCSH_au32HDP_wdr;
    goto LAB_0003b2cc;
  case 0x3da:
    __src = tisp_BCSH_au32HBP_wdr;
    goto LAB_0003b2cc;
  case 0x3db:
    __src = tisp_BCSH_au32HLSP_wdr;
    goto LAB_0003b2cc;
  case 0x3dc:
    __src = (char *)&tisp_BCSH_au32Sthres_wdr;
    goto LAB_0003b2cc;
  case 0x3dd:
    __src = tisp_BCSH_au32EvList_wdr;
    break;
  case 0x3de:
    __src = tisp_BCSH_au32SminListS_wdr;
    break;
  case 0x3df:
    __src = tisp_BCSH_au32SmaxListS_wdr;
    break;
  case 0x3e0:
    __src = tisp_BCSH_au32SminListM_wdr;
    break;
  case 0x3e1:
    __src = tisp_BCSH_au32SmaxListM_wdr;
    break;
  case 0x3e2:
    __src = tisp_BCSH_au32OffsetRGB_wdr;
LAB_0003b2cc:
    __n = 0xc;
    goto LAB_0003b344;
  case 0x3e3:
    __src = MMatrix;
    break;
  case 0x3e4:
    __src = MinvMatrix;
    break;
  case 0x3e5:
    __src = tisp_BCSH_au32clip2;
LAB_0003b2f4:
    __n = 0x10;
    goto LAB_0003b344;
  default:
    isp_printf(2,"%s,%d: BCSH not support param id %d\n","tisp_bcsh_param_array_get",0x4ca,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_0003b344:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_bcsh_param_array_set(int param_1,int *param_2,size_t *param_3)

{
  char *__dest;
  size_t __n;
  
  switch(param_1) {
  case 0x3c0:
    __dest = tisp_BCSH_au32CCMMatrix_d;
    break;
  case 0x3c1:
    __dest = tisp_BCSH_au32CCMMatrix_t;
    break;
  case 0x3c2:
    __dest = tisp_BCSH_au32CCMMatrix_a;
    break;
  case 0x3c3:
    __dest = tisp_BCSH_au32HDP;
    goto LAB_0003b5dc;
  case 0x3c4:
    __dest = tisp_BCSH_au32HBP;
    goto LAB_0003b5dc;
  case 0x3c5:
    __dest = tisp_BCSH_au32HLSP;
    goto LAB_0003b5dc;
  case 0x3c6:
    __dest = (char *)&tisp_BCSH_au32Sthres;
    goto LAB_0003b5dc;
  case 0x3c7:
    __dest = (char *)&tisp_BCSH_au32EvList;
    break;
  case 0x3c8:
    __dest = (char *)&tisp_BCSH_au32SminListS;
    break;
  case 0x3c9:
    __dest = (char *)&tisp_BCSH_au32SmaxListS;
    break;
  case 0x3ca:
    __dest = (char *)&tisp_BCSH_au32SminListM;
    break;
  case 0x3cb:
    __dest = (char *)&tisp_BCSH_au32SmaxListM;
    break;
  case 0x3cc:
    tisp_BCSH_au32C = *param_2;
    __n = 0x14;
    goto LAB_0003b5a4;
  case 0x3cd:
    __dest = (char *)&tisp_BCSH_au32Cxl;
    break;
  case 0x3ce:
    __dest = (char *)&tisp_BCSH_au32Cxh;
    break;
  case 0x3cf:
    __dest = (char *)&tisp_BCSH_au32Cyl;
    break;
  case 0x3d0:
    __dest = (char *)&tisp_BCSH_au32Cyh;
    break;
  case 0x3d1:
    __dest = (char *)&tisp_BCSH_u32B;
    __n = 4;
    goto LAB_0003b5e0;
  case 0x3d2:
    __dest = (char *)&tisp_BCSH_au32OffsetRGB;
    goto LAB_0003b5dc;
  case 0x3d3:
    __dest = (char *)&tisp_BCSH_au32OffsetYUVy;
    __n = 8;
    goto LAB_0003b5e0;
  case 0x3d4:
    __dest = &tisp_BCSH_au32clip0;
    goto LAB_0003b548;
  case 0x3d5:
    __dest = tisp_BCSH_au32clip1;
    goto LAB_0003b548;
  case 0x3d6:
    __dest = tisp_BCSH_au32CCMMatrix_d_wdr;
    break;
  case 0x3d7:
    __dest = tisp_BCSH_au32CCMMatrix_t_wdr;
    break;
  case 0x3d8:
    __dest = tisp_BCSH_au32CCMMatrix_a_wdr;
    break;
  case 0x3d9:
    __dest = tisp_BCSH_au32HDP_wdr;
    goto LAB_0003b5dc;
  case 0x3da:
    __dest = tisp_BCSH_au32HBP_wdr;
    goto LAB_0003b5dc;
  case 0x3db:
    __dest = tisp_BCSH_au32HLSP_wdr;
    goto LAB_0003b5dc;
  case 0x3dc:
    __dest = (char *)&tisp_BCSH_au32Sthres_wdr;
    goto LAB_0003b5dc;
  case 0x3dd:
    __dest = tisp_BCSH_au32EvList_wdr;
    break;
  case 0x3de:
    __dest = tisp_BCSH_au32SminListS_wdr;
    break;
  case 0x3df:
    __dest = tisp_BCSH_au32SmaxListS_wdr;
    break;
  case 0x3e0:
    __dest = tisp_BCSH_au32SminListM_wdr;
    break;
  case 0x3e1:
    __dest = tisp_BCSH_au32SmaxListM_wdr;
    break;
  case 0x3e2:
    __dest = tisp_BCSH_au32OffsetRGB_wdr;
LAB_0003b5dc:
    __n = 0xc;
    goto LAB_0003b5e0;
  case 0x3e3:
    __dest = MMatrix;
    break;
  case 0x3e4:
    __dest = MinvMatrix;
    break;
  case 0x3e5:
    __dest = tisp_BCSH_au32clip2;
LAB_0003b548:
    __n = 0x10;
    goto LAB_0003b5e0;
  default:
    isp_printf(2,"%s,%d: BCSH not support param id %d\n","tisp_bcsh_param_array_set",0x573,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_0003b5e0:
  memcpy(__dest,param_2,__n);
LAB_0003b5a4:
  *param_3 = __n;
  BCSH_real = 1;
  tiziano_bcsh_update();
  return 0;
}



int tisp_bcsh_set_mjpeg_contrast(char param_1,char param_2,char param_3)

{
  char *puVar1;
  unsigned int uVar2;
  int iVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int *puVar7;
  int iVar8;
  int uVar9;
  unsigned int *puVar10;
  unsigned int uVar11;
  int iVar12;
  int iVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  char auStack_50 [64];
  
  puVar1 = tisp_BCSH_au32OffsetRGB_now;
  uVar2 = BCSH_ev >> 10;
  if (*(unsigned int *)tisp_BCSH_au32EvList_now < uVar2) {
    puVar7 = (unsigned int *)(tisp_BCSH_au32EvList_now + 4);
    if (uVar2 < *(unsigned int *)(tisp_BCSH_au32EvList_now + 0x20)) {
      iVar3 = 0;
      do {
        uVar14 = puVar7[-1];
        iVar8 = iVar3 * 4;
        puVar10 = puVar7 + -1;
        iVar13 = iVar3 + 1;
        if (uVar14 <= uVar2) {
          uVar6 = *puVar7;
          iVar12 = (int)puVar7 - (int)tisp_BCSH_au32EvList_now;
          if (uVar2 <= uVar6) {
            uVar5 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar8);
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar12);
            if (uVar11 < uVar5) {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = -((iVar4 * (uVar5 - uVar11)) / uVar15);
            }
            else {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = (iVar4 * (uVar11 - uVar5)) / uVar15;
            }
            tisp_BCSH_au32Svalue = uVar5 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar8);
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar12);
            uVar14 = *puVar10;
            uVar5 = *puVar7;
            if (uVar6 < uVar11) {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar5 - uVar14;
              if (uVar5 < uVar14) {
                uVar15 = uVar14 - uVar5;
              }
              uVar15 = -((iVar4 * (uVar11 - uVar6)) / uVar15);
            }
            else {
              iVar4 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar4 = uVar2 - uVar14;
              }
              uVar15 = uVar14 - uVar5;
              if (uVar14 <= uVar5) {
                uVar15 = uVar5 - uVar14;
              }
              uVar15 = (iVar4 * (uVar6 - uVar11)) / uVar15;
            }
            DAT_000a9f68 = uVar11 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar8);
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar12);
            uVar14 = *puVar10;
            uVar5 = *puVar7;
            if (uVar6 < uVar11) {
              iVar4 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar4 = uVar14 - uVar2;
              }
              uVar15 = uVar5 - uVar14;
              if (uVar5 < uVar14) {
                uVar15 = uVar14 - uVar5;
              }
              uVar15 = -((iVar4 * (uVar11 - uVar6)) / uVar15);
            }
            else {
              iVar4 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar4 = uVar2 - uVar14;
              }
              uVar15 = uVar14 - uVar5;
              if (uVar14 <= uVar5) {
                uVar15 = uVar5 - uVar14;
              }
              uVar15 = (iVar4 * (uVar6 - uVar11)) / uVar15;
            }
            DAT_000a9f6c = uVar11 + uVar15;
            uVar5 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar8);
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar12);
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000a9f70 = uVar5 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cxl)[iVar13];
            uVar5 = (&tisp_BCSH_au32Cxl)[iVar3];
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000aa09c = uVar5 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cxh)[iVar13];
            uVar5 = (&tisp_BCSH_au32Cxh)[iVar3];
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000aa0a0 = uVar5 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cyl)[iVar13];
            uVar5 = (&tisp_BCSH_au32Cyl)[iVar3];
            uVar14 = *puVar10;
            uVar11 = *puVar7;
            if (uVar6 < uVar5) {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar8 * (uVar5 - uVar6)) / uVar15);
            }
            else {
              iVar8 = uVar2 - uVar14;
              if (uVar2 <= uVar14) {
                iVar8 = uVar14 - uVar2;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar8 * (uVar6 - uVar5)) / uVar15;
            }
            DAT_000aa0a4 = uVar5 + uVar15;
            uVar5 = (&tisp_BCSH_au32Cyh)[iVar13];
            uVar11 = (&tisp_BCSH_au32Cyh)[iVar3];
            uVar14 = *puVar10;
            uVar6 = *puVar7;
            if (uVar5 < uVar11) {
              iVar3 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar3 = uVar2 - uVar14;
              }
              uVar2 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar2 = uVar14 - uVar6;
              }
              uVar2 = -((iVar3 * (uVar11 - uVar5)) / uVar2);
            }
            else {
              iVar3 = uVar14 - uVar2;
              if (uVar14 < uVar2) {
                iVar3 = uVar2 - uVar14;
              }
              uVar2 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar2 = uVar14 - uVar6;
              }
              uVar2 = (iVar3 * (uVar5 - uVar11)) / uVar2;
            }
            DAT_000aa0a8 = uVar11 + uVar2;
            break;
          }
        }
        puVar7 = puVar7 + 1;
        iVar3 = iVar13;
      } while (iVar13 != 8);
    }
    else {
      tisp_BCSH_au32Svalue = *(int *)(tisp_BCSH_au32SminListS_now + 0x20);
      DAT_000a9f68 = *(int *)(tisp_BCSH_au32SmaxListS_now + 0x20);
      DAT_000a9f6c = *(int *)(tisp_BCSH_au32SminListM_now + 0x20);
      DAT_000a9f70 = *(int *)(tisp_BCSH_au32SmaxListM_now + 0x20);
      DAT_000aa09c = DAT_000aa094;
      DAT_000aa0a0 = DAT_000aa070;
      DAT_000aa0a4 = DAT_000aa04c;
      DAT_000aa0a8 = DAT_000aa028;
    }
  }
  else {
    tisp_BCSH_au32Svalue = *(int *)tisp_BCSH_au32SminListS_now;
    DAT_000a9f68 = *(int *)tisp_BCSH_au32SmaxListS_now;
    DAT_000a9f6c = *(int *)tisp_BCSH_au32SminListM_now;
    DAT_000a9f70 = *(int *)tisp_BCSH_au32SmaxListM_now;
    DAT_000aa09c = tisp_BCSH_au32Cxl;
    DAT_000aa0a0 = tisp_BCSH_au32Cxh;
    DAT_000aa0a4 = tisp_BCSH_au32Cyl;
    DAT_000aa0a8 = tisp_BCSH_au32Cyh;
  }
  uVar9 = BCSH_ct;
  s_bcsh_mjpeg_y_range_high = param_3;
  s_bcsh_mjpeg_y_range_low = param_2;
  s_bcsh_mjpeg_mode = param_1;
  tiziano_bcsh_Tccm_Comp2Orig();
  tiziano_ct_bcsh_interpolation(uVar9);
  tiziano_bcsh_Tccm_RGB2YUV(tisp_BCSH_au32HMatrix,&tisp_BCSH_as32CCMMatrix);
  tiziano_bcsh_Toffset_RGB2YUV(&tisp_BCSH_u32OffsetRGB2yuv,puVar1);
  tiziano_bcsh_TransitParam();
  for (uVar2 = 0; uVar2 < 0x3c; uVar2 = uVar2 + 1) {
    auStack_50[uVar2] = (&DAT_000c4bc0)[uVar2];
  }
  tiziano_bcsh_lut_parameter(tisp_BCSH,DAT_000c4bb4,DAT_000c4bb8,DAT_000c4bbc);
  BCSH_real = 0;
  return 0;
}



int tisp_bcsh_contrast(char param_1)

{
  bcsh_contrast = param_1;
  tiziano_bcsh_update();
  return 0;
}



int tisp_bcsh_saturation(char param_1)

{
  bcsh_saturation = param_1;
  tiziano_bcsh_update();
  return 0;
}



int tisp_bcsh_brightness(char param_1)

{
  bcsh_brightness = param_1;
  tiziano_bcsh_update();
  return 0;
}



int tisp_bcsh_s_hue(char param_1)

{
  bcsh_hue = (char)((int)((uint)param_1 * 0x78 + -1) / 0x100) + '\x01';
  tiziano_bcsh_update();
  bcsh_hue_in = param_1;
  return 0;
}



void tisp_bcsh_g_hue(char *param_1)

{
  *param_1 = bcsh_hue_in;
  return;
}



char tisp_bcsh_g_brightness(void)

{
  return bcsh_brightness;
}



char tisp_bcsh_g_saturation(void)

{
  return bcsh_saturation;
}



char tisp_bcsh_g_contrast(void)

{
  return bcsh_contrast;
}



void tisp_bcsh_get_attr(void *param_1)

{
  memcpy(param_1,&bcsh_ctrl,0x28);
  return;
}



int tisp_bcsh_set_attr(void *param_1)

{
  unsigned int *puVar1;
  char *puVar2;
  unsigned int uVar3;
  int iVar4;
  int iVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  unsigned int *puVar8;
  int iVar9;
  int uVar10;
  unsigned int uVar11;
  int iVar12;
  int iVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  char auStack_50 [44];
  
  memcpy(&bcsh_ctrl,param_1,0x28);
  if (bcsh_ctrl == '\x01') {
    memcpy(tisp_BCSH_au32CCMMatrix_d,&DAT_000c4c50,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_t,&DAT_000c4c50,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_a,&DAT_000c4c50,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_d_wdr,&DAT_000c4c50,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_t_wdr,&DAT_000c4c50,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_a_wdr,&DAT_000c4c50,0x24);
    if (DAT_000c4c4d == '\0') {
      tisp_BCSH_au32Sthres = 0;
      tisp_BCSH_au32Sthres_wdr = 0;
    }
  }
  else {
    memcpy(tisp_BCSH_au32CCMMatrix_d,&DAT_000a6620,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_t,&DAT_000a6644,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_a,&DAT_000a6668,0x24);
    memcpy(&tisp_BCSH_au32Sthres,&DAT_000a66b0,0xc);
    memcpy(tisp_BCSH_au32CCMMatrix_d_wdr,&DAT_000a684c,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_t_wdr,&DAT_000a6870,0x24);
    memcpy(tisp_BCSH_au32CCMMatrix_a_wdr,&DAT_000a6894,0x24);
    memcpy(&tisp_BCSH_au32Sthres_wdr,&DAT_000a68dc,0xc);
  }
  puVar2 = tisp_BCSH_au32OffsetRGB_now;
  BCSH_real = 1;
  uVar3 = BCSH_ev >> 10;
  if (*(unsigned int *)tisp_BCSH_au32EvList_now < uVar3) {
    if (uVar3 < *(unsigned int *)(tisp_BCSH_au32EvList_now + 0x20)) {
      iVar4 = 0;
      puVar1 = (unsigned int *)tisp_BCSH_au32EvList_now;
      do {
        puVar8 = puVar1 + 1;
        uVar14 = *puVar1;
        iVar9 = iVar4 * 4;
        iVar13 = iVar4 + 1;
        if (uVar14 <= uVar3) {
          uVar7 = *puVar8;
          iVar12 = (int)puVar8 - (int)tisp_BCSH_au32EvList_now;
          if (uVar3 <= uVar7) {
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar9);
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar12);
            if (uVar11 < uVar6) {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar15 = uVar14 - uVar7;
              }
              uVar15 = -((iVar5 * (uVar6 - uVar11)) / uVar15);
            }
            else {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar15 = uVar14 - uVar7;
              }
              uVar15 = (iVar5 * (uVar11 - uVar6)) / uVar15;
            }
            tisp_BCSH_au32Svalue = uVar6 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar9);
            uVar7 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar12);
            uVar14 = *puVar1;
            uVar6 = *puVar8;
            if (uVar7 < uVar11) {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = -((iVar5 * (uVar11 - uVar7)) / uVar15);
            }
            else {
              iVar5 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar5 = uVar3 - uVar14;
              }
              uVar15 = uVar14 - uVar6;
              if (uVar14 <= uVar6) {
                uVar15 = uVar6 - uVar14;
              }
              uVar15 = (iVar5 * (uVar7 - uVar11)) / uVar15;
            }
            DAT_000a9f68 = uVar11 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar9);
            uVar7 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar12);
            uVar14 = *puVar1;
            uVar6 = *puVar8;
            if (uVar7 < uVar11) {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = -((iVar5 * (uVar11 - uVar7)) / uVar15);
            }
            else {
              iVar5 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar5 = uVar3 - uVar14;
              }
              uVar15 = uVar14 - uVar6;
              if (uVar14 <= uVar6) {
                uVar15 = uVar6 - uVar14;
              }
              uVar15 = (iVar5 * (uVar7 - uVar11)) / uVar15;
            }
            DAT_000a9f6c = uVar11 + uVar15;
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar9);
            uVar7 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar12);
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000a9f70 = uVar6 + uVar15;
            uVar7 = (&tisp_BCSH_au32Cxl)[iVar13];
            uVar6 = (&tisp_BCSH_au32Cxl)[iVar4];
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000aa09c = uVar6 + uVar15;
            uVar7 = (&tisp_BCSH_au32Cxh)[iVar13];
            uVar6 = (&tisp_BCSH_au32Cxh)[iVar4];
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000aa0a0 = uVar6 + uVar15;
            uVar7 = (&tisp_BCSH_au32Cyl)[iVar13];
            uVar6 = (&tisp_BCSH_au32Cyl)[iVar4];
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000aa0a4 = uVar6 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cyh)[iVar13];
            uVar11 = (&tisp_BCSH_au32Cyh)[iVar4];
            uVar14 = *puVar1;
            uVar7 = *puVar8;
            if (uVar6 < uVar11) {
              iVar4 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar4 = uVar3 - uVar14;
              }
              uVar3 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar3 = uVar14 - uVar7;
              }
              uVar3 = -((iVar4 * (uVar11 - uVar6)) / uVar3);
            }
            else {
              iVar4 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar4 = uVar3 - uVar14;
              }
              uVar3 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar3 = uVar14 - uVar7;
              }
              uVar3 = (iVar4 * (uVar6 - uVar11)) / uVar3;
            }
            DAT_000aa0a8 = uVar11 + uVar3;
            break;
          }
        }
        iVar4 = iVar13;
        puVar1 = puVar8;
      } while (iVar13 != 8);
    }
    else {
      tisp_BCSH_au32Svalue = *(int *)(tisp_BCSH_au32SminListS_now + 0x20);
      DAT_000a9f68 = *(int *)(tisp_BCSH_au32SmaxListS_now + 0x20);
      DAT_000a9f6c = *(int *)(tisp_BCSH_au32SminListM_now + 0x20);
      DAT_000a9f70 = *(int *)(tisp_BCSH_au32SmaxListM_now + 0x20);
      DAT_000aa09c = DAT_000aa094;
      DAT_000aa0a0 = DAT_000aa070;
      DAT_000aa0a4 = DAT_000aa04c;
      DAT_000aa0a8 = DAT_000aa028;
    }
  }
  else {
    tisp_BCSH_au32Svalue = *(int *)tisp_BCSH_au32SminListS_now;
    DAT_000a9f68 = *(int *)tisp_BCSH_au32SmaxListS_now;
    DAT_000a9f6c = *(int *)tisp_BCSH_au32SminListM_now;
    DAT_000a9f70 = *(int *)tisp_BCSH_au32SmaxListM_now;
    DAT_000aa09c = tisp_BCSH_au32Cxl;
    DAT_000aa0a0 = tisp_BCSH_au32Cxh;
    DAT_000aa0a4 = tisp_BCSH_au32Cyl;
    DAT_000aa0a8 = tisp_BCSH_au32Cyh;
  }
  uVar10 = BCSH_ct;
  tiziano_bcsh_Tccm_Comp2Orig();
  tiziano_ct_bcsh_interpolation(uVar10);
  tiziano_bcsh_Tccm_RGB2YUV(tisp_BCSH_au32HMatrix,&tisp_BCSH_as32CCMMatrix);
  tiziano_bcsh_Toffset_RGB2YUV(&tisp_BCSH_u32OffsetRGB2yuv,puVar2);
  tiziano_bcsh_TransitParam();
  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1) {
    auStack_50[uVar3] = (&DAT_000c4bc0)[uVar3];
  }
  tiziano_bcsh_lut_parameter(tisp_BCSH,DAT_000c4bb4,DAT_000c4bb8,DAT_000c4bbc);
  BCSH_real = 0;
  return 0;
}



int tisp_bcsh_s_rgb_coefft(ushort *param_1)

{
  unsigned int *puVar1;
  char *puVar2;
  unsigned int uVar3;
  int iVar4;
  int iVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  unsigned int *puVar8;
  int iVar9;
  int uVar10;
  unsigned int uVar11;
  int iVar12;
  int iVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  char auStack_50 [64];
  
  *(unsigned int *)tisp_BCSH_au32OffsetRGB_now = (uint)*param_1;
  puVar2 = tisp_BCSH_au32OffsetRGB_now;
  *(unsigned int *)(tisp_BCSH_au32OffsetRGB_now + 4) = (uint)param_1[1];
  *(unsigned int *)(puVar2 + 8) = (uint)param_1[2];
  puVar2 = tisp_BCSH_au32OffsetRGB_now;
  uVar3 = BCSH_ev >> 10;
  if (*(unsigned int *)tisp_BCSH_au32EvList_now < uVar3) {
    if (uVar3 < *(unsigned int *)(tisp_BCSH_au32EvList_now + 0x20)) {
      iVar4 = 0;
      puVar1 = (unsigned int *)tisp_BCSH_au32EvList_now;
      do {
        puVar8 = puVar1 + 1;
        uVar14 = *puVar1;
        iVar9 = iVar4 * 4;
        iVar13 = iVar4 + 1;
        if (uVar14 <= uVar3) {
          uVar7 = *puVar8;
          iVar12 = (int)puVar8 - (int)tisp_BCSH_au32EvList_now;
          if (uVar3 <= uVar7) {
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar9);
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListS_now + iVar12);
            if (uVar11 < uVar6) {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar15 = uVar14 - uVar7;
              }
              uVar15 = -((iVar5 * (uVar6 - uVar11)) / uVar15);
            }
            else {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar15 = uVar14 - uVar7;
              }
              uVar15 = (iVar5 * (uVar11 - uVar6)) / uVar15;
            }
            tisp_BCSH_au32Svalue = uVar6 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar9);
            uVar7 = *(unsigned int *)(tisp_BCSH_au32SmaxListS_now + iVar12);
            uVar14 = *puVar1;
            uVar6 = *puVar8;
            if (uVar7 < uVar11) {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = -((iVar5 * (uVar11 - uVar7)) / uVar15);
            }
            else {
              iVar5 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar5 = uVar3 - uVar14;
              }
              uVar15 = uVar14 - uVar6;
              if (uVar14 <= uVar6) {
                uVar15 = uVar6 - uVar14;
              }
              uVar15 = (iVar5 * (uVar7 - uVar11)) / uVar15;
            }
            DAT_000a9f68 = uVar11 + uVar15;
            uVar11 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar9);
            uVar7 = *(unsigned int *)(tisp_BCSH_au32SminListM_now + iVar12);
            uVar14 = *puVar1;
            uVar6 = *puVar8;
            if (uVar7 < uVar11) {
              iVar5 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar5 = uVar14 - uVar3;
              }
              uVar15 = uVar6 - uVar14;
              if (uVar6 < uVar14) {
                uVar15 = uVar14 - uVar6;
              }
              uVar15 = -((iVar5 * (uVar11 - uVar7)) / uVar15);
            }
            else {
              iVar5 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar5 = uVar3 - uVar14;
              }
              uVar15 = uVar14 - uVar6;
              if (uVar14 <= uVar6) {
                uVar15 = uVar6 - uVar14;
              }
              uVar15 = (iVar5 * (uVar7 - uVar11)) / uVar15;
            }
            DAT_000a9f6c = uVar11 + uVar15;
            uVar6 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar9);
            uVar7 = *(unsigned int *)(tisp_BCSH_au32SmaxListM_now + iVar12);
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000a9f70 = uVar6 + uVar15;
            uVar7 = (&tisp_BCSH_au32Cxl)[iVar13];
            uVar6 = (&tisp_BCSH_au32Cxl)[iVar4];
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000aa09c = uVar6 + uVar15;
            uVar7 = (&tisp_BCSH_au32Cxh)[iVar13];
            uVar6 = (&tisp_BCSH_au32Cxh)[iVar4];
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000aa0a0 = uVar6 + uVar15;
            uVar7 = (&tisp_BCSH_au32Cyl)[iVar13];
            uVar6 = (&tisp_BCSH_au32Cyl)[iVar4];
            uVar14 = *puVar1;
            uVar11 = *puVar8;
            if (uVar7 < uVar6) {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar11 - uVar14;
              if (uVar11 < uVar14) {
                uVar15 = uVar14 - uVar11;
              }
              uVar15 = -((iVar9 * (uVar6 - uVar7)) / uVar15);
            }
            else {
              iVar9 = uVar3 - uVar14;
              if (uVar3 <= uVar14) {
                iVar9 = uVar14 - uVar3;
              }
              uVar15 = uVar14 - uVar11;
              if (uVar14 <= uVar11) {
                uVar15 = uVar11 - uVar14;
              }
              uVar15 = (iVar9 * (uVar7 - uVar6)) / uVar15;
            }
            DAT_000aa0a4 = uVar6 + uVar15;
            uVar6 = (&tisp_BCSH_au32Cyh)[iVar13];
            uVar11 = (&tisp_BCSH_au32Cyh)[iVar4];
            uVar14 = *puVar1;
            uVar7 = *puVar8;
            if (uVar6 < uVar11) {
              iVar4 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar4 = uVar3 - uVar14;
              }
              uVar3 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar3 = uVar14 - uVar7;
              }
              uVar3 = -((iVar4 * (uVar11 - uVar6)) / uVar3);
            }
            else {
              iVar4 = uVar14 - uVar3;
              if (uVar14 < uVar3) {
                iVar4 = uVar3 - uVar14;
              }
              uVar3 = uVar7 - uVar14;
              if (uVar7 < uVar14) {
                uVar3 = uVar14 - uVar7;
              }
              uVar3 = (iVar4 * (uVar6 - uVar11)) / uVar3;
            }
            DAT_000aa0a8 = uVar11 + uVar3;
            break;
          }
        }
        iVar4 = iVar13;
        puVar1 = puVar8;
      } while (iVar13 != 8);
    }
    else {
      tisp_BCSH_au32Svalue = *(int *)(tisp_BCSH_au32SminListS_now + 0x20);
      DAT_000a9f68 = *(int *)(tisp_BCSH_au32SmaxListS_now + 0x20);
      DAT_000a9f6c = *(int *)(tisp_BCSH_au32SminListM_now + 0x20);
      DAT_000a9f70 = *(int *)(tisp_BCSH_au32SmaxListM_now + 0x20);
      DAT_000aa09c = DAT_000aa094;
      DAT_000aa0a0 = DAT_000aa070;
      DAT_000aa0a4 = DAT_000aa04c;
      DAT_000aa0a8 = DAT_000aa028;
    }
  }
  else {
    tisp_BCSH_au32Svalue = *(int *)tisp_BCSH_au32SminListS_now;
    DAT_000a9f68 = *(int *)tisp_BCSH_au32SmaxListS_now;
    DAT_000a9f6c = *(int *)tisp_BCSH_au32SminListM_now;
    DAT_000a9f70 = *(int *)tisp_BCSH_au32SmaxListM_now;
    DAT_000aa09c = tisp_BCSH_au32Cxl;
    DAT_000aa0a0 = tisp_BCSH_au32Cxh;
    DAT_000aa0a4 = tisp_BCSH_au32Cyl;
    DAT_000aa0a8 = tisp_BCSH_au32Cyh;
  }
  uVar10 = BCSH_ct;
  tiziano_bcsh_Tccm_Comp2Orig();
  tiziano_ct_bcsh_interpolation(uVar10);
  tiziano_bcsh_Tccm_RGB2YUV(tisp_BCSH_au32HMatrix,&tisp_BCSH_as32CCMMatrix);
  tiziano_bcsh_Toffset_RGB2YUV(&tisp_BCSH_u32OffsetRGB2yuv,puVar2);
  tiziano_bcsh_TransitParam();
  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1) {
    auStack_50[uVar3] = (&DAT_000c4bc0)[uVar3];
  }
  tiziano_bcsh_lut_parameter(tisp_BCSH,DAT_000c4bb4,DAT_000c4bb8,DAT_000c4bbc);
  BCSH_real = 0;
  return 0;
}



void tisp_bcsh_g_rgb_coefft(short *param_1)

{
  *param_1 = (short)*(int *)tisp_BCSH_au32OffsetRGB_now;
  param_1[1] = (short)*(int *)(tisp_BCSH_au32OffsetRGB_now + 4);
  param_1[2] = (short)*(int *)(tisp_BCSH_au32OffsetRGB_now + 8);
  return;
}



int tisp_sharpen_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  y_sp_sl_exp_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_sl_exp_thres_array);
  y_sp_sl_exp_num_intp = tisp_simple_intp(iVar1,param_1,y_sp_sl_exp_num_array);
  y_sp_uu_min_stren_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_min_stren_array);
  y_sp_uu_min_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_min_thres_array);
  y_sp_uu_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_thres_array_now);
  y_sp_mv_uu_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_mv_uu_thres_array);
  y_sp_mv_uu_stren_intp = tisp_simple_intp(iVar1,param_1,y_sp_mv_uu_stren_array);
  y_sp_uu_stren_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_stren_array);
  y_sp_fl_std_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_std_thres_array);
  y_sp_mv_fl_std_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_mv_fl_std_thres_array);
  y_sp_fl_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_thres_array);
  y_sp_fl_min_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_min_thres_array);
  y_sp_mv_fl_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_mv_fl_thres_array);
  y_sp_mv_fl_min_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_mv_fl_min_thres_array);
  y_sp_v2_win5_thres_intp = tisp_simple_intp(iVar1,param_1,y_sp_v2_win5_thres_array);
  y_sp_w_sl_stren_0_intp = tisp_simple_intp(iVar1,param_1,y_sp_w_sl_stren_0_array_now);
  y_sp_w_sl_stren_1_intp = tisp_simple_intp(iVar1,param_1,y_sp_w_sl_stren_1_array_now);
  y_sp_w_sl_stren_2_intp = tisp_simple_intp(iVar1,param_1,y_sp_w_sl_stren_2_array_now);
  y_sp_w_sl_stren_3_intp = tisp_simple_intp(iVar1,param_1,y_sp_w_sl_stren_3_array_now);
  y_sp_b_sl_stren_0_intp = tisp_simple_intp(iVar1,param_1,y_sp_b_sl_stren_0_array_now);
  y_sp_b_sl_stren_1_intp = tisp_simple_intp(iVar1,param_1,y_sp_b_sl_stren_1_array_now);
  y_sp_b_sl_stren_2_intp = tisp_simple_intp(iVar1,param_1,y_sp_b_sl_stren_2_array_now);
  y_sp_b_sl_stren_3_intp = tisp_simple_intp(iVar1,param_1,y_sp_b_sl_stren_3_array_now);
  y_sp_uu_sl_0_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_sl_0_array);
  y_sp_uu_sl_1_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_sl_1_array);
  y_sp_uu_sl_2_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_sl_2_array);
  y_sp_uu_sl_3_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_uu_sl_3_array);
  y_sp_fl_sl_0_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_sl_0_array);
  y_sp_fl_sl_1_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_sl_1_array);
  y_sp_fl_sl_2_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_sl_2_array);
  y_sp_fl_sl_3_array_intp = tisp_simple_intp(iVar1,param_1,y_sp_fl_sl_3_array);
  return 0;
}



int tisp_y_sp_sl_exp_cfg(void)

{
  system_reg_write(0x7000,y_sp_sl_exp_num_intp << 0x10 | y_sp_sl_exp_thres_intp);
  return 0;
}



int tisp_y_sp_std_scope_cfg(void)

{
  system_reg_write(0x7004,y_sp_std_cfg_array << 0x10 | DAT_000c5384);
  return 0;
}



int tisp_y_sp_uu_cfg(void)

{
  system_reg_write(0x7008,y_sp_uu_min_stren_intp << 0x10 | y_sp_uu_par_cfg_array | DAT_000c529c << 8
                  );
  system_reg_write(0x700c,y_sp_mv_uu_thres_intp << 0x18 | y_sp_uu_thres_intp << 8 |
                          y_sp_uu_min_thres_intp | DAT_000c52a0 << 0x10);
  system_reg_write(0x7010,y_sp_out_opt_array << 0x1c | DAT_000c52a4 << 0x18 |
                          y_sp_uu_stren_intp << 8 | y_sp_mv_uu_stren_intp);
  return 0;
}



int tisp_y_sp_fl_thres_cfg(void)

{
  system_reg_write(0x7014,y_sp_mv_fl_std_thres_intp << 8 | y_sp_fl_std_thres_intp);
  system_reg_write(0x7018,y_sp_fl_thres_intp << 0x10 | y_sp_fl_par_cfg_array |
                          y_sp_fl_min_thres_intp << 0x18);
  system_reg_write(0x701c,y_sp_mv_fl_thres_intp << 0x10 | DAT_000c51bc |
                          y_sp_mv_fl_min_thres_intp << 0x18);
  return 0;
}



int tisp_y_sp_v1_v2_coef_cfg(void)

{
  system_reg_write(0x7020,y_sp_v2_win5_thres_intp << 8 | y_sp_v1_v2_coef_par_cfg_array |
                          DAT_000c5168 << 0x10);
  system_reg_write(0x7024,DAT_000c5170 << 4 | DAT_000c5174 << 8 | DAT_000c516c | DAT_000c5178 << 0xc
                          | DAT_000c517c << 0x10 | DAT_000c5180 << 0x14);
  system_reg_write(0x7028,DAT_000c5188 << 8 | DAT_000c518c << 0x10 | DAT_000c5184 |
                          DAT_000c5190 << 0x18);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_y_sp_w_b_ll_cfg(void)

{
  system_reg_write(0x702c,_DAT_000c5144 << 8 | DAT_000c5148 << 0x10 | y_sp_w_b_ll_par_cfg_array |
                          DAT_000c514c << 0x18);
  system_reg_write(0x7030,DAT_000c5154 << 8 | DAT_000c5158 << 0x10 | DAT_000c5150);
  system_reg_write(0x7034,DAT_000c5160 << 0x10 | DAT_000c515c);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_y_sp_uu_w_b_wei_cfg(void)

{
  system_reg_write(0x7038,_DAT_000c5104 << 8 | DAT_000c5108 << 0x10 | y_sp_uu_np_array |
                          DAT_000c510c << 0x18);
  system_reg_write(0x703c,DAT_000c5114 << 8 | DAT_000c5118 << 0x10 | DAT_000c5110 |
                          DAT_000c511c << 0x18);
  system_reg_write(0x7040,DAT_000c5124 << 8 | DAT_000c5128 << 0x10 | DAT_000c5120 |
                          DAT_000c512c << 0x18);
  system_reg_write(0x7044,DAT_000c5134 << 8 | DAT_000c5138 << 0x10 | DAT_000c5130 |
                          DAT_000c513c << 0x18);
  system_reg_write(0x7048,_DAT_000c50c4 << 8 | DAT_000c50c8 << 0x10 | y_sp_w_wei_np_array |
                          DAT_000c50cc << 0x18);
  system_reg_write(0x704c,DAT_000c50d4 << 8 | DAT_000c50d8 << 0x10 | DAT_000c50d0 |
                          DAT_000c50dc << 0x18);
  system_reg_write(0x7050,DAT_000c50e4 << 8 | DAT_000c50e8 << 0x10 | DAT_000c50e0 |
                          DAT_000c50ec << 0x18);
  system_reg_write(0x7054,DAT_000c50f4 << 8 | DAT_000c50f8 << 0x10 | DAT_000c50f0 |
                          DAT_000c50fc << 0x18);
  system_reg_write(0x7058,_DAT_000c5084 << 8 | DAT_000c5088 << 0x10 | y_sp_b_wei_np_array |
                          DAT_000c508c << 0x18);
  system_reg_write(0x705c,DAT_000c5094 << 8 | DAT_000c5098 << 0x10 | DAT_000c5090 |
                          DAT_000c509c << 0x18);
  system_reg_write(0x7060,DAT_000c50a4 << 8 | DAT_000c50a8 << 0x10 | DAT_000c50a0 |
                          DAT_000c50ac << 0x18);
  system_reg_write(0x7064,DAT_000c50b4 << 8 | DAT_000c50b8 << 0x10 | DAT_000c50b0 |
                          DAT_000c50bc << 0x18);
  return 0;
}



int tisp_y_sp_w_b_sl_cfg(void)

{
  system_reg_write(0x7068,y_sp_w_sl_stren_1_intp << 0x10 | y_sp_w_sl_stren_0_intp);
  system_reg_write(0x706c,y_sp_w_sl_stren_3_intp << 0x10 | y_sp_w_sl_stren_2_intp);
  system_reg_write(0x7070,y_sp_b_sl_stren_1_intp << 0x10 | y_sp_b_sl_stren_0_intp);
  system_reg_write(0x7074,y_sp_b_sl_stren_3_intp << 0x10 | y_sp_b_sl_stren_2_intp);
  return 0;
}



int tisp_y_sp_uu_fl_sl_cfg(void)

{
  system_reg_write(0x7078,y_sp_uu_sl_1_array_intp << 8 | y_sp_uu_sl_2_array_intp << 0x10 |
                          y_sp_uu_sl_0_array_intp | y_sp_uu_sl_3_array_intp << 0x18);
  system_reg_write(0x707c,y_sp_fl_sl_1_array_intp << 8 | y_sp_fl_sl_2_array_intp << 0x10 |
                          y_sp_fl_sl_0_array_intp | y_sp_fl_sl_3_array_intp << 0x18);
  return 0;
}



void tisp_sharpen_wdr_en(int param_1)

{
  char *puVar1;
  
  sharpen_wdr_en = param_1;
  if (param_1 == 0) {
    y_sp_uu_thres_array_now = y_sp_uu_thres_array;
    y_sp_w_sl_stren_0_array_now = y_sp_w_sl_stren_0_array;
    y_sp_w_sl_stren_1_array_now = y_sp_w_sl_stren_1_array;
    y_sp_w_sl_stren_2_array_now = y_sp_w_sl_stren_2_array;
    y_sp_w_sl_stren_3_array_now = y_sp_w_sl_stren_3_array;
    y_sp_b_sl_stren_0_array_now = y_sp_b_sl_stren_0_array;
    y_sp_b_sl_stren_1_array_now = y_sp_b_sl_stren_1_array;
    y_sp_b_sl_stren_2_array_now = y_sp_b_sl_stren_2_array;
    puVar1 = y_sp_b_sl_stren_3_array;
  }
  else {
    y_sp_uu_thres_array_now = y_sp_uu_thres_wdr_array;
    y_sp_w_sl_stren_0_array_now = y_sp_w_sl_stren_0_wdr_array;
    y_sp_w_sl_stren_1_array_now = y_sp_w_sl_stren_1_wdr_array;
    y_sp_w_sl_stren_2_array_now = y_sp_w_sl_stren_2_wdr_array;
    y_sp_w_sl_stren_3_array_now = y_sp_w_sl_stren_3_wdr_array;
    y_sp_b_sl_stren_0_array_now = y_sp_b_sl_stren_0_wdr_array;
    y_sp_b_sl_stren_1_array_now = y_sp_b_sl_stren_1_wdr_array;
    y_sp_b_sl_stren_2_array_now = y_sp_b_sl_stren_2_wdr_array;
    puVar1 = y_sp_b_sl_stren_3_wdr_array;
  }
  y_sp_b_sl_stren_3_array_now = puVar1;
  return;
}



int tisp_sharpen_all_reg_refresh(void)

{
  tisp_sharpen_intp();
  tisp_y_sp_sl_exp_cfg();
  tisp_y_sp_std_scope_cfg();
  tisp_y_sp_uu_cfg();
  tisp_y_sp_fl_thres_cfg();
  tisp_y_sp_v1_v2_coef_cfg();
  tisp_y_sp_w_b_ll_cfg();
  tisp_y_sp_uu_w_b_wei_cfg();
  tisp_y_sp_w_b_sl_cfg();
  tisp_y_sp_uu_fl_sl_cfg();
  system_reg_write(0x7090,1);
  return 0;
}



int tisp_sharpen_intp_reg_refresh(void)

{
  tisp_sharpen_intp();
  tisp_y_sp_sl_exp_cfg();
  tisp_y_sp_uu_cfg();
  tisp_y_sp_fl_thres_cfg();
  tisp_y_sp_v1_v2_coef_cfg();
  tisp_y_sp_w_b_sl_cfg();
  return 0;
}



int tisp_sharpen_par_refresh(unsigned int param_1,unsigned int param_2,int param_3)

{
  code *pcVar1;
  unsigned int uVar2;
  
  if (gain_old == 0xffffffff) {
    pcVar1 = tisp_sharpen_all_reg_refresh;
  }
  else {
    uVar2 = gain_old - param_1;
    if (gain_old <= param_1) {
      uVar2 = param_1 - gain_old;
    }
    if (uVar2 < param_2) goto LAB_0003c754;
    pcVar1 = tisp_sharpen_intp_reg_refresh;
  }
  gain_old = param_1;
  (*pcVar1)();
LAB_0003c754:
  if (param_3 == 1) {
    system_reg_write(0x7090,1);
  }
  return 0;
}



int tiziano_sharpen_params_refresh(void)

{
  memcpy(&y_sp_out_opt_array,&DAT_0009e158,4);
  memcpy(y_sp_sl_exp_thres_array,&DAT_0009e15c,0x24);
  memcpy(y_sp_sl_exp_num_array,&DAT_0009e180,0x24);
  memcpy(&y_sp_std_cfg_array,&DAT_0009e1a4,8);
  memcpy(y_sp_uu_min_stren_array,&DAT_0009e1ac,0x24);
  memcpy(y_sp_uu_min_thres_array,&DAT_0009e1d0,0x24);
  memcpy(y_sp_uu_thres_array,&DAT_0009e1f4,0x24);
  memcpy(y_sp_mv_uu_thres_array,&DAT_0009e218,0x24);
  memcpy(y_sp_mv_uu_stren_array,&DAT_0009e23c,0x24);
  memcpy(y_sp_uu_stren_array,&DAT_0009e260,0x24);
  memcpy(&y_sp_uu_par_cfg_array,&DAT_0009e284,0x10);
  memcpy(y_sp_fl_std_thres_array,&DAT_0009e294,0x24);
  memcpy(y_sp_mv_fl_std_thres_array,&DAT_0009e2b8,0x24);
  memcpy(y_sp_fl_thres_array,&DAT_0009e2dc,0x24);
  memcpy(y_sp_fl_min_thres_array,&DAT_0009e300,0x24);
  memcpy(y_sp_mv_fl_thres_array,&DAT_0009e324,0x24);
  memcpy(y_sp_mv_fl_min_thres_array,&DAT_0009e348,0x24);
  memcpy(&y_sp_fl_par_cfg_array,&DAT_0009e36c,8);
  memcpy(y_sp_v2_win5_thres_array,&DAT_0009e374,0x24);
  memcpy(&y_sp_v1_v2_coef_par_cfg_array,&DAT_0009e398,0x30);
  memcpy(&y_sp_w_b_ll_par_cfg_array,&DAT_0009e3c8,0x24);
  memcpy(&y_sp_uu_np_array,&DAT_0009e3ec,0x40);
  memcpy(&y_sp_w_wei_np_array,&DAT_0009e42c,0x40);
  memcpy(&y_sp_b_wei_np_array,&DAT_0009e46c,0x40);
  memcpy(y_sp_w_sl_stren_0_array,&DAT_0009e4ac,0x24);
  memcpy(y_sp_w_sl_stren_1_array,&DAT_0009e4d0,0x24);
  memcpy(y_sp_w_sl_stren_2_array,&DAT_0009e4f4,0x24);
  memcpy(y_sp_w_sl_stren_3_array,&DAT_0009e518,0x24);
  memcpy(y_sp_b_sl_stren_0_array,&DAT_0009e53c,0x24);
  memcpy(y_sp_b_sl_stren_1_array,&DAT_0009e560,0x24);
  memcpy(y_sp_b_sl_stren_2_array,&DAT_0009e584,0x24);
  memcpy(y_sp_b_sl_stren_3_array,&DAT_0009e5a8,0x24);
  memcpy(y_sp_uu_sl_0_array,&DAT_0009e5cc,0x24);
  memcpy(y_sp_uu_sl_1_array,&DAT_0009e5f0,0x24);
  memcpy(y_sp_uu_sl_2_array,&DAT_0009e614,0x24);
  memcpy(y_sp_uu_sl_3_array,&DAT_0009e638,0x24);
  memcpy(y_sp_fl_sl_0_array,&DAT_0009e65c,0x24);
  memcpy(y_sp_fl_sl_1_array,&DAT_0009e680,0x24);
  memcpy(y_sp_fl_sl_2_array,&DAT_0009e6a4,0x24);
  memcpy(y_sp_uu_thres_wdr_array,&DAT_0009e6c8,0x24);
  memcpy(y_sp_w_sl_stren_0_wdr_array,&DAT_0009e6ec,0x24);
  memcpy(y_sp_w_sl_stren_1_wdr_array,&DAT_0009e710,0x24);
  memcpy(y_sp_w_sl_stren_2_wdr_array,&DAT_0009e734,0x24);
  memcpy(y_sp_w_sl_stren_3_wdr_array,&DAT_0009e758,0x24);
  memcpy(y_sp_b_sl_stren_0_wdr_array,&DAT_0009e77c,0x24);
  memcpy(y_sp_b_sl_stren_1_wdr_array,&DAT_0009e7a0,0x24);
  memcpy(y_sp_b_sl_stren_2_wdr_array,&DAT_0009e7c4,0x24);
  memcpy(y_sp_b_sl_stren_3_wdr_array,&DAT_0009e7e8,0x24);
  memcpy(y_sp_fl_sl_3_array,&DAT_0009e80c,0x24);
  return 0;
}



int tiziano_sharpen_init(void)

{
  char *puVar1;
  
  if (sharpen_wdr_en == 0) {
    y_sp_uu_thres_array_now = y_sp_uu_thres_array;
    y_sp_w_sl_stren_0_array_now = y_sp_w_sl_stren_0_array;
    y_sp_w_sl_stren_1_array_now = y_sp_w_sl_stren_1_array;
    y_sp_w_sl_stren_2_array_now = y_sp_w_sl_stren_2_array;
    y_sp_w_sl_stren_3_array_now = y_sp_w_sl_stren_3_array;
    y_sp_b_sl_stren_0_array_now = y_sp_b_sl_stren_0_array;
    y_sp_b_sl_stren_1_array_now = y_sp_b_sl_stren_1_array;
    y_sp_b_sl_stren_2_array_now = y_sp_b_sl_stren_2_array;
    puVar1 = y_sp_b_sl_stren_3_array;
  }
  else {
    y_sp_uu_thres_array_now = y_sp_uu_thres_wdr_array;
    y_sp_w_sl_stren_0_array_now = y_sp_w_sl_stren_0_wdr_array;
    y_sp_w_sl_stren_1_array_now = y_sp_w_sl_stren_1_wdr_array;
    y_sp_w_sl_stren_2_array_now = y_sp_w_sl_stren_2_wdr_array;
    y_sp_w_sl_stren_3_array_now = y_sp_w_sl_stren_3_wdr_array;
    y_sp_b_sl_stren_0_array_now = y_sp_b_sl_stren_0_wdr_array;
    y_sp_b_sl_stren_1_array_now = y_sp_b_sl_stren_1_wdr_array;
    y_sp_b_sl_stren_2_array_now = y_sp_b_sl_stren_2_wdr_array;
    puVar1 = y_sp_b_sl_stren_3_wdr_array;
  }
  gain_old = 0xffffffff;
  y_sp_b_sl_stren_3_array_now = puVar1;
  tiziano_sharpen_params_refresh();
  tisp_sharpen_par_refresh(0x10000,0x10000,1);
  return 0;
}



int tisp_sharpen_refresh(int param_1)

{
  tisp_sharpen_par_refresh(param_1,0x100,1);
  return 0;
}



int tiziano_sharpen_dn_params_refresh(void)

{
  tiziano_sharpen_params_refresh();
  tisp_sharpen_all_reg_refresh(gain_old);
  return 0;
}



int tisp_sharpen_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0xb5:
    __src = (char *)&y_sp_out_opt_array;
    __n = 4;
    goto LAB_0003d0d0;
  case 0xb6:
    __src = y_sp_sl_exp_thres_array;
    break;
  case 0xb7:
    __src = y_sp_sl_exp_num_array;
    break;
  case 0xb8:
    __src = (char *)&y_sp_std_cfg_array;
    goto LAB_0003cf00;
  case 0xb9:
    __src = y_sp_uu_min_stren_array;
    break;
  case 0xba:
    __src = y_sp_uu_min_thres_array;
    break;
  case 0xbb:
    __src = y_sp_uu_thres_array;
    break;
  case 0xbc:
    __src = y_sp_mv_uu_thres_array;
    break;
  case 0xbd:
    __src = y_sp_mv_uu_stren_array;
    break;
  case 0xbe:
    __src = y_sp_uu_stren_array;
    break;
  case 0xbf:
    __src = (char *)&y_sp_uu_par_cfg_array;
    __n = 0x10;
    goto LAB_0003d0d0;
  case 0xc0:
    __src = y_sp_fl_std_thres_array;
    break;
  case 0xc1:
    __src = y_sp_mv_fl_std_thres_array;
    break;
  case 0xc2:
    __src = y_sp_fl_thres_array;
    break;
  case 0xc3:
    __src = y_sp_fl_min_thres_array;
    break;
  case 0xc4:
    __src = y_sp_mv_fl_thres_array;
    break;
  case 0xc5:
    __src = y_sp_mv_fl_min_thres_array;
    break;
  case 0xc6:
    __src = (char *)&y_sp_fl_par_cfg_array;
LAB_0003cf00:
    __n = 8;
    goto LAB_0003d0d0;
  case 199:
    __src = y_sp_v2_win5_thres_array;
    break;
  case 200:
    __src = (char *)&y_sp_v1_v2_coef_par_cfg_array;
    __n = 0x30;
    goto LAB_0003d0d0;
  case 0xc9:
    __src = (char *)&y_sp_w_b_ll_par_cfg_array;
    break;
  case 0xca:
    __src = (char *)&y_sp_uu_np_array;
    goto LAB_0003cf50;
  case 0xcb:
    __src = (char *)&y_sp_w_wei_np_array;
    goto LAB_0003cf50;
  case 0xcc:
    __src = (char *)&y_sp_b_wei_np_array;
LAB_0003cf50:
    __n = 0x40;
    goto LAB_0003d0d0;
  case 0xcd:
    __src = y_sp_w_sl_stren_0_array;
    break;
  case 0xce:
    __src = y_sp_w_sl_stren_1_array;
    break;
  case 0xcf:
    __src = y_sp_w_sl_stren_2_array;
    break;
  case 0xd0:
    __src = y_sp_w_sl_stren_3_array;
    break;
  case 0xd1:
    __src = y_sp_b_sl_stren_0_array;
    break;
  case 0xd2:
    __src = y_sp_b_sl_stren_1_array;
    break;
  case 0xd3:
    __src = y_sp_b_sl_stren_2_array;
    break;
  case 0xd4:
    __src = y_sp_b_sl_stren_3_array;
    break;
  case 0xd5:
    __src = y_sp_uu_sl_0_array;
    break;
  case 0xd6:
    __src = y_sp_uu_sl_1_array;
    break;
  case 0xd7:
    __src = y_sp_uu_sl_2_array;
    break;
  case 0xd8:
    __src = y_sp_uu_sl_3_array;
    break;
  case 0xd9:
    __src = y_sp_fl_sl_0_array;
    break;
  case 0xda:
    __src = y_sp_fl_sl_1_array;
    break;
  case 0xdb:
    __src = y_sp_fl_sl_2_array;
    break;
  case 0xdc:
    __src = y_sp_uu_thres_wdr_array;
    break;
  case 0xdd:
    __src = y_sp_w_sl_stren_0_wdr_array;
    break;
  case 0xde:
    __src = y_sp_w_sl_stren_1_wdr_array;
    break;
  case 0xdf:
    __src = y_sp_w_sl_stren_2_wdr_array;
    break;
  case 0xe0:
    __src = y_sp_w_sl_stren_3_wdr_array;
    break;
  case 0xe1:
    __src = y_sp_b_sl_stren_0_wdr_array;
    break;
  case 0xe2:
    __src = y_sp_b_sl_stren_1_wdr_array;
    break;
  case 0xe3:
    __src = y_sp_b_sl_stren_2_wdr_array;
    break;
  case 0xe4:
    __src = y_sp_b_sl_stren_3_wdr_array;
    break;
  case 0xe5:
    __src = y_sp_fl_sl_3_array;
    break;
  default:
    isp_printf(2,"%s,%d: y sharpen not support param id %d\n","tisp_sharpen_param_array_get",0x39c,
               param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_0003d0d0:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_sharpen_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  int *puVar2;
  char *__dest;
  
  switch(param_1) {
  case 0xb5:
    memcpy(&y_sp_out_opt_array,param_2,4);
    uVar1 = 4;
    goto LAB_0003d4b8;
  case 0xb6:
    __dest = y_sp_sl_exp_thres_array;
    break;
  case 0xb7:
    __dest = y_sp_sl_exp_num_array;
    break;
  case 0xb8:
    puVar2 = &y_sp_std_cfg_array;
    goto LAB_0003d268;
  case 0xb9:
    __dest = y_sp_uu_min_stren_array;
    break;
  case 0xba:
    __dest = y_sp_uu_min_thres_array;
    break;
  case 0xbb:
    __dest = y_sp_uu_thres_array;
    break;
  case 0xbc:
    __dest = y_sp_mv_uu_thres_array;
    break;
  case 0xbd:
    __dest = y_sp_mv_uu_stren_array;
    break;
  case 0xbe:
    __dest = y_sp_uu_stren_array;
    break;
  case 0xbf:
    memcpy(&y_sp_uu_par_cfg_array,param_2,0x10);
    uVar1 = 0x10;
    goto LAB_0003d4b8;
  case 0xc0:
    __dest = y_sp_fl_std_thres_array;
    break;
  case 0xc1:
    __dest = y_sp_mv_fl_std_thres_array;
    break;
  case 0xc2:
    __dest = y_sp_fl_thres_array;
    break;
  case 0xc3:
    __dest = y_sp_fl_min_thres_array;
    break;
  case 0xc4:
    __dest = y_sp_mv_fl_thres_array;
    break;
  case 0xc5:
    __dest = y_sp_mv_fl_min_thres_array;
    break;
  case 0xc6:
    puVar2 = &y_sp_fl_par_cfg_array;
LAB_0003d268:
    memcpy(puVar2,param_2,8);
    uVar1 = 8;
    goto LAB_0003d4b8;
  case 199:
    __dest = y_sp_v2_win5_thres_array;
    break;
  case 200:
    memcpy(&y_sp_v1_v2_coef_par_cfg_array,param_2,0x30);
    uVar1 = 0x30;
    goto LAB_0003d4b8;
  case 0xc9:
    __dest = (char *)&y_sp_w_b_ll_par_cfg_array;
    break;
  case 0xca:
    puVar2 = &y_sp_uu_np_array;
    goto LAB_0003d2dc;
  case 0xcb:
    puVar2 = &y_sp_w_wei_np_array;
    goto LAB_0003d2dc;
  case 0xcc:
    puVar2 = &y_sp_b_wei_np_array;
LAB_0003d2dc:
    memcpy(puVar2,param_2,0x40);
    uVar1 = 0x40;
    goto LAB_0003d4b8;
  case 0xcd:
    __dest = y_sp_w_sl_stren_0_array;
    break;
  case 0xce:
    __dest = y_sp_w_sl_stren_1_array;
    break;
  case 0xcf:
    __dest = y_sp_w_sl_stren_2_array;
    break;
  case 0xd0:
    __dest = y_sp_w_sl_stren_3_array;
    break;
  case 0xd1:
    __dest = y_sp_b_sl_stren_0_array;
    break;
  case 0xd2:
    __dest = y_sp_b_sl_stren_1_array;
    break;
  case 0xd3:
    __dest = y_sp_b_sl_stren_2_array;
    break;
  case 0xd4:
    __dest = y_sp_b_sl_stren_3_array;
    break;
  case 0xd5:
    __dest = y_sp_uu_sl_0_array;
    break;
  case 0xd6:
    __dest = y_sp_uu_sl_1_array;
    break;
  case 0xd7:
    __dest = y_sp_uu_sl_2_array;
    break;
  case 0xd8:
    __dest = y_sp_uu_sl_3_array;
    break;
  case 0xd9:
    __dest = y_sp_fl_sl_0_array;
    break;
  case 0xda:
    __dest = y_sp_fl_sl_1_array;
    break;
  case 0xdb:
    __dest = y_sp_fl_sl_2_array;
    break;
  case 0xdc:
    __dest = y_sp_uu_thres_wdr_array;
    break;
  case 0xdd:
    __dest = y_sp_w_sl_stren_0_wdr_array;
    break;
  case 0xde:
    __dest = y_sp_w_sl_stren_1_wdr_array;
    break;
  case 0xdf:
    __dest = y_sp_w_sl_stren_2_wdr_array;
    break;
  case 0xe0:
    __dest = y_sp_w_sl_stren_3_wdr_array;
    break;
  case 0xe1:
    __dest = y_sp_b_sl_stren_0_wdr_array;
    break;
  case 0xe2:
    __dest = y_sp_b_sl_stren_1_wdr_array;
    break;
  case 0xe3:
    __dest = y_sp_b_sl_stren_2_wdr_array;
    break;
  case 0xe4:
    __dest = y_sp_b_sl_stren_3_wdr_array;
    break;
  case 0xe5:
    __dest = y_sp_fl_sl_3_array;
    break;
  default:
    isp_printf(2,"%s,%d: y sharpen not support param id %d\n","tisp_sharpen_param_array_set",0x4a2,
               param_1);
    return 0xffffffff;
  }
  memcpy(__dest,param_2,0x24);
  uVar1 = 0x24;
LAB_0003d4b8:
  *param_3 = uVar1;
  tisp_sharpen_all_reg_refresh(gain_old + 0x200);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_grad_thres_opt_cfg(void)

{
  system_reg_write(0x8800,_DAT_000c679c << 4 | sdns_aa_mv_det_opt);
  system_reg_write(0x8804,sdns_grad_zy_thres_intp << 0x10 | sdns_grad_zx_thres_intp);
  system_reg_write(0x8808,sdns_std_thr1_intp << 4 | sdns_std_thr2_intp << 0x10 | DAT_000c67a0);
  return 0;
}



int tisp_sdns_h_mv_wei_opt_cfg(void)

{
  system_reg_write(0x880c,*(int *)(sdns_h_mv_wei_now + 4) << 4 |
                          *(int *)(sdns_h_mv_wei_now + 8) << 8 | *(unsigned int *)sdns_h_mv_wei_now |
                          *(int *)(sdns_h_mv_wei_now + 0xc) << 0xc);
  return 0;
}



int tisp_sdns_mv_seg_number_num_thres_cfg(void)

{
  system_reg_write(0x8810,DAT_000c67a8 << 8 | DAT_000c67a4);
  system_reg_write(0x8814,sdns_mv_num_thr_7x7_intp << 8 | sdns_mv_num_thr_9x9_intp << 0x10 |
                          sdns_mv_num_thr_5x5_intp | sdns_mv_num_thr_11x11_intp << 0x18);
  return 0;
}



int tisp_sdns_g_det_val_div_cfg(void)

{
  system_reg_write(0x8818,DAT_000c67b0 << 0x18 | DAT_000c67ac);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_r_s_mv_cfg(void)

{
  system_reg_write(0x881c,_DAT_000c6630 << 0x10 | sdns_r_s);
  system_reg_write(0x8820,DAT_000c6638 << 0x10 | DAT_000c6634);
  system_reg_write(0x8824,DAT_000c6640 << 0x10 | DAT_000c663c);
  system_reg_write(0x8828,DAT_000c6648 << 0x10 | DAT_000c6644);
  system_reg_write(0x882c,DAT_000c6650 << 0x10 | DAT_000c664c);
  system_reg_write(0x8830,DAT_000c6658 << 0x10 | DAT_000c6654);
  system_reg_write(0x8834,DAT_000c6660 << 0x10 | DAT_000c665c);
  system_reg_write(0x8838,DAT_000c6664);
  system_reg_write(0x883c,_DAT_000c65f4 << 0x10 | sdns_r_mv);
  system_reg_write(0x8840,DAT_000c65fc << 0x10 | DAT_000c65f8);
  system_reg_write(0x8844,DAT_000c6604 << 0x10 | DAT_000c6600);
  system_reg_write(0x8848,DAT_000c660c << 0x10 | DAT_000c6608);
  system_reg_write(0x884c,DAT_000c6614 << 0x10 | DAT_000c6610);
  system_reg_write(0x8850,DAT_000c661c << 0x10 | DAT_000c6618);
  system_reg_write(0x8854,DAT_000c6624 << 0x10 | DAT_000c6620);
  system_reg_write(0x8858,DAT_000c6628);
  return 0;
}



int tisp_sdns_h_s_cfg(void)

{
  system_reg_write(0x885c,sdns_h_s_2_intp << 8 | sdns_h_s_3_intp << 0x10 | sdns_h_s_1_intp |
                          sdns_h_s_4_intp << 0x18);
  system_reg_write(0x8860,sdns_h_s_6_intp << 8 | sdns_h_s_7_intp << 0x10 | sdns_h_s_5_intp |
                          sdns_h_s_8_intp << 0x18);
  system_reg_write(0x8864,sdns_h_s_10_intp << 8 | sdns_h_s_11_intp << 0x10 | sdns_h_s_9_intp |
                          sdns_h_s_12_intp << 0x18);
  system_reg_write(0x8868,sdns_h_s_14_intp << 8 | sdns_h_s_15_intp << 0x10 | sdns_h_s_13_intp |
                          sdns_h_s_16_intp << 0x18);
  return 0;
}



int tisp_sdns_h_mv_cfg(void)

{
  system_reg_write(0x886c,sdns_h_mv_2_intp << 8 | sdns_h_mv_3_intp << 0x10 | sdns_h_mv_1_intp |
                          sdns_h_mv_4_intp << 0x18);
  system_reg_write(0x8870,sdns_h_mv_6_intp << 8 | sdns_h_mv_7_intp << 0x10 | sdns_h_mv_5_intp |
                          sdns_h_mv_8_intp << 0x18);
  system_reg_write(0x8874,sdns_h_mv_10_intp << 8 | sdns_h_mv_11_intp << 0x10 | sdns_h_mv_9_intp |
                          sdns_h_mv_12_intp << 0x18);
  system_reg_write(0x8878,sdns_h_mv_14_intp << 8 | sdns_h_mv_15_intp << 0x10 | sdns_h_mv_13_intp |
                          sdns_h_mv_16_intp << 0x18);
  return 0;
}



int tisp_sdns_dark_light_tt_opt_cfg(void)

{
  system_reg_write(0x887c,sdns_light_thres_intp << 8 | sdns_h_val_max << 0x10 | sdns_dark_thres_intp
                          | sdns_sharpen_tt_opt_intp << 0x18);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_d_s1_thres_cfg(void)

{
  system_reg_write(0x8880,_DAT_000c60c8 << 0x10 | sdns_d_s1_thr);
  system_reg_write(0x8884,DAT_000c60d0 << 0x10 | DAT_000c60cc);
  system_reg_write(0x8888,DAT_000c60d8 << 0x10 | DAT_000c60d4);
  system_reg_write(0x888c,DAT_000c60e0 << 0x10 | DAT_000c60dc);
  system_reg_write(0x8890,DAT_000c60e8 << 0x10 | DAT_000c60e4);
  system_reg_write(0x8894,DAT_000c60f0 << 0x10 | DAT_000c60ec);
  system_reg_write(0x8898,DAT_000c60f8 << 0x10 | DAT_000c60f4);
  system_reg_write(0x889c,DAT_000c60fc);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_w_thres_cfg(void)

{
  system_reg_write(0x88a0,_DAT_000c6088 << 8 | sdns_w_thr);
  system_reg_write(0x88a4,DAT_000c6090 << 8 | DAT_000c608c);
  system_reg_write(0x88a8,DAT_000c6098 << 8 | DAT_000c6094);
  system_reg_write(0x88ac,DAT_000c60a0 << 8 | DAT_000c609c);
  system_reg_write(0x88b0,DAT_000c60a8 << 8 | DAT_000c60a4);
  system_reg_write(0x88b4,DAT_000c60b0 << 8 | DAT_000c60ac);
  system_reg_write(35000,DAT_000c60b8 << 8 | DAT_000c60b4);
  system_reg_write(0x88bc,DAT_000c60c0 << 8 | DAT_000c60bc);
  return 0;
}



int tisp_sdns_hls_en_ave_filter_cfg(void)

{
  system_reg_write(0x88c0,sdns_ave_thres_intp << 4 | *(unsigned int *)sdns_ave_fliter_now |
                          *(int *)(sdns_ave_fliter_now + 4) << 1 |
                          *(int *)(sdns_ave_fliter_now + 8) << 0x10);
  return 0;
}



int tisp_sdns_gaussian_y_cfg(void)

{
  system_reg_write(0x88c4,0x2999a);
  system_reg_write(0x88c8,0x1999a);
  system_reg_write(0x88cc,0x999a);
  return 0;
}



int tisp_sdns_gaussian_x_cfg(void)

{
  system_reg_write(0x88d0,0xf0007);
  system_reg_write(0x88d4,0x33001e);
  system_reg_write(0x88d8,0x3b001c);
  system_reg_write(0x88dc,0xce0079);
  system_reg_write(0x88e0,0x84003e);
  system_reg_write(0x88e4,0x1d00111);
  system_reg_write(0x88e8,0xeb006e);
  system_reg_write(0x88ec,0x33801e5);
  system_reg_write(0x88f0,0x16f00ad);
  system_reg_write(0x88f4,0x50802f7);
  system_reg_write(0x88f8,0x21000f8);
  system_reg_write(0x88fc,0x73e0445);
  system_reg_write(0x8900,0x2ce0152);
  system_reg_write(0x8904,0x9db05d0);
  system_reg_write(0x8908,0x3aa01b9);
  system_reg_write(0x890c,0xce00797);
  system_reg_write(0x8910,0x4a3022e);
  system_reg_write(0x8914,0x104c099b);
  system_reg_write(0x8918,0x5ba02b1);
  system_reg_write(0x891c,0x141e0bdb);
  system_reg_write(0x8920,0x4960342);
  system_reg_write(0x8924,0x18580e59);
  system_reg_write(0x8928,0x83f03e1);
  system_reg_write(0x892c,0x1cf91113);
  system_reg_write(0x8930,0x9ae048d);
  system_reg_write(0x8934,0x22001409);
  system_reg_write(0x8938,0xb3b0547);
  system_reg_write(0x893c,0x276f173e);
  system_reg_write(0x8940,0xce3047f);
  system_reg_write(0x8944,0x2d441aad);
  system_reg_write(0x8948,0xea906e5);
  system_reg_write(0x894c,0x33801e5b);
  return 0;
}



int tisp_sdns_gaussian_k_cfg(void)

{
  system_reg_write(0x8950,0x3333);
  system_reg_write(0x8954,0x2000);
  system_reg_write(0x8958,0x1111);
  system_reg_write(0x895c,0x55d);
  system_reg_write(0x8960,0xccd);
  system_reg_write(0x8964,0x842);
  system_reg_write(0x8968,0x421);
  system_reg_write(0x896c,0x153);
  system_reg_write(0x8970,0x5c8);
  system_reg_write(0x8974,0x3a8);
  system_reg_write(0x8978,0x1d1);
  system_reg_write(0x897c,0x97);
  system_reg_write(0x8980,0x342);
  system_reg_write(0x8984,0x20c);
  system_reg_write(0x8988,0x106);
  system_reg_write(0x898c,0x55);
  system_reg_write(0x8990,0x212);
  system_reg_write(0x8994,0x152);
  system_reg_write(0x8998,0xa7);
  system_reg_write(0x899c,0x37);
  system_reg_write(0x89a0,0x172);
  system_reg_write(0x89a4,0xea);
  system_reg_write(0x89a8,0x74);
  system_reg_write(0x89ac,0x26);
  system_reg_write(0x89b0,0x10f);
  system_reg_write(0x89b4,0xac);
  system_reg_write(0x89b8,0x55);
  system_reg_write(0x89bc,0x1c);
  system_reg_write(0x89c0,0xd0);
  system_reg_write(0x89c4,0x84);
  system_reg_write(0x89c8,0x41);
  system_reg_write(0x89cc,0x15);
  system_reg_write(0x89d0,0xa4);
  system_reg_write(0x89d4,0x68);
  system_reg_write(0x89d8,0x34);
  system_reg_write(0x89dc,0x11);
  system_reg_write(0x89e0,0x85);
  system_reg_write(0x89e4,0x54);
  system_reg_write(0x89e8,0x2a);
  system_reg_write(0x89ec,0xe);
  system_reg_write(0x89f0,0x6e);
  system_reg_write(0x89f4,0x46);
  system_reg_write(0x89f8,0x23);
  system_reg_write(0x89fc,0xb);
  system_reg_write(0x8a00,0x5c);
  system_reg_write(0x8a04,0x3b);
  system_reg_write(0x8a08,0x1d);
  system_reg_write(0x8a0c,9);
  system_reg_write(0x8a10,0x4f);
  system_reg_write(0x8a14,0x32);
  system_reg_write(0x8a18,0x19);
  system_reg_write(0x8a1c,8);
  system_reg_write(0x8a20,0x44);
  system_reg_write(0x8a24,0x2b);
  system_reg_write(0x8a28,0x15);
  system_reg_write(0x8a2c,7);
  system_reg_write(0x8a30,0x3b);
  system_reg_write(0x8a34,0x25);
  system_reg_write(0x8a38,0x13);
  system_reg_write(0x8a3c,6);
  system_reg_write(0x8a40,0x34);
  system_reg_write(0x8a44,0x21);
  system_reg_write(0x8a48,0x10);
  system_reg_write(0x8a4c,5);
  return 0;
}



int tisp_sdns_h_line_cfg(void)

{
  system_reg_write(0x8a50,0x4030201);
  system_reg_write(0x8a54,0x8070605);
  system_reg_write(0x8a58,0xc0b0a09);
  system_reg_write(0x8a5c,0x100f0e0d);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_std_en_seg_opt_cfg(void)

{
  system_reg_write(0x8a60,_DAT_000c5ee8 << 4 | sdns_sharpen_g_std);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_uu_cfg(void)

{
  system_reg_write(0x8a64,sdns_sp_uu_thres_intp << 8 | sdns_sp_uu_par);
  system_reg_write(0x8a68,DAT_000c5edc << 0x10 | DAT_000c5ee0 << 0x18 | sdns_sp_uu_stren_intp);
  system_reg_write(0x8a6c,sdns_sp_mv_uu_stren_intp << 8 | sdns_sp_mv_uu_thres_intp);
  system_reg_write(0x8a70,_DAT_000c5e3c << 4 | DAT_000c5e40 << 8 | sdns_sp_mv_wei_uu_value |
                          DAT_000c5e44 << 0xc);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_v2_d_w_b_ll_hl_flat_cfg(void)

{
  system_reg_write(0x8a74,sdns_sp_d_v2_win5_thres_intp << 8 | _DAT_000c5e34 << 0x10 |
                          sdns_sp_d_v2_sigma_win5_slope | sdns_sp_d_wbhl_flat << 0x18);
  system_reg_write(0x8a78,sdns_sp_d_w_sp_stren_1_intp << 0x10 | sdns_sp_d_w_sp_stren_0_intp);
  system_reg_write(0x8a7c,sdns_sp_d_w_sp_stren_3_intp << 0x10 | sdns_sp_d_w_sp_stren_2_intp);
  system_reg_write(0x8a80,DAT_000c5df0 << 0x10 | DAT_000c5dec);
  system_reg_write(0x8a84,sdns_sp_d_b_sp_stren_1_intp << 0x10 | sdns_sp_d_b_sp_stren_0_intp);
  system_reg_write(0x8a88,sdns_sp_d_b_sp_stren_3_intp << 0x10 | sdns_sp_d_b_sp_stren_2_intp);
  system_reg_write(0x8a8c,DAT_000c5df8 << 0x10 | DAT_000c5df4);
  system_reg_write(0x8a90,DAT_000c5e00 << 0x10 | DAT_000c5dfc);
  system_reg_write(0x8a94,sdns_sp_d_flat_thres_intp << 0x10 | DAT_000c5e04);
  system_reg_write(0x8a98,sdns_sp_d_flat_stren_intp << 0x10 | DAT_000c5e08);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_ud_v2_v1_coef_w_wei_opt_cfg(void)

{
  system_reg_write(0x8a9c,_DAT_000c5c64 << 4 | DAT_000c5c68 << 8 | sdns_sp_ud_v2_1_coef |
                          DAT_000c5c6c << 0xc | DAT_000c5c70 << 0x10);
  system_reg_write(0x8aa0,DAT_000c5c78 << 8 | DAT_000c5c7c << 0xc | DAT_000c5c74 |
                          sdns_sp_ud_wbhl_flat << 0x10);
  return 0;
}



int tisp_sdns_sp_ud_w_stren_cfg(void)

{
  system_reg_write(0x8aa4,sdns_sp_ud_w_sp_stren_1_intp << 0x10 | sdns_sp_ud_w_sp_stren_0_intp);
  system_reg_write(0x8aa8,sdns_sp_ud_w_sp_stren_3_intp << 0x10 | sdns_sp_ud_w_sp_stren_2_intp);
  return 0;
}



int tisp_sdns_sp_ud_w_limit_b_wei_opt_cfg(void)

{
  system_reg_write(0x8aac,DAT_000c5ad4 << 0x10 | DAT_000c5ad0);
  return 0;
}



int tisp_sdns_sp_ud_b_stren_cfg(void)

{
  system_reg_write(0x8ab0,sdns_sp_ud_b_sp_stren_1_intp << 0x10 | sdns_sp_ud_b_sp_stren_0_intp);
  system_reg_write(0x8ab4,sdns_sp_ud_b_sp_stren_3_intp << 0x10 | sdns_sp_ud_b_sp_stren_2_intp);
  return 0;
}



int tisp_sdns_sp_ud_b_limit_srd_ll_hl_flat_cfg(void)

{
  system_reg_write(0x8ab8,sdns_sp_ud_std_thres_intp << 0x10 | sdns_sp_ud_std_stren_intp << 0x18 |
                          DAT_000c5ad8);
  system_reg_write(0x8abc,DAT_000c5ae0 << 8 | DAT_000c5ae4 << 0x10 | DAT_000c5adc);
  system_reg_write(0x8ac0,DAT_000c5aec << 8 | sdns_sp_ud_flat_thres_intp << 0x14 | DAT_000c5ae8);
  system_reg_write(0x8ac4,sdns_sp_ud_flat_stren_intp << 0x10 | DAT_000c5af0);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_ud_stren_shift_opt_cfg(void)

{
  system_reg_write(0x8ac8,_DAT_000c5af4);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_uu_np_array_cfg(void)

{
  system_reg_write(0x8acc,_DAT_000c5a48 << 8 | DAT_000c5a4c << 0x10 | sdns_sp_uu_np_array |
                          DAT_000c5a50 << 0x18);
  system_reg_write(0x8ad0,DAT_000c5a58 << 8 | DAT_000c5a5c << 0x10 | DAT_000c5a54 |
                          DAT_000c5a60 << 0x18);
  system_reg_write(0x8ad4,DAT_000c5a68 << 8 | DAT_000c5a6c << 0x10 | DAT_000c5a64 |
                          DAT_000c5a70 << 0x18);
  system_reg_write(0x8ad8,DAT_000c5a78 << 8 | DAT_000c5a7c << 0x10 | DAT_000c5a74 |
                          DAT_000c5a80 << 0x18);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_d_w_wei_np_array_cfg(void)

{
  system_reg_write(0x8adc,_DAT_000c59f0 << 8 | DAT_000c59f4 << 0x10 | sdns_sp_d_w_wei_np_array |
                          DAT_000c59f8 << 0x18);
  system_reg_write(0x8ae0,DAT_000c5a00 << 8 | DAT_000c5a04 << 0x10 | DAT_000c59fc |
                          DAT_000c5a08 << 0x18);
  system_reg_write(0x8ae4,DAT_000c5a10 << 8 | DAT_000c5a14 << 0x10 | DAT_000c5a0c |
                          DAT_000c5a18 << 0x18);
  system_reg_write(0x8ae8,DAT_000c5a20 << 8 | DAT_000c5a24 << 0x10 | DAT_000c5a1c |
                          DAT_000c5a28 << 0x18);
  system_reg_write(0x8aec,DAT_000c5a30 << 8 | DAT_000c5a34 << 0x10 | DAT_000c5a2c |
                          DAT_000c5a38 << 0x18);
  system_reg_write(0x8af0,DAT_000c5a40 << 8 | DAT_000c5a3c);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_d_b_wei_np_array_cfg(void)

{
  system_reg_write(0x8af4,_DAT_000c5998 << 8 | DAT_000c599c << 0x10 | sdns_sp_d_b_wei_np_array |
                          DAT_000c59a0 << 0x18);
  system_reg_write(0x8af8,DAT_000c59a8 << 8 | DAT_000c59ac << 0x10 | DAT_000c59a4 |
                          DAT_000c59b0 << 0x18);
  system_reg_write(0x8afc,DAT_000c59b8 << 8 | DAT_000c59bc << 0x10 | DAT_000c59b4 |
                          DAT_000c59c0 << 0x18);
  system_reg_write(0x8b00,DAT_000c59c8 << 8 | DAT_000c59cc << 0x10 | DAT_000c59c4 |
                          DAT_000c59d0 << 0x18);
  system_reg_write(0x8b04,DAT_000c59d8 << 8 | DAT_000c59dc << 0x10 | DAT_000c59d4 |
                          DAT_000c59e0 << 0x18);
  system_reg_write(0x8b08,DAT_000c59e8 << 8 | DAT_000c59e4);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_ud_w_wei_np_array_cfg(void)

{
  system_reg_write(0x8b0c,_DAT_000c5940 << 8 | DAT_000c5944 << 0x10 | sdns_sp_ud_w_wei_np_array |
                          DAT_000c5948 << 0x18);
  system_reg_write(0x8b10,DAT_000c5950 << 8 | DAT_000c5954 << 0x10 | DAT_000c594c |
                          DAT_000c5958 << 0x18);
  system_reg_write(0x8b14,DAT_000c5960 << 8 | DAT_000c5964 << 0x10 | DAT_000c595c |
                          DAT_000c5968 << 0x18);
  system_reg_write(0x8b18,DAT_000c5970 << 8 | DAT_000c5974 << 0x10 | DAT_000c596c |
                          DAT_000c5978 << 0x18);
  system_reg_write(0x8b1c,DAT_000c5980 << 8 | DAT_000c5984 << 0x10 | DAT_000c597c |
                          DAT_000c5988 << 0x18);
  system_reg_write(0x8b20,DAT_000c5990 << 8 | DAT_000c598c);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_sdns_sp_ud_b_wei_np_array_cfg(void)

{
  system_reg_write(0x8b24,_DAT_000c58c4 << 8 | DAT_000c58c8 << 0x10 | sdns_sp_ud_b_wei_np_array |
                          DAT_000c58cc << 0x18);
  system_reg_write(0x8b28,DAT_000c58d4 << 8 | DAT_000c58d8 << 0x10 | DAT_000c58d0 |
                          DAT_000c58dc << 0x18);
  system_reg_write(0x8b2c,DAT_000c58e4 << 8 | DAT_000c58e8 << 0x10 | DAT_000c58e0 |
                          DAT_000c58ec << 0x18);
  system_reg_write(0x8b30,DAT_000c58f4 << 8 | DAT_000c58f8 << 0x10 | DAT_000c58f0 |
                          DAT_000c58fc << 0x18);
  system_reg_write(0x8b34,DAT_000c5904 << 8 | DAT_000c5908 << 0x10 | DAT_000c5900 |
                          DAT_000c590c << 0x18);
  system_reg_write(0x8b38,DAT_000c5914 << 8 | DAT_000c5910);
  return 0;
}



int tisp_sdns_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  sdns_grad_zx_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_grad_zx_thres_array_now);
  sdns_grad_zy_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_grad_zy_thres_array_now);
  sdns_std_thr1_intp = tisp_simple_intp(iVar1,param_1,sdns_std_thr1_array_now);
  sdns_std_thr2_intp = tisp_simple_intp(iVar1,param_1,sdns_std_thr2_array_now);
  sdns_mv_num_thr_5x5_intp = tisp_simple_intp(iVar1,param_1,sdns_mv_num_thr_5x5_array);
  sdns_mv_num_thr_7x7_intp = tisp_simple_intp(iVar1,param_1,sdns_mv_num_thr_7x7_array);
  sdns_mv_num_thr_9x9_intp = tisp_simple_intp(iVar1,param_1,sdns_mv_num_thr_9x9_array);
  sdns_mv_num_thr_11x11_intp = tisp_simple_intp(iVar1,param_1,sdns_mv_num_thr_11x11_array);
  sdns_h_s_1_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_1_array_now);
  sdns_h_s_2_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_2_array_now);
  sdns_h_s_3_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_3_array_now);
  sdns_h_s_4_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_4_array_now);
  sdns_h_s_5_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_5_array_now);
  sdns_h_s_6_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_6_array_now);
  sdns_h_s_7_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_7_array_now);
  sdns_h_s_8_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_8_array_now);
  sdns_h_s_9_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_9_array_now);
  sdns_h_s_10_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_10_array_now);
  sdns_h_s_11_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_11_array_now);
  sdns_h_s_12_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_12_array_now);
  sdns_h_s_13_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_13_array_now);
  sdns_h_s_14_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_14_array_now);
  sdns_h_s_15_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_15_array_now);
  sdns_h_s_16_intp = tisp_simple_intp(iVar1,param_1,sdns_h_s_16_array_now);
  sdns_h_mv_1_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_1_array);
  sdns_h_mv_2_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_2_array);
  sdns_h_mv_3_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_3_array);
  sdns_h_mv_4_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_4_array);
  sdns_h_mv_5_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_5_array);
  sdns_h_mv_6_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_6_array);
  sdns_h_mv_7_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_7_array);
  sdns_h_mv_8_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_8_array);
  sdns_h_mv_9_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_9_array);
  sdns_h_mv_10_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_10_array);
  sdns_h_mv_11_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_11_array);
  sdns_h_mv_12_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_12_array);
  sdns_h_mv_13_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_13_array);
  sdns_h_mv_14_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_14_array);
  sdns_h_mv_15_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_15_array);
  sdns_h_mv_16_intp = tisp_simple_intp(iVar1,param_1,sdns_h_mv_16_array);
  sdns_dark_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_dark_thres_array);
  sdns_light_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_light_thres_array);
  sdns_sharpen_tt_opt_intp = tisp_simple_intp(iVar1,param_1,sdns_sharpen_tt_opt_array_now);
  sdns_sp_uu_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_uu_thres_array_now);
  sdns_sp_uu_stren_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_uu_stren_array_now);
  sdns_sp_mv_uu_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_mv_uu_thres_array_now);
  sdns_sp_d_v2_win5_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_v2_win5_thres_array);
  sdns_sp_mv_uu_stren_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_mv_uu_stren_array_now);
  sdns_sp_d_w_sp_stren_0_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_w_sp_stren_0_array);
  sdns_sp_d_w_sp_stren_1_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_w_sp_stren_1_array);
  sdns_sp_d_w_sp_stren_2_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_w_sp_stren_2_array);
  sdns_sp_d_w_sp_stren_3_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_w_sp_stren_3_array);
  sdns_sp_d_b_sp_stren_0_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_b_sp_stren_0_array);
  sdns_sp_d_b_sp_stren_1_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_b_sp_stren_1_array);
  sdns_sp_d_b_sp_stren_2_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_b_sp_stren_2_array);
  sdns_sp_d_b_sp_stren_3_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_b_sp_stren_3_array);
  sdns_sp_d_flat_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_flat_thres_array);
  sdns_sp_d_flat_stren_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_d_flat_stren_array);
  sdns_sp_ud_w_sp_stren_0_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_w_sp_stren_0_array);
  sdns_sp_ud_w_sp_stren_1_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_w_sp_stren_1_array);
  sdns_sp_ud_w_sp_stren_2_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_w_sp_stren_2_array);
  sdns_sp_ud_w_sp_stren_3_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_w_sp_stren_3_array);
  sdns_sp_ud_b_sp_stren_0_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_b_sp_stren_0_array);
  sdns_sp_ud_b_sp_stren_1_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_b_sp_stren_1_array);
  sdns_sp_ud_b_sp_stren_2_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_b_sp_stren_2_array);
  sdns_sp_ud_b_sp_stren_3_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_b_sp_stren_3_array);
  sdns_sp_ud_std_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_std_thres_array);
  sdns_sp_ud_std_stren_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_std_stren_array);
  sdns_sp_ud_flat_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_flat_thres_array);
  sdns_ave_thres_intp = tisp_simple_intp(iVar1,param_1,sdns_ave_thres_array_now);
  sdns_sp_ud_flat_stren_intp = tisp_simple_intp(iVar1,param_1,sdns_sp_ud_flat_stren_array);
  return 0;
}



int tisp_sdns_all_reg_refresh(void)

{
  tisp_sdns_intp();
  tisp_sdns_grad_thres_opt_cfg();
  tisp_sdns_h_mv_wei_opt_cfg();
  tisp_sdns_mv_seg_number_num_thres_cfg();
  tisp_sdns_g_det_val_div_cfg();
  tisp_sdns_r_s_mv_cfg();
  tisp_sdns_h_s_cfg();
  tisp_sdns_h_mv_cfg();
  tisp_sdns_dark_light_tt_opt_cfg();
  tisp_sdns_d_s1_thres_cfg();
  tisp_sdns_w_thres_cfg();
  tisp_sdns_hls_en_ave_filter_cfg();
  tisp_sdns_gaussian_y_cfg();
  tisp_sdns_gaussian_x_cfg();
  tisp_sdns_gaussian_k_cfg();
  tisp_sdns_h_line_cfg();
  tisp_sdns_sp_std_en_seg_opt_cfg();
  tisp_sdns_sp_uu_cfg();
  tisp_sdns_sp_v2_d_w_b_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_v2_v1_coef_w_wei_opt_cfg();
  tisp_sdns_sp_ud_w_stren_cfg();
  tisp_sdns_sp_ud_w_limit_b_wei_opt_cfg();
  tisp_sdns_sp_ud_b_stren_cfg();
  tisp_sdns_sp_ud_b_limit_srd_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_stren_shift_opt_cfg();
  tisp_sdns_sp_uu_np_array_cfg();
  tisp_sdns_sp_d_w_wei_np_array_cfg();
  tisp_sdns_sp_d_b_wei_np_array_cfg();
  tisp_sdns_sp_ud_w_wei_np_array_cfg();
  tisp_sdns_sp_ud_b_wei_np_array_cfg();
  system_reg_write(0x8b4c,1);
  return 0;
}



int tisp_sdns_intp_reg_refresh(void)

{
  tisp_sdns_intp();
  tisp_sdns_grad_thres_opt_cfg();
  tisp_sdns_mv_seg_number_num_thres_cfg();
  tisp_sdns_h_s_cfg();
  tisp_sdns_h_mv_cfg();
  tisp_sdns_dark_light_tt_opt_cfg();
  tisp_sdns_sp_uu_cfg();
  tisp_sdns_sp_v2_d_w_b_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_w_stren_cfg();
  tisp_sdns_sp_ud_b_stren_cfg();
  tisp_sdns_sp_ud_b_limit_srd_ll_hl_flat_cfg();
  return 0;
}



int tisp_sdns_par_refresh(unsigned int param_1,unsigned int param_2,int param_3)

{
  code *pcVar1;
  unsigned int uVar2;
  
  if (gain_old == 0xffffffff) {
    pcVar1 = tisp_sdns_all_reg_refresh;
  }
  else {
    uVar2 = gain_old - param_1;
    if (gain_old <= param_1) {
      uVar2 = param_1 - gain_old;
    }
    if (uVar2 < param_2) goto LAB_0003f9c4;
    pcVar1 = tisp_sdns_intp_reg_refresh;
  }
  gain_old = param_1;
  (*pcVar1)();
LAB_0003f9c4:
  if (param_3 == 1) {
    system_reg_write(0x8b4c,1);
  }
  return 0;
}



int tisp_sdns_refresh(int param_1)

{
  tisp_sdns_par_refresh(param_1,0x100,1);
  return 0;
}



int tisp_sdns_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x105:
    __src = (char *)&sdns_aa_mv_det_opt;
    __n = 0x1c;
    break;
  case 0x106:
    __src = sdns_grad_zx_thres_array;
    __n = 0x24;
    break;
  case 0x107:
    __src = sdns_grad_zy_thres_array;
    __n = 0x24;
    break;
  case 0x108:
    __src = sdns_std_thr1_array;
    __n = 0x24;
    break;
  case 0x109:
    __src = sdns_std_thr2_array;
    __n = 0x24;
    break;
  case 0x10a:
    __src = (char *)&sdns_h_mv_wei;
    __n = 0x10;
    break;
  case 0x10b:
    __src = sdns_mv_num_thr_5x5_array;
    __n = 0x24;
    break;
  case 0x10c:
    __src = sdns_mv_num_thr_7x7_array;
    __n = 0x24;
    break;
  case 0x10d:
    __src = sdns_mv_num_thr_9x9_array;
    __n = 0x24;
    break;
  case 0x10e:
    __src = sdns_mv_num_thr_11x11_array;
    __n = 0x24;
    break;
  case 0x10f:
    __src = (char *)&sdns_r_s;
    __n = 0x3c;
    break;
  case 0x110:
    __src = (char *)&sdns_r_mv;
    __n = 0x3c;
    break;
  case 0x111:
    __src = (char *)&sdns_h_s_1_array;
    __n = 0x24;
    break;
  case 0x112:
    __src = (char *)&sdns_h_s_2_array;
    __n = 0x24;
    break;
  case 0x113:
    __src = (char *)&sdns_h_s_3_array;
    __n = 0x24;
    break;
  case 0x114:
    __src = (char *)&sdns_h_s_4_array;
    __n = 0x24;
    break;
  case 0x115:
    __src = (char *)&sdns_h_s_5_array;
    __n = 0x24;
    break;
  case 0x116:
    __src = (char *)&sdns_h_s_6_array;
    __n = 0x24;
    break;
  case 0x117:
    __src = (char *)&sdns_h_s_7_array;
    __n = 0x24;
    break;
  case 0x118:
    __src = (char *)&sdns_h_s_8_array;
    __n = 0x24;
    break;
  case 0x119:
    __src = (char *)&sdns_h_s_9_array;
    __n = 0x24;
    break;
  case 0x11a:
    __src = (char *)&sdns_h_s_10_array;
    __n = 0x24;
    break;
  case 0x11b:
    __src = (char *)&sdns_h_s_11_array;
    __n = 0x24;
    break;
  case 0x11c:
    __src = (char *)&sdns_h_s_12_array;
    __n = 0x24;
    break;
  case 0x11d:
    __src = (char *)&sdns_h_s_13_array;
    __n = 0x24;
    break;
  case 0x11e:
    __src = (char *)&sdns_h_s_14_array;
    __n = 0x24;
    break;
  case 0x11f:
    __src = (char *)&sdns_h_s_15_array;
    __n = 0x24;
    break;
  case 0x120:
    __src = (char *)&sdns_h_s_16_array;
    __n = 0x24;
    break;
  case 0x121:
    __src = sdns_h_mv_1_array;
    __n = 0x24;
    break;
  case 0x122:
    __src = sdns_h_mv_2_array;
    __n = 0x24;
    break;
  case 0x123:
    __src = sdns_h_mv_3_array;
    __n = 0x24;
    break;
  case 0x124:
    __src = sdns_h_mv_4_array;
    __n = 0x24;
    break;
  case 0x125:
    __src = sdns_h_mv_5_array;
    __n = 0x24;
    break;
  case 0x126:
    __src = sdns_h_mv_6_array;
    __n = 0x24;
    break;
  case 0x127:
    __src = sdns_h_mv_7_array;
    __n = 0x24;
    break;
  case 0x128:
    __src = sdns_h_mv_8_array;
    __n = 0x24;
    break;
  case 0x129:
    __src = sdns_h_mv_9_array;
    __n = 0x24;
    break;
  case 0x12a:
    __src = sdns_h_mv_10_array;
    __n = 0x24;
    break;
  case 299:
    __src = sdns_h_mv_11_array;
    __n = 0x24;
    break;
  case 300:
    __src = sdns_h_mv_12_array;
    __n = 0x24;
    break;
  case 0x12d:
    __src = sdns_h_mv_13_array;
    __n = 0x24;
    break;
  case 0x12e:
    __src = sdns_h_mv_14_array;
    __n = 0x24;
    break;
  case 0x12f:
    __src = sdns_h_mv_15_array;
    __n = 0x24;
    break;
  case 0x130:
    __src = sdns_h_mv_16_array;
    __n = 0x24;
    break;
  case 0x131:
    __src = sdns_dark_thres_array;
    __n = 0x24;
    break;
  case 0x132:
    __src = sdns_light_thres_array;
    __n = 0x24;
    break;
  case 0x133:
    __src = (char *)&sdns_h_val_max;
    __n = 4;
    break;
  case 0x134:
    __src = sdns_sharpen_tt_opt_array;
    __n = 0x24;
    break;
  case 0x135:
    __src = (char *)&sdns_d_s1_thr;
    __n = 0x3c;
    break;
  case 0x136:
    __src = (char *)&sdns_w_thr;
    __n = 0x40;
    break;
  case 0x137:
    __src = (char *)&sdns_ave_fliter;
    __n = 0xc;
    break;
  case 0x138:
    __src = sdns_y;
    __n = 0xc;
    break;
  case 0x139:
    __src = sdns_x_1xg_1x4;
    __n = 0x100;
    break;
  case 0x13a:
    __src = sdns_k_1xg_1x4;
    __n = 0x40;
    break;
  case 0x13b:
    __src = sdns_h_val;
    __n = 0x40;
    break;
  case 0x13c:
    __src = (char *)&sdns_sharpen_g_std;
    __n = 8;
    break;
  case 0x13d:
    __src = (char *)&sdns_sp_uu_par;
    __n = 0xc;
    break;
  case 0x13e:
    __src = sdns_sp_uu_thres_array;
    __n = 0x24;
    break;
  case 0x13f:
    __src = sdns_sp_uu_stren_array;
    __n = 0x24;
    break;
  case 0x140:
    __src = sdns_sp_mv_uu_thres_array;
    __n = 0x24;
    break;
  case 0x141:
    __src = sdns_sp_mv_uu_stren_array;
    __n = 0x24;
    break;
  case 0x142:
    __src = (char *)&sdns_sp_mv_wei_uu_value;
    __n = 0x10;
    break;
  case 0x143:
    __src = (char *)&sdns_sp_d_v2_sigma_win5_slope;
    __n = 8;
    break;
  case 0x144:
    __src = sdns_sp_d_v2_win5_thres_array;
    __n = 0x24;
    break;
  case 0x145:
    __src = (char *)&sdns_sp_d_wbhl_flat;
    __n = 0x24;
    break;
  case 0x146:
    __src = sdns_sp_d_w_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x147:
    __src = sdns_sp_d_w_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x148:
    __src = sdns_sp_d_w_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x149:
    __src = sdns_sp_d_w_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x14a:
    __src = sdns_sp_d_b_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x14b:
    __src = sdns_sp_d_b_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x14c:
    __src = sdns_sp_d_b_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x14d:
    __src = sdns_sp_d_b_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x14e:
    __src = sdns_sp_d_flat_thres_array;
    __n = 0x24;
    break;
  case 0x14f:
    __src = sdns_sp_d_flat_stren_array;
    __n = 0x24;
    break;
  case 0x150:
    __src = (char *)&sdns_sp_ud_v2_1_coef;
    __n = 0x20;
    break;
  case 0x151:
    __src = sdns_sp_ud_w_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x152:
    __src = sdns_sp_ud_w_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x153:
    __src = sdns_sp_ud_w_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x154:
    __src = sdns_sp_ud_w_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x155:
    __src = sdns_sp_ud_b_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x156:
    __src = sdns_sp_ud_b_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x157:
    __src = sdns_sp_ud_b_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x158:
    __src = sdns_sp_ud_b_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x159:
    __src = sdns_sp_ud_std_thres_array;
    __n = 0x24;
    break;
  case 0x15a:
    __src = sdns_sp_ud_std_stren_array;
    __n = 0x24;
    break;
  case 0x15b:
    __src = sdns_sp_ud_flat_thres_array;
    __n = 0x24;
    break;
  case 0x15c:
    __src = sdns_sp_ud_flat_stren_array;
    __n = 0x24;
    break;
  case 0x15d:
    __src = (char *)&sdns_sp_ud_wbhl_flat;
    __n = 0x2c;
    break;
  case 0x15e:
    __src = (char *)&sdns_sp_uu_np_array;
    __n = 0x40;
    break;
  case 0x15f:
    __src = (char *)&sdns_sp_d_w_wei_np_array;
    __n = 0x58;
    break;
  case 0x160:
    __src = (char *)&sdns_sp_d_b_wei_np_array;
    __n = 0x58;
    break;
  case 0x161:
    __src = (char *)&sdns_sp_ud_w_wei_np_array;
    __n = 0x58;
    break;
  case 0x162:
    __src = (char *)&sdns_ave_thres_array;
    __n = 0x24;
    break;
  case 0x163:
    __src = sdns_grad_zx_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x164:
    __src = sdns_grad_zy_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x165:
    __src = sdns_std_thr1_wdr_array;
    __n = 0x24;
    break;
  case 0x166:
    __src = sdns_std_thr2_wdr_array;
    __n = 0x24;
    break;
  case 0x167:
    __src = sdns_h_mv_wei_wdr;
    __n = 0x10;
    break;
  case 0x168:
    __src = sdns_h_s_1_wdr_array;
    __n = 0x24;
    break;
  case 0x169:
    __src = sdns_h_s_2_wdr_array;
    __n = 0x24;
    break;
  case 0x16a:
    __src = sdns_h_s_3_wdr_array;
    __n = 0x24;
    break;
  case 0x16b:
    __src = sdns_h_s_4_wdr_array;
    __n = 0x24;
    break;
  case 0x16c:
    __src = sdns_h_s_5_wdr_array;
    __n = 0x24;
    break;
  case 0x16d:
    __src = sdns_h_s_6_wdr_array;
    __n = 0x24;
    break;
  case 0x16e:
    __src = sdns_h_s_7_wdr_array;
    __n = 0x24;
    break;
  case 0x16f:
    __src = sdns_h_s_8_wdr_array;
    __n = 0x24;
    break;
  case 0x170:
    __src = sdns_h_s_9_wdr_array;
    __n = 0x24;
    break;
  case 0x171:
    __src = sdns_h_s_10_wdr_array;
    __n = 0x24;
    break;
  case 0x172:
    __src = sdns_h_s_11_wdr_array;
    __n = 0x24;
    break;
  case 0x173:
    __src = sdns_h_s_12_wdr_array;
    __n = 0x24;
    break;
  case 0x174:
    __src = sdns_h_s_13_wdr_array;
    __n = 0x24;
    break;
  case 0x175:
    __src = sdns_h_s_14_wdr_array;
    __n = 0x24;
    break;
  case 0x176:
    __src = sdns_h_s_15_wdr_array;
    __n = 0x24;
    break;
  case 0x177:
    __src = sdns_h_s_16_wdr_array;
    __n = 0x24;
    break;
  case 0x178:
    __src = sdns_sharpen_tt_opt_wdr_array;
    __n = 0x24;
    break;
  case 0x179:
    __src = sdns_ave_fliter_wdr;
    __n = 0xc;
    break;
  case 0x17a:
    __src = sdns_ave_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x17b:
    __src = sdns_sp_uu_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x17c:
    __src = sdns_sp_uu_stren_wdr_array;
    __n = 0x24;
    break;
  case 0x17d:
    __src = sdns_sp_mv_uu_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x17e:
    __src = sdns_sp_mv_uu_stren_wdr_array;
    __n = 0x24;
    break;
  case 0x17f:
    __src = (char *)&sdns_sp_ud_b_wei_np_array;
    __n = 0x58;
    break;
  default:
    isp_printf(2,"%s,%d: sdns not support param id %d\n","tisp_sdns_param_array_get",0xc51,param_1);
    return 0xffffffff;
  }
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_sdns_param_array_set(int param_1,void *param_2,size_t *param_3)

{
  char *__dest;
  size_t __n;
  
  switch(param_1) {
  case 0x105:
    __dest = (char *)&sdns_aa_mv_det_opt;
    __n = 0x1c;
    break;
  case 0x106:
    __dest = sdns_grad_zx_thres_array;
    __n = 0x24;
    break;
  case 0x107:
    __dest = sdns_grad_zy_thres_array;
    __n = 0x24;
    break;
  case 0x108:
    __dest = sdns_std_thr1_array;
    __n = 0x24;
    break;
  case 0x109:
    __dest = sdns_std_thr2_array;
    __n = 0x24;
    break;
  case 0x10a:
    __dest = (char *)&sdns_h_mv_wei;
    __n = 0x10;
    break;
  case 0x10b:
    __dest = sdns_mv_num_thr_5x5_array;
    __n = 0x24;
    break;
  case 0x10c:
    __dest = sdns_mv_num_thr_7x7_array;
    __n = 0x24;
    break;
  case 0x10d:
    __dest = sdns_mv_num_thr_9x9_array;
    __n = 0x24;
    break;
  case 0x10e:
    __dest = sdns_mv_num_thr_11x11_array;
    __n = 0x24;
    break;
  case 0x10f:
    __dest = (char *)&sdns_r_s;
    __n = 0x3c;
    break;
  case 0x110:
    __dest = (char *)&sdns_r_mv;
    __n = 0x3c;
    break;
  case 0x111:
    __dest = (char *)&sdns_h_s_1_array;
    __n = 0x24;
    break;
  case 0x112:
    __dest = (char *)&sdns_h_s_2_array;
    __n = 0x24;
    break;
  case 0x113:
    __dest = (char *)&sdns_h_s_3_array;
    __n = 0x24;
    break;
  case 0x114:
    __dest = (char *)&sdns_h_s_4_array;
    __n = 0x24;
    break;
  case 0x115:
    __dest = (char *)&sdns_h_s_5_array;
    __n = 0x24;
    break;
  case 0x116:
    __dest = (char *)&sdns_h_s_6_array;
    __n = 0x24;
    break;
  case 0x117:
    __dest = (char *)&sdns_h_s_7_array;
    __n = 0x24;
    break;
  case 0x118:
    __dest = (char *)&sdns_h_s_8_array;
    __n = 0x24;
    break;
  case 0x119:
    __dest = (char *)&sdns_h_s_9_array;
    __n = 0x24;
    break;
  case 0x11a:
    __dest = (char *)&sdns_h_s_10_array;
    __n = 0x24;
    break;
  case 0x11b:
    __dest = (char *)&sdns_h_s_11_array;
    __n = 0x24;
    break;
  case 0x11c:
    __dest = (char *)&sdns_h_s_12_array;
    __n = 0x24;
    break;
  case 0x11d:
    __dest = (char *)&sdns_h_s_13_array;
    __n = 0x24;
    break;
  case 0x11e:
    __dest = (char *)&sdns_h_s_14_array;
    __n = 0x24;
    break;
  case 0x11f:
    __dest = (char *)&sdns_h_s_15_array;
    __n = 0x24;
    break;
  case 0x120:
    __dest = (char *)&sdns_h_s_16_array;
    __n = 0x24;
    break;
  case 0x121:
    __dest = sdns_h_mv_1_array;
    __n = 0x24;
    break;
  case 0x122:
    __dest = sdns_h_mv_2_array;
    __n = 0x24;
    break;
  case 0x123:
    __dest = sdns_h_mv_3_array;
    __n = 0x24;
    break;
  case 0x124:
    __dest = sdns_h_mv_4_array;
    __n = 0x24;
    break;
  case 0x125:
    __dest = sdns_h_mv_5_array;
    __n = 0x24;
    break;
  case 0x126:
    __dest = sdns_h_mv_6_array;
    __n = 0x24;
    break;
  case 0x127:
    __dest = sdns_h_mv_7_array;
    __n = 0x24;
    break;
  case 0x128:
    __dest = sdns_h_mv_8_array;
    __n = 0x24;
    break;
  case 0x129:
    __dest = sdns_h_mv_9_array;
    __n = 0x24;
    break;
  case 0x12a:
    __dest = sdns_h_mv_10_array;
    __n = 0x24;
    break;
  case 299:
    __dest = sdns_h_mv_11_array;
    __n = 0x24;
    break;
  case 300:
    __dest = sdns_h_mv_12_array;
    __n = 0x24;
    break;
  case 0x12d:
    __dest = sdns_h_mv_13_array;
    __n = 0x24;
    break;
  case 0x12e:
    __dest = sdns_h_mv_14_array;
    __n = 0x24;
    break;
  case 0x12f:
    __dest = sdns_h_mv_15_array;
    __n = 0x24;
    break;
  case 0x130:
    __dest = sdns_h_mv_16_array;
    __n = 0x24;
    break;
  case 0x131:
    __dest = sdns_dark_thres_array;
    __n = 0x24;
    break;
  case 0x132:
    __dest = sdns_light_thres_array;
    __n = 0x24;
    break;
  case 0x133:
    __dest = (char *)&sdns_h_val_max;
    __n = 4;
    break;
  case 0x134:
    __dest = sdns_sharpen_tt_opt_array;
    __n = 0x24;
    break;
  case 0x135:
    __dest = (char *)&sdns_d_s1_thr;
    __n = 0x3c;
    break;
  case 0x136:
    __dest = (char *)&sdns_w_thr;
    __n = 0x40;
    break;
  case 0x137:
    __dest = (char *)&sdns_ave_fliter;
    __n = 0xc;
    break;
  case 0x138:
    __dest = sdns_y;
    __n = 0xc;
    break;
  case 0x139:
    __dest = sdns_x_1xg_1x4;
    __n = 0x100;
    break;
  case 0x13a:
    __dest = sdns_k_1xg_1x4;
    __n = 0x40;
    break;
  case 0x13b:
    __dest = sdns_h_val;
    __n = 0x40;
    break;
  case 0x13c:
    __dest = (char *)&sdns_sharpen_g_std;
    __n = 8;
    break;
  case 0x13d:
    __dest = (char *)&sdns_sp_uu_par;
    __n = 0xc;
    break;
  case 0x13e:
    __dest = sdns_sp_uu_thres_array;
    __n = 0x24;
    break;
  case 0x13f:
    __dest = sdns_sp_uu_stren_array;
    __n = 0x24;
    break;
  case 0x140:
    __dest = sdns_sp_mv_uu_thres_array;
    __n = 0x24;
    break;
  case 0x141:
    __dest = sdns_sp_mv_uu_stren_array;
    __n = 0x24;
    break;
  case 0x142:
    __dest = (char *)&sdns_sp_mv_wei_uu_value;
    __n = 0x10;
    break;
  case 0x143:
    __dest = (char *)&sdns_sp_d_v2_sigma_win5_slope;
    __n = 8;
    break;
  case 0x144:
    __dest = sdns_sp_d_v2_win5_thres_array;
    __n = 0x24;
    break;
  case 0x145:
    __dest = (char *)&sdns_sp_d_wbhl_flat;
    __n = 0x24;
    break;
  case 0x146:
    __dest = sdns_sp_d_w_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x147:
    __dest = sdns_sp_d_w_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x148:
    __dest = sdns_sp_d_w_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x149:
    __dest = sdns_sp_d_w_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x14a:
    __dest = sdns_sp_d_b_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x14b:
    __dest = sdns_sp_d_b_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x14c:
    __dest = sdns_sp_d_b_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x14d:
    __dest = sdns_sp_d_b_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x14e:
    __dest = sdns_sp_d_flat_thres_array;
    __n = 0x24;
    break;
  case 0x14f:
    __dest = sdns_sp_d_flat_stren_array;
    __n = 0x24;
    break;
  case 0x150:
    __dest = (char *)&sdns_sp_ud_v2_1_coef;
    __n = 0x20;
    break;
  case 0x151:
    __dest = sdns_sp_ud_w_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x152:
    __dest = sdns_sp_ud_w_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x153:
    __dest = sdns_sp_ud_w_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x154:
    __dest = sdns_sp_ud_w_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x155:
    __dest = sdns_sp_ud_b_sp_stren_0_array;
    __n = 0x24;
    break;
  case 0x156:
    __dest = sdns_sp_ud_b_sp_stren_1_array;
    __n = 0x24;
    break;
  case 0x157:
    __dest = sdns_sp_ud_b_sp_stren_2_array;
    __n = 0x24;
    break;
  case 0x158:
    __dest = sdns_sp_ud_b_sp_stren_3_array;
    __n = 0x24;
    break;
  case 0x159:
    __dest = sdns_sp_ud_std_thres_array;
    __n = 0x24;
    break;
  case 0x15a:
    __dest = sdns_sp_ud_std_stren_array;
    __n = 0x24;
    break;
  case 0x15b:
    __dest = sdns_sp_ud_flat_thres_array;
    __n = 0x24;
    break;
  case 0x15c:
    __dest = sdns_sp_ud_flat_stren_array;
    __n = 0x24;
    break;
  case 0x15d:
    __dest = (char *)&sdns_sp_ud_wbhl_flat;
    __n = 0x2c;
    break;
  case 0x15e:
    __dest = (char *)&sdns_sp_uu_np_array;
    __n = 0x40;
    break;
  case 0x15f:
    __dest = (char *)&sdns_sp_d_w_wei_np_array;
    __n = 0x58;
    break;
  case 0x160:
    __dest = (char *)&sdns_sp_d_b_wei_np_array;
    __n = 0x58;
    break;
  case 0x161:
    __dest = (char *)&sdns_sp_ud_w_wei_np_array;
    __n = 0x58;
    break;
  case 0x162:
    __dest = (char *)&sdns_ave_thres_array;
    __n = 0x24;
    break;
  case 0x163:
    __dest = sdns_grad_zx_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x164:
    __dest = sdns_grad_zy_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x165:
    __dest = sdns_std_thr1_wdr_array;
    __n = 0x24;
    break;
  case 0x166:
    __dest = sdns_std_thr2_wdr_array;
    __n = 0x24;
    break;
  case 0x167:
    __dest = sdns_h_mv_wei_wdr;
    __n = 0x10;
    break;
  case 0x168:
    __dest = sdns_h_s_1_wdr_array;
    __n = 0x24;
    break;
  case 0x169:
    __dest = sdns_h_s_2_wdr_array;
    __n = 0x24;
    break;
  case 0x16a:
    __dest = sdns_h_s_3_wdr_array;
    __n = 0x24;
    break;
  case 0x16b:
    __dest = sdns_h_s_4_wdr_array;
    __n = 0x24;
    break;
  case 0x16c:
    __dest = sdns_h_s_5_wdr_array;
    __n = 0x24;
    break;
  case 0x16d:
    __dest = sdns_h_s_6_wdr_array;
    __n = 0x24;
    break;
  case 0x16e:
    __dest = sdns_h_s_7_wdr_array;
    __n = 0x24;
    break;
  case 0x16f:
    __dest = sdns_h_s_8_wdr_array;
    __n = 0x24;
    break;
  case 0x170:
    __dest = sdns_h_s_9_wdr_array;
    __n = 0x24;
    break;
  case 0x171:
    __dest = sdns_h_s_10_wdr_array;
    __n = 0x24;
    break;
  case 0x172:
    __dest = sdns_h_s_11_wdr_array;
    __n = 0x24;
    break;
  case 0x173:
    __dest = sdns_h_s_12_wdr_array;
    __n = 0x24;
    break;
  case 0x174:
    __dest = sdns_h_s_13_wdr_array;
    __n = 0x24;
    break;
  case 0x175:
    __dest = sdns_h_s_14_wdr_array;
    __n = 0x24;
    break;
  case 0x176:
    __dest = sdns_h_s_15_wdr_array;
    __n = 0x24;
    break;
  case 0x177:
    __dest = sdns_h_s_16_wdr_array;
    __n = 0x24;
    break;
  case 0x178:
    __dest = sdns_sharpen_tt_opt_wdr_array;
    __n = 0x24;
    break;
  case 0x179:
    __dest = sdns_ave_fliter_wdr;
    __n = 0xc;
    break;
  case 0x17a:
    __dest = sdns_ave_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x17b:
    __dest = sdns_sp_uu_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x17c:
    __dest = sdns_sp_uu_stren_wdr_array;
    __n = 0x24;
    break;
  case 0x17d:
    __dest = sdns_sp_mv_uu_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x17e:
    __dest = sdns_sp_mv_uu_stren_wdr_array;
    __n = 0x24;
    break;
  case 0x17f:
    __dest = (char *)&sdns_sp_ud_b_wei_np_array;
    __n = 0x58;
    break;
  default:
    isp_printf(2,"%s,%d: sdns not support param id %d\n","tisp_sdns_param_array_set",0xe4f,param_1);
    return 0xffffffff;
  }
  memcpy(__dest,param_2,__n);
  *param_3 = __n;
  if (param_1 == 0x17f) {
    tisp_sdns_all_reg_refresh(gain_old + 0x200);
  }
  return 0;
}



int tisp_s_sdns_ratio(unsigned int param_1)

{
  bool bVar1;
  int iVar2;
  char *pcVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  unsigned int uVar7;
  
  iVar2 = sdns_wdr_en;
  iVar5 = param_1 - 0x80;
  pcVar3 = tparams;
  iVar4 = 0;
  bVar1 = param_1 < 0x81;
  sdns_ratio = param_1;
  do {
    if (iVar2 == 0) {
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bbfc) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bbfc);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_1_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bc20) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bc20);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_2_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bc44) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bc44);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_3_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bc68) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bc68);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_4_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bc8c) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bc8c);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_5_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bcb0) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bcb0);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_6_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bcd4) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bcd4);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_7_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bcf8) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bcf8);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_8_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bd1c) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bd1c);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_9_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bd40) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bd40);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_10_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bd64) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bd64);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_11_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bd88) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bd88);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_12_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bdac) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bdac);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_13_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bdd0) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bdd0);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_14_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1bdf4) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1bdf4);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_15_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1be18) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1be18);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_16_array_now + iVar4) = uVar7;
      iVar6 = 0x1c8b0;
    }
    else {
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1c974) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1c974);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_1_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1c998) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1c998);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_2_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1c9bc) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1c9bc);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_3_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1c9e0) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1c9e0);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_4_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1ca04) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1ca04);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_5_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1ca28) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1ca28);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_6_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(sensor_get_normal_fps + (int)(pcVar3 + 4)) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(sensor_get_normal_fps + (int)(pcVar3 + 4));
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_7_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1ca70) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1ca70);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_8_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(sensor_get_id + (int)pcVar3) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(sensor_get_id + (int)pcVar3);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_9_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cab8) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cab8);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_10_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cadc) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cadc);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_11_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cb00) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cb00);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_12_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cb24) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cb24);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_13_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cb48) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cb48);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_14_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cb6c) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cb6c);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_15_array_now + iVar4) = uVar7;
      if (bVar1) {
        uVar7 = param_1 * *(unsigned int *)(pcVar3 + 0x1cb90) >> 7;
      }
      else {
        uVar7 = *(unsigned int *)(pcVar3 + 0x1cb90);
        iVar6 = 0;
        if (uVar7 < 0x10) {
          iVar6 = 0x10 - uVar7;
        }
        uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
      }
      *(unsigned int *)(sdns_h_s_16_array_now + iVar4) = uVar7;
      iVar6 = 0x1cbe4;
    }
    if (bVar1) {
      uVar7 = param_1 * *(unsigned int *)(pcVar3 + iVar6) >> 7;
    }
    else {
      uVar7 = *(unsigned int *)(pcVar3 + iVar6);
      iVar6 = 0;
      if (uVar7 < 200) {
        iVar6 = 200 - uVar7;
      }
      uVar7 = ((uint)(iVar6 * iVar5) >> 7) + uVar7;
    }
    *(unsigned int *)(sdns_ave_thres_array_now + iVar4) = uVar7;
    iVar4 = iVar4 + 4;
    pcVar3 = pcVar3 + 4;
  } while (iVar4 != 0x24);
  tisp_sdns_intp(gain_old + 0x200);
  tisp_sdns_grad_thres_opt_cfg();
  tisp_sdns_h_mv_wei_opt_cfg();
  tisp_sdns_mv_seg_number_num_thres_cfg();
  tisp_sdns_g_det_val_div_cfg();
  tisp_sdns_r_s_mv_cfg();
  tisp_sdns_h_s_cfg();
  tisp_sdns_h_mv_cfg();
  tisp_sdns_dark_light_tt_opt_cfg();
  tisp_sdns_d_s1_thres_cfg();
  tisp_sdns_w_thres_cfg();
  tisp_sdns_hls_en_ave_filter_cfg();
  tisp_sdns_gaussian_y_cfg();
  tisp_sdns_gaussian_x_cfg();
  tisp_sdns_gaussian_k_cfg();
  tisp_sdns_h_line_cfg();
  tisp_sdns_sp_std_en_seg_opt_cfg();
  tisp_sdns_sp_uu_cfg();
  tisp_sdns_sp_v2_d_w_b_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_v2_v1_coef_w_wei_opt_cfg();
  tisp_sdns_sp_ud_w_stren_cfg();
  tisp_sdns_sp_ud_w_limit_b_wei_opt_cfg();
  tisp_sdns_sp_ud_b_stren_cfg();
  tisp_sdns_sp_ud_b_limit_srd_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_stren_shift_opt_cfg();
  tisp_sdns_sp_uu_np_array_cfg();
  tisp_sdns_sp_d_w_wei_np_array_cfg();
  tisp_sdns_sp_d_b_wei_np_array_cfg();
  tisp_sdns_sp_ud_w_wei_np_array_cfg();
  tisp_sdns_sp_ud_b_wei_np_array_cfg();
  system_reg_write(0x8b4c,1);
  return 0;
}



// WARNING: Restarted to delay deadcode elimination for space: ram

int tisp_sdns_wdr_en(int param_1)

{
  bool bVar1;
  unsigned int uVar2;
  char *pcVar3;
  char *puVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  unsigned int uVar8;
  
  uVar2 = sdns_ratio;
  if (param_1 == 0) {
    sdns_h_mv_wei_now = (char *)&sdns_h_mv_wei;
    sdns_std_thr2_array_now = sdns_std_thr2_array;
    sdns_grad_zx_thres_array_now = sdns_grad_zx_thres_array;
    sdns_grad_zy_thres_array_now = sdns_grad_zy_thres_array;
    sdns_std_thr1_array_now = sdns_std_thr1_array;
    sdns_h_s_1_array_now = (char *)&sdns_h_s_1_array;
    sdns_h_s_2_array_now = (char *)&sdns_h_s_2_array;
    sdns_h_s_3_array_now = (char *)&sdns_h_s_3_array;
    sdns_h_s_4_array_now = (char *)&sdns_h_s_4_array;
    sdns_h_s_5_array_now = (char *)&sdns_h_s_5_array;
    sdns_h_s_6_array_now = (char *)&sdns_h_s_6_array;
    sdns_h_s_7_array_now = (char *)&sdns_h_s_7_array;
    sdns_h_s_8_array_now = (char *)&sdns_h_s_8_array;
    sdns_h_s_9_array_now = (char *)&sdns_h_s_9_array;
    sdns_h_s_10_array_now = (char *)&sdns_h_s_10_array;
    sdns_h_s_11_array_now = (char *)&sdns_h_s_11_array;
    sdns_h_s_12_array_now = (char *)&sdns_h_s_12_array;
    sdns_h_s_13_array_now = (char *)&sdns_h_s_13_array;
    sdns_h_s_14_array_now = (char *)&sdns_h_s_14_array;
    sdns_h_s_15_array_now = (char *)&sdns_h_s_15_array;
    sdns_h_s_16_array_now = (char *)&sdns_h_s_16_array;
    sdns_sharpen_tt_opt_array_now = sdns_sharpen_tt_opt_array;
    sdns_ave_fliter_now = (char *)&sdns_ave_fliter;
    sdns_sp_uu_thres_array_now = sdns_sp_uu_thres_array;
    sdns_sp_uu_stren_array_now = sdns_sp_uu_stren_array;
    sdns_sp_mv_uu_thres_array_now = sdns_sp_mv_uu_thres_array;
    sdns_sp_mv_uu_stren_array_now = sdns_sp_mv_uu_stren_array;
    puVar4 = (char *)&sdns_ave_thres_array;
  }
  else {
    sdns_h_mv_wei_now = sdns_h_mv_wei_wdr;
    sdns_std_thr2_array_now = sdns_std_thr2_wdr_array;
    sdns_grad_zx_thres_array_now = sdns_grad_zx_thres_wdr_array;
    sdns_grad_zy_thres_array_now = sdns_grad_zy_thres_wdr_array;
    sdns_std_thr1_array_now = sdns_std_thr1_wdr_array;
    sdns_h_s_1_array_now = sdns_h_s_1_wdr_array;
    sdns_h_s_2_array_now = sdns_h_s_2_wdr_array;
    sdns_h_s_3_array_now = sdns_h_s_3_wdr_array;
    sdns_h_s_4_array_now = sdns_h_s_4_wdr_array;
    sdns_h_s_5_array_now = sdns_h_s_5_wdr_array;
    sdns_h_s_6_array_now = sdns_h_s_6_wdr_array;
    sdns_h_s_7_array_now = sdns_h_s_7_wdr_array;
    sdns_h_s_8_array_now = sdns_h_s_8_wdr_array;
    sdns_h_s_9_array_now = sdns_h_s_9_wdr_array;
    sdns_h_s_10_array_now = sdns_h_s_10_wdr_array;
    sdns_h_s_11_array_now = sdns_h_s_11_wdr_array;
    sdns_h_s_12_array_now = sdns_h_s_12_wdr_array;
    sdns_h_s_13_array_now = sdns_h_s_13_wdr_array;
    sdns_h_s_14_array_now = sdns_h_s_14_wdr_array;
    sdns_h_s_15_array_now = sdns_h_s_15_wdr_array;
    sdns_h_s_16_array_now = sdns_h_s_16_wdr_array;
    sdns_sharpen_tt_opt_array_now = sdns_sharpen_tt_opt_wdr_array;
    sdns_ave_fliter_now = sdns_ave_fliter_wdr;
    sdns_sp_uu_thres_array_now = sdns_sp_uu_thres_wdr_array;
    sdns_sp_uu_stren_array_now = sdns_sp_uu_stren_wdr_array;
    sdns_sp_mv_uu_thres_array_now = sdns_sp_mv_uu_thres_wdr_array;
    sdns_sp_mv_uu_stren_array_now = sdns_sp_mv_uu_stren_wdr_array;
    puVar4 = sdns_ave_thres_wdr_array;
  }
  iVar6 = sdns_ratio - 0x80;
  pcVar3 = tparams;
  iVar5 = 0;
  bVar1 = sdns_ratio < 0x81;
  sdns_ave_thres_array_now = puVar4;
  sdns_wdr_en = param_1;
  do {
    if (param_1 == 0) {
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bbfc) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bbfc);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_1_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bc20) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bc20);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_2_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bc44) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bc44);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_3_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bc68) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bc68);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_4_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bc8c) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bc8c);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_5_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bcb0) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bcb0);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_6_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bcd4) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bcd4);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_7_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bcf8) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bcf8);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_8_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bd1c) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bd1c);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_9_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bd40) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bd40);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_10_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bd64) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bd64);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_11_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bd88) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bd88);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_12_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bdac) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bdac);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_13_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bdd0) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bdd0);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_14_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1bdf4) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1bdf4);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_15_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1be18) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1be18);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_16_array_now + iVar5) = uVar8;
      iVar7 = 0x1c8b0;
    }
    else {
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1c974) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1c974);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_1_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1c998) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1c998);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_2_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1c9bc) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1c9bc);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_3_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1c9e0) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1c9e0);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_4_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1ca04) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1ca04);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_5_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1ca28) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1ca28);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_6_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(sensor_get_normal_fps + (int)(pcVar3 + 4)) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(sensor_get_normal_fps + (int)(pcVar3 + 4));
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_7_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1ca70) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1ca70);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_8_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(sensor_get_id + (int)pcVar3) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(sensor_get_id + (int)pcVar3);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_9_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cab8) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cab8);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_10_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cadc) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cadc);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_11_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cb00) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cb00);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_12_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cb24) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cb24);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_13_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cb48) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cb48);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_14_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cb6c) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cb6c);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_15_array_now + iVar5) = uVar8;
      if (bVar1) {
        uVar8 = uVar2 * *(unsigned int *)(pcVar3 + 0x1cb90) >> 7;
      }
      else {
        uVar8 = *(unsigned int *)(pcVar3 + 0x1cb90);
        iVar7 = 0;
        if (uVar8 < 0x10) {
          iVar7 = 0x10 - uVar8;
        }
        uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
      }
      *(unsigned int *)(sdns_h_s_16_array_now + iVar5) = uVar8;
      iVar7 = 0x1cbe4;
    }
    if (bVar1) {
      uVar8 = uVar2 * *(unsigned int *)(pcVar3 + iVar7) >> 7;
    }
    else {
      uVar8 = *(unsigned int *)(pcVar3 + iVar7);
      iVar7 = 0;
      if (uVar8 < 200) {
        iVar7 = 200 - uVar8;
      }
      uVar8 = ((uint)(iVar7 * iVar6) >> 7) + uVar8;
    }
    *(unsigned int *)(sdns_ave_thres_array_now + iVar5) = uVar8;
    iVar5 = iVar5 + 4;
    pcVar3 = pcVar3 + 4;
  } while (iVar5 != 0x24);
  tisp_sdns_intp(gain_old + 0x200);
  tisp_sdns_grad_thres_opt_cfg();
  tisp_sdns_h_mv_wei_opt_cfg();
  tisp_sdns_mv_seg_number_num_thres_cfg();
  tisp_sdns_g_det_val_div_cfg();
  tisp_sdns_r_s_mv_cfg();
  tisp_sdns_h_s_cfg();
  tisp_sdns_h_mv_cfg();
  tisp_sdns_dark_light_tt_opt_cfg();
  tisp_sdns_d_s1_thres_cfg();
  tisp_sdns_w_thres_cfg();
  tisp_sdns_hls_en_ave_filter_cfg();
  tisp_sdns_gaussian_y_cfg();
  tisp_sdns_gaussian_x_cfg();
  tisp_sdns_gaussian_k_cfg();
  tisp_sdns_h_line_cfg();
  tisp_sdns_sp_std_en_seg_opt_cfg();
  tisp_sdns_sp_uu_cfg();
  tisp_sdns_sp_v2_d_w_b_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_v2_v1_coef_w_wei_opt_cfg();
  tisp_sdns_sp_ud_w_stren_cfg();
  tisp_sdns_sp_ud_w_limit_b_wei_opt_cfg();
  tisp_sdns_sp_ud_b_stren_cfg();
  tisp_sdns_sp_ud_b_limit_srd_ll_hl_flat_cfg();
  tisp_sdns_sp_ud_stren_shift_opt_cfg();
  tisp_sdns_sp_uu_np_array_cfg();
  tisp_sdns_sp_d_w_wei_np_array_cfg();
  tisp_sdns_sp_d_b_wei_np_array_cfg();
  tisp_sdns_sp_ud_w_wei_np_array_cfg();
  tisp_sdns_sp_ud_b_wei_np_array_cfg();
  system_reg_write(0x8b4c,1);
  return 0;
}



int tiziano_sdns_params_refresh(void)

{
  memcpy(&sdns_aa_mv_det_opt,&DAT_0009ec78,0x1c);
  memcpy(sdns_grad_zx_thres_array,&DAT_0009ec94,0x24);
  memcpy(sdns_grad_zy_thres_array,&DAT_0009ecb8,0x24);
  memcpy(sdns_std_thr1_array,&DAT_0009ecdc,0x24);
  memcpy(sdns_std_thr2_array,&DAT_0009ed00,0x24);
  memcpy(&sdns_h_mv_wei,&DAT_0009ed24,0x10);
  memcpy(sdns_mv_num_thr_5x5_array,&DAT_0009ed34,0x24);
  memcpy(sdns_mv_num_thr_7x7_array,&DAT_0009ed58,0x24);
  memcpy(sdns_mv_num_thr_9x9_array,&DAT_0009ed7c,0x24);
  memcpy(sdns_mv_num_thr_11x11_array,&DAT_0009eda0,0x24);
  memcpy(&sdns_r_s,&DAT_0009edc4,0x3c);
  memcpy(&sdns_r_mv,&DAT_0009ee00,0x3c);
  memcpy(&sdns_h_s_1_array,&DAT_0009ee3c,0x24);
  memcpy(&sdns_h_s_2_array,&DAT_0009ee60,0x24);
  memcpy(&sdns_h_s_3_array,&DAT_0009ee84,0x24);
  memcpy(&sdns_h_s_4_array,&DAT_0009eea8,0x24);
  memcpy(&sdns_h_s_5_array,&DAT_0009eecc,0x24);
  memcpy(&sdns_h_s_6_array,&DAT_0009eef0,0x24);
  memcpy(&sdns_h_s_7_array,&DAT_0009ef14,0x24);
  memcpy(&sdns_h_s_8_array,&DAT_0009ef38,0x24);
  memcpy(&sdns_h_s_9_array,&DAT_0009ef5c,0x24);
  memcpy(&sdns_h_s_10_array,&DAT_0009ef80,0x24);
  memcpy(&sdns_h_s_11_array,&DAT_0009efa4,0x24);
  memcpy(&sdns_h_s_12_array,&DAT_0009efc8,0x24);
  memcpy(&sdns_h_s_13_array,&DAT_0009efec,0x24);
  memcpy(&sdns_h_s_14_array,&DAT_0009f010,0x24);
  memcpy(&sdns_h_s_15_array,&DAT_0009f034,0x24);
  memcpy(&sdns_h_s_16_array,&DAT_0009f058,0x24);
  memcpy(sdns_h_mv_1_array,&DAT_0009f07c,0x24);
  memcpy(sdns_h_mv_2_array,&DAT_0009f0a0,0x24);
  memcpy(sdns_h_mv_3_array,&DAT_0009f0c4,0x24);
  memcpy(sdns_h_mv_4_array,&DAT_0009f0e8,0x24);
  memcpy(sdns_h_mv_5_array,&DAT_0009f10c,0x24);
  memcpy(sdns_h_mv_6_array,&DAT_0009f130,0x24);
  memcpy(sdns_h_mv_7_array,&DAT_0009f154,0x24);
  memcpy(sdns_h_mv_8_array,&DAT_0009f178,0x24);
  memcpy(sdns_h_mv_9_array,&DAT_0009f19c,0x24);
  memcpy(sdns_h_mv_10_array,&DAT_0009f1c0,0x24);
  memcpy(sdns_h_mv_11_array,&DAT_0009f1e4,0x24);
  memcpy(sdns_h_mv_12_array,&DAT_0009f208,0x24);
  memcpy(sdns_h_mv_13_array,&DAT_0009f22c,0x24);
  memcpy(sdns_h_mv_14_array,&DAT_0009f250,0x24);
  memcpy(sdns_h_mv_15_array,&DAT_0009f274,0x24);
  memcpy(sdns_h_mv_16_array,&DAT_0009f298,0x24);
  memcpy(sdns_dark_thres_array,&DAT_0009f2bc,0x24);
  memcpy(sdns_light_thres_array,&DAT_0009f2e0,0x24);
  memcpy(&sdns_h_val_max,&DAT_0009f304,4);
  memcpy(sdns_sharpen_tt_opt_array,&DAT_0009f308,0x24);
  memcpy(&sdns_d_s1_thr,&DAT_0009f32c,0x3c);
  memcpy(&sdns_w_thr,&DAT_0009f368,0x40);
  memcpy(&sdns_ave_fliter,&DAT_0009f3a8,0xc);
  memcpy(sdns_y,&DAT_0009f3b4,0xc);
  memcpy(sdns_x_1xg_1x4,&DAT_0009f3c0,0x100);
  memcpy(sdns_k_1xg_1x4,&DAT_0009f4c0,0x40);
  memcpy(sdns_h_val,&DAT_0009f500,0x40);
  memcpy(&sdns_sharpen_g_std,&DAT_0009f540,8);
  memcpy(&sdns_sp_uu_par,&DAT_0009f548,0xc);
  memcpy(sdns_sp_uu_thres_array,&DAT_0009f554,0x24);
  memcpy(sdns_sp_uu_stren_array,&DAT_0009f578,0x24);
  memcpy(sdns_sp_mv_uu_thres_array,&DAT_0009f59c,0x24);
  memcpy(sdns_sp_mv_uu_stren_array,&DAT_0009f5c0,0x24);
  memcpy(&sdns_sp_mv_wei_uu_value,&DAT_0009f5e4,0x10);
  memcpy(&sdns_sp_d_v2_sigma_win5_slope,&DAT_0009f5f4,8);
  memcpy(sdns_sp_d_v2_win5_thres_array,&DAT_0009f5fc,0x24);
  memcpy(&sdns_sp_d_wbhl_flat,&DAT_0009f620,0x24);
  memcpy(sdns_sp_d_w_sp_stren_0_array,&DAT_0009f644,0x24);
  memcpy(sdns_sp_d_w_sp_stren_1_array,&DAT_0009f668,0x24);
  memcpy(sdns_sp_d_w_sp_stren_2_array,&DAT_0009f68c,0x24);
  memcpy(sdns_sp_d_w_sp_stren_3_array,&DAT_0009f6b0,0x24);
  memcpy(sdns_sp_d_b_sp_stren_0_array,&DAT_0009f6d4,0x24);
  memcpy(sdns_sp_d_b_sp_stren_1_array,&DAT_0009f6f8,0x24);
  memcpy(sdns_sp_d_b_sp_stren_2_array,&DAT_0009f71c,0x24);
  memcpy(sdns_sp_d_b_sp_stren_3_array,&DAT_0009f740,0x24);
  memcpy(sdns_sp_d_flat_thres_array,&DAT_0009f764,0x24);
  memcpy(sdns_sp_d_flat_stren_array,&DAT_0009f788,0x24);
  memcpy(&sdns_sp_ud_v2_1_coef,&DAT_0009f7ac,0x20);
  memcpy(sdns_sp_ud_w_sp_stren_0_array,&DAT_0009f7cc,0x24);
  memcpy(sdns_sp_ud_w_sp_stren_1_array,&DAT_0009f7f0,0x24);
  memcpy(sdns_sp_ud_w_sp_stren_2_array,&DAT_0009f814,0x24);
  memcpy(sdns_sp_ud_w_sp_stren_3_array,&DAT_0009f838,0x24);
  memcpy(sdns_sp_ud_b_sp_stren_0_array,&DAT_0009f85c,0x24);
  memcpy(sdns_sp_ud_b_sp_stren_1_array,&DAT_0009f880,0x24);
  memcpy(sdns_sp_ud_b_sp_stren_2_array,&DAT_0009f8a4,0x24);
  memcpy(sdns_sp_ud_b_sp_stren_3_array,&DAT_0009f8c8,0x24);
  memcpy(sdns_sp_ud_std_thres_array,&DAT_0009f8ec,0x24);
  memcpy(sdns_sp_ud_std_stren_array,&DAT_0009f910,0x24);
  memcpy(sdns_sp_ud_flat_thres_array,&DAT_0009f934,0x24);
  memcpy(sdns_sp_ud_flat_stren_array,&DAT_0009f958,0x24);
  memcpy(&sdns_sp_ud_wbhl_flat,&DAT_0009f97c,0x2c);
  memcpy(&sdns_sp_uu_np_array,&DAT_0009f9a8,0x40);
  memcpy(&sdns_sp_d_w_wei_np_array,&DAT_0009f9e8,0x58);
  memcpy(&sdns_sp_d_b_wei_np_array,&DAT_0009fa40,0x58);
  memcpy(&sdns_sp_ud_w_wei_np_array,&DAT_0009fa98,0x58);
  memcpy(&sdns_ave_thres_array,&DAT_0009faf0,0x24);
  memcpy(sdns_grad_zx_thres_wdr_array,&DAT_0009fb14,0x24);
  memcpy(sdns_grad_zy_thres_wdr_array,&DAT_0009fb38,0x24);
  memcpy(sdns_std_thr1_wdr_array,&DAT_0009fb5c,0x24);
  memcpy(sdns_std_thr2_wdr_array,&DAT_0009fb80,0x24);
  memcpy(sdns_h_mv_wei_wdr,&DAT_0009fba4,0x10);
  memcpy(sdns_h_s_1_wdr_array,&DAT_0009fbb4,0x24);
  memcpy(sdns_h_s_2_wdr_array,&DAT_0009fbd8,0x24);
  memcpy(sdns_h_s_3_wdr_array,&DAT_0009fbfc,0x24);
  memcpy(sdns_h_s_4_wdr_array,&DAT_0009fc20,0x24);
  memcpy(sdns_h_s_5_wdr_array,&DAT_0009fc44,0x24);
  memcpy(sdns_h_s_6_wdr_array,&DAT_0009fc68,0x24);
  memcpy(sdns_h_s_7_wdr_array,&DAT_0009fc8c,0x24);
  memcpy(sdns_h_s_8_wdr_array,&DAT_0009fcb0,0x24);
  memcpy(sdns_h_s_9_wdr_array,&DAT_0009fcd4,0x24);
  memcpy(sdns_h_s_10_wdr_array,&DAT_0009fcf8,0x24);
  memcpy(sdns_h_s_11_wdr_array,&DAT_0009fd1c,0x24);
  memcpy(sdns_h_s_12_wdr_array,&DAT_0009fd40,0x24);
  memcpy(sdns_h_s_13_wdr_array,&DAT_0009fd64,0x24);
  memcpy(sdns_h_s_14_wdr_array,&DAT_0009fd88,0x24);
  memcpy(sdns_h_s_15_wdr_array,&DAT_0009fdac,0x24);
  memcpy(sdns_h_s_16_wdr_array,&DAT_0009fdd0,0x24);
  memcpy(sdns_sharpen_tt_opt_wdr_array,&DAT_0009fdf4,0x24);
  memcpy(sdns_ave_fliter_wdr,&DAT_0009fe18,0xc);
  memcpy(sdns_ave_thres_wdr_array,&DAT_0009fe24,0x24);
  memcpy(sdns_sp_uu_thres_wdr_array,&DAT_0009fe48,0x24);
  memcpy(sdns_sp_uu_stren_wdr_array,&DAT_0009fe6c,0x24);
  memcpy(sdns_sp_mv_uu_thres_wdr_array,&DAT_0009fe90,0x24);
  memcpy(sdns_sp_mv_uu_stren_wdr_array,&DAT_0009feb4,0x24);
  memcpy(&sdns_sp_ud_b_wei_np_array,&DAT_0009fed8,0x58);
  if (sdns_ratio != 0x80) {
    tisp_s_sdns_ratio();
  }
  return 0;
}



int tiziano_sdns_init(void)

{
  char *puVar1;
  
  if (sdns_wdr_en == 0) {
    sdns_h_mv_wei_now = (char *)&sdns_h_mv_wei;
    sdns_std_thr2_array_now = sdns_std_thr2_array;
    sdns_grad_zx_thres_array_now = sdns_grad_zx_thres_array;
    sdns_grad_zy_thres_array_now = sdns_grad_zy_thres_array;
    sdns_std_thr1_array_now = sdns_std_thr1_array;
    sdns_h_s_1_array_now = (char *)&sdns_h_s_1_array;
    sdns_h_s_2_array_now = (char *)&sdns_h_s_2_array;
    sdns_h_s_3_array_now = (char *)&sdns_h_s_3_array;
    sdns_h_s_4_array_now = (char *)&sdns_h_s_4_array;
    sdns_h_s_5_array_now = (char *)&sdns_h_s_5_array;
    sdns_h_s_6_array_now = (char *)&sdns_h_s_6_array;
    sdns_h_s_7_array_now = (char *)&sdns_h_s_7_array;
    sdns_h_s_8_array_now = (char *)&sdns_h_s_8_array;
    sdns_h_s_9_array_now = (char *)&sdns_h_s_9_array;
    sdns_h_s_10_array_now = (char *)&sdns_h_s_10_array;
    sdns_h_s_11_array_now = (char *)&sdns_h_s_11_array;
    sdns_h_s_12_array_now = (char *)&sdns_h_s_12_array;
    sdns_h_s_13_array_now = (char *)&sdns_h_s_13_array;
    sdns_h_s_14_array_now = (char *)&sdns_h_s_14_array;
    sdns_h_s_15_array_now = (char *)&sdns_h_s_15_array;
    sdns_h_s_16_array_now = (char *)&sdns_h_s_16_array;
    sdns_sharpen_tt_opt_array_now = sdns_sharpen_tt_opt_array;
    sdns_ave_fliter_now = (char *)&sdns_ave_fliter;
    sdns_sp_uu_thres_array_now = sdns_sp_uu_thres_array;
    sdns_sp_uu_stren_array_now = sdns_sp_uu_stren_array;
    sdns_sp_mv_uu_thres_array_now = sdns_sp_mv_uu_thres_array;
    sdns_sp_mv_uu_stren_array_now = sdns_sp_mv_uu_stren_array;
    puVar1 = (char *)&sdns_ave_thres_array;
  }
  else {
    sdns_h_mv_wei_now = sdns_h_mv_wei_wdr;
    sdns_std_thr2_array_now = sdns_std_thr2_wdr_array;
    sdns_grad_zx_thres_array_now = sdns_grad_zx_thres_wdr_array;
    sdns_grad_zy_thres_array_now = sdns_grad_zy_thres_wdr_array;
    sdns_std_thr1_array_now = sdns_std_thr1_wdr_array;
    sdns_h_s_1_array_now = sdns_h_s_1_wdr_array;
    sdns_h_s_2_array_now = sdns_h_s_2_wdr_array;
    sdns_h_s_3_array_now = sdns_h_s_3_wdr_array;
    sdns_h_s_4_array_now = sdns_h_s_4_wdr_array;
    sdns_h_s_5_array_now = sdns_h_s_5_wdr_array;
    sdns_h_s_6_array_now = sdns_h_s_6_wdr_array;
    sdns_h_s_7_array_now = sdns_h_s_7_wdr_array;
    sdns_h_s_8_array_now = sdns_h_s_8_wdr_array;
    sdns_h_s_9_array_now = sdns_h_s_9_wdr_array;
    sdns_h_s_10_array_now = sdns_h_s_10_wdr_array;
    sdns_h_s_11_array_now = sdns_h_s_11_wdr_array;
    sdns_h_s_12_array_now = sdns_h_s_12_wdr_array;
    sdns_h_s_13_array_now = sdns_h_s_13_wdr_array;
    sdns_h_s_14_array_now = sdns_h_s_14_wdr_array;
    sdns_h_s_15_array_now = sdns_h_s_15_wdr_array;
    sdns_h_s_16_array_now = sdns_h_s_16_wdr_array;
    sdns_sharpen_tt_opt_array_now = sdns_sharpen_tt_opt_wdr_array;
    sdns_ave_fliter_now = sdns_ave_fliter_wdr;
    sdns_sp_uu_thres_array_now = sdns_sp_uu_thres_wdr_array;
    sdns_sp_uu_stren_array_now = sdns_sp_uu_stren_wdr_array;
    sdns_sp_mv_uu_thres_array_now = sdns_sp_mv_uu_thres_wdr_array;
    sdns_sp_mv_uu_stren_array_now = sdns_sp_mv_uu_stren_wdr_array;
    puVar1 = sdns_ave_thres_wdr_array;
  }
  gain_old = 0xffffffff;
  sdns_ave_thres_array_now = puVar1;
  tiziano_sdns_params_refresh();
  tisp_sdns_par_refresh(0x10000,0x10000,1);
  return 0;
}



int tiziano_sdns_dn_params_refresh(void)

{
  tiziano_sdns_params_refresh();
  tisp_sdns_all_reg_refresh(gain_old);
  return 0;
}



int tisp_mdns_top_func_cfg(int param_1)

{
  unsigned int uVar1;
  
  uVar1 = 0x101;
  if (param_1 != 0) {
    uVar1 = mdns_y_sf_cur_en_array << 4 | mdns_y_sf_ref_en_array << 8 | 0x10001U |
            mdns_y_filter_en_array << 0xc | mdns_uv_sf_cur_en_array << 0x14 |
            mdns_uv_sf_ref_en_array << 0x18 | mdns_uv_filter_en_array << 0x1c;
  }
  system_reg_write(0x7810,uVar1);
  system_reg_write(0x7814,mdns_bgm_enable_array << 4 | mdns_ref_wei_byps_array << 8 |
                          mdns_y_con_thres_intp | mdns_sta_group_num_array << 0xc |
                          mdns_psn_enable_array << 0x10 | mdns_psn_max_num_array << 0x14);
  system_reg_write(0x7808,mdns_uv_debug_array << 5 | mdns_y_debug_array);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_mdns_y_3d_param_cfg(void)

{
  int iVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  int iVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  int iVar17;
  int iVar18;
  int iVar19;
  int iVar20;
  
  uVar7 = vin_width;
  iVar1 = vin_height;
  uVar6 = mdns_y_sta_blk_size_intp;
  if ((mdns_y_sta_blk_size_intp & 3) != 0) {
    uVar6 = ((mdns_y_sta_blk_size_intp >> 2) + 1) * 4;
  }
  if ((int)uVar6 < 0x10) {
    uVar6 = 0x10;
  }
  iVar11 = (int)vin_width / (int)uVar6;
  uVar10 = (int)uVar6 >> 1;
  iVar8 = vin_height - uVar10;
  uVar9 = vin_width - uVar10;
  iVar12 = vin_height / (int)uVar6;
  uVar5 = (uint)((int)vin_width % (int)uVar6 != 0);
  iVar19 = iVar8 % (int)uVar6;
  uVar3 = (uint)(vin_height % (int)uVar6 != 0);
  iVar20 = (int)uVar9 % (int)uVar6;
  iVar13 = (int)vin_width / (int)uVar6;
  if ((int)vin_width % (int)uVar6 != 0) {
    iVar13 = iVar13 + 1;
  }
  iVar14 = iVar8 / (int)uVar6;
  if (iVar19 != 0) {
    iVar14 = iVar14 + 1;
  }
  iVar15 = (int)uVar9 / (int)uVar6;
  if (iVar20 != 0) {
    iVar15 = iVar15 + 1;
  }
  iVar16 = vin_height / (int)uVar6;
  if (vin_height % (int)uVar6 != 0) {
    iVar16 = iVar16 + 1;
  }
  iVar17 = (int)uVar9 / (int)uVar6;
  if (iVar20 != 0) {
    iVar17 = iVar17 + 1;
  }
  iVar18 = iVar8 / (int)uVar6;
  if (iVar19 != 0) {
    iVar18 = iVar18 + 1;
  }
  uVar4 = uVar3 << 1;
  system_reg_write(0x7870,uVar4 | uVar5);
  uVar2 = (uint)(iVar19 != 0) << 1;
  system_reg_write(0x7888,uVar2 | uVar5);
  system_reg_write(0x78a0,uVar4 | iVar20 != 0);
  system_reg_write(0x78b8,uVar2 | iVar20 != 0);
  uVar6 = uVar6 << 8 | uVar6;
  system_reg_write(0x7874,(iVar11 + uVar5) * 0x1000000 | uVar6 | (iVar12 + uVar3) * 0x10000);
  system_reg_write(0x788c,iVar13 << 0x18 | uVar6 | iVar14 << 0x10);
  system_reg_write(0x78a4,iVar15 << 0x18 | uVar6 | iVar16 << 0x10);
  system_reg_write(0x78bc,iVar17 << 0x18 | uVar6 | iVar18 << 0x10);
  system_reg_write(0x7880,uVar10 << 0x10);
  system_reg_write(0x7898,uVar10);
  system_reg_write(0x78b0,uVar10 | uVar10 << 0x10);
  system_reg_write(0x7884,uVar7 | iVar8 * 0x10000);
  system_reg_write(0x789c,iVar1 << 0x10 | uVar9);
  system_reg_write(0x78b4,uVar9 | iVar8 * 0x10000);
  uVar7 = mdns_sta_max_num_array << 4 | mdns_y_sta_motion_thres_intp << 8 | mdns_sta_inter_en_array;
  system_reg_write(0x7878,uVar7);
  system_reg_write(0x7890,uVar7);
  system_reg_write(0x78a8,uVar7);
  system_reg_write(0x78c0,uVar7);
  uVar7 = mdns_y_sta_ave_thres_intp << 4 | mdns_y_sta_ass_thres_intp << 0x10 |
          mdns_y_sta_win_opt_intp | mdns_y_sta_dtb_thres_intp << 0x18;
  system_reg_write(0x787c,uVar7);
  system_reg_write(0x7894,uVar7);
  system_reg_write(0x78ac,uVar7);
  system_reg_write(0x78c4,uVar7);
  system_reg_write(0x7944,mdns_y_sad_ave_thres_intp << 3 | mdns_y_sad_ave_slope_intp << 0xc |
                          mdns_y_sad_win_opt_intp | mdns_y_sad_ass_thres_intp << 0x10 |
                          mdns_y_sad_dtb_thres_intp << 0x18);
  uVar7 = _DAT_000cabec << 8 | DAT_000cabf0 << 0x10 | mdns_y_ref_wei_sta_array |
          DAT_000cabf4 << 0x18;
  system_reg_write(0x7948,uVar7);
  system_reg_write(0x7958,uVar7);
  system_reg_write(0x7968,uVar7);
  system_reg_write(0x7978,uVar7);
  uVar7 = DAT_000cabfc << 8 | DAT_000cac00 << 0x10 | DAT_000cabf8 | DAT_000cac04 << 0x18;
  system_reg_write(0x794c,uVar7);
  system_reg_write(0x795c,uVar7);
  system_reg_write(0x796c,uVar7);
  system_reg_write(0x797c,uVar7);
  uVar7 = DAT_000cac0c << 8 | DAT_000cac10 << 0x10 | DAT_000cac08 | DAT_000cac14 << 0x18;
  system_reg_write(0x7950,uVar7);
  system_reg_write(0x7960,uVar7);
  system_reg_write(0x7970,uVar7);
  system_reg_write(0x7980,uVar7);
  uVar7 = DAT_000cac1c << 8 | DAT_000cac20 << 0x10 | DAT_000cac18 | DAT_000cac24 << 0x18;
  system_reg_write(0x7954,uVar7);
  system_reg_write(0x7964,uVar7);
  system_reg_write(0x7974,uVar7);
  system_reg_write(0x7984,uVar7);
  system_reg_write(0x7988,_DAT_000cabac << 8 | DAT_000cabb0 << 0x10 | mdns_y_ref_wei_psn_array |
                          DAT_000cabb4 << 0x18);
  system_reg_write(0x798c,DAT_000cabbc << 8 | DAT_000cabc0 << 0x10 | DAT_000cabb8 |
                          DAT_000cabc4 << 0x18);
  system_reg_write(0x7990,DAT_000cabcc << 8 | DAT_000cabd0 << 0x10 | DAT_000cabc8 |
                          DAT_000cabd4 << 0x18);
  system_reg_write(0x7994,DAT_000cabdc << 8 | DAT_000cabe0 << 0x10 | DAT_000cabd8 |
                          DAT_000cabe4 << 0x18);
  system_reg_write(0x7998,mdns_y_ref_wei_sta_fs_opt_intp << 4 | mdns_y_ref_wei_fake_intp << 8 |
                          mdns_y_ref_wei_psn_fs_opt_intp | mdns_y_ref_wei_mv_intp << 0x10);
  system_reg_write(0x799c,mdns_y_ref_wei_f_min_intp << 8 | mdns_y_ref_wei_b_max_intp << 0x10 |
                          mdns_y_ref_wei_f_max_intp | mdns_y_ref_wei_b_min_intp << 0x18);
  system_reg_write(0x79a0,mdns_y_ref_wei_r_min_intp << 8 | mdns_y_ref_wei_increase_intp << 0x10 |
                          mdns_y_ref_wei_r_max_intp);
  system_reg_write(0x78c8,mdns_y_hist_sta_en_intp << 1 | mdns_y_hist_sta_en_intp << 2 |
                          mdns_y_hist_sad_en_intp | mdns_y_hist_sta_en_intp << 3 |
                          mdns_y_hist_sta_en_intp << 4);
  system_reg_write(0x78d4,mdns_y_hist_thres1_intp << 0x10 | mdns_y_hist_thres0_intp);
  system_reg_write(0x78d8,mdns_y_hist_thres3_intp << 0x10 | mdns_y_hist_thres2_intp);
  system_reg_write(0x78cc,mdns_y_hist_cmp_thres1_intp << 0x10 | mdns_y_hist_cmp_thres0_intp);
  system_reg_write(0x78d0,mdns_y_hist_cmp_thres3_intp << 0x10 | mdns_y_hist_cmp_thres2_intp);
  system_reg_write(0x78e0,mdns_y_corner_length_b_intp << 8 | mdns_y_corner_length_l_intp << 0x10 |
                          mdns_y_corner_length_t_intp | mdns_y_corner_length_r_intp << 0x18);
  system_reg_write(0x78e4,mdns_y_corner_thr_adj_value_intp << 8 | mdns_y_corner_wei_adj_value_intp);
  system_reg_write(0x78e8,mdns_y_edge_div_opt_intp << 2 | mdns_y_edge_type_opt_intp << 4 |
                          mdns_y_edge_win_opt_intp | mdns_y_edge_wei_adj_seg_intp << 8 |
                          mdns_y_edge_thr_adj_seg_intp << 10);
  system_reg_write(0x78ec,mdns_y_edge_wei_adj_value1_intp << 8 |
                          mdns_y_edge_wei_adj_value2_intp << 0x10 | mdns_y_edge_wei_adj_value0_intp
                          | mdns_y_edge_wei_adj_value3_intp << 0x18);
  system_reg_write(0x78f0,mdns_y_edge_wei_adj_value5_intp << 8 |
                          mdns_y_edge_wei_adj_value5_intp << 0x10 | mdns_y_edge_wei_adj_value4_intp
                          | mdns_y_edge_wei_adj_value5_intp << 0x18);
  system_reg_write(0x78f4,mdns_y_edge_thr_adj_value1_intp << 8 |
                          mdns_y_edge_thr_adj_value2_intp << 0x10 | mdns_y_edge_thr_adj_value0_intp
                          | mdns_y_edge_thr_adj_value3_intp << 0x18);
  system_reg_write(0x78f8,mdns_y_edge_thr_adj_value5_intp << 8 |
                          mdns_y_edge_thr_adj_value5_intp << 0x10 | mdns_y_edge_thr_adj_value4_intp
                          | mdns_y_edge_thr_adj_value5_intp << 0x18);
  system_reg_write(0x78fc,mdns_y_luma_wei_adj_seg_intp << 8 | mdns_y_luma_thr_adj_seg_intp << 10 |
                          mdns_y_luma_win_opt_intp);
  system_reg_write(0x7900,mdns_y_luma_wei_adj_value1_intp << 8 |
                          mdns_y_luma_wei_adj_value2_intp << 0x10 | mdns_y_luma_wei_adj_value0_intp
                          | mdns_y_luma_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7904,mdns_y_luma_wei_adj_value5_intp << 8 |
                          mdns_y_luma_wei_adj_value5_intp << 0x10 | mdns_y_luma_wei_adj_value4_intp
                          | mdns_y_luma_wei_adj_value5_intp << 0x18);
  system_reg_write(0x7908,mdns_y_luma_thr_adj_value1_intp << 8 |
                          mdns_y_luma_thr_adj_value2_intp << 0x10 | mdns_y_luma_thr_adj_value0_intp
                          | mdns_y_luma_thr_adj_value3_intp << 0x18);
  system_reg_write(0x790c,mdns_y_luma_thr_adj_value5_intp << 8 |
                          mdns_y_luma_thr_adj_value5_intp << 0x10 | mdns_y_luma_thr_adj_value4_intp
                          | mdns_y_luma_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7910,mdns_y_dtb_div_opt_intp << 2 | mdns_y_dtb_squ_en_intp << 4 |
                          mdns_y_dtb_squ_div_opt_intp | mdns_y_dtb_wei_adj_seg_intp << 8 |
                          mdns_y_dtb_thr_adj_seg_intp << 10);
  system_reg_write(0x7914,mdns_y_dtb_wei_adj_value1_intp << 8 |
                          mdns_y_dtb_wei_adj_value2_intp << 0x10 | mdns_y_dtb_wei_adj_value0_intp |
                          mdns_y_dtb_wei_adj_value3_intp << 0x18);
  system_reg_write(31000,mdns_y_dtb_wei_adj_value5_intp << 8 |
                         mdns_y_dtb_wei_adj_value5_intp << 0x10 | mdns_y_dtb_wei_adj_value4_intp |
                         mdns_y_dtb_wei_adj_value5_intp << 0x18);
  system_reg_write(0x791c,mdns_y_dtb_thr_adj_value1_intp << 8 |
                          mdns_y_dtb_thr_adj_value2_intp << 0x10 | mdns_y_dtb_thr_adj_value0_intp |
                          mdns_y_dtb_thr_adj_value3_intp << 0x18);
  system_reg_write(0x7920,mdns_y_dtb_thr_adj_value5_intp << 8 |
                          mdns_y_dtb_thr_adj_value5_intp << 0x10 | mdns_y_dtb_thr_adj_value4_intp |
                          mdns_y_dtb_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7924,mdns_y_ass_win_opt_intp << 4 | mdns_y_ass_wei_adj_seg_intp << 8 |
                          mdns_y_ass_div_opt_intp | mdns_y_ass_thr_adj_seg_intp << 10);
  system_reg_write(0x7928,mdns_y_ass_wei_adj_value1_intp << 8 |
                          mdns_y_ass_wei_adj_value2_intp << 0x10 | mdns_y_ass_wei_adj_value0_intp |
                          mdns_y_ass_wei_adj_value3_intp << 0x18);
  system_reg_write(0x792c,mdns_y_ass_wei_adj_value5_intp << 8 |
                          mdns_y_ass_wei_adj_value5_intp << 0x10 | mdns_y_ass_wei_adj_value4_intp |
                          mdns_y_ass_wei_adj_value5_intp << 0x18);
  system_reg_write(0x7930,mdns_y_ass_thr_adj_value1_intp << 8 |
                          mdns_y_ass_thr_adj_value2_intp << 0x10 | mdns_y_ass_thr_adj_value0_intp |
                          mdns_y_ass_thr_adj_value3_intp << 0x18);
  system_reg_write(0x7934,mdns_y_ass_thr_adj_value5_intp << 8 |
                          mdns_y_ass_thr_adj_value5_intp << 0x10 | mdns_y_ass_thr_adj_value4_intp |
                          mdns_y_ass_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7938,mdns_y_sad_wei_adj_seg_intp);
  system_reg_write(0x793c,mdns_y_sad_wei_adj_value1_intp << 8 |
                          mdns_y_sad_wei_adj_value2_intp << 0x10 | mdns_y_sad_wei_adj_value0_intp |
                          mdns_y_sad_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7940,mdns_y_sad_wei_adj_value5_intp << 8 |
                          mdns_y_sad_wei_adj_value5_intp << 0x10 | mdns_y_sad_wei_adj_value4_intp |
                          mdns_y_sad_wei_adj_value5_intp << 0x18);
  return 0;
}



int tisp_mdns_y_2d_param_cfg(void)

{
  unsigned int uVar1;
  
  system_reg_write(0x79a4,mdns_y_pspa_cur_bi_wei_seg_intp << 8 |
                          mdns_y_pspa_cur_lmt_op_en_intp << 10 | mdns_y_pspa_cur_bi_thres_intp);
  system_reg_write(0x79a8,mdns_y_pspa_cur_bi_wei0_intp << 4 | mdns_y_pspa_cur_bi_wei0_intp << 8 |
                          mdns_y_pspa_cur_bi_wei0_intp | mdns_y_pspa_cur_bi_wei0_intp << 0xc |
                          mdns_y_pspa_cur_bi_wei0_intp << 0x10 |
                          mdns_y_pspa_cur_bi_wei0_intp << 0x14);
  system_reg_write(0x79ac,mdns_y_pspa_ref_bi_wei_seg_intp << 8 |
                          mdns_y_pspa_ref_lmt_op_en_intp << 10 | mdns_y_pspa_ref_bi_thres_intp);
  system_reg_write(0x79b0,mdns_y_pspa_ref_bi_wei0_intp << 4 | mdns_y_pspa_ref_bi_wei0_intp << 8 |
                          mdns_y_pspa_ref_bi_wei0_intp | mdns_y_pspa_ref_bi_wei0_intp << 0xc |
                          mdns_y_pspa_ref_bi_wei0_intp << 0x10 |
                          mdns_y_pspa_ref_bi_wei0_intp << 0x14);
  system_reg_write(0x79b4,mdns_y_pspa_ref_median_win_opt_intp << 1 |
                          mdns_y_fspa_cur_fus_seg_intp << 4 | mdns_y_pspa_cur_median_win_opt_intp |
                          mdns_y_fspa_ref_fus_seg_intp << 8 | mdns_y_pspa_fnl_fus_thres_intp << 0x10
                          | mdns_y_pspa_fnl_fus_dwei_intp << 0x18 |
                          mdns_y_pspa_fnl_fus_swei_intp << 0x1c);
  system_reg_write(0x79b8,mdns_y_fspa_cur_fus_wei_0_intp << 8 |
                          mdns_y_fspa_cur_fus_wei_0_intp << 0x10 | mdns_y_fspa_cur_fus_wei_0_intp |
                          mdns_y_fspa_cur_fus_wei_0_intp << 0x18);
  system_reg_write(0x79bc,mdns_y_fspa_cur_fus_wei_0_intp << 8 |
                          mdns_y_fspa_cur_fus_wei_0_intp << 0x10 | mdns_y_fspa_cur_fus_wei_0_intp |
                          mdns_y_fspa_cur_fus_wei_0_intp << 0x18);
  system_reg_write(0x79c0,mdns_y_fspa_cur_fus_wei_0_intp << 8 |
                          mdns_y_fspa_cur_fus_wei_0_intp << 0x10 | mdns_y_fspa_cur_fus_wei_0_intp |
                          mdns_y_fspa_cur_fus_wei_144_intp << 0x18);
  system_reg_write(0x79c4,mdns_y_fspa_cur_fus_wei_176_intp << 8 |
                          mdns_y_fspa_cur_fus_wei_192_intp << 0x10 |
                          mdns_y_fspa_cur_fus_wei_160_intp |
                          mdns_y_fspa_cur_fus_wei_208_intp << 0x18);
  system_reg_write(0x79c8,mdns_y_fspa_ref_fus_wei_0_intp << 8 |
                          mdns_y_fspa_ref_fus_wei_0_intp << 0x10 | mdns_y_fspa_ref_fus_wei_0_intp |
                          mdns_y_fspa_ref_fus_wei_0_intp << 0x18);
  system_reg_write(0x79cc,mdns_y_fspa_ref_fus_wei_0_intp << 8 |
                          mdns_y_fspa_ref_fus_wei_0_intp << 0x10 | mdns_y_fspa_ref_fus_wei_0_intp |
                          mdns_y_fspa_ref_fus_wei_0_intp << 0x18);
  system_reg_write(0x79d0,mdns_y_fspa_ref_fus_wei_0_intp << 8 |
                          mdns_y_fspa_ref_fus_wei_0_intp << 0x10 | mdns_y_fspa_ref_fus_wei_0_intp |
                          mdns_y_fspa_ref_fus_wei_144_intp << 0x18);
  system_reg_write(0x79d4,mdns_y_fspa_ref_fus_wei_176_intp << 8 |
                          mdns_y_fspa_ref_fus_wei_192_intp << 0x10 |
                          mdns_y_fspa_ref_fus_wei_160_intp |
                          mdns_y_fspa_ref_fus_wei_208_intp << 0x18);
  system_reg_write(0x79d8,mdns_y_piir_edge_thres1_intp << 8 | mdns_y_piir_edge_thres2_intp << 0x10 |
                          mdns_y_piir_edge_thres0_intp);
  system_reg_write(0x79dc,mdns_y_piir_edge_wei1_intp << 8 | mdns_y_piir_edge_wei2_intp << 0x10 |
                          mdns_y_piir_edge_wei0_intp | mdns_y_piir_edge_wei3_intp << 0x18);
  system_reg_write(0x79e0,mdns_y_piir_ref_fs_wei_intp << 8 | mdns_y_piir_cur_fs_wei_intp);
  system_reg_write(0x79e4,mdns_y_piir_edge_thres1_intp << 8 | mdns_y_piir_edge_thres2_intp << 0x10 |
                          mdns_y_piir_edge_thres0_intp);
  system_reg_write(0x79e8,mdns_y_piir_edge_wei1_intp << 8 | mdns_y_piir_edge_wei2_intp << 0x10 |
                          mdns_y_piir_edge_wei0_intp | mdns_y_piir_edge_wei3_intp << 0x18);
  system_reg_write(0x79ec,mdns_y_fiir_fus_seg_intp);
  uVar1 = mdns_y_fiir_fus_wei0_intp << 8 | mdns_y_fiir_fus_wei0_intp << 0x10 |
          mdns_y_fiir_fus_wei0_intp | mdns_y_fiir_fus_wei0_intp << 0x18;
  system_reg_write(0x79f0,uVar1);
  system_reg_write(0x79f4,uVar1);
  system_reg_write(0x79f8,mdns_y_fiir_fus_wei2_intp << 8 | mdns_y_fiir_fus_wei3_intp << 0x10 |
                          mdns_y_fiir_fus_wei1_intp | mdns_y_fiir_fus_wei4_intp << 0x18);
  system_reg_write(0x79fc,mdns_y_fiir_fus_wei6_intp << 8 | mdns_y_fiir_fus_wei7_intp << 0x10 |
                          mdns_y_fiir_fus_wei5_intp | mdns_y_fiir_fus_wei8_intp << 0x18);
  system_reg_write(0x7a00,mdns_y_con_stren_intp << 8);
  return 0;
}



int tisp_mdns_c_3d_param_cfg(void)

{
  system_reg_write(0x7a64,mdns_c_sad_ave_thres_intp << 3 | mdns_c_sad_ave_slope_intp << 0xc |
                          mdns_c_sad_win_opt_intp | mdns_c_sad_ass_thres_intp << 0x10 |
                          mdns_c_sad_dtb_thres_intp << 0x18);
  system_reg_write(0x7a68,mdns_c_ref_wei_fake_intp << 8 | mdns_c_ref_wei_mv_intp << 0x10);
  system_reg_write(0x7a6c,mdns_c_ref_wei_f_min_intp << 8 | mdns_c_ref_wei_b_max_intp << 0x10 |
                          mdns_c_ref_wei_f_max_intp | mdns_c_ref_wei_b_min_intp << 0x18);
  system_reg_write(0x7a70,mdns_c_ref_wei_r_min_intp << 8 | mdns_c_ref_wei_increase_intp << 0x10 |
                          mdns_c_ref_wei_r_max_intp);
  system_reg_write(0x7a04,mdns_c_corner_thr_adj_value_intp << 8 | mdns_c_corner_wei_adj_value_intp);
  system_reg_write(0x7a08,mdns_c_edge_wei_adj_seg_intp << 8 | mdns_c_edge_thr_adj_seg_intp << 10);
  system_reg_write(0x7a0c,mdns_c_edge_wei_adj_value1_intp << 8 |
                          mdns_c_edge_wei_adj_value2_intp << 0x10 | mdns_c_edge_wei_adj_value0_intp
                          | mdns_c_edge_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7a10,mdns_c_edge_wei_adj_value5_intp << 8 |
                          mdns_c_edge_wei_adj_value5_intp << 0x10 | mdns_c_edge_wei_adj_value4_intp
                          | mdns_c_edge_wei_adj_value5_intp << 0x18);
  system_reg_write(0x7a14,mdns_c_edge_thr_adj_value1_intp << 8 |
                          mdns_c_edge_thr_adj_value2_intp << 0x10 | mdns_c_edge_thr_adj_value0_intp
                          | mdns_c_edge_thr_adj_value3_intp << 0x18);
  system_reg_write(0x7a18,mdns_c_edge_thr_adj_value5_intp << 8 |
                          mdns_c_edge_thr_adj_value5_intp << 0x10 | mdns_c_edge_thr_adj_value4_intp
                          | mdns_c_edge_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7a1c,mdns_c_luma_wei_adj_seg_intp << 8 | mdns_c_luma_thr_adj_seg_intp << 10);
  system_reg_write(0x7a20,mdns_c_luma_wei_adj_value1_intp << 8 |
                          mdns_c_luma_wei_adj_value2_intp << 0x10 | mdns_c_luma_wei_adj_value0_intp
                          | mdns_c_luma_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7a24,mdns_c_luma_wei_adj_value5_intp << 8 |
                          mdns_c_luma_wei_adj_value5_intp << 0x10 | mdns_c_luma_wei_adj_value4_intp
                          | mdns_c_luma_wei_adj_value5_intp << 0x18);
  system_reg_write(0x7a28,mdns_c_luma_thr_adj_value1_intp << 8 |
                          mdns_c_luma_thr_adj_value2_intp << 0x10 | mdns_c_luma_thr_adj_value0_intp
                          | mdns_c_luma_thr_adj_value3_intp << 0x18);
  system_reg_write(0x7a2c,mdns_c_luma_thr_adj_value5_intp << 8 |
                          mdns_c_luma_thr_adj_value5_intp << 0x10 | mdns_c_luma_thr_adj_value4_intp
                          | mdns_c_luma_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7a30,mdns_c_dtb_wei_adj_seg_intp << 8 | mdns_c_dtb_thr_adj_seg_intp << 10);
  system_reg_write(0x7a34,mdns_c_dtb_wei_adj_value1_intp << 8 |
                          mdns_c_dtb_wei_adj_value2_intp << 0x10 | mdns_c_dtb_wei_adj_value0_intp |
                          mdns_c_dtb_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7a38,mdns_c_dtb_wei_adj_value5_intp << 8 |
                          mdns_c_dtb_wei_adj_value5_intp << 0x10 | mdns_c_dtb_wei_adj_value4_intp |
                          mdns_c_dtb_wei_adj_value5_intp << 0x18);
  system_reg_write(0x7a3c,mdns_c_dtb_thr_adj_value1_intp << 8 |
                          mdns_c_dtb_thr_adj_value2_intp << 0x10 | mdns_c_dtb_thr_adj_value0_intp |
                          mdns_c_dtb_thr_adj_value3_intp << 0x18);
  system_reg_write(0x7a40,mdns_c_dtb_thr_adj_value5_intp << 8 |
                          mdns_c_dtb_thr_adj_value5_intp << 0x10 | mdns_c_dtb_thr_adj_value4_intp |
                          mdns_c_dtb_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7a44,mdns_c_ass_wei_adj_seg_intp << 8 | mdns_c_ass_thr_adj_seg_intp << 10);
  system_reg_write(0x7a48,mdns_c_ass_wei_adj_value1_intp << 8 |
                          mdns_c_ass_wei_adj_value2_intp << 0x10 | mdns_c_ass_wei_adj_value0_intp |
                          mdns_c_ass_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7a4c,mdns_c_ass_wei_adj_value5_intp << 8 |
                          mdns_c_ass_wei_adj_value5_intp << 0x10 | mdns_c_ass_wei_adj_value4_intp |
                          mdns_c_ass_wei_adj_value5_intp << 0x18);
  system_reg_write(0x7a50,mdns_c_ass_thr_adj_value1_intp << 8 |
                          mdns_c_ass_thr_adj_value2_intp << 0x10 | mdns_c_ass_thr_adj_value0_intp |
                          mdns_c_ass_thr_adj_value3_intp << 0x18);
  system_reg_write(0x7a54,mdns_c_ass_thr_adj_value5_intp << 8 |
                          mdns_c_ass_thr_adj_value5_intp << 0x10 | mdns_c_ass_thr_adj_value4_intp |
                          mdns_c_ass_thr_adj_value5_intp << 0x18);
  system_reg_write(0x7a58,mdns_c_sad_wei_adj_seg_intp);
  system_reg_write(0x7a5c,mdns_c_sad_wei_adj_value1_intp << 8 |
                          mdns_c_sad_wei_adj_value2_intp << 0x10 | mdns_c_sad_wei_adj_value0_intp |
                          mdns_c_sad_wei_adj_value3_intp << 0x18);
  system_reg_write(0x7a60,mdns_c_sad_wei_adj_value5_intp << 8 |
                          mdns_c_sad_wei_adj_value5_intp << 0x10 | mdns_c_sad_wei_adj_value4_intp |
                          mdns_c_sad_wei_adj_value5_intp << 0x18);
  return 0;
}



int tisp_mdns_c_2d_param_cfg(void)

{
  int iVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  
  system_reg_write(0x7a74,mdns_c_median_edg_thres_intp << 8 |
                          mdns_c_median_cur_lmt_op_en_intp << 0x10 | mdns_c_median_smj_thres_intp |
                          mdns_c_median_cur_lmt_wei_intp << 0x11 |
                          mdns_c_median_ref_lmt_op_en_intp << 0x18 |
                          mdns_c_median_ref_lmt_wei_intp << 0x19);
  system_reg_write(0x7a78,mdns_c_median_cur_se_wei_intp << 4 | mdns_c_median_cur_ms_wei_intp << 8 |
                          mdns_c_median_cur_ss_wei_intp | mdns_c_median_cur_me_wei_intp << 0xc);
  system_reg_write(0x7a7c,mdns_c_median_ref_se_wei_intp << 4 | mdns_c_median_ref_ms_wei_intp << 8 |
                          mdns_c_median_ref_ss_wei_intp | mdns_c_median_ref_me_wei_intp << 0xc);
  system_reg_write(0x7a80,mdns_c_bgm_cur_src_intp << 4 | mdns_c_bgm_ref_src_intp << 6 |
                          mdns_bgm_inter_en_array | mdns_c_bgm_false_thres_intp << 8 |
                          mdns_c_bgm_false_step_intp << 0x10 | mdns_c_bgm_win_opt_intp << 0x14);
  uVar3 = vin_width / 2;
  uVar2 = 0;
  if ((uVar3 & 0xf) != 0) {
    uVar2 = ((int)uVar3 % 0x10) / 2;
  }
  uVar4 = vin_height / 2;
  iVar1 = 0;
  if ((uVar4 & 0xf) != 0) {
    iVar1 = ((int)uVar4 % 0x10) / 2;
  }
  system_reg_write(0x7a84,iVar1 << 0x10 | uVar2);
  system_reg_write(0x7a88,(uVar4 + iVar1 * -2) * 0x10000 | uVar3 + uVar2 * -2);
  system_reg_write(0x7a8c,mdns_c_fspa_cur_fus_seg_intp << 4 | mdns_c_fspa_ref_fus_seg_intp << 8);
  system_reg_write(0x7a90,mdns_c_fspa_cur_fus_wei_0_intp << 8 |
                          mdns_c_fspa_cur_fus_wei_0_intp << 0x10 | mdns_c_fspa_cur_fus_wei_0_intp |
                          mdns_c_fspa_cur_fus_wei_0_intp << 0x18);
  system_reg_write(0x7a94,mdns_c_fspa_cur_fus_wei_0_intp << 8 |
                          mdns_c_fspa_cur_fus_wei_0_intp << 0x10 | mdns_c_fspa_cur_fus_wei_0_intp |
                          mdns_c_fspa_cur_fus_wei_0_intp << 0x18);
  system_reg_write(0x7a98,mdns_c_fspa_cur_fus_wei_0_intp << 8 |
                          mdns_c_fspa_cur_fus_wei_0_intp << 0x10 | mdns_c_fspa_cur_fus_wei_0_intp |
                          mdns_c_fspa_cur_fus_wei_144_intp << 0x18);
  system_reg_write(0x7a9c,mdns_c_fspa_cur_fus_wei_176_intp << 8 |
                          mdns_c_fspa_cur_fus_wei_192_intp << 0x10 |
                          mdns_c_fspa_cur_fus_wei_160_intp |
                          mdns_c_fspa_cur_fus_wei_208_intp << 0x18);
  system_reg_write(0x7aa0,mdns_c_fspa_ref_fus_wei_0_intp << 8 |
                          mdns_c_fspa_ref_fus_wei_0_intp << 0x10 | mdns_c_fspa_ref_fus_wei_0_intp |
                          mdns_c_fspa_ref_fus_wei_0_intp << 0x18);
  system_reg_write(0x7aa4,mdns_c_fspa_ref_fus_wei_0_intp << 8 |
                          mdns_c_fspa_ref_fus_wei_0_intp << 0x10 | mdns_c_fspa_ref_fus_wei_0_intp |
                          mdns_c_fspa_ref_fus_wei_0_intp << 0x18);
  system_reg_write(0x7aa8,mdns_c_fspa_ref_fus_wei_0_intp << 8 |
                          mdns_c_fspa_ref_fus_wei_0_intp << 0x10 | mdns_c_fspa_ref_fus_wei_0_intp |
                          mdns_c_fspa_ref_fus_wei_144_intp << 0x18);
  system_reg_write(0x7aac,mdns_c_fspa_ref_fus_wei_176_intp << 8 |
                          mdns_c_fspa_ref_fus_wei_192_intp << 0x10 |
                          mdns_c_fspa_ref_fus_wei_160_intp |
                          mdns_c_fspa_ref_fus_wei_208_intp << 0x18);
  system_reg_write(0x7ab0,mdns_c_piir_edge_thres1_intp << 8 | mdns_c_piir_edge_thres2_intp << 0x10 |
                          mdns_c_piir_edge_thres0_intp);
  system_reg_write(0x7ab4,mdns_c_piir_edge_wei1_intp << 8 | mdns_c_piir_edge_wei2_intp << 0x10 |
                          mdns_c_piir_edge_wei0_intp | mdns_c_piir_edge_wei3_intp << 0x18);
  system_reg_write(0x7ab8,mdns_c_piir_ref_fs_wei_intp << 8 | mdns_c_piir_cur_fs_wei_intp);
  system_reg_write(0x7abc,mdns_c_piir_edge_thres1_intp << 8 | mdns_c_piir_edge_thres2_intp << 0x10 |
                          mdns_c_piir_edge_thres0_intp);
  system_reg_write(0x7ac0,mdns_c_piir_edge_wei1_intp << 8 | mdns_c_piir_edge_wei2_intp << 0x10 |
                          mdns_c_piir_edge_wei0_intp | mdns_c_piir_edge_wei3_intp << 0x18);
  system_reg_write(0x7ac4,mdns_c_fiir_fus_seg_intp);
  uVar2 = mdns_c_fiir_fus_wei0_intp << 8 | mdns_c_fiir_fus_wei0_intp << 0x10 |
          mdns_c_fiir_fus_wei0_intp | mdns_c_fiir_fus_wei0_intp << 0x18;
  system_reg_write(0x7ac8,uVar2);
  system_reg_write(0x7acc,uVar2);
  system_reg_write(0x7ad0,mdns_c_fiir_fus_wei2_intp << 8 | mdns_c_fiir_fus_wei3_intp << 0x10 |
                          mdns_c_fiir_fus_wei1_intp | mdns_c_fiir_fus_wei4_intp << 0x18);
  system_reg_write(0x7ad4,mdns_c_fiir_fus_wei6_intp << 8 | mdns_c_fiir_fus_wei7_intp << 0x10 |
                          mdns_c_fiir_fus_wei5_intp | mdns_c_fiir_fus_wei8_intp << 0x18);
  system_reg_write(0x7ad8,mdns_c_false_edg_thres0_intp << 8 | mdns_c_false_edg_thres1_intp << 0x10 |
                          mdns_c_false_smj_thres_intp | mdns_c_false_edg_thres2_intp << 0x18);
  system_reg_write(0x7adc,mdns_c_false_step_s0_intp << 8 | mdns_c_false_thres_s0_intp << 0x10 |
                          mdns_c_false_thres_s0_intp | mdns_c_false_step_s0_intp << 0x18);
  system_reg_write(0x7ae0,mdns_c_false_step_s0_intp << 8 | mdns_c_false_thres_s0_intp << 0x10 |
                          mdns_c_false_thres_s0_intp | mdns_c_false_step_s0_intp << 0x18);
  system_reg_write(0x7ae4,mdns_c_false_step_m0_intp << 8 | mdns_c_false_thres_m0_intp << 0x10 |
                          mdns_c_false_thres_m0_intp | mdns_c_false_step_m0_intp << 0x18);
  system_reg_write(0x7ae8,mdns_c_false_step_m0_intp << 8 | mdns_c_false_thres_m0_intp << 0x10 |
                          mdns_c_false_thres_m0_intp | mdns_c_false_step_m0_intp << 0x18);
  system_reg_write(0x7aec,mdns_c_sat_lmt_thres_intp << 8 | mdns_c_sat_lmt_stren_intp << 0x10 |
                          mdns_c_sat_nml_stren_intp);
  return 0;
}



int tisp_mdns_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  mdns_y_sad_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_win_opt_array);
  mdns_y_sad_ave_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_ave_thres_array_now);
  mdns_y_sad_ave_slope_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_ave_slope_array);
  mdns_y_sad_dtb_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_dtb_thres_array);
  mdns_y_sad_ass_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_ass_thres_array_now);
  mdns_y_sta_blk_size_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sta_blk_size_array);
  mdns_y_sta_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sta_win_opt_array);
  mdns_y_sta_ave_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sta_ave_thres_array_now);
  mdns_y_sta_dtb_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sta_dtb_thres_array);
  mdns_y_sta_ass_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sta_ass_thres_array_now);
  mdns_y_sta_motion_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sta_motion_thres_array_now);
  mdns_y_ref_wei_mv_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_mv_array);
  mdns_y_ref_wei_fake_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_fake_array);
  mdns_y_ref_wei_sta_fs_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_sta_fs_opt_array);
  mdns_y_ref_wei_psn_fs_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_psn_fs_opt_array);
  mdns_y_ref_wei_f_max_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_f_max_array);
  mdns_y_ref_wei_f_min_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_f_min_array);
  mdns_y_ref_wei_b_max_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_b_max_array_now);
  mdns_y_ref_wei_b_min_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_b_min_array_now);
  mdns_y_ref_wei_r_max_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_r_max_array);
  mdns_y_ref_wei_r_min_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_r_min_array);
  mdns_y_ref_wei_increase_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ref_wei_increase_array);
  mdns_y_corner_length_t_intp = tisp_simple_intp(iVar1,param_1,mdns_y_corner_length_t_array);
  mdns_y_corner_length_b_intp = tisp_simple_intp(iVar1,param_1,mdns_y_corner_length_b_array);
  mdns_y_corner_length_l_intp = tisp_simple_intp(iVar1,param_1,mdns_y_corner_length_l_array);
  mdns_y_corner_length_r_intp = tisp_simple_intp(iVar1,param_1,mdns_y_corner_length_r_array);
  mdns_y_edge_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_win_opt_array);
  mdns_y_edge_div_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_div_opt_array);
  mdns_y_edge_type_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_type_opt_array);
  mdns_y_luma_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_win_opt_array);
  mdns_y_dtb_div_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_div_opt_array);
  mdns_y_dtb_squ_en_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_squ_en_array);
  mdns_y_dtb_squ_div_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_squ_div_opt_array);
  mdns_y_ass_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_win_opt_array);
  mdns_y_ass_div_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_div_opt_array);
  mdns_y_hist_sad_en_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_sad_en_array);
  mdns_y_hist_sta_en_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_sta_en_array);
  mdns_y_hist_num_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_num_thres_array);
  mdns_y_hist_cmp_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_cmp_thres0_array);
  mdns_y_hist_cmp_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_cmp_thres1_array);
  mdns_y_hist_cmp_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_cmp_thres2_array);
  mdns_y_hist_cmp_thres3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_cmp_thres3_array);
  mdns_y_hist_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_thres0_array);
  mdns_y_hist_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_thres1_array);
  mdns_y_hist_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_thres2_array);
  mdns_y_hist_thres3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_hist_thres3_array);
  mdns_y_edge_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_seg_array);
  mdns_y_luma_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_seg_array);
  mdns_y_dtb_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_seg_array);
  mdns_y_ass_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_seg_array);
  mdns_y_corner_thr_adj_value_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_corner_thr_adj_value_array);
  mdns_y_edge_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_value0_array)
  ;
  mdns_y_edge_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_value1_array)
  ;
  mdns_y_edge_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_value2_array)
  ;
  mdns_y_edge_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_value3_array)
  ;
  mdns_y_edge_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_value4_array)
  ;
  mdns_y_edge_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_thr_adj_value5_array)
  ;
  mdns_y_luma_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_value0_array)
  ;
  mdns_y_luma_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_value1_array)
  ;
  mdns_y_luma_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_value2_array)
  ;
  mdns_y_luma_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_value3_array)
  ;
  mdns_y_luma_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_value4_array)
  ;
  mdns_y_luma_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_thr_adj_value5_array)
  ;
  mdns_y_dtb_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_value0_array);
  mdns_y_dtb_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_value1_array);
  mdns_y_dtb_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_value2_array);
  mdns_y_dtb_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_value3_array);
  mdns_y_dtb_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_value4_array);
  mdns_y_dtb_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_thr_adj_value5_array);
  mdns_y_ass_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_value0_array);
  mdns_y_ass_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_value1_array);
  mdns_y_ass_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_value2_array);
  mdns_y_ass_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_value3_array);
  mdns_y_ass_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_value4_array);
  mdns_y_ass_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_thr_adj_value5_array);
  mdns_y_edge_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_seg_array);
  mdns_y_luma_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_seg_array);
  mdns_y_dtb_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_seg_array);
  mdns_y_ass_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_seg_array);
  mdns_y_sad_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_seg_array);
  mdns_y_corner_wei_adj_value_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_corner_wei_adj_value_array);
  mdns_y_edge_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_value0_array)
  ;
  mdns_y_edge_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_value1_array)
  ;
  mdns_y_edge_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_value2_array)
  ;
  mdns_y_edge_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_value3_array)
  ;
  mdns_y_edge_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_value4_array)
  ;
  mdns_y_edge_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_edge_wei_adj_value5_array)
  ;
  mdns_y_luma_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_value0_array)
  ;
  mdns_y_luma_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_value1_array)
  ;
  mdns_y_luma_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_value2_array)
  ;
  mdns_y_luma_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_value3_array)
  ;
  mdns_y_luma_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_value4_array)
  ;
  mdns_y_luma_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_luma_wei_adj_value5_array)
  ;
  mdns_y_dtb_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_value0_array);
  mdns_y_dtb_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_value1_array);
  mdns_y_dtb_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_value2_array);
  mdns_y_dtb_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_value3_array);
  mdns_y_dtb_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_value4_array);
  mdns_y_dtb_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_dtb_wei_adj_value5_array);
  mdns_y_ass_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_value0_array);
  mdns_y_ass_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_value1_array);
  mdns_y_ass_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_value2_array);
  mdns_y_ass_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_value3_array);
  mdns_y_ass_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_value4_array);
  mdns_y_ass_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_ass_wei_adj_value5_array);
  mdns_y_sad_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_value0_array);
  mdns_y_sad_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_value1_array);
  mdns_y_sad_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_value2_array);
  mdns_y_sad_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_value3_array);
  mdns_y_sad_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_value4_array);
  mdns_y_sad_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_sad_wei_adj_value5_array);
  mdns_y_pspa_cur_median_win_opt_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_median_win_opt_array_now);
  mdns_y_pspa_cur_bi_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_thres_array_now)
  ;
  mdns_y_pspa_cur_bi_wei_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_wei_seg_array)
  ;
  mdns_y_pspa_cur_bi_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_wei0_array_now);
  mdns_y_pspa_cur_bi_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_wei1_array);
  mdns_y_pspa_cur_bi_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_wei2_array);
  mdns_y_pspa_cur_bi_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_wei3_array);
  mdns_y_pspa_cur_bi_wei4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_bi_wei4_array);
  mdns_y_pspa_cur_lmt_op_en_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_lmt_op_en_array);
  mdns_y_pspa_cur_lmt_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_cur_lmt_wei_array);
  mdns_y_pspa_ref_median_win_opt_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_median_win_opt_array_now);
  mdns_y_pspa_ref_bi_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_thres_array_now)
  ;
  mdns_y_pspa_ref_bi_wei_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_wei_seg_array)
  ;
  mdns_y_pspa_ref_bi_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_wei0_array_now);
  mdns_y_pspa_ref_bi_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_wei1_array);
  mdns_y_pspa_ref_bi_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_wei2_array);
  mdns_y_pspa_ref_bi_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_wei3_array);
  mdns_y_pspa_ref_bi_wei4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_bi_wei4_array);
  mdns_y_pspa_ref_lmt_op_en_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_lmt_op_en_array);
  mdns_y_pspa_ref_lmt_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_ref_lmt_wei_array);
  mdns_y_piir_edge_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_thres0_array);
  mdns_y_piir_edge_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_thres1_array);
  mdns_y_piir_edge_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_thres2_array);
  mdns_y_piir_edge_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_wei0_array);
  mdns_y_piir_edge_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_wei1_array);
  mdns_y_piir_edge_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_wei2_array);
  mdns_y_piir_edge_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_edge_wei3_array);
  mdns_y_piir_cur_fs_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_cur_fs_wei_array_now);
  mdns_y_piir_ref_fs_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_y_piir_ref_fs_wei_array_now);
  mdns_y_pspa_fnl_fus_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_fnl_fus_thres_array);
  mdns_y_pspa_fnl_fus_swei_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_fnl_fus_swei_array);
  mdns_y_pspa_fnl_fus_dwei_intp = tisp_simple_intp(iVar1,param_1,mdns_y_pspa_fnl_fus_dwei_array);
  mdns_y_fspa_cur_fus_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_seg_array);
  mdns_y_fspa_cur_fus_wei_0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_0_array);
  mdns_y_fspa_cur_fus_wei_16_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_16_array)
  ;
  mdns_y_fspa_cur_fus_wei_32_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_32_array)
  ;
  mdns_y_fspa_cur_fus_wei_48_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_48_array)
  ;
  mdns_y_fspa_cur_fus_wei_64_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_64_array)
  ;
  mdns_y_fspa_cur_fus_wei_80_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_80_array)
  ;
  mdns_y_fspa_cur_fus_wei_96_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_96_array)
  ;
  mdns_y_fspa_cur_fus_wei_112_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_112_array);
  mdns_y_fspa_cur_fus_wei_128_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_128_array);
  mdns_y_fspa_cur_fus_wei_144_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_144_array_now);
  mdns_y_fspa_cur_fus_wei_160_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_160_array_now);
  mdns_y_fspa_cur_fus_wei_176_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_176_array_now);
  mdns_y_fspa_cur_fus_wei_192_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_192_array_now);
  mdns_y_fspa_cur_fus_wei_208_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_208_array_now);
  mdns_y_fspa_cur_fus_wei_224_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_224_array_now);
  mdns_y_fspa_cur_fus_wei_240_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_cur_fus_wei_240_array_now);
  mdns_y_fspa_ref_fus_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_seg_array);
  mdns_y_fspa_ref_fus_wei_0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_0_array);
  mdns_y_fspa_ref_fus_wei_16_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_16_array)
  ;
  mdns_y_fspa_ref_fus_wei_32_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_32_array)
  ;
  mdns_y_fspa_ref_fus_wei_48_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_48_array)
  ;
  mdns_y_fspa_ref_fus_wei_64_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_64_array)
  ;
  mdns_y_fspa_ref_fus_wei_80_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_80_array)
  ;
  mdns_y_fspa_ref_fus_wei_96_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_96_array)
  ;
  mdns_y_fspa_ref_fus_wei_112_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_112_array);
  mdns_y_fspa_ref_fus_wei_128_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_128_array);
  mdns_y_fspa_ref_fus_wei_144_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_144_array_now);
  mdns_y_fspa_ref_fus_wei_160_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_160_array_now);
  mdns_y_fspa_ref_fus_wei_176_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_176_array_now);
  mdns_y_fspa_ref_fus_wei_192_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_192_array_now);
  mdns_y_fspa_ref_fus_wei_208_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_208_array_now);
  mdns_y_fspa_ref_fus_wei_224_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_224_array_now);
  mdns_y_fspa_ref_fus_wei_240_intp =
       tisp_simple_intp(iVar1,param_1,mdns_y_fspa_ref_fus_wei_240_array_now);
  mdns_y_fiir_edge_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_thres0_array);
  mdns_y_fiir_edge_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_thres1_array);
  mdns_y_fiir_edge_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_thres2_array);
  mdns_y_fiir_edge_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_wei0_array);
  mdns_y_fiir_edge_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_wei1_array);
  mdns_y_fiir_edge_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_wei2_array);
  mdns_y_fiir_edge_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_edge_wei3_array);
  mdns_y_fiir_fus_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_seg_array);
  mdns_y_fiir_fus_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei0_array_now);
  mdns_y_fiir_fus_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei1_array_now);
  mdns_y_fiir_fus_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei2_array_now);
  mdns_y_fiir_fus_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei3_array_now);
  mdns_y_fiir_fus_wei4_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei4_array_now);
  mdns_y_fiir_fus_wei5_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei5_array_now);
  mdns_y_fiir_fus_wei6_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei6_array_now);
  mdns_y_fiir_fus_wei7_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei7_array_now);
  mdns_y_fiir_fus_wei8_intp = tisp_simple_intp(iVar1,param_1,mdns_y_fiir_fus_wei8_array_now);
  mdns_y_con_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_y_con_thres_array);
  mdns_y_con_stren_intp = tisp_simple_intp(iVar1,param_1,mdns_y_con_stren_array);
  mdns_c_sad_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_win_opt_array);
  mdns_c_sad_ave_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_ave_thres_array_now);
  mdns_c_sad_ave_slope_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_ave_slope_array);
  mdns_c_sad_dtb_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_dtb_thres_array);
  mdns_c_sad_ass_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_ass_thres_array_now);
  mdns_c_ref_wei_mv_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_mv_array);
  mdns_c_ref_wei_fake_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_fake_array);
  mdns_c_ref_wei_f_max_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_f_max_array);
  mdns_c_ref_wei_f_min_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_f_min_array);
  mdns_c_ref_wei_b_max_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_b_max_array_now);
  mdns_c_ref_wei_b_min_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_b_min_array_now);
  mdns_c_ref_wei_r_max_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_r_max_array);
  mdns_c_ref_wei_r_min_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_r_min_array);
  mdns_c_ref_wei_increase_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ref_wei_increase_array);
  mdns_c_edge_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_seg_array);
  mdns_c_luma_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_seg_array);
  mdns_c_dtb_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_seg_array);
  mdns_c_ass_thr_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_seg_array);
  mdns_c_corner_thr_adj_value_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_corner_thr_adj_value_array);
  mdns_c_edge_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_value0_array)
  ;
  mdns_c_edge_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_value1_array)
  ;
  mdns_c_edge_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_value2_array)
  ;
  mdns_c_edge_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_value3_array)
  ;
  mdns_c_edge_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_value4_array)
  ;
  mdns_c_edge_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_thr_adj_value5_array)
  ;
  mdns_c_luma_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_value0_array)
  ;
  mdns_c_luma_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_value1_array)
  ;
  mdns_c_luma_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_value2_array)
  ;
  mdns_c_luma_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_value3_array)
  ;
  mdns_c_luma_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_value4_array)
  ;
  mdns_c_luma_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_thr_adj_value5_array)
  ;
  mdns_c_dtb_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_value0_array);
  mdns_c_dtb_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_value1_array);
  mdns_c_dtb_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_value2_array);
  mdns_c_dtb_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_value3_array);
  mdns_c_dtb_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_value4_array);
  mdns_c_dtb_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_thr_adj_value5_array);
  mdns_c_ass_thr_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_value0_array);
  mdns_c_ass_thr_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_value1_array);
  mdns_c_ass_thr_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_value2_array);
  mdns_c_ass_thr_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_value3_array);
  mdns_c_ass_thr_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_value4_array);
  mdns_c_ass_thr_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_thr_adj_value5_array);
  mdns_c_edge_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_seg_array);
  mdns_c_luma_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_seg_array);
  mdns_c_dtb_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_seg_array);
  mdns_c_ass_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_seg_array);
  mdns_c_sad_wei_adj_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_seg_array);
  mdns_c_corner_wei_adj_value_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_corner_wei_adj_value_array);
  mdns_c_edge_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_value0_array)
  ;
  mdns_c_edge_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_value1_array)
  ;
  mdns_c_edge_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_value2_array)
  ;
  mdns_c_edge_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_value3_array)
  ;
  mdns_c_edge_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_value4_array)
  ;
  mdns_c_edge_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_edge_wei_adj_value5_array)
  ;
  mdns_c_luma_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_value0_array)
  ;
  mdns_c_luma_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_value1_array)
  ;
  mdns_c_luma_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_value2_array)
  ;
  mdns_c_luma_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_value3_array)
  ;
  mdns_c_luma_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_value4_array)
  ;
  mdns_c_luma_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_luma_wei_adj_value5_array)
  ;
  mdns_c_dtb_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_value0_array);
  mdns_c_dtb_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_value1_array);
  mdns_c_dtb_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_value2_array);
  mdns_c_dtb_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_value3_array);
  mdns_c_dtb_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_value4_array);
  mdns_c_dtb_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_dtb_wei_adj_value5_array);
  mdns_c_ass_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_value0_array);
  mdns_c_ass_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_value1_array);
  mdns_c_ass_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_value2_array);
  mdns_c_ass_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_value3_array);
  mdns_c_ass_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_value4_array);
  mdns_c_ass_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_ass_wei_adj_value5_array);
  mdns_c_sad_wei_adj_value0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_value0_array);
  mdns_c_sad_wei_adj_value1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_value1_array);
  mdns_c_sad_wei_adj_value2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_value2_array);
  mdns_c_sad_wei_adj_value3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_value3_array);
  mdns_c_sad_wei_adj_value4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_value4_array);
  mdns_c_sad_wei_adj_value5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sad_wei_adj_value5_array);
  mdns_c_median_smj_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_smj_thres_array);
  mdns_c_median_edg_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_edg_thres_array);
  mdns_c_median_cur_lmt_op_en_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_median_cur_lmt_op_en_array);
  mdns_c_median_cur_lmt_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_cur_lmt_wei_array);
  mdns_c_median_cur_ss_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_cur_ss_wei_array_now)
  ;
  mdns_c_median_cur_se_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_cur_se_wei_array_now)
  ;
  mdns_c_median_cur_ms_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_cur_ms_wei_array_now)
  ;
  mdns_c_median_cur_me_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_cur_me_wei_array_now)
  ;
  mdns_c_median_ref_lmt_op_en_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_median_ref_lmt_op_en_array);
  mdns_c_median_ref_lmt_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_ref_lmt_wei_array);
  mdns_c_median_ref_ss_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_ref_ss_wei_array_now)
  ;
  mdns_c_median_ref_se_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_ref_se_wei_array_now)
  ;
  mdns_c_median_ref_ms_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_ref_ms_wei_array_now)
  ;
  mdns_c_median_ref_me_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_median_ref_me_wei_array_now)
  ;
  mdns_c_bgm_win_opt_intp = tisp_simple_intp(iVar1,param_1,mdns_c_bgm_win_opt_array);
  mdns_c_bgm_cur_src_intp = tisp_simple_intp(iVar1,param_1,mdns_c_bgm_cur_src_array);
  mdns_c_bgm_ref_src_intp = tisp_simple_intp(iVar1,param_1,mdns_c_bgm_ref_src_array);
  mdns_c_bgm_false_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_bgm_false_thres_array);
  mdns_c_bgm_false_step_intp = tisp_simple_intp(iVar1,param_1,mdns_c_bgm_false_step_array);
  mdns_c_piir_edge_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_thres0_array);
  mdns_c_piir_edge_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_thres1_array);
  mdns_c_piir_edge_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_thres2_array);
  mdns_c_piir_edge_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_wei0_array);
  mdns_c_piir_edge_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_wei1_array);
  mdns_c_piir_edge_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_wei2_array);
  mdns_c_piir_edge_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_edge_wei3_array);
  mdns_c_piir_cur_fs_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_cur_fs_wei_array_now);
  mdns_c_piir_ref_fs_wei_intp = tisp_simple_intp(iVar1,param_1,mdns_c_piir_ref_fs_wei_array_now);
  mdns_c_fspa_cur_fus_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_seg_array);
  mdns_c_fspa_cur_fus_wei_0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_0_array);
  mdns_c_fspa_cur_fus_wei_16_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_16_array)
  ;
  mdns_c_fspa_cur_fus_wei_32_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_32_array)
  ;
  mdns_c_fspa_cur_fus_wei_48_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_48_array)
  ;
  mdns_c_fspa_cur_fus_wei_64_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_64_array)
  ;
  mdns_c_fspa_cur_fus_wei_80_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_80_array)
  ;
  mdns_c_fspa_cur_fus_wei_96_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_96_array)
  ;
  mdns_c_fspa_cur_fus_wei_112_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_112_array);
  mdns_c_fspa_cur_fus_wei_128_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_128_array);
  mdns_c_fspa_cur_fus_wei_144_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_144_array_now);
  mdns_c_fspa_cur_fus_wei_160_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_160_array_now);
  mdns_c_fspa_cur_fus_wei_176_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_176_array_now);
  mdns_c_fspa_cur_fus_wei_192_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_192_array_now);
  mdns_c_fspa_cur_fus_wei_208_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_208_array_now);
  mdns_c_fspa_cur_fus_wei_224_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_224_array_now);
  mdns_c_fspa_cur_fus_wei_240_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_cur_fus_wei_240_array_now);
  mdns_c_fspa_ref_fus_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_seg_array);
  mdns_c_fspa_ref_fus_wei_0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_0_array);
  mdns_c_fspa_ref_fus_wei_16_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_16_array)
  ;
  mdns_c_fspa_ref_fus_wei_32_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_32_array)
  ;
  mdns_c_fspa_ref_fus_wei_48_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_48_array)
  ;
  mdns_c_fspa_ref_fus_wei_64_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_64_array)
  ;
  mdns_c_fspa_ref_fus_wei_80_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_80_array)
  ;
  mdns_c_fspa_ref_fus_wei_96_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_96_array)
  ;
  mdns_c_fspa_ref_fus_wei_112_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_112_array);
  mdns_c_fspa_ref_fus_wei_128_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_128_array);
  mdns_c_fspa_ref_fus_wei_144_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_144_array_now);
  mdns_c_fspa_ref_fus_wei_160_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_160_array_now);
  mdns_c_fspa_ref_fus_wei_176_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_176_array_now);
  mdns_c_fspa_ref_fus_wei_192_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_192_array_now);
  mdns_c_fspa_ref_fus_wei_208_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_208_array_now);
  mdns_c_fspa_ref_fus_wei_224_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_224_array_now);
  mdns_c_fspa_ref_fus_wei_240_intp =
       tisp_simple_intp(iVar1,param_1,mdns_c_fspa_ref_fus_wei_240_array_now);
  mdns_c_fiir_edge_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_thres0_array);
  mdns_c_fiir_edge_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_thres1_array);
  mdns_c_fiir_edge_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_thres2_array);
  mdns_c_fiir_edge_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_wei0_array);
  mdns_c_fiir_edge_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_wei1_array);
  mdns_c_fiir_edge_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_wei2_array);
  mdns_c_fiir_edge_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_edge_wei3_array);
  mdns_c_fiir_fus_seg_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_seg_array);
  mdns_c_fiir_fus_wei0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei0_array_now);
  mdns_c_fiir_fus_wei1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei1_array_now);
  mdns_c_fiir_fus_wei2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei2_array_now);
  mdns_c_fiir_fus_wei3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei3_array_now);
  mdns_c_fiir_fus_wei4_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei4_array_now);
  mdns_c_fiir_fus_wei5_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei5_array_now);
  mdns_c_fiir_fus_wei6_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei6_array_now);
  mdns_c_fiir_fus_wei7_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei7_array_now);
  mdns_c_fiir_fus_wei8_intp = tisp_simple_intp(iVar1,param_1,mdns_c_fiir_fus_wei8_array_now);
  mdns_c_false_smj_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_smj_thres_array);
  mdns_c_false_edg_thres0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_edg_thres0_array);
  mdns_c_false_edg_thres1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_edg_thres1_array);
  mdns_c_false_edg_thres2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_edg_thres2_array);
  mdns_c_false_thres_s0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_s0_array);
  mdns_c_false_thres_s1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_s1_array);
  mdns_c_false_thres_s2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_s2_array);
  mdns_c_false_thres_s3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_s3_array);
  mdns_c_false_step_s0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_s0_array);
  mdns_c_false_step_s1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_s1_array);
  mdns_c_false_step_s2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_s2_array);
  mdns_c_false_step_s3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_s3_array);
  mdns_c_false_thres_m0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_m0_array);
  mdns_c_false_thres_m1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_m1_array);
  mdns_c_false_thres_m2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_m2_array);
  mdns_c_false_thres_m3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_thres_m3_array);
  mdns_c_false_step_m0_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_m0_array);
  mdns_c_false_step_m1_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_m1_array);
  mdns_c_false_step_m2_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_m2_array);
  mdns_c_false_step_m3_intp = tisp_simple_intp(iVar1,param_1,mdns_c_false_step_m3_array);
  mdns_c_sat_lmt_thres_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sat_lmt_thres_array);
  mdns_c_sat_lmt_stren_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sat_lmt_stren_array);
  mdns_c_sat_nml_stren_intp = tisp_simple_intp(iVar1,param_1,mdns_c_sat_nml_stren_array);
  return 0;
}



int tisp_mdns_all_reg_refresh(void)

{
  tisp_mdns_intp();
  system_reg_write(0x7804,0x110);
  tisp_mdns_y_3d_param_cfg();
  tisp_mdns_y_2d_param_cfg();
  tisp_mdns_c_3d_param_cfg();
  tisp_mdns_c_2d_param_cfg();
  tisp_mdns_top_func_cfg(1);
  return 0;
}



int tisp_mdns_top_func_refresh(void)

{
  system_reg_write(0x7818,1);
  return 0;
}



int tisp_mdns_reg_trigger(void)

{
  system_reg_write(0x7804,0x111);
  return 0;
}



int tisp_mdns_intp_reg_refresh(void)

{
  tisp_mdns_intp();
  system_reg_write(0x7804,0x110);
  tisp_mdns_y_3d_param_cfg();
  tisp_mdns_y_2d_param_cfg();
  tisp_mdns_c_3d_param_cfg();
  tisp_mdns_c_2d_param_cfg();
  return 0;
}



int tisp_mdns_par_refresh(unsigned int param_1,unsigned int param_2)

{
  unsigned int uVar1;
  
  if (gain_old == 0xffffffff) {
    gain_old = param_1;
    tisp_mdns_all_reg_refresh();
    tisp_mdns_top_func_refresh();
  }
  else {
    uVar1 = gain_old - param_1;
    if (gain_old <= param_1) {
      uVar1 = param_1 - gain_old;
    }
    if (uVar1 < param_2) {
      return 0;
    }
    gain_old = param_1;
    tisp_mdns_intp_reg_refresh();
  }
  tisp_mdns_reg_trigger();
  return 0;
}



int tisp_mdns_bypass(int param_1)

{
  tisp_mdns_top_func_cfg(param_1 == 0);
  tisp_mdns_top_func_refresh();
  tisp_mdns_reg_trigger();
  return 0;
}



int tisp_mdns_refresh(int param_1)

{
  tisp_mdns_par_refresh(param_1,0x100,vin_width,vin_height);
  return 0;
}



int tisp_mdns_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x180:
    __src = (char *)&mdns_y_filter_en_array;
    __n = 4;
    break;
  case 0x181:
    __src = (char *)&mdns_y_sf_cur_en_array;
    __n = 4;
    break;
  case 0x182:
    __src = (char *)&mdns_y_sf_ref_en_array;
    __n = 4;
    break;
  case 0x183:
    __src = (char *)&mdns_y_debug_array;
    __n = 4;
    break;
  case 0x184:
    __src = (char *)&mdns_uv_filter_en_array;
    __n = 4;
    break;
  case 0x185:
    __src = (char *)&mdns_uv_sf_cur_en_array;
    __n = 4;
    break;
  case 0x186:
    __src = (char *)&mdns_uv_sf_ref_en_array;
    __n = 4;
    break;
  case 0x187:
    __src = (char *)&mdns_uv_debug_array;
    __n = 4;
    break;
  case 0x188:
    __src = (char *)&mdns_ass_enable_array;
    __n = 4;
    break;
  case 0x189:
    __src = (char *)&mdns_sta_inter_en_array;
    __n = 4;
    break;
  case 0x18a:
    __src = (char *)&mdns_sta_group_num_array;
    __n = 4;
    break;
  case 0x18b:
    __src = (char *)&mdns_sta_max_num_array;
    __n = 4;
    break;
  case 0x18c:
    __src = (char *)&mdns_bgm_enable_array;
    __n = 4;
    break;
  case 0x18d:
    __src = (char *)&mdns_bgm_inter_en_array;
    __n = 4;
    break;
  case 0x18e:
    __src = (char *)&mdns_psn_enable_array;
    __n = 4;
    break;
  case 399:
    __src = (char *)&mdns_psn_max_num_array;
    __n = 4;
    break;
  case 400:
    __src = (char *)&mdns_ref_wei_byps_array;
    __n = 4;
    break;
  case 0x191:
    __src = mdns_y_sad_win_opt_array;
    __n = 0x24;
    break;
  case 0x192:
    __src = (char *)&mdns_y_sad_ave_thres_array;
    __n = 0x24;
    break;
  case 0x193:
    __src = mdns_y_sad_ave_slope_array;
    __n = 0x24;
    break;
  case 0x194:
    __src = mdns_y_sad_dtb_thres_array;
    __n = 0x24;
    break;
  case 0x195:
    __src = (char *)&mdns_y_sad_ass_thres_array;
    __n = 0x24;
    break;
  case 0x196:
    __src = mdns_y_sta_blk_size_array;
    __n = 0x24;
    break;
  case 0x197:
    __src = mdns_y_sta_win_opt_array;
    __n = 0x24;
    break;
  case 0x198:
    __src = (char *)&mdns_y_sta_ave_thres_array;
    __n = 0x24;
    break;
  case 0x199:
    __src = mdns_y_sta_dtb_thres_array;
    __n = 0x24;
    break;
  case 0x19a:
    __src = (char *)&mdns_y_sta_ass_thres_array;
    __n = 0x24;
    break;
  case 0x19b:
    __src = mdns_y_sta_motion_thres_array;
    __n = 0x24;
    break;
  case 0x19c:
    __src = (char *)&mdns_y_ref_wei_sta_array;
    __n = 0x40;
    break;
  case 0x19d:
    __src = (char *)&mdns_y_ref_wei_psn_array;
    __n = 0x40;
    break;
  case 0x19e:
    __src = mdns_y_ref_wei_mv_array;
    __n = 0x24;
    break;
  case 0x19f:
    __src = mdns_y_ref_wei_fake_array;
    __n = 0x24;
    break;
  case 0x1a0:
    __src = mdns_y_ref_wei_sta_fs_opt_array;
    __n = 0x24;
    break;
  case 0x1a1:
    __src = mdns_y_ref_wei_psn_fs_opt_array;
    __n = 0x24;
    break;
  case 0x1a2:
    __src = mdns_y_ref_wei_f_max_array;
    __n = 0x24;
    break;
  case 0x1a3:
    __src = mdns_y_ref_wei_f_min_array;
    __n = 0x24;
    break;
  case 0x1a4:
    __src = mdns_y_ref_wei_b_max_array;
    __n = 0x24;
    break;
  case 0x1a5:
    __src = (char *)&mdns_y_ref_wei_b_min_array;
    __n = 0x24;
    break;
  case 0x1a6:
    __src = mdns_y_ref_wei_r_max_array;
    __n = 0x24;
    break;
  case 0x1a7:
    __src = mdns_y_ref_wei_r_min_array;
    __n = 0x24;
    break;
  case 0x1a8:
    __src = mdns_y_ref_wei_increase_array;
    __n = 0x24;
    break;
  case 0x1a9:
    __src = mdns_y_corner_length_t_array;
    __n = 0x24;
    break;
  case 0x1aa:
    __src = mdns_y_corner_length_b_array;
    __n = 0x24;
    break;
  case 0x1ab:
    __src = mdns_y_corner_length_l_array;
    __n = 0x24;
    break;
  case 0x1ac:
    __src = mdns_y_corner_length_r_array;
    __n = 0x24;
    break;
  case 0x1ad:
    __src = mdns_y_edge_win_opt_array;
    __n = 0x24;
    break;
  case 0x1ae:
    __src = mdns_y_edge_div_opt_array;
    __n = 0x24;
    break;
  case 0x1af:
    __src = mdns_y_edge_type_opt_array;
    __n = 0x24;
    break;
  case 0x1b0:
    __src = mdns_y_luma_win_opt_array;
    __n = 0x24;
    break;
  case 0x1b1:
    __src = mdns_y_dtb_div_opt_array;
    __n = 0x24;
    break;
  case 0x1b2:
    __src = mdns_y_dtb_squ_en_array;
    __n = 0x24;
    break;
  case 0x1b3:
    __src = mdns_y_dtb_squ_div_opt_array;
    __n = 0x24;
    break;
  case 0x1b4:
    __src = mdns_y_ass_win_opt_array;
    __n = 0x24;
    break;
  case 0x1b5:
    __src = mdns_y_ass_div_opt_array;
    __n = 0x24;
    break;
  case 0x1b6:
    __src = mdns_y_hist_sad_en_array;
    __n = 0x24;
    break;
  case 0x1b7:
    __src = mdns_y_hist_sta_en_array;
    __n = 0x24;
    break;
  case 0x1b8:
    __src = mdns_y_hist_num_thres_array;
    __n = 0x24;
    break;
  case 0x1b9:
    __src = mdns_y_hist_cmp_thres0_array;
    __n = 0x24;
    break;
  case 0x1ba:
    __src = mdns_y_hist_cmp_thres1_array;
    __n = 0x24;
    break;
  case 0x1bb:
    __src = mdns_y_hist_cmp_thres2_array;
    __n = 0x24;
    break;
  case 0x1bc:
    __src = mdns_y_hist_cmp_thres3_array;
    __n = 0x24;
    break;
  case 0x1bd:
    __src = mdns_y_hist_thres0_array;
    __n = 0x24;
    break;
  case 0x1be:
    __src = mdns_y_hist_thres1_array;
    __n = 0x24;
    break;
  case 0x1bf:
    __src = mdns_y_hist_thres2_array;
    __n = 0x24;
    break;
  case 0x1c0:
    __src = mdns_y_hist_thres3_array;
    __n = 0x24;
    break;
  case 0x1c1:
    __src = mdns_y_edge_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1c2:
    __src = mdns_y_luma_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1c3:
    __src = mdns_y_dtb_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1c4:
    __src = mdns_y_ass_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1c5:
    __src = mdns_y_corner_thr_adj_value_array;
    __n = 0x24;
    break;
  case 0x1c6:
    __src = mdns_y_edge_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1c7:
    __src = mdns_y_edge_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1c8:
    __src = mdns_y_edge_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1c9:
    __src = mdns_y_edge_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1ca:
    __src = mdns_y_edge_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1cb:
    __src = mdns_y_edge_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1cc:
    __src = mdns_y_luma_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1cd:
    __src = mdns_y_luma_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1ce:
    __src = mdns_y_luma_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1cf:
    __src = mdns_y_luma_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1d0:
    __src = mdns_y_luma_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1d1:
    __src = mdns_y_luma_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1d2:
    __src = mdns_y_dtb_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1d3:
    __src = mdns_y_dtb_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1d4:
    __src = mdns_y_dtb_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1d5:
    __src = mdns_y_dtb_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1d6:
    __src = mdns_y_dtb_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1d7:
    __src = mdns_y_dtb_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1d8:
    __src = mdns_y_ass_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1d9:
    __src = mdns_y_ass_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1da:
    __src = mdns_y_ass_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1db:
    __src = mdns_y_ass_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1dc:
    __src = mdns_y_ass_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1dd:
    __src = mdns_y_ass_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1de:
    __src = mdns_y_edge_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1df:
    __src = mdns_y_luma_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1e0:
    __src = mdns_y_dtb_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1e1:
    __src = mdns_y_ass_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1e2:
    __src = mdns_y_sad_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x1e3:
    __src = mdns_y_corner_wei_adj_value_array;
    __n = 0x24;
    break;
  case 0x1e4:
    __src = mdns_y_edge_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1e5:
    __src = mdns_y_edge_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1e6:
    __src = mdns_y_edge_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1e7:
    __src = mdns_y_edge_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1e8:
    __src = mdns_y_edge_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1e9:
    __src = mdns_y_edge_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1ea:
    __src = mdns_y_luma_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1eb:
    __src = mdns_y_luma_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1ec:
    __src = mdns_y_luma_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1ed:
    __src = mdns_y_luma_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1ee:
    __src = mdns_y_luma_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1ef:
    __src = mdns_y_luma_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1f0:
    __src = mdns_y_dtb_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1f1:
    __src = mdns_y_dtb_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1f2:
    __src = mdns_y_dtb_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 499:
    __src = mdns_y_dtb_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 500:
    __src = mdns_y_dtb_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1f5:
    __src = mdns_y_dtb_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1f6:
    __src = mdns_y_ass_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1f7:
    __src = mdns_y_ass_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1f8:
    __src = mdns_y_ass_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1f9:
    __src = mdns_y_ass_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x1fa:
    __src = mdns_y_ass_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x1fb:
    __src = mdns_y_ass_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x1fc:
    __src = mdns_y_sad_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x1fd:
    __src = mdns_y_sad_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x1fe:
    __src = mdns_y_sad_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x1ff:
    __src = mdns_y_sad_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x200:
    __src = mdns_y_sad_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x201:
    __src = mdns_y_sad_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x202:
    __src = mdns_y_sad_ave_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x203:
    __src = mdns_y_sad_ass_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x204:
    __src = mdns_y_sta_ave_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x205:
    __src = mdns_y_sta_ass_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x206:
    __src = mdns_y_sta_motion_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x207:
    __src = mdns_y_ref_wei_b_max_wdr_array;
    __n = 0x24;
    break;
  case 0x208:
    __src = mdns_y_ref_wei_b_min_wdr_array;
    __n = 0x24;
    break;
  case 0x209:
    __src = mdns_y_pspa_cur_median_win_opt_array;
    __n = 0x24;
    break;
  case 0x20a:
    __src = mdns_y_pspa_cur_bi_thres_array;
    __n = 0x24;
    break;
  case 0x20b:
    __src = mdns_y_pspa_cur_bi_wei_seg_array;
    __n = 0x24;
    break;
  case 0x20c:
    __src = mdns_y_pspa_cur_bi_wei0_array;
    __n = 0x24;
    break;
  case 0x20d:
    __src = mdns_y_pspa_cur_bi_wei1_array;
    __n = 0x24;
    break;
  case 0x20e:
    __src = mdns_y_pspa_cur_bi_wei2_array;
    __n = 0x24;
    break;
  case 0x20f:
    __src = mdns_y_pspa_cur_bi_wei3_array;
    __n = 0x24;
    break;
  case 0x210:
    __src = mdns_y_pspa_cur_bi_wei4_array;
    __n = 0x24;
    break;
  case 0x211:
    __src = mdns_y_pspa_cur_lmt_op_en_array;
    __n = 0x24;
    break;
  case 0x212:
    __src = mdns_y_pspa_cur_lmt_wei_array;
    __n = 0x24;
    break;
  case 0x213:
    __src = mdns_y_pspa_ref_median_win_opt_array;
    __n = 0x24;
    break;
  case 0x214:
    __src = mdns_y_pspa_ref_bi_thres_array;
    __n = 0x24;
    break;
  case 0x215:
    __src = mdns_y_pspa_ref_bi_wei_seg_array;
    __n = 0x24;
    break;
  case 0x216:
    __src = mdns_y_pspa_ref_bi_wei0_array;
    __n = 0x24;
    break;
  case 0x217:
    __src = mdns_y_pspa_ref_bi_wei1_array;
    __n = 0x24;
    break;
  case 0x218:
    __src = mdns_y_pspa_ref_bi_wei2_array;
    __n = 0x24;
    break;
  case 0x219:
    __src = mdns_y_pspa_ref_bi_wei3_array;
    __n = 0x24;
    break;
  case 0x21a:
    __src = mdns_y_pspa_ref_bi_wei4_array;
    __n = 0x24;
    break;
  case 0x21b:
    __src = mdns_y_pspa_ref_lmt_op_en_array;
    __n = 0x24;
    break;
  case 0x21c:
    __src = mdns_y_pspa_ref_lmt_wei_array;
    __n = 0x24;
    break;
  case 0x21d:
    __src = mdns_y_piir_edge_thres0_array;
    __n = 0x24;
    break;
  case 0x21e:
    __src = mdns_y_piir_edge_thres1_array;
    __n = 0x24;
    break;
  case 0x21f:
    __src = mdns_y_piir_edge_thres2_array;
    __n = 0x24;
    break;
  case 0x220:
    __src = mdns_y_piir_edge_wei0_array;
    __n = 0x24;
    break;
  case 0x221:
    __src = mdns_y_piir_edge_wei1_array;
    __n = 0x24;
    break;
  case 0x222:
    __src = mdns_y_piir_edge_wei2_array;
    __n = 0x24;
    break;
  case 0x223:
    __src = mdns_y_piir_edge_wei3_array;
    __n = 0x24;
    break;
  case 0x224:
    __src = mdns_y_piir_cur_fs_wei_array;
    __n = 0x24;
    break;
  case 0x225:
    __src = mdns_y_piir_ref_fs_wei_array;
    __n = 0x24;
    break;
  case 0x226:
    __src = mdns_y_pspa_fnl_fus_thres_array;
    __n = 0x24;
    break;
  case 0x227:
    __src = mdns_y_pspa_fnl_fus_swei_array;
    __n = 0x24;
    break;
  case 0x228:
    __src = mdns_y_pspa_fnl_fus_dwei_array;
    __n = 0x24;
    break;
  case 0x229:
    __src = mdns_y_fspa_cur_fus_seg_array;
    __n = 0x24;
    break;
  case 0x22a:
    __src = mdns_y_fspa_cur_fus_wei_0_array;
    __n = 0x24;
    break;
  case 0x22b:
    __src = mdns_y_fspa_cur_fus_wei_16_array;
    __n = 0x24;
    break;
  case 0x22c:
    __src = mdns_y_fspa_cur_fus_wei_32_array;
    __n = 0x24;
    break;
  case 0x22d:
    __src = mdns_y_fspa_cur_fus_wei_48_array;
    __n = 0x24;
    break;
  case 0x22e:
    __src = mdns_y_fspa_cur_fus_wei_64_array;
    __n = 0x24;
    break;
  case 0x22f:
    __src = mdns_y_fspa_cur_fus_wei_80_array;
    __n = 0x24;
    break;
  case 0x230:
    __src = mdns_y_fspa_cur_fus_wei_96_array;
    __n = 0x24;
    break;
  case 0x231:
    __src = mdns_y_fspa_cur_fus_wei_112_array;
    __n = 0x24;
    break;
  case 0x232:
    __src = mdns_y_fspa_cur_fus_wei_128_array;
    __n = 0x24;
    break;
  case 0x233:
    __src = mdns_y_fspa_cur_fus_wei_144_array;
    __n = 0x24;
    break;
  case 0x234:
    __src = mdns_y_fspa_cur_fus_wei_160_array;
    __n = 0x24;
    break;
  case 0x235:
    __src = mdns_y_fspa_cur_fus_wei_176_array;
    __n = 0x24;
    break;
  case 0x236:
    __src = mdns_y_fspa_cur_fus_wei_192_array;
    __n = 0x24;
    break;
  case 0x237:
    __src = mdns_y_fspa_cur_fus_wei_208_array;
    __n = 0x24;
    break;
  case 0x238:
    __src = mdns_y_fspa_cur_fus_wei_224_array;
    __n = 0x24;
    break;
  case 0x239:
    __src = mdns_y_fspa_cur_fus_wei_240_array;
    __n = 0x24;
    break;
  case 0x23a:
    __src = mdns_y_fspa_ref_fus_seg_array;
    __n = 0x24;
    break;
  case 0x23b:
    __src = mdns_y_fspa_ref_fus_wei_0_array;
    __n = 0x24;
    break;
  case 0x23c:
    __src = mdns_y_fspa_ref_fus_wei_16_array;
    __n = 0x24;
    break;
  case 0x23d:
    __src = mdns_y_fspa_ref_fus_wei_32_array;
    __n = 0x24;
    break;
  case 0x23e:
    __src = mdns_y_fspa_ref_fus_wei_48_array;
    __n = 0x24;
    break;
  case 0x23f:
    __src = mdns_y_fspa_ref_fus_wei_64_array;
    __n = 0x24;
    break;
  case 0x240:
    __src = mdns_y_fspa_ref_fus_wei_80_array;
    __n = 0x24;
    break;
  case 0x241:
    __src = mdns_y_fspa_ref_fus_wei_96_array;
    __n = 0x24;
    break;
  case 0x242:
    __src = mdns_y_fspa_ref_fus_wei_112_array;
    __n = 0x24;
    break;
  case 0x243:
    __src = mdns_y_fspa_ref_fus_wei_128_array;
    __n = 0x24;
    break;
  case 0x244:
    __src = mdns_y_fspa_ref_fus_wei_144_array;
    __n = 0x24;
    break;
  case 0x245:
    __src = mdns_y_fspa_ref_fus_wei_160_array;
    __n = 0x24;
    break;
  case 0x246:
    __src = mdns_y_fspa_ref_fus_wei_176_array;
    __n = 0x24;
    break;
  case 0x247:
    __src = mdns_y_fspa_ref_fus_wei_192_array;
    __n = 0x24;
    break;
  case 0x248:
    __src = mdns_y_fspa_ref_fus_wei_208_array;
    __n = 0x24;
    break;
  case 0x249:
    __src = mdns_y_fspa_ref_fus_wei_224_array;
    __n = 0x24;
    break;
  case 0x24a:
    __src = mdns_y_fspa_ref_fus_wei_240_array;
    __n = 0x24;
    break;
  case 0x24b:
    __src = mdns_y_fiir_edge_thres0_array;
    __n = 0x24;
    break;
  case 0x24c:
    __src = mdns_y_fiir_edge_thres1_array;
    __n = 0x24;
    break;
  case 0x24d:
    __src = mdns_y_fiir_edge_thres2_array;
    __n = 0x24;
    break;
  case 0x24e:
    __src = mdns_y_fiir_edge_wei0_array;
    __n = 0x24;
    break;
  case 0x24f:
    __src = mdns_y_fiir_edge_wei1_array;
    __n = 0x24;
    break;
  case 0x250:
    __src = mdns_y_fiir_edge_wei2_array;
    __n = 0x24;
    break;
  case 0x251:
    __src = mdns_y_fiir_edge_wei3_array;
    __n = 0x24;
    break;
  case 0x252:
    __src = mdns_y_fiir_fus_seg_array;
    __n = 0x24;
    break;
  case 0x253:
    __src = mdns_y_fiir_fus_wei0_array;
    __n = 0x24;
    break;
  case 0x254:
    __src = mdns_y_fiir_fus_wei1_array;
    __n = 0x24;
    break;
  case 0x255:
    __src = mdns_y_fiir_fus_wei2_array;
    __n = 0x24;
    break;
  case 0x256:
    __src = mdns_y_fiir_fus_wei3_array;
    __n = 0x24;
    break;
  case 599:
    __src = mdns_y_fiir_fus_wei4_array;
    __n = 0x24;
    break;
  case 600:
    __src = mdns_y_fiir_fus_wei5_array;
    __n = 0x24;
    break;
  case 0x259:
    __src = mdns_y_fiir_fus_wei6_array;
    __n = 0x24;
    break;
  case 0x25a:
    __src = mdns_y_fiir_fus_wei7_array;
    __n = 0x24;
    break;
  case 0x25b:
    __src = mdns_y_fiir_fus_wei8_array;
    __n = 0x24;
    break;
  case 0x25c:
    __src = mdns_y_con_thres_array;
    __n = 0x24;
    break;
  case 0x25d:
    __src = mdns_y_con_stren_array;
    __n = 0x24;
    break;
  case 0x25e:
    __src = mdns_y_pspa_cur_median_win_opt_wdr_array;
    __n = 0x24;
    break;
  case 0x25f:
    __src = mdns_y_pspa_cur_bi_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x260:
    __src = mdns_y_pspa_cur_bi_wei0_wdr_array;
    __n = 0x24;
    break;
  case 0x261:
    __src = mdns_y_pspa_ref_median_win_opt_wdr_array;
    __n = 0x24;
    break;
  case 0x262:
    __src = mdns_y_pspa_ref_bi_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x263:
    __src = mdns_y_pspa_ref_bi_wei0_wdr_array;
    __n = 0x24;
    break;
  case 0x264:
    __src = mdns_y_piir_cur_fs_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x265:
    __src = mdns_y_piir_ref_fs_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x266:
    __src = mdns_y_fspa_cur_fus_wei_144_wdr_array;
    __n = 0x24;
    break;
  case 0x267:
    __src = mdns_y_fspa_cur_fus_wei_160_wdr_array;
    __n = 0x24;
    break;
  case 0x268:
    __src = mdns_y_fspa_cur_fus_wei_176_wdr_array;
    __n = 0x24;
    break;
  case 0x269:
    __src = mdns_y_fspa_cur_fus_wei_192_wdr_array;
    __n = 0x24;
    break;
  case 0x26a:
    __src = mdns_y_fspa_cur_fus_wei_208_wdr_array;
    __n = 0x24;
    break;
  case 0x26b:
    __src = mdns_y_fspa_cur_fus_wei_224_wdr_array;
    __n = 0x24;
    break;
  case 0x26c:
    __src = mdns_y_fspa_cur_fus_wei_240_wdr_array;
    __n = 0x24;
    break;
  case 0x26d:
    __src = mdns_y_fspa_ref_fus_wei_144_wdr_array;
    __n = 0x24;
    break;
  case 0x26e:
    __src = mdns_y_fspa_ref_fus_wei_160_wdr_array;
    __n = 0x24;
    break;
  case 0x26f:
    __src = mdns_y_fspa_ref_fus_wei_176_wdr_array;
    __n = 0x24;
    break;
  case 0x270:
    __src = mdns_y_fspa_ref_fus_wei_192_wdr_array;
    __n = 0x24;
    break;
  case 0x271:
    __src = mdns_y_fspa_ref_fus_wei_208_wdr_array;
    __n = 0x24;
    break;
  case 0x272:
    __src = mdns_y_fspa_ref_fus_wei_224_wdr_array;
    __n = 0x24;
    break;
  case 0x273:
    __src = mdns_y_fspa_ref_fus_wei_240_wdr_array;
    __n = 0x24;
    break;
  case 0x274:
    __src = mdns_y_fiir_fus_wei0_wdr_array;
    __n = 0x24;
    break;
  case 0x275:
    __src = mdns_y_fiir_fus_wei1_wdr_array;
    __n = 0x24;
    break;
  case 0x276:
    __src = mdns_y_fiir_fus_wei2_wdr_array;
    __n = 0x24;
    break;
  case 0x277:
    __src = mdns_y_fiir_fus_wei3_wdr_array;
    __n = 0x24;
    break;
  case 0x278:
    __src = mdns_y_fiir_fus_wei4_wdr_array;
    __n = 0x24;
    break;
  case 0x279:
    __src = mdns_y_fiir_fus_wei5_wdr_array;
    __n = 0x24;
    break;
  case 0x27a:
    __src = mdns_y_fiir_fus_wei6_wdr_array;
    __n = 0x24;
    break;
  case 0x27b:
    __src = mdns_y_fiir_fus_wei7_wdr_array;
    __n = 0x24;
    break;
  case 0x27c:
    __src = mdns_y_fiir_fus_wei8_wdr_array;
    __n = 0x24;
    break;
  case 0x27d:
    __src = mdns_c_sad_win_opt_array;
    __n = 0x24;
    break;
  case 0x27e:
    __src = mdns_c_sad_ave_thres_array;
    __n = 0x24;
    break;
  case 0x27f:
    __src = mdns_c_sad_ave_slope_array;
    __n = 0x24;
    break;
  case 0x280:
    __src = mdns_c_sad_dtb_thres_array;
    __n = 0x24;
    break;
  case 0x281:
    __src = mdns_c_sad_ass_thres_array;
    __n = 0x24;
    break;
  case 0x282:
    __src = mdns_c_ref_wei_mv_array;
    __n = 0x24;
    break;
  case 0x283:
    __src = mdns_c_ref_wei_fake_array;
    __n = 0x24;
    break;
  case 0x284:
    __src = mdns_c_ref_wei_f_max_array;
    __n = 0x24;
    break;
  case 0x285:
    __src = mdns_c_ref_wei_f_min_array;
    __n = 0x24;
    break;
  case 0x286:
    __src = mdns_c_ref_wei_b_max_array;
    __n = 0x24;
    break;
  case 0x287:
    __src = mdns_c_ref_wei_b_min_array;
    __n = 0x24;
    break;
  case 0x288:
    __src = mdns_c_ref_wei_r_max_array;
    __n = 0x24;
    break;
  case 0x289:
    __src = mdns_c_ref_wei_r_min_array;
    __n = 0x24;
    break;
  case 0x28a:
    __src = mdns_c_ref_wei_increase_array;
    __n = 0x24;
    break;
  case 0x28b:
    __src = mdns_c_edge_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x28c:
    __src = mdns_c_luma_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x28d:
    __src = mdns_c_dtb_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x28e:
    __src = mdns_c_ass_thr_adj_seg_array;
    __n = 0x24;
    break;
  case 0x28f:
    __src = mdns_c_corner_thr_adj_value_array;
    __n = 0x24;
    break;
  case 0x290:
    __src = mdns_c_edge_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x291:
    __src = mdns_c_edge_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x292:
    __src = mdns_c_edge_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x293:
    __src = mdns_c_edge_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x294:
    __src = mdns_c_edge_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x295:
    __src = mdns_c_edge_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x296:
    __src = mdns_c_luma_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x297:
    __src = mdns_c_luma_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x298:
    __src = mdns_c_luma_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x299:
    __src = mdns_c_luma_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x29a:
    __src = mdns_c_luma_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x29b:
    __src = mdns_c_luma_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x29c:
    __src = mdns_c_dtb_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x29d:
    __src = mdns_c_dtb_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x29e:
    __src = mdns_c_dtb_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x29f:
    __src = mdns_c_dtb_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2a0:
    __src = mdns_c_dtb_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2a1:
    __src = mdns_c_dtb_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2a2:
    __src = mdns_c_ass_thr_adj_value0_array;
    __n = 0x24;
    break;
  case 0x2a3:
    __src = mdns_c_ass_thr_adj_value1_array;
    __n = 0x24;
    break;
  case 0x2a4:
    __src = mdns_c_ass_thr_adj_value2_array;
    __n = 0x24;
    break;
  case 0x2a5:
    __src = mdns_c_ass_thr_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2a6:
    __src = mdns_c_ass_thr_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2a7:
    __src = mdns_c_ass_thr_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2a8:
    __src = mdns_c_edge_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x2a9:
    __src = mdns_c_luma_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x2aa:
    __src = mdns_c_dtb_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x2ab:
    __src = mdns_c_ass_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x2ac:
    __src = mdns_c_sad_wei_adj_seg_array;
    __n = 0x24;
    break;
  case 0x2ad:
    __src = mdns_c_corner_wei_adj_value_array;
    __n = 0x24;
    break;
  case 0x2ae:
    __src = mdns_c_edge_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x2af:
    __src = mdns_c_edge_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x2b0:
    __src = mdns_c_edge_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x2b1:
    __src = mdns_c_edge_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2b2:
    __src = mdns_c_edge_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2b3:
    __src = mdns_c_edge_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2b4:
    __src = mdns_c_luma_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x2b5:
    __src = mdns_c_luma_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x2b6:
    __src = mdns_c_luma_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x2b7:
    __src = mdns_c_luma_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2b8:
    __src = mdns_c_luma_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2b9:
    __src = mdns_c_luma_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2ba:
    __src = mdns_c_dtb_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 699:
    __src = mdns_c_dtb_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 700:
    __src = mdns_c_dtb_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x2bd:
    __src = mdns_c_dtb_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2be:
    __src = mdns_c_dtb_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2bf:
    __src = mdns_c_dtb_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2c0:
    __src = mdns_c_ass_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x2c1:
    __src = mdns_c_ass_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x2c2:
    __src = mdns_c_ass_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x2c3:
    __src = mdns_c_ass_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2c4:
    __src = mdns_c_ass_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2c5:
    __src = mdns_c_ass_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2c6:
    __src = mdns_c_sad_wei_adj_value0_array;
    __n = 0x24;
    break;
  case 0x2c7:
    __src = mdns_c_sad_wei_adj_value1_array;
    __n = 0x24;
    break;
  case 0x2c8:
    __src = mdns_c_sad_wei_adj_value2_array;
    __n = 0x24;
    break;
  case 0x2c9:
    __src = mdns_c_sad_wei_adj_value3_array;
    __n = 0x24;
    break;
  case 0x2ca:
    __src = mdns_c_sad_wei_adj_value4_array;
    __n = 0x24;
    break;
  case 0x2cb:
    __src = mdns_c_sad_wei_adj_value5_array;
    __n = 0x24;
    break;
  case 0x2cc:
    __src = mdns_c_sad_ave_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x2cd:
    __src = mdns_c_sad_ass_thres_wdr_array;
    __n = 0x24;
    break;
  case 0x2ce:
    __src = mdns_c_ref_wei_b_max_wdr_array;
    __n = 0x24;
    break;
  case 0x2cf:
    __src = mdns_c_ref_wei_b_min_wdr_array;
    __n = 0x24;
    break;
  case 0x2d0:
    __src = mdns_c_median_smj_thres_array;
    __n = 0x24;
    break;
  case 0x2d1:
    __src = mdns_c_median_edg_thres_array;
    __n = 0x24;
    break;
  case 0x2d2:
    __src = mdns_c_median_cur_lmt_op_en_array;
    __n = 0x24;
    break;
  case 0x2d3:
    __src = mdns_c_median_cur_lmt_wei_array;
    __n = 0x24;
    break;
  case 0x2d4:
    __src = mdns_c_median_cur_ss_wei_array;
    __n = 0x24;
    break;
  case 0x2d5:
    __src = mdns_c_median_cur_se_wei_array;
    __n = 0x24;
    break;
  case 0x2d6:
    __src = mdns_c_median_cur_ms_wei_array;
    __n = 0x24;
    break;
  case 0x2d7:
    __src = mdns_c_median_cur_me_wei_array;
    __n = 0x24;
    break;
  case 0x2d8:
    __src = mdns_c_median_ref_lmt_op_en_array;
    __n = 0x24;
    break;
  case 0x2d9:
    __src = mdns_c_median_ref_lmt_wei_array;
    __n = 0x24;
    break;
  case 0x2da:
    __src = mdns_c_median_ref_ss_wei_array;
    __n = 0x24;
    break;
  case 0x2db:
    __src = mdns_c_median_ref_se_wei_array;
    __n = 0x24;
    break;
  case 0x2dc:
    __src = mdns_c_median_ref_ms_wei_array;
    __n = 0x24;
    break;
  case 0x2dd:
    __src = mdns_c_median_ref_me_wei_array;
    __n = 0x24;
    break;
  case 0x2de:
    __src = mdns_c_bgm_win_opt_array;
    __n = 0x24;
    break;
  case 0x2df:
    __src = mdns_c_bgm_cur_src_array;
    __n = 0x24;
    break;
  case 0x2e0:
    __src = mdns_c_bgm_ref_src_array;
    __n = 0x24;
    break;
  case 0x2e1:
    __src = mdns_c_bgm_false_thres_array;
    __n = 0x24;
    break;
  case 0x2e2:
    __src = mdns_c_bgm_false_step_array;
    __n = 0x24;
    break;
  case 0x2e3:
    __src = mdns_c_piir_edge_thres0_array;
    __n = 0x24;
    break;
  case 0x2e4:
    __src = mdns_c_piir_edge_thres1_array;
    __n = 0x24;
    break;
  case 0x2e5:
    __src = mdns_c_piir_edge_thres2_array;
    __n = 0x24;
    break;
  case 0x2e6:
    __src = mdns_c_piir_edge_wei0_array;
    __n = 0x24;
    break;
  case 0x2e7:
    __src = mdns_c_piir_edge_wei1_array;
    __n = 0x24;
    break;
  case 0x2e8:
    __src = mdns_c_piir_edge_wei2_array;
    __n = 0x24;
    break;
  case 0x2e9:
    __src = mdns_c_piir_edge_wei3_array;
    __n = 0x24;
    break;
  case 0x2ea:
    __src = mdns_c_piir_cur_fs_wei_array;
    __n = 0x24;
    break;
  case 0x2eb:
    __src = mdns_c_piir_ref_fs_wei_array;
    __n = 0x24;
    break;
  case 0x2ec:
    __src = mdns_c_fspa_cur_fus_seg_array;
    __n = 0x24;
    break;
  case 0x2ed:
    __src = mdns_c_fspa_cur_fus_wei_0_array;
    __n = 0x24;
    break;
  case 0x2ee:
    __src = mdns_c_fspa_cur_fus_wei_16_array;
    __n = 0x24;
    break;
  case 0x2ef:
    __src = mdns_c_fspa_cur_fus_wei_32_array;
    __n = 0x24;
    break;
  case 0x2f0:
    __src = mdns_c_fspa_cur_fus_wei_48_array;
    __n = 0x24;
    break;
  case 0x2f1:
    __src = mdns_c_fspa_cur_fus_wei_64_array;
    __n = 0x24;
    break;
  case 0x2f2:
    __src = mdns_c_fspa_cur_fus_wei_80_array;
    __n = 0x24;
    break;
  case 0x2f3:
    __src = mdns_c_fspa_cur_fus_wei_96_array;
    __n = 0x24;
    break;
  case 0x2f4:
    __src = mdns_c_fspa_cur_fus_wei_112_array;
    __n = 0x24;
    break;
  case 0x2f5:
    __src = mdns_c_fspa_cur_fus_wei_128_array;
    __n = 0x24;
    break;
  case 0x2f6:
    __src = mdns_c_fspa_cur_fus_wei_144_array;
    __n = 0x24;
    break;
  case 0x2f7:
    __src = mdns_c_fspa_cur_fus_wei_160_array;
    __n = 0x24;
    break;
  case 0x2f8:
    __src = mdns_c_fspa_cur_fus_wei_176_array;
    __n = 0x24;
    break;
  case 0x2f9:
    __src = mdns_c_fspa_cur_fus_wei_192_array;
    __n = 0x24;
    break;
  case 0x2fa:
    __src = mdns_c_fspa_cur_fus_wei_208_array;
    __n = 0x24;
    break;
  case 0x2fb:
    __src = mdns_c_fspa_cur_fus_wei_224_array;
    __n = 0x24;
    break;
  case 0x2fc:
    __src = mdns_c_fspa_cur_fus_wei_240_array;
    __n = 0x24;
    break;
  case 0x2fd:
    __src = mdns_c_fspa_ref_fus_seg_array;
    __n = 0x24;
    break;
  case 0x2fe:
    __src = mdns_c_fspa_ref_fus_wei_0_array;
    __n = 0x24;
    break;
  case 0x2ff:
    __src = mdns_c_fspa_ref_fus_wei_16_array;
    __n = 0x24;
    break;
  case 0x300:
    __src = mdns_c_fspa_ref_fus_wei_32_array;
    __n = 0x24;
    break;
  case 0x301:
    __src = mdns_c_fspa_ref_fus_wei_48_array;
    __n = 0x24;
    break;
  case 0x302:
    __src = mdns_c_fspa_ref_fus_wei_64_array;
    __n = 0x24;
    break;
  case 0x303:
    __src = mdns_c_fspa_ref_fus_wei_80_array;
    __n = 0x24;
    break;
  case 0x304:
    __src = mdns_c_fspa_ref_fus_wei_96_array;
    __n = 0x24;
    break;
  case 0x305:
    __src = mdns_c_fspa_ref_fus_wei_112_array;
    __n = 0x24;
    break;
  case 0x306:
    __src = mdns_c_fspa_ref_fus_wei_128_array;
    __n = 0x24;
    break;
  case 0x307:
    __src = mdns_c_fspa_ref_fus_wei_144_array;
    __n = 0x24;
    break;
  case 0x308:
    __src = mdns_c_fspa_ref_fus_wei_160_array;
    __n = 0x24;
    break;
  case 0x309:
    __src = mdns_c_fspa_ref_fus_wei_176_array;
    __n = 0x24;
    break;
  case 0x30a:
    __src = mdns_c_fspa_ref_fus_wei_192_array;
    __n = 0x24;
    break;
  case 0x30b:
    __src = mdns_c_fspa_ref_fus_wei_208_array;
    __n = 0x24;
    break;
  case 0x30c:
    __src = mdns_c_fspa_ref_fus_wei_224_array;
    __n = 0x24;
    break;
  case 0x30d:
    __src = mdns_c_fspa_ref_fus_wei_240_array;
    __n = 0x24;
    break;
  case 0x30e:
    __src = mdns_c_fiir_edge_thres0_array;
    __n = 0x24;
    break;
  case 0x30f:
    __src = mdns_c_fiir_edge_thres1_array;
    __n = 0x24;
    break;
  case 0x310:
    __src = mdns_c_fiir_edge_thres2_array;
    __n = 0x24;
    break;
  case 0x311:
    __src = mdns_c_fiir_edge_wei0_array;
    __n = 0x24;
    break;
  case 0x312:
    __src = mdns_c_fiir_edge_wei1_array;
    __n = 0x24;
    break;
  case 0x313:
    __src = mdns_c_fiir_edge_wei2_array;
    __n = 0x24;
    break;
  case 0x314:
    __src = mdns_c_fiir_edge_wei3_array;
    __n = 0x24;
    break;
  case 0x315:
    __src = mdns_c_fiir_fus_seg_array;
    __n = 0x24;
    break;
  case 0x316:
    __src = mdns_c_fiir_fus_wei0_array;
    __n = 0x24;
    break;
  case 0x317:
    __src = mdns_c_fiir_fus_wei1_array;
    __n = 0x24;
    break;
  case 0x318:
    __src = mdns_c_fiir_fus_wei2_array;
    __n = 0x24;
    break;
  case 0x319:
    __src = mdns_c_fiir_fus_wei3_array;
    __n = 0x24;
    break;
  case 0x31a:
    __src = mdns_c_fiir_fus_wei4_array;
    __n = 0x24;
    break;
  case 0x31b:
    __src = mdns_c_fiir_fus_wei5_array;
    __n = 0x24;
    break;
  case 0x31c:
    __src = mdns_c_fiir_fus_wei6_array;
    __n = 0x24;
    break;
  case 0x31d:
    __src = mdns_c_fiir_fus_wei7_array;
    __n = 0x24;
    break;
  case 0x31e:
    __src = mdns_c_fiir_fus_wei8_array;
    __n = 0x24;
    break;
  case 799:
    __src = mdns_c_false_smj_thres_array;
    __n = 0x24;
    break;
  case 800:
    __src = mdns_c_false_edg_thres0_array;
    __n = 0x24;
    break;
  case 0x321:
    __src = mdns_c_false_edg_thres1_array;
    __n = 0x24;
    break;
  case 0x322:
    __src = mdns_c_false_edg_thres2_array;
    __n = 0x24;
    break;
  case 0x323:
    __src = mdns_c_false_thres_s0_array;
    __n = 0x24;
    break;
  case 0x324:
    __src = mdns_c_false_thres_s1_array;
    __n = 0x24;
    break;
  case 0x325:
    __src = mdns_c_false_thres_s2_array;
    __n = 0x24;
    break;
  case 0x326:
    __src = mdns_c_false_thres_s3_array;
    __n = 0x24;
    break;
  case 0x327:
    __src = mdns_c_false_step_s0_array;
    __n = 0x24;
    break;
  case 0x328:
    __src = mdns_c_false_step_s1_array;
    __n = 0x24;
    break;
  case 0x329:
    __src = mdns_c_false_step_s2_array;
    __n = 0x24;
    break;
  case 0x32a:
    __src = mdns_c_false_step_s3_array;
    __n = 0x24;
    break;
  case 0x32b:
    __src = mdns_c_false_thres_m0_array;
    __n = 0x24;
    break;
  case 0x32c:
    __src = mdns_c_false_thres_m1_array;
    __n = 0x24;
    break;
  case 0x32d:
    __src = mdns_c_false_thres_m2_array;
    __n = 0x24;
    break;
  case 0x32e:
    __src = mdns_c_false_thres_m3_array;
    __n = 0x24;
    break;
  case 0x32f:
    __src = mdns_c_false_step_m0_array;
    __n = 0x24;
    break;
  case 0x330:
    __src = mdns_c_false_step_m1_array;
    __n = 0x24;
    break;
  case 0x331:
    __src = mdns_c_false_step_m2_array;
    __n = 0x24;
    break;
  case 0x332:
    __src = mdns_c_false_step_m3_array;
    __n = 0x24;
    break;
  case 0x333:
    __src = mdns_c_sat_lmt_thres_array;
    __n = 0x24;
    break;
  case 0x334:
    __src = mdns_c_sat_lmt_stren_array;
    __n = 0x24;
    break;
  case 0x335:
    __src = mdns_c_median_cur_ss_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x336:
    __src = mdns_c_median_cur_se_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x337:
    __src = mdns_c_median_cur_ms_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x338:
    __src = mdns_c_median_cur_me_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x339:
    __src = mdns_c_median_ref_ss_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x33a:
    __src = mdns_c_median_ref_se_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x33b:
    __src = mdns_c_median_ref_ms_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x33c:
    __src = mdns_c_median_ref_me_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x33d:
    __src = mdns_c_piir_cur_fs_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x33e:
    __src = mdns_c_piir_ref_fs_wei_wdr_array;
    __n = 0x24;
    break;
  case 0x33f:
    __src = mdns_c_fspa_cur_fus_wei_144_wdr_array;
    __n = 0x24;
    break;
  case 0x340:
    __src = mdns_c_fspa_cur_fus_wei_160_wdr_array;
    __n = 0x24;
    break;
  case 0x341:
    __src = mdns_c_fspa_cur_fus_wei_176_wdr_array;
    __n = 0x24;
    break;
  case 0x342:
    __src = mdns_c_fspa_cur_fus_wei_192_wdr_array;
    __n = 0x24;
    break;
  case 0x343:
    __src = mdns_c_fspa_cur_fus_wei_208_wdr_array;
    __n = 0x24;
    break;
  case 0x344:
    __src = mdns_c_fspa_cur_fus_wei_224_wdr_array;
    __n = 0x24;
    break;
  case 0x345:
    __src = mdns_c_fspa_cur_fus_wei_240_wdr_array;
    __n = 0x24;
    break;
  case 0x346:
    __src = mdns_c_fspa_ref_fus_wei_144_wdr_array;
    __n = 0x24;
    break;
  case 0x347:
    __src = mdns_c_fspa_ref_fus_wei_160_wdr_array;
    __n = 0x24;
    break;
  case 0x348:
    __src = mdns_c_fspa_ref_fus_wei_176_wdr_array;
    __n = 0x24;
    break;
  case 0x349:
    __src = mdns_c_fspa_ref_fus_wei_192_wdr_array;
    __n = 0x24;
    break;
  case 0x34a:
    __src = mdns_c_fspa_ref_fus_wei_208_wdr_array;
    __n = 0x24;
    break;
  case 0x34b:
    __src = mdns_c_fspa_ref_fus_wei_224_wdr_array;
    __n = 0x24;
    break;
  case 0x34c:
    __src = mdns_c_fspa_ref_fus_wei_240_wdr_array;
    __n = 0x24;
    break;
  case 0x34d:
    __src = mdns_c_fiir_fus_wei0_wdr_array;
    __n = 0x24;
    break;
  case 0x34e:
    __src = mdns_c_fiir_fus_wei1_wdr_array;
    __n = 0x24;
    break;
  case 0x34f:
    __src = mdns_c_fiir_fus_wei2_wdr_array;
    __n = 0x24;
    break;
  case 0x350:
    __src = mdns_c_fiir_fus_wei3_wdr_array;
    __n = 0x24;
    break;
  case 0x351:
    __src = mdns_c_fiir_fus_wei4_wdr_array;
    __n = 0x24;
    break;
  case 0x352:
    __src = mdns_c_fiir_fus_wei5_wdr_array;
    __n = 0x24;
    break;
  case 0x353:
    __src = mdns_c_fiir_fus_wei6_wdr_array;
    __n = 0x24;
    break;
  case 0x354:
    __src = mdns_c_fiir_fus_wei7_wdr_array;
    __n = 0x24;
    break;
  case 0x355:
    __src = mdns_c_fiir_fus_wei8_wdr_array;
    __n = 0x24;
    break;
  case 0x356:
    __src = mdns_c_sat_nml_stren_array;
    __n = 0x24;
    break;
  default:
    isp_printf(2,"%s,%d: mdns not support param id %d\n","tisp_mdns_param_array_get",0x175d,param_1)
    ;
    return 0xffffffff;
  }
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_mdns_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  
  switch(param_1) {
  case 0x180:
    memcpy(&mdns_y_filter_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x181:
    memcpy(&mdns_y_sf_cur_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x182:
    memcpy(&mdns_y_sf_ref_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x183:
    memcpy(&mdns_y_debug_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x184:
    memcpy(&mdns_uv_filter_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x185:
    memcpy(&mdns_uv_sf_cur_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x186:
    memcpy(&mdns_uv_sf_ref_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x187:
    memcpy(&mdns_uv_debug_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x188:
    memcpy(&mdns_ass_enable_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x189:
    memcpy(&mdns_sta_inter_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x18a:
    memcpy(&mdns_sta_group_num_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x18b:
    memcpy(&mdns_sta_max_num_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x18c:
    memcpy(&mdns_bgm_enable_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x18d:
    memcpy(&mdns_bgm_inter_en_array,param_2,4);
    uVar1 = 4;
    break;
  case 0x18e:
    memcpy(&mdns_psn_enable_array,param_2,4);
    uVar1 = 4;
    break;
  case 399:
    memcpy(&mdns_psn_max_num_array,param_2,4);
    uVar1 = 4;
    break;
  case 400:
    memcpy(&mdns_ref_wei_byps_array,param_2,4);
    tisp_mdns_all_reg_refresh(gain_old);
    tisp_mdns_top_func_refresh();
    tisp_mdns_reg_trigger();
    uVar1 = 4;
    break;
  case 0x191:
    memcpy(mdns_y_sad_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x192:
    memcpy(&mdns_y_sad_ave_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x193:
    memcpy(mdns_y_sad_ave_slope_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x194:
    memcpy(mdns_y_sad_dtb_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x195:
    memcpy(&mdns_y_sad_ass_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x196:
    memcpy(mdns_y_sta_blk_size_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x197:
    memcpy(mdns_y_sta_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x198:
    memcpy(&mdns_y_sta_ave_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x199:
    memcpy(mdns_y_sta_dtb_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x19a:
    memcpy(&mdns_y_sta_ass_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x19b:
    memcpy(mdns_y_sta_motion_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x19c:
    memcpy(&mdns_y_ref_wei_sta_array,param_2,0x40);
    uVar1 = 0x40;
    break;
  case 0x19d:
    memcpy(&mdns_y_ref_wei_psn_array,param_2,0x40);
    uVar1 = 0x40;
    break;
  case 0x19e:
    memcpy(mdns_y_ref_wei_mv_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x19f:
    memcpy(mdns_y_ref_wei_fake_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a0:
    memcpy(mdns_y_ref_wei_sta_fs_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a1:
    memcpy(mdns_y_ref_wei_psn_fs_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a2:
    memcpy(mdns_y_ref_wei_f_max_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a3:
    memcpy(mdns_y_ref_wei_f_min_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a4:
    memcpy(mdns_y_ref_wei_b_max_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a5:
    memcpy(&mdns_y_ref_wei_b_min_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a6:
    memcpy(mdns_y_ref_wei_r_max_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a7:
    memcpy(mdns_y_ref_wei_r_min_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a8:
    memcpy(mdns_y_ref_wei_increase_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1a9:
    memcpy(mdns_y_corner_length_t_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1aa:
    memcpy(mdns_y_corner_length_b_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ab:
    memcpy(mdns_y_corner_length_l_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ac:
    memcpy(mdns_y_corner_length_r_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ad:
    memcpy(mdns_y_edge_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ae:
    memcpy(mdns_y_edge_div_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1af:
    memcpy(mdns_y_edge_type_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b0:
    memcpy(mdns_y_luma_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b1:
    memcpy(mdns_y_dtb_div_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b2:
    memcpy(mdns_y_dtb_squ_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b3:
    memcpy(mdns_y_dtb_squ_div_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b4:
    memcpy(mdns_y_ass_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b5:
    memcpy(mdns_y_ass_div_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b6:
    memcpy(mdns_y_hist_sad_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b7:
    memcpy(mdns_y_hist_sta_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b8:
    memcpy(mdns_y_hist_num_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1b9:
    memcpy(mdns_y_hist_cmp_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ba:
    memcpy(mdns_y_hist_cmp_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1bb:
    memcpy(mdns_y_hist_cmp_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1bc:
    memcpy(mdns_y_hist_cmp_thres3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1bd:
    memcpy(mdns_y_hist_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1be:
    memcpy(mdns_y_hist_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1bf:
    memcpy(mdns_y_hist_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c0:
    memcpy(mdns_y_hist_thres3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c1:
    memcpy(mdns_y_edge_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c2:
    memcpy(mdns_y_luma_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c3:
    memcpy(mdns_y_dtb_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c4:
    memcpy(mdns_y_ass_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c5:
    memcpy(mdns_y_corner_thr_adj_value_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c6:
    memcpy(mdns_y_edge_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c7:
    memcpy(mdns_y_edge_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c8:
    memcpy(mdns_y_edge_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1c9:
    memcpy(mdns_y_edge_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ca:
    memcpy(mdns_y_edge_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1cb:
    memcpy(mdns_y_edge_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1cc:
    memcpy(mdns_y_luma_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1cd:
    memcpy(mdns_y_luma_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ce:
    memcpy(mdns_y_luma_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1cf:
    memcpy(mdns_y_luma_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d0:
    memcpy(mdns_y_luma_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d1:
    memcpy(mdns_y_luma_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d2:
    memcpy(mdns_y_dtb_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d3:
    memcpy(mdns_y_dtb_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d4:
    memcpy(mdns_y_dtb_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d5:
    memcpy(mdns_y_dtb_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d6:
    memcpy(mdns_y_dtb_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d7:
    memcpy(mdns_y_dtb_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d8:
    memcpy(mdns_y_ass_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1d9:
    memcpy(mdns_y_ass_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1da:
    memcpy(mdns_y_ass_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1db:
    memcpy(mdns_y_ass_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1dc:
    memcpy(mdns_y_ass_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1dd:
    memcpy(mdns_y_ass_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1de:
    memcpy(mdns_y_edge_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1df:
    memcpy(mdns_y_luma_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e0:
    memcpy(mdns_y_dtb_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e1:
    memcpy(mdns_y_ass_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e2:
    memcpy(mdns_y_sad_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e3:
    memcpy(mdns_y_corner_wei_adj_value_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e4:
    memcpy(mdns_y_edge_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e5:
    memcpy(mdns_y_edge_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e6:
    memcpy(mdns_y_edge_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e7:
    memcpy(mdns_y_edge_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e8:
    memcpy(mdns_y_edge_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1e9:
    memcpy(mdns_y_edge_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ea:
    memcpy(mdns_y_luma_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1eb:
    memcpy(mdns_y_luma_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ec:
    memcpy(mdns_y_luma_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ed:
    memcpy(mdns_y_luma_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ee:
    memcpy(mdns_y_luma_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ef:
    memcpy(mdns_y_luma_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f0:
    memcpy(mdns_y_dtb_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f1:
    memcpy(mdns_y_dtb_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f2:
    memcpy(mdns_y_dtb_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 499:
    memcpy(mdns_y_dtb_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 500:
    memcpy(mdns_y_dtb_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f5:
    memcpy(mdns_y_dtb_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f6:
    memcpy(mdns_y_ass_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f7:
    memcpy(mdns_y_ass_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f8:
    memcpy(mdns_y_ass_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1f9:
    memcpy(mdns_y_ass_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1fa:
    memcpy(mdns_y_ass_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1fb:
    memcpy(mdns_y_ass_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1fc:
    memcpy(mdns_y_sad_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1fd:
    memcpy(mdns_y_sad_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1fe:
    memcpy(mdns_y_sad_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x1ff:
    memcpy(mdns_y_sad_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x200:
    memcpy(mdns_y_sad_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x201:
    memcpy(mdns_y_sad_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x202:
    memcpy(mdns_y_sad_ave_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x203:
    memcpy(mdns_y_sad_ass_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x204:
    memcpy(mdns_y_sta_ave_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x205:
    memcpy(mdns_y_sta_ass_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x206:
    memcpy(mdns_y_sta_motion_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x207:
    memcpy(mdns_y_ref_wei_b_max_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x208:
    memcpy(mdns_y_ref_wei_b_min_wdr_array,param_2,0x24);
    tisp_mdns_all_reg_refresh(gain_old);
    tisp_mdns_reg_trigger();
    uVar1 = 0x24;
    break;
  case 0x209:
    memcpy(mdns_y_pspa_cur_median_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x20a:
    memcpy(mdns_y_pspa_cur_bi_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x20b:
    memcpy(mdns_y_pspa_cur_bi_wei_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x20c:
    memcpy(mdns_y_pspa_cur_bi_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x20d:
    memcpy(mdns_y_pspa_cur_bi_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x20e:
    memcpy(mdns_y_pspa_cur_bi_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x20f:
    memcpy(mdns_y_pspa_cur_bi_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x210:
    memcpy(mdns_y_pspa_cur_bi_wei4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x211:
    memcpy(mdns_y_pspa_cur_lmt_op_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x212:
    memcpy(mdns_y_pspa_cur_lmt_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x213:
    memcpy(mdns_y_pspa_ref_median_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x214:
    memcpy(mdns_y_pspa_ref_bi_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x215:
    memcpy(mdns_y_pspa_ref_bi_wei_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x216:
    memcpy(mdns_y_pspa_ref_bi_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x217:
    memcpy(mdns_y_pspa_ref_bi_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x218:
    memcpy(mdns_y_pspa_ref_bi_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x219:
    memcpy(mdns_y_pspa_ref_bi_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x21a:
    memcpy(mdns_y_pspa_ref_bi_wei4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x21b:
    memcpy(mdns_y_pspa_ref_lmt_op_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x21c:
    memcpy(mdns_y_pspa_ref_lmt_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x21d:
    memcpy(mdns_y_piir_edge_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x21e:
    memcpy(mdns_y_piir_edge_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x21f:
    memcpy(mdns_y_piir_edge_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x220:
    memcpy(mdns_y_piir_edge_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x221:
    memcpy(mdns_y_piir_edge_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x222:
    memcpy(mdns_y_piir_edge_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x223:
    memcpy(mdns_y_piir_edge_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x224:
    memcpy(mdns_y_piir_cur_fs_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x225:
    memcpy(mdns_y_piir_ref_fs_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x226:
    memcpy(mdns_y_pspa_fnl_fus_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x227:
    memcpy(mdns_y_pspa_fnl_fus_swei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x228:
    memcpy(mdns_y_pspa_fnl_fus_dwei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x229:
    memcpy(mdns_y_fspa_cur_fus_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x22a:
    memcpy(mdns_y_fspa_cur_fus_wei_0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x22b:
    memcpy(mdns_y_fspa_cur_fus_wei_16_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x22c:
    memcpy(mdns_y_fspa_cur_fus_wei_32_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x22d:
    memcpy(mdns_y_fspa_cur_fus_wei_48_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x22e:
    memcpy(mdns_y_fspa_cur_fus_wei_64_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x22f:
    memcpy(mdns_y_fspa_cur_fus_wei_80_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x230:
    memcpy(mdns_y_fspa_cur_fus_wei_96_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x231:
    memcpy(mdns_y_fspa_cur_fus_wei_112_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x232:
    memcpy(mdns_y_fspa_cur_fus_wei_128_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x233:
    memcpy(mdns_y_fspa_cur_fus_wei_144_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x234:
    memcpy(mdns_y_fspa_cur_fus_wei_160_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x235:
    memcpy(mdns_y_fspa_cur_fus_wei_176_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x236:
    memcpy(mdns_y_fspa_cur_fus_wei_192_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x237:
    memcpy(mdns_y_fspa_cur_fus_wei_208_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x238:
    memcpy(mdns_y_fspa_cur_fus_wei_224_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x239:
    memcpy(mdns_y_fspa_cur_fus_wei_240_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x23a:
    memcpy(mdns_y_fspa_ref_fus_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x23b:
    memcpy(mdns_y_fspa_ref_fus_wei_0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x23c:
    memcpy(mdns_y_fspa_ref_fus_wei_16_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x23d:
    memcpy(mdns_y_fspa_ref_fus_wei_32_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x23e:
    memcpy(mdns_y_fspa_ref_fus_wei_48_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x23f:
    memcpy(mdns_y_fspa_ref_fus_wei_64_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x240:
    memcpy(mdns_y_fspa_ref_fus_wei_80_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x241:
    memcpy(mdns_y_fspa_ref_fus_wei_96_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x242:
    memcpy(mdns_y_fspa_ref_fus_wei_112_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x243:
    memcpy(mdns_y_fspa_ref_fus_wei_128_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x244:
    memcpy(mdns_y_fspa_ref_fus_wei_144_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x245:
    memcpy(mdns_y_fspa_ref_fus_wei_160_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x246:
    memcpy(mdns_y_fspa_ref_fus_wei_176_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x247:
    memcpy(mdns_y_fspa_ref_fus_wei_192_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x248:
    memcpy(mdns_y_fspa_ref_fus_wei_208_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x249:
    memcpy(mdns_y_fspa_ref_fus_wei_224_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x24a:
    memcpy(mdns_y_fspa_ref_fus_wei_240_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x24b:
    memcpy(mdns_y_fiir_edge_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x24c:
    memcpy(mdns_y_fiir_edge_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x24d:
    memcpy(mdns_y_fiir_edge_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x24e:
    memcpy(mdns_y_fiir_edge_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x24f:
    memcpy(mdns_y_fiir_edge_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x250:
    memcpy(mdns_y_fiir_edge_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x251:
    memcpy(mdns_y_fiir_edge_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x252:
    memcpy(mdns_y_fiir_fus_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x253:
    memcpy(mdns_y_fiir_fus_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x254:
    memcpy(mdns_y_fiir_fus_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x255:
    memcpy(mdns_y_fiir_fus_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x256:
    memcpy(mdns_y_fiir_fus_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 599:
    memcpy(mdns_y_fiir_fus_wei4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 600:
    memcpy(mdns_y_fiir_fus_wei5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x259:
    memcpy(mdns_y_fiir_fus_wei6_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x25a:
    memcpy(mdns_y_fiir_fus_wei7_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x25b:
    memcpy(mdns_y_fiir_fus_wei8_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x25c:
    memcpy(mdns_y_con_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x25d:
    memcpy(mdns_y_con_stren_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x25e:
    memcpy(mdns_y_pspa_cur_median_win_opt_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x25f:
    memcpy(mdns_y_pspa_cur_bi_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x260:
    memcpy(mdns_y_pspa_cur_bi_wei0_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x261:
    memcpy(mdns_y_pspa_ref_median_win_opt_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x262:
    memcpy(mdns_y_pspa_ref_bi_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x263:
    memcpy(mdns_y_pspa_ref_bi_wei0_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x264:
    memcpy(mdns_y_piir_cur_fs_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x265:
    memcpy(mdns_y_piir_ref_fs_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x266:
    memcpy(mdns_y_fspa_cur_fus_wei_144_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x267:
    memcpy(mdns_y_fspa_cur_fus_wei_160_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x268:
    memcpy(mdns_y_fspa_cur_fus_wei_176_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x269:
    memcpy(mdns_y_fspa_cur_fus_wei_192_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x26a:
    memcpy(mdns_y_fspa_cur_fus_wei_208_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x26b:
    memcpy(mdns_y_fspa_cur_fus_wei_224_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x26c:
    memcpy(mdns_y_fspa_cur_fus_wei_240_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x26d:
    memcpy(mdns_y_fspa_ref_fus_wei_144_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x26e:
    memcpy(mdns_y_fspa_ref_fus_wei_160_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x26f:
    memcpy(mdns_y_fspa_ref_fus_wei_176_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x270:
    memcpy(mdns_y_fspa_ref_fus_wei_192_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x271:
    memcpy(mdns_y_fspa_ref_fus_wei_208_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x272:
    memcpy(mdns_y_fspa_ref_fus_wei_224_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x273:
    memcpy(mdns_y_fspa_ref_fus_wei_240_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x274:
    memcpy(mdns_y_fiir_fus_wei0_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x275:
    memcpy(mdns_y_fiir_fus_wei1_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x276:
    memcpy(mdns_y_fiir_fus_wei2_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x277:
    memcpy(mdns_y_fiir_fus_wei3_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x278:
    memcpy(mdns_y_fiir_fus_wei4_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x279:
    memcpy(mdns_y_fiir_fus_wei5_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x27a:
    memcpy(mdns_y_fiir_fus_wei6_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x27b:
    memcpy(mdns_y_fiir_fus_wei7_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x27c:
    memcpy(mdns_y_fiir_fus_wei8_wdr_array,param_2,0x24);
    tisp_mdns_all_reg_refresh(gain_old);
    tisp_mdns_reg_trigger();
    uVar1 = 0x24;
    break;
  case 0x27d:
    memcpy(mdns_c_sad_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x27e:
    memcpy(mdns_c_sad_ave_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x27f:
    memcpy(mdns_c_sad_ave_slope_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x280:
    memcpy(mdns_c_sad_dtb_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x281:
    memcpy(mdns_c_sad_ass_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x282:
    memcpy(mdns_c_ref_wei_mv_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x283:
    memcpy(mdns_c_ref_wei_fake_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x284:
    memcpy(mdns_c_ref_wei_f_max_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x285:
    memcpy(mdns_c_ref_wei_f_min_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x286:
    memcpy(mdns_c_ref_wei_b_max_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x287:
    memcpy(mdns_c_ref_wei_b_min_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x288:
    memcpy(mdns_c_ref_wei_r_max_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x289:
    memcpy(mdns_c_ref_wei_r_min_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x28a:
    memcpy(mdns_c_ref_wei_increase_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x28b:
    memcpy(mdns_c_edge_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x28c:
    memcpy(mdns_c_luma_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x28d:
    memcpy(mdns_c_dtb_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x28e:
    memcpy(mdns_c_ass_thr_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x28f:
    memcpy(mdns_c_corner_thr_adj_value_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x290:
    memcpy(mdns_c_edge_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x291:
    memcpy(mdns_c_edge_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x292:
    memcpy(mdns_c_edge_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x293:
    memcpy(mdns_c_edge_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x294:
    memcpy(mdns_c_edge_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x295:
    memcpy(mdns_c_edge_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x296:
    memcpy(mdns_c_luma_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x297:
    memcpy(mdns_c_luma_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x298:
    memcpy(mdns_c_luma_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x299:
    memcpy(mdns_c_luma_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x29a:
    memcpy(mdns_c_luma_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x29b:
    memcpy(mdns_c_luma_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x29c:
    memcpy(mdns_c_dtb_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x29d:
    memcpy(mdns_c_dtb_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x29e:
    memcpy(mdns_c_dtb_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x29f:
    memcpy(mdns_c_dtb_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a0:
    memcpy(mdns_c_dtb_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a1:
    memcpy(mdns_c_dtb_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a2:
    memcpy(mdns_c_ass_thr_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a3:
    memcpy(mdns_c_ass_thr_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a4:
    memcpy(mdns_c_ass_thr_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a5:
    memcpy(mdns_c_ass_thr_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a6:
    memcpy(mdns_c_ass_thr_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a7:
    memcpy(mdns_c_ass_thr_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a8:
    memcpy(mdns_c_edge_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2a9:
    memcpy(mdns_c_luma_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2aa:
    memcpy(mdns_c_dtb_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ab:
    memcpy(mdns_c_ass_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ac:
    memcpy(mdns_c_sad_wei_adj_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ad:
    memcpy(mdns_c_corner_wei_adj_value_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ae:
    memcpy(mdns_c_edge_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2af:
    memcpy(mdns_c_edge_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b0:
    memcpy(mdns_c_edge_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b1:
    memcpy(mdns_c_edge_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b2:
    memcpy(mdns_c_edge_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b3:
    memcpy(mdns_c_edge_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b4:
    memcpy(mdns_c_luma_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b5:
    memcpy(mdns_c_luma_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b6:
    memcpy(mdns_c_luma_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b7:
    memcpy(mdns_c_luma_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b8:
    memcpy(mdns_c_luma_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2b9:
    memcpy(mdns_c_luma_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ba:
    memcpy(mdns_c_dtb_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 699:
    memcpy(mdns_c_dtb_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 700:
    memcpy(mdns_c_dtb_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2bd:
    memcpy(mdns_c_dtb_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2be:
    memcpy(mdns_c_dtb_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2bf:
    memcpy(mdns_c_dtb_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c0:
    memcpy(mdns_c_ass_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c1:
    memcpy(mdns_c_ass_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c2:
    memcpy(mdns_c_ass_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c3:
    memcpy(mdns_c_ass_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c4:
    memcpy(mdns_c_ass_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c5:
    memcpy(mdns_c_ass_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c6:
    memcpy(mdns_c_sad_wei_adj_value0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c7:
    memcpy(mdns_c_sad_wei_adj_value1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c8:
    memcpy(mdns_c_sad_wei_adj_value2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2c9:
    memcpy(mdns_c_sad_wei_adj_value3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ca:
    memcpy(mdns_c_sad_wei_adj_value4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2cb:
    memcpy(mdns_c_sad_wei_adj_value5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2cc:
    memcpy(mdns_c_sad_ave_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2cd:
    memcpy(mdns_c_sad_ass_thres_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ce:
    memcpy(mdns_c_ref_wei_b_max_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2cf:
    memcpy(mdns_c_ref_wei_b_min_wdr_array,param_2,0x24);
    tisp_mdns_all_reg_refresh(gain_old);
    tisp_mdns_reg_trigger();
    uVar1 = 0x24;
    break;
  case 0x2d0:
    memcpy(mdns_c_median_smj_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d1:
    memcpy(mdns_c_median_edg_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d2:
    memcpy(mdns_c_median_cur_lmt_op_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d3:
    memcpy(mdns_c_median_cur_lmt_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d4:
    memcpy(mdns_c_median_cur_ss_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d5:
    memcpy(mdns_c_median_cur_se_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d6:
    memcpy(mdns_c_median_cur_ms_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d7:
    memcpy(mdns_c_median_cur_me_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d8:
    memcpy(mdns_c_median_ref_lmt_op_en_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2d9:
    memcpy(mdns_c_median_ref_lmt_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2da:
    memcpy(mdns_c_median_ref_ss_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2db:
    memcpy(mdns_c_median_ref_se_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2dc:
    memcpy(mdns_c_median_ref_ms_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2dd:
    memcpy(mdns_c_median_ref_me_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2de:
    memcpy(mdns_c_bgm_win_opt_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2df:
    memcpy(mdns_c_bgm_cur_src_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e0:
    memcpy(mdns_c_bgm_ref_src_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e1:
    memcpy(mdns_c_bgm_false_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e2:
    memcpy(mdns_c_bgm_false_step_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e3:
    memcpy(mdns_c_piir_edge_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e4:
    memcpy(mdns_c_piir_edge_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e5:
    memcpy(mdns_c_piir_edge_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e6:
    memcpy(mdns_c_piir_edge_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e7:
    memcpy(mdns_c_piir_edge_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e8:
    memcpy(mdns_c_piir_edge_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2e9:
    memcpy(mdns_c_piir_edge_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ea:
    memcpy(mdns_c_piir_cur_fs_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2eb:
    memcpy(mdns_c_piir_ref_fs_wei_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ec:
    memcpy(mdns_c_fspa_cur_fus_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ed:
    memcpy(mdns_c_fspa_cur_fus_wei_0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ee:
    memcpy(mdns_c_fspa_cur_fus_wei_16_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ef:
    memcpy(mdns_c_fspa_cur_fus_wei_32_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f0:
    memcpy(mdns_c_fspa_cur_fus_wei_48_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f1:
    memcpy(mdns_c_fspa_cur_fus_wei_64_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f2:
    memcpy(mdns_c_fspa_cur_fus_wei_80_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f3:
    memcpy(mdns_c_fspa_cur_fus_wei_96_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f4:
    memcpy(mdns_c_fspa_cur_fus_wei_112_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f5:
    memcpy(mdns_c_fspa_cur_fus_wei_128_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f6:
    memcpy(mdns_c_fspa_cur_fus_wei_144_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f7:
    memcpy(mdns_c_fspa_cur_fus_wei_160_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f8:
    memcpy(mdns_c_fspa_cur_fus_wei_176_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2f9:
    memcpy(mdns_c_fspa_cur_fus_wei_192_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2fa:
    memcpy(mdns_c_fspa_cur_fus_wei_208_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2fb:
    memcpy(mdns_c_fspa_cur_fus_wei_224_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2fc:
    memcpy(mdns_c_fspa_cur_fus_wei_240_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2fd:
    memcpy(mdns_c_fspa_ref_fus_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2fe:
    memcpy(mdns_c_fspa_ref_fus_wei_0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x2ff:
    memcpy(mdns_c_fspa_ref_fus_wei_16_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x300:
    memcpy(mdns_c_fspa_ref_fus_wei_32_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x301:
    memcpy(mdns_c_fspa_ref_fus_wei_48_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x302:
    memcpy(mdns_c_fspa_ref_fus_wei_64_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x303:
    memcpy(mdns_c_fspa_ref_fus_wei_80_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x304:
    memcpy(mdns_c_fspa_ref_fus_wei_96_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x305:
    memcpy(mdns_c_fspa_ref_fus_wei_112_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x306:
    memcpy(mdns_c_fspa_ref_fus_wei_128_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x307:
    memcpy(mdns_c_fspa_ref_fus_wei_144_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x308:
    memcpy(mdns_c_fspa_ref_fus_wei_160_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x309:
    memcpy(mdns_c_fspa_ref_fus_wei_176_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x30a:
    memcpy(mdns_c_fspa_ref_fus_wei_192_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x30b:
    memcpy(mdns_c_fspa_ref_fus_wei_208_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x30c:
    memcpy(mdns_c_fspa_ref_fus_wei_224_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x30d:
    memcpy(mdns_c_fspa_ref_fus_wei_240_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x30e:
    memcpy(mdns_c_fiir_edge_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x30f:
    memcpy(mdns_c_fiir_edge_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x310:
    memcpy(mdns_c_fiir_edge_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x311:
    memcpy(mdns_c_fiir_edge_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x312:
    memcpy(mdns_c_fiir_edge_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x313:
    memcpy(mdns_c_fiir_edge_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x314:
    memcpy(mdns_c_fiir_edge_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x315:
    memcpy(mdns_c_fiir_fus_seg_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x316:
    memcpy(mdns_c_fiir_fus_wei0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x317:
    memcpy(mdns_c_fiir_fus_wei1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x318:
    memcpy(mdns_c_fiir_fus_wei2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x319:
    memcpy(mdns_c_fiir_fus_wei3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x31a:
    memcpy(mdns_c_fiir_fus_wei4_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x31b:
    memcpy(mdns_c_fiir_fus_wei5_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x31c:
    memcpy(mdns_c_fiir_fus_wei6_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x31d:
    memcpy(mdns_c_fiir_fus_wei7_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x31e:
    memcpy(mdns_c_fiir_fus_wei8_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 799:
    memcpy(mdns_c_false_smj_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 800:
    memcpy(mdns_c_false_edg_thres0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x321:
    memcpy(mdns_c_false_edg_thres1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x322:
    memcpy(mdns_c_false_edg_thres2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x323:
    memcpy(mdns_c_false_thres_s0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x324:
    memcpy(mdns_c_false_thres_s1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x325:
    memcpy(mdns_c_false_thres_s2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x326:
    memcpy(mdns_c_false_thres_s3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x327:
    memcpy(mdns_c_false_step_s0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x328:
    memcpy(mdns_c_false_step_s1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x329:
    memcpy(mdns_c_false_step_s2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x32a:
    memcpy(mdns_c_false_step_s3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x32b:
    memcpy(mdns_c_false_thres_m0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x32c:
    memcpy(mdns_c_false_thres_m1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x32d:
    memcpy(mdns_c_false_thres_m2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x32e:
    memcpy(mdns_c_false_thres_m3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x32f:
    memcpy(mdns_c_false_step_m0_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x330:
    memcpy(mdns_c_false_step_m1_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x331:
    memcpy(mdns_c_false_step_m2_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x332:
    memcpy(mdns_c_false_step_m3_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x333:
    memcpy(mdns_c_sat_lmt_thres_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x334:
    memcpy(mdns_c_sat_lmt_stren_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x335:
    memcpy(mdns_c_median_cur_ss_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x336:
    memcpy(mdns_c_median_cur_se_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x337:
    memcpy(mdns_c_median_cur_ms_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x338:
    memcpy(mdns_c_median_cur_me_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x339:
    memcpy(mdns_c_median_ref_ss_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x33a:
    memcpy(mdns_c_median_ref_se_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x33b:
    memcpy(mdns_c_median_ref_ms_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x33c:
    memcpy(mdns_c_median_ref_me_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x33d:
    memcpy(mdns_c_piir_cur_fs_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x33e:
    memcpy(mdns_c_piir_ref_fs_wei_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x33f:
    memcpy(mdns_c_fspa_cur_fus_wei_144_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x340:
    memcpy(mdns_c_fspa_cur_fus_wei_160_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x341:
    memcpy(mdns_c_fspa_cur_fus_wei_176_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x342:
    memcpy(mdns_c_fspa_cur_fus_wei_192_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x343:
    memcpy(mdns_c_fspa_cur_fus_wei_208_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x344:
    memcpy(mdns_c_fspa_cur_fus_wei_224_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x345:
    memcpy(mdns_c_fspa_cur_fus_wei_240_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x346:
    memcpy(mdns_c_fspa_ref_fus_wei_144_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x347:
    memcpy(mdns_c_fspa_ref_fus_wei_160_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x348:
    memcpy(mdns_c_fspa_ref_fus_wei_176_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x349:
    memcpy(mdns_c_fspa_ref_fus_wei_192_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x34a:
    memcpy(mdns_c_fspa_ref_fus_wei_208_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x34b:
    memcpy(mdns_c_fspa_ref_fus_wei_224_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x34c:
    memcpy(mdns_c_fspa_ref_fus_wei_240_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x34d:
    memcpy(mdns_c_fiir_fus_wei0_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x34e:
    memcpy(mdns_c_fiir_fus_wei1_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x34f:
    memcpy(mdns_c_fiir_fus_wei2_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x350:
    memcpy(mdns_c_fiir_fus_wei3_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x351:
    memcpy(mdns_c_fiir_fus_wei4_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x352:
    memcpy(mdns_c_fiir_fus_wei5_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x353:
    memcpy(mdns_c_fiir_fus_wei6_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x354:
    memcpy(mdns_c_fiir_fus_wei7_wdr_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  case 0x355:
    memcpy(mdns_c_fiir_fus_wei8_wdr_array,param_2,0x24);
    tisp_mdns_all_reg_refresh(gain_old);
    tisp_mdns_reg_trigger();
    uVar1 = 0x24;
    break;
  case 0x356:
    memcpy(mdns_c_sat_nml_stren_array,param_2,0x24);
    uVar1 = 0x24;
    break;
  default:
    isp_printf(2,"%s,%d: mdns not support param id %d\n","tisp_mdns_param_array_set",0x20b4,param_1)
    ;
    return 0xffffffff;
  }
  *param_3 = uVar1;
  return 0;
}



int tisp_s_mdns_ratio(unsigned int param_1)

{
  bool bVar1;
  int iVar2;
  unsigned int *puVar3;
  unsigned int uVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  unsigned int *puVar8;
  
  iVar2 = mdns_wdr_en;
  iVar7 = param_1 - 0x80;
  puVar3 = (unsigned int *)&DAT_000a1068;
  iVar6 = 0;
  bVar1 = param_1 < 0x81;
  mdns_ratio = param_1;
  do {
    if (iVar2 == 0) {
      uVar4 = puVar3[-0x434];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sad_ave_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x3fe];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sta_ave_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x419];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sad_ass_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x3ec];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sta_ass_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x37b];
    }
    else {
      uVar4 = puVar3[-0x36];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sad_ave_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x24];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sta_ave_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x2d];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sad_ass_thres_array_now + iVar6) = uVar4;
      uVar4 = puVar3[-0x1b];
      if (bVar1) {
        uVar4 = param_1 * uVar4 >> 7;
      }
      else {
        iVar5 = 200 - uVar4;
        if (199 < uVar4) {
          iVar5 = 0;
        }
        uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
      }
      *(unsigned int *)(mdns_y_sta_ass_thres_array_now + iVar6) = uVar4;
      uVar4 = *puVar3;
    }
    puVar8 = (unsigned int *)(mdns_y_ref_wei_b_min_array_now + iVar6);
    if (bVar1) {
      uVar4 = param_1 * uVar4 >> 7;
    }
    else {
      iVar5 = 200 - uVar4;
      if (199 < uVar4) {
        iVar5 = 0;
      }
      uVar4 = ((uint)(iVar5 * iVar7) >> 7) + uVar4;
    }
    iVar6 = iVar6 + 4;
    *puVar8 = uVar4;
    puVar3 = puVar3 + 1;
  } while (iVar6 != 0x24);
  tisp_mdns_all_reg_refresh(gain_old);
  system_reg_write(0x7804,0x111);
  return 0;
}



int tisp_mdns_wdr_en(int param_1)

{
  bool bVar1;
  unsigned int uVar2;
  unsigned int *puVar3;
  char *puVar4;
  unsigned int uVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  unsigned int *puVar9;
  
  uVar2 = mdns_ratio;
  if (param_1 == 0) {
    mdns_y_sad_ave_thres_array_now = (char *)&mdns_y_sad_ave_thres_array;
    mdns_y_sad_ass_thres_array_now = (char *)&mdns_y_sad_ass_thres_array;
    mdns_y_sta_ave_thres_array_now = (char *)&mdns_y_sta_ave_thres_array;
    mdns_y_sta_ass_thres_array_now = (char *)&mdns_y_sta_ass_thres_array;
    mdns_y_sta_motion_thres_array_now = mdns_y_sta_motion_thres_array;
    mdns_y_ref_wei_b_max_array_now = mdns_y_ref_wei_b_max_array;
    mdns_y_ref_wei_b_min_array_now = (char *)&mdns_y_ref_wei_b_min_array;
    mdns_y_pspa_cur_median_win_opt_array_now = mdns_y_pspa_cur_median_win_opt_array;
    mdns_y_pspa_cur_bi_thres_array_now = mdns_y_pspa_cur_bi_thres_array;
    mdns_y_pspa_cur_bi_wei0_array_now = mdns_y_pspa_cur_bi_wei0_array;
    mdns_y_pspa_ref_median_win_opt_array_now = mdns_y_pspa_ref_median_win_opt_array;
    mdns_y_pspa_ref_bi_thres_array_now = mdns_y_pspa_ref_bi_thres_array;
    mdns_y_pspa_ref_bi_wei0_array_now = mdns_y_pspa_ref_bi_wei0_array;
    mdns_y_piir_cur_fs_wei_array_now = mdns_y_piir_cur_fs_wei_array;
    mdns_y_piir_ref_fs_wei_array_now = mdns_y_piir_ref_fs_wei_array;
    mdns_y_fspa_cur_fus_wei_144_array_now = mdns_y_fspa_cur_fus_wei_144_array;
    mdns_y_fspa_cur_fus_wei_160_array_now = mdns_y_fspa_cur_fus_wei_160_array;
    mdns_y_fspa_cur_fus_wei_176_array_now = mdns_y_fspa_cur_fus_wei_176_array;
    mdns_y_fspa_cur_fus_wei_192_array_now = mdns_y_fspa_cur_fus_wei_192_array;
    mdns_y_fspa_cur_fus_wei_208_array_now = mdns_y_fspa_cur_fus_wei_208_array;
    mdns_y_fspa_cur_fus_wei_224_array_now = mdns_y_fspa_cur_fus_wei_224_array;
    mdns_y_fspa_cur_fus_wei_240_array_now = mdns_y_fspa_cur_fus_wei_240_array;
    mdns_y_fspa_ref_fus_wei_144_array_now = mdns_y_fspa_ref_fus_wei_144_array;
    mdns_y_fspa_ref_fus_wei_160_array_now = mdns_y_fspa_ref_fus_wei_160_array;
    mdns_y_fspa_ref_fus_wei_176_array_now = mdns_y_fspa_ref_fus_wei_176_array;
    mdns_y_fspa_ref_fus_wei_192_array_now = mdns_y_fspa_ref_fus_wei_192_array;
    mdns_y_fspa_ref_fus_wei_208_array_now = mdns_y_fspa_ref_fus_wei_208_array;
    mdns_y_fspa_ref_fus_wei_224_array_now = mdns_y_fspa_ref_fus_wei_224_array;
    mdns_y_fspa_ref_fus_wei_240_array_now = mdns_y_fspa_ref_fus_wei_240_array;
    mdns_y_fiir_fus_wei0_array_now = mdns_y_fiir_fus_wei0_array;
    mdns_y_fiir_fus_wei1_array_now = mdns_y_fiir_fus_wei1_array;
    mdns_y_fiir_fus_wei2_array_now = mdns_y_fiir_fus_wei2_array;
    mdns_y_fiir_fus_wei3_array_now = mdns_y_fiir_fus_wei3_array;
    mdns_y_fiir_fus_wei4_array_now = mdns_y_fiir_fus_wei4_array;
    mdns_y_fiir_fus_wei5_array_now = mdns_y_fiir_fus_wei5_array;
    mdns_y_fiir_fus_wei6_array_now = mdns_y_fiir_fus_wei6_array;
    mdns_y_fiir_fus_wei7_array_now = mdns_y_fiir_fus_wei7_array;
    mdns_y_fiir_fus_wei8_array_now = mdns_y_fiir_fus_wei8_array;
    mdns_c_sad_ave_thres_array_now = mdns_c_sad_ave_thres_array;
    mdns_c_sad_ass_thres_array_now = mdns_c_sad_ass_thres_array;
    mdns_c_ref_wei_b_max_array_now = mdns_c_ref_wei_b_max_array;
    mdns_c_ref_wei_b_min_array_now = mdns_c_ref_wei_b_min_array;
    mdns_c_median_cur_ss_wei_array_now = mdns_c_median_cur_ss_wei_array;
    mdns_c_median_cur_se_wei_array_now = mdns_c_median_cur_se_wei_array;
    mdns_c_median_cur_ms_wei_array_now = mdns_c_median_cur_ms_wei_array;
    mdns_c_median_cur_me_wei_array_now = mdns_c_median_cur_me_wei_array;
    mdns_c_median_ref_ss_wei_array_now = mdns_c_median_ref_ss_wei_array;
    mdns_c_median_ref_se_wei_array_now = mdns_c_median_ref_se_wei_array;
    mdns_c_median_ref_ms_wei_array_now = mdns_c_median_ref_ms_wei_array;
    mdns_c_median_ref_me_wei_array_now = mdns_c_median_ref_me_wei_array;
    mdns_c_piir_cur_fs_wei_array_now = mdns_c_piir_cur_fs_wei_array;
    mdns_c_piir_ref_fs_wei_array_now = mdns_c_piir_ref_fs_wei_array;
    mdns_c_fspa_cur_fus_wei_144_array_now = mdns_c_fspa_cur_fus_wei_144_array;
    mdns_c_fspa_cur_fus_wei_160_array_now = mdns_c_fspa_cur_fus_wei_160_array;
    mdns_c_fspa_cur_fus_wei_176_array_now = mdns_c_fspa_cur_fus_wei_176_array;
    mdns_c_fspa_cur_fus_wei_192_array_now = mdns_c_fspa_cur_fus_wei_192_array;
    mdns_c_fspa_cur_fus_wei_208_array_now = mdns_c_fspa_cur_fus_wei_208_array;
    mdns_c_fspa_cur_fus_wei_224_array_now = mdns_c_fspa_cur_fus_wei_224_array;
    mdns_c_fspa_cur_fus_wei_240_array_now = mdns_c_fspa_cur_fus_wei_240_array;
    mdns_c_fspa_ref_fus_wei_144_array_now = mdns_c_fspa_ref_fus_wei_144_array;
    mdns_c_fspa_ref_fus_wei_160_array_now = mdns_c_fspa_ref_fus_wei_160_array;
    mdns_c_fspa_ref_fus_wei_176_array_now = mdns_c_fspa_ref_fus_wei_176_array;
    mdns_c_fspa_ref_fus_wei_192_array_now = mdns_c_fspa_ref_fus_wei_192_array;
    mdns_c_fspa_ref_fus_wei_208_array_now = mdns_c_fspa_ref_fus_wei_208_array;
    mdns_c_fspa_ref_fus_wei_224_array_now = mdns_c_fspa_ref_fus_wei_224_array;
    mdns_c_fspa_ref_fus_wei_240_array_now = mdns_c_fspa_ref_fus_wei_240_array;
    mdns_c_fiir_fus_wei0_array_now = mdns_c_fiir_fus_wei0_array;
    mdns_c_fiir_fus_wei1_array_now = mdns_c_fiir_fus_wei1_array;
    mdns_c_fiir_fus_wei2_array_now = mdns_c_fiir_fus_wei2_array;
    mdns_c_fiir_fus_wei3_array_now = mdns_c_fiir_fus_wei3_array;
    mdns_c_fiir_fus_wei4_array_now = mdns_c_fiir_fus_wei4_array;
    mdns_c_fiir_fus_wei5_array_now = mdns_c_fiir_fus_wei5_array;
    mdns_c_fiir_fus_wei6_array_now = mdns_c_fiir_fus_wei6_array;
    mdns_c_fiir_fus_wei7_array_now = mdns_c_fiir_fus_wei7_array;
    puVar4 = mdns_c_fiir_fus_wei8_array;
  }
  else {
    mdns_y_sad_ave_thres_array_now = mdns_y_sad_ave_thres_wdr_array;
    mdns_y_sad_ass_thres_array_now = mdns_y_sad_ass_thres_wdr_array;
    mdns_y_sta_ave_thres_array_now = mdns_y_sta_ave_thres_wdr_array;
    mdns_y_sta_ass_thres_array_now = mdns_y_sta_ass_thres_wdr_array;
    mdns_y_sta_motion_thres_array_now = mdns_y_sta_motion_thres_wdr_array;
    mdns_y_ref_wei_b_max_array_now = mdns_y_ref_wei_b_max_wdr_array;
    mdns_y_ref_wei_b_min_array_now = mdns_y_ref_wei_b_min_wdr_array;
    mdns_y_pspa_cur_median_win_opt_array_now = mdns_y_pspa_cur_median_win_opt_wdr_array;
    mdns_y_pspa_cur_bi_thres_array_now = mdns_y_pspa_cur_bi_thres_wdr_array;
    mdns_y_pspa_cur_bi_wei0_array_now = mdns_y_pspa_cur_bi_wei0_wdr_array;
    mdns_y_pspa_ref_median_win_opt_array_now = mdns_y_pspa_ref_median_win_opt_wdr_array;
    mdns_y_pspa_ref_bi_thres_array_now = mdns_y_pspa_ref_bi_thres_wdr_array;
    mdns_y_pspa_ref_bi_wei0_array_now = mdns_y_pspa_ref_bi_wei0_wdr_array;
    mdns_y_piir_cur_fs_wei_array_now = mdns_y_piir_cur_fs_wei_wdr_array;
    mdns_y_piir_ref_fs_wei_array_now = mdns_y_piir_ref_fs_wei_wdr_array;
    mdns_y_fspa_cur_fus_wei_144_array_now = mdns_y_fspa_cur_fus_wei_144_wdr_array;
    mdns_y_fspa_cur_fus_wei_160_array_now = mdns_y_fspa_cur_fus_wei_160_wdr_array;
    mdns_y_fspa_cur_fus_wei_176_array_now = mdns_y_fspa_cur_fus_wei_176_wdr_array;
    mdns_y_fspa_cur_fus_wei_192_array_now = mdns_y_fspa_cur_fus_wei_192_wdr_array;
    mdns_y_fspa_cur_fus_wei_208_array_now = mdns_y_fspa_cur_fus_wei_208_wdr_array;
    mdns_y_fspa_cur_fus_wei_224_array_now = mdns_y_fspa_cur_fus_wei_224_wdr_array;
    mdns_y_fspa_cur_fus_wei_240_array_now = mdns_y_fspa_cur_fus_wei_240_wdr_array;
    mdns_y_fspa_ref_fus_wei_144_array_now = mdns_y_fspa_ref_fus_wei_144_wdr_array;
    mdns_y_fspa_ref_fus_wei_160_array_now = mdns_y_fspa_ref_fus_wei_160_wdr_array;
    mdns_y_fspa_ref_fus_wei_176_array_now = mdns_y_fspa_ref_fus_wei_176_wdr_array;
    mdns_y_fspa_ref_fus_wei_192_array_now = mdns_y_fspa_ref_fus_wei_192_wdr_array;
    mdns_y_fspa_ref_fus_wei_208_array_now = mdns_y_fspa_ref_fus_wei_208_wdr_array;
    mdns_y_fspa_ref_fus_wei_224_array_now = mdns_y_fspa_ref_fus_wei_224_wdr_array;
    mdns_y_fspa_ref_fus_wei_240_array_now = mdns_y_fspa_ref_fus_wei_240_wdr_array;
    mdns_y_fiir_fus_wei0_array_now = mdns_y_fiir_fus_wei0_wdr_array;
    mdns_y_fiir_fus_wei1_array_now = mdns_y_fiir_fus_wei1_wdr_array;
    mdns_y_fiir_fus_wei2_array_now = mdns_y_fiir_fus_wei2_wdr_array;
    mdns_y_fiir_fus_wei3_array_now = mdns_y_fiir_fus_wei3_wdr_array;
    mdns_y_fiir_fus_wei4_array_now = mdns_y_fiir_fus_wei4_wdr_array;
    mdns_y_fiir_fus_wei5_array_now = mdns_y_fiir_fus_wei5_wdr_array;
    mdns_y_fiir_fus_wei6_array_now = mdns_y_fiir_fus_wei6_wdr_array;
    mdns_y_fiir_fus_wei7_array_now = mdns_y_fiir_fus_wei7_wdr_array;
    mdns_y_fiir_fus_wei8_array_now = mdns_y_fiir_fus_wei8_wdr_array;
    mdns_c_sad_ave_thres_array_now = mdns_c_sad_ave_thres_wdr_array;
    mdns_c_sad_ass_thres_array_now = mdns_c_sad_ass_thres_wdr_array;
    mdns_c_ref_wei_b_max_array_now = mdns_c_ref_wei_b_max_wdr_array;
    mdns_c_ref_wei_b_min_array_now = mdns_c_ref_wei_b_min_wdr_array;
    mdns_c_median_cur_ss_wei_array_now = mdns_c_median_cur_ss_wei_wdr_array;
    mdns_c_median_cur_se_wei_array_now = mdns_c_median_cur_se_wei_wdr_array;
    mdns_c_median_cur_ms_wei_array_now = mdns_c_median_cur_ms_wei_wdr_array;
    mdns_c_median_cur_me_wei_array_now = mdns_c_median_cur_me_wei_wdr_array;
    mdns_c_median_ref_ss_wei_array_now = mdns_c_median_ref_ss_wei_wdr_array;
    mdns_c_median_ref_se_wei_array_now = mdns_c_median_ref_se_wei_wdr_array;
    mdns_c_median_ref_ms_wei_array_now = mdns_c_median_ref_ms_wei_wdr_array;
    mdns_c_median_ref_me_wei_array_now = mdns_c_median_ref_me_wei_wdr_array;
    mdns_c_piir_cur_fs_wei_array_now = mdns_c_piir_cur_fs_wei_wdr_array;
    mdns_c_piir_ref_fs_wei_array_now = mdns_c_piir_ref_fs_wei_wdr_array;
    mdns_c_fspa_cur_fus_wei_144_array_now = mdns_c_fspa_cur_fus_wei_144_wdr_array;
    mdns_c_fspa_cur_fus_wei_160_array_now = mdns_c_fspa_cur_fus_wei_160_wdr_array;
    mdns_c_fspa_cur_fus_wei_176_array_now = mdns_c_fspa_cur_fus_wei_176_wdr_array;
    mdns_c_fspa_cur_fus_wei_192_array_now = mdns_c_fspa_cur_fus_wei_192_wdr_array;
    mdns_c_fspa_cur_fus_wei_208_array_now = mdns_c_fspa_cur_fus_wei_208_wdr_array;
    mdns_c_fspa_cur_fus_wei_224_array_now = mdns_c_fspa_cur_fus_wei_224_wdr_array;
    mdns_c_fspa_cur_fus_wei_240_array_now = mdns_c_fspa_cur_fus_wei_240_wdr_array;
    mdns_c_fspa_ref_fus_wei_144_array_now = mdns_c_fspa_ref_fus_wei_144_wdr_array;
    mdns_c_fspa_ref_fus_wei_160_array_now = mdns_c_fspa_ref_fus_wei_160_wdr_array;
    mdns_c_fspa_ref_fus_wei_176_array_now = mdns_c_fspa_ref_fus_wei_176_wdr_array;
    mdns_c_fspa_ref_fus_wei_192_array_now = mdns_c_fspa_ref_fus_wei_192_wdr_array;
    mdns_c_fspa_ref_fus_wei_208_array_now = mdns_c_fspa_ref_fus_wei_208_wdr_array;
    mdns_c_fspa_ref_fus_wei_224_array_now = mdns_c_fspa_ref_fus_wei_224_wdr_array;
    mdns_c_fspa_ref_fus_wei_240_array_now = mdns_c_fspa_ref_fus_wei_240_wdr_array;
    mdns_c_fiir_fus_wei0_array_now = mdns_c_fiir_fus_wei0_wdr_array;
    mdns_c_fiir_fus_wei1_array_now = mdns_c_fiir_fus_wei1_wdr_array;
    mdns_c_fiir_fus_wei2_array_now = mdns_c_fiir_fus_wei2_wdr_array;
    mdns_c_fiir_fus_wei3_array_now = mdns_c_fiir_fus_wei3_wdr_array;
    mdns_c_fiir_fus_wei4_array_now = mdns_c_fiir_fus_wei4_wdr_array;
    mdns_c_fiir_fus_wei5_array_now = mdns_c_fiir_fus_wei5_wdr_array;
    mdns_c_fiir_fus_wei6_array_now = mdns_c_fiir_fus_wei6_wdr_array;
    mdns_c_fiir_fus_wei7_array_now = mdns_c_fiir_fus_wei7_wdr_array;
    puVar4 = mdns_c_fiir_fus_wei8_wdr_array;
  }
  iVar8 = mdns_ratio - 0x80;
  puVar3 = (unsigned int *)&DAT_000a1068;
  iVar7 = 0;
  bVar1 = mdns_ratio < 0x81;
  mdns_c_fiir_fus_wei8_array_now = puVar4;
  mdns_wdr_en = param_1;
  do {
    if (param_1 == 0) {
      uVar5 = puVar3[-0x434];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sad_ave_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x3fe];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sta_ave_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x419];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sad_ass_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x3ec];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sta_ass_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x37b];
    }
    else {
      uVar5 = puVar3[-0x36];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sad_ave_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x24];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sta_ave_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x2d];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sad_ass_thres_array_now + iVar7) = uVar5;
      uVar5 = puVar3[-0x1b];
      if (bVar1) {
        uVar5 = uVar2 * uVar5 >> 7;
      }
      else {
        iVar6 = 200 - uVar5;
        if (199 < uVar5) {
          iVar6 = 0;
        }
        uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
      }
      *(unsigned int *)(mdns_y_sta_ass_thres_array_now + iVar7) = uVar5;
      uVar5 = *puVar3;
    }
    puVar9 = (unsigned int *)(mdns_y_ref_wei_b_min_array_now + iVar7);
    if (bVar1) {
      uVar5 = uVar2 * uVar5 >> 7;
    }
    else {
      iVar6 = 200 - uVar5;
      if (199 < uVar5) {
        iVar6 = 0;
      }
      uVar5 = ((uint)(iVar6 * iVar8) >> 7) + uVar5;
    }
    iVar7 = iVar7 + 4;
    *puVar9 = uVar5;
    puVar3 = puVar3 + 1;
  } while (iVar7 != 0x24);
  tisp_mdns_all_reg_refresh(gain_old);
  system_reg_write(0x7804,0x111);
  return 0;
}



int tiziano_mdns_params_refresh(void)

{
  memcpy(&mdns_y_filter_en_array,&DAT_0009ff30,4);
  memcpy(&mdns_y_sf_cur_en_array,&DAT_0009ff34,4);
  memcpy(&mdns_y_sf_ref_en_array,&DAT_0009ff38,4);
  memcpy(&mdns_y_debug_array,&DAT_0009ff3c,4);
  memcpy(&mdns_uv_filter_en_array,&DAT_0009ff40,4);
  memcpy(&mdns_uv_sf_cur_en_array,&DAT_0009ff44,4);
  memcpy(&mdns_uv_sf_ref_en_array,&DAT_0009ff48,4);
  memcpy(&mdns_uv_debug_array,&DAT_0009ff4c,4);
  memcpy(&mdns_ass_enable_array,&DAT_0009ff50,4);
  memcpy(&mdns_sta_inter_en_array,&DAT_0009ff54,4);
  memcpy(&mdns_sta_group_num_array,&DAT_0009ff58,4);
  memcpy(&mdns_sta_max_num_array,&DAT_0009ff5c,4);
  memcpy(&mdns_bgm_enable_array,&DAT_0009ff60,4);
  memcpy(&mdns_bgm_inter_en_array,&DAT_0009ff64,4);
  memcpy(&mdns_psn_enable_array,&DAT_0009ff68,4);
  memcpy(&mdns_psn_max_num_array,&DAT_0009ff6c,4);
  memcpy(&mdns_ref_wei_byps_array,&DAT_0009ff70,4);
  memcpy(mdns_y_sad_win_opt_array,&DAT_0009ff74,0x24);
  memcpy(&mdns_y_sad_ave_thres_array,&DAT_0009ff98,0x24);
  memcpy(mdns_y_sad_ave_slope_array,&DAT_0009ffbc,0x24);
  memcpy(mdns_y_sad_dtb_thres_array,&DAT_0009ffe0,0x24);
  memcpy(&mdns_y_sad_ass_thres_array,&DAT_000a0004,0x24);
  memcpy(mdns_y_sta_blk_size_array,&DAT_000a0028,0x24);
  memcpy(mdns_y_sta_win_opt_array,&DAT_000a004c,0x24);
  memcpy(&mdns_y_sta_ave_thres_array,&DAT_000a0070,0x24);
  memcpy(mdns_y_sta_dtb_thres_array,&DAT_000a0094,0x24);
  memcpy(&mdns_y_sta_ass_thres_array,&DAT_000a00b8,0x24);
  memcpy(mdns_y_sta_motion_thres_array,&DAT_000a00dc,0x24);
  memcpy(&mdns_y_ref_wei_sta_array,&DAT_000a0100,0x40);
  memcpy(&mdns_y_ref_wei_psn_array,&DAT_000a0140,0x40);
  memcpy(mdns_y_ref_wei_mv_array,&DAT_000a0180,0x24);
  memcpy(mdns_y_ref_wei_fake_array,&DAT_000a01a4,0x24);
  memcpy(mdns_y_ref_wei_sta_fs_opt_array,&DAT_000a01c8,0x24);
  memcpy(mdns_y_ref_wei_psn_fs_opt_array,&DAT_000a01ec,0x24);
  memcpy(mdns_y_ref_wei_f_max_array,&DAT_000a0210,0x24);
  memcpy(mdns_y_ref_wei_f_min_array,&DAT_000a0234,0x24);
  memcpy(mdns_y_ref_wei_b_max_array,&DAT_000a0258,0x24);
  memcpy(&mdns_y_ref_wei_b_min_array,&DAT_000a027c,0x24);
  memcpy(mdns_y_ref_wei_r_max_array,&DAT_000a02a0,0x24);
  memcpy(mdns_y_ref_wei_r_min_array,&DAT_000a02c4,0x24);
  memcpy(mdns_y_ref_wei_increase_array,&DAT_000a02e8,0x24);
  memcpy(mdns_y_corner_length_t_array,&DAT_000a030c,0x24);
  memcpy(mdns_y_corner_length_b_array,&DAT_000a0330,0x24);
  memcpy(mdns_y_corner_length_l_array,&DAT_000a0354,0x24);
  memcpy(mdns_y_corner_length_r_array,&DAT_000a0378,0x24);
  memcpy(mdns_y_edge_win_opt_array,&DAT_000a039c,0x24);
  memcpy(mdns_y_edge_div_opt_array,&DAT_000a03c0,0x24);
  memcpy(mdns_y_edge_type_opt_array,&DAT_000a03e4,0x24);
  memcpy(mdns_y_luma_win_opt_array,&DAT_000a0408,0x24);
  memcpy(mdns_y_dtb_div_opt_array,&DAT_000a042c,0x24);
  memcpy(mdns_y_dtb_squ_en_array,&DAT_000a0450,0x24);
  memcpy(mdns_y_dtb_squ_div_opt_array,&DAT_000a0474,0x24);
  memcpy(mdns_y_ass_win_opt_array,&DAT_000a0498,0x24);
  memcpy(mdns_y_ass_div_opt_array,&DAT_000a04bc,0x24);
  memcpy(mdns_y_hist_sad_en_array,&DAT_000a04e0,0x24);
  memcpy(mdns_y_hist_sta_en_array,&DAT_000a0504,0x24);
  memcpy(mdns_y_hist_num_thres_array,&DAT_000a0528,0x24);
  memcpy(mdns_y_hist_cmp_thres0_array,&DAT_000a054c,0x24);
  memcpy(mdns_y_hist_cmp_thres1_array,&DAT_000a0570,0x24);
  memcpy(mdns_y_hist_cmp_thres2_array,&DAT_000a0594,0x24);
  memcpy(mdns_y_hist_cmp_thres3_array,&DAT_000a05b8,0x24);
  memcpy(mdns_y_hist_thres0_array,&DAT_000a05dc,0x24);
  memcpy(mdns_y_hist_thres1_array,&DAT_000a0600,0x24);
  memcpy(mdns_y_hist_thres2_array,&DAT_000a0624,0x24);
  memcpy(mdns_y_hist_thres3_array,&DAT_000a0648,0x24);
  memcpy(mdns_y_edge_thr_adj_seg_array,&DAT_000a066c,0x24);
  memcpy(mdns_y_luma_thr_adj_seg_array,&DAT_000a0690,0x24);
  memcpy(mdns_y_dtb_thr_adj_seg_array,&DAT_000a06b4,0x24);
  memcpy(mdns_y_ass_thr_adj_seg_array,&DAT_000a06d8,0x24);
  memcpy(mdns_y_corner_thr_adj_value_array,&DAT_000a06fc,0x24);
  memcpy(mdns_y_edge_thr_adj_value0_array,&DAT_000a0720,0x24);
  memcpy(mdns_y_edge_thr_adj_value1_array,&DAT_000a0744,0x24);
  memcpy(mdns_y_edge_thr_adj_value2_array,&DAT_000a0768,0x24);
  memcpy(mdns_y_edge_thr_adj_value3_array,&DAT_000a078c,0x24);
  memcpy(mdns_y_edge_thr_adj_value4_array,&DAT_000a07b0,0x24);
  memcpy(mdns_y_edge_thr_adj_value5_array,&DAT_000a07d4,0x24);
  memcpy(mdns_y_luma_thr_adj_value0_array,&DAT_000a07f8,0x24);
  memcpy(mdns_y_luma_thr_adj_value1_array,&DAT_000a081c,0x24);
  memcpy(mdns_y_luma_thr_adj_value2_array,&DAT_000a0840,0x24);
  memcpy(mdns_y_luma_thr_adj_value3_array,&DAT_000a0864,0x24);
  memcpy(mdns_y_luma_thr_adj_value4_array,&DAT_000a0888,0x24);
  memcpy(mdns_y_luma_thr_adj_value5_array,&DAT_000a08ac,0x24);
  memcpy(mdns_y_dtb_thr_adj_value0_array,&DAT_000a08d0,0x24);
  memcpy(mdns_y_dtb_thr_adj_value1_array,&DAT_000a08f4,0x24);
  memcpy(mdns_y_dtb_thr_adj_value2_array,&DAT_000a0918,0x24);
  memcpy(mdns_y_dtb_thr_adj_value3_array,&DAT_000a093c,0x24);
  memcpy(mdns_y_dtb_thr_adj_value4_array,&DAT_000a0960,0x24);
  memcpy(mdns_y_dtb_thr_adj_value5_array,&DAT_000a0984,0x24);
  memcpy(mdns_y_ass_thr_adj_value0_array,&DAT_000a09a8,0x24);
  memcpy(mdns_y_ass_thr_adj_value1_array,&DAT_000a09cc,0x24);
  memcpy(mdns_y_ass_thr_adj_value2_array,&DAT_000a09f0,0x24);
  memcpy(mdns_y_ass_thr_adj_value3_array,&DAT_000a0a14,0x24);
  memcpy(mdns_y_ass_thr_adj_value4_array,&DAT_000a0a38,0x24);
  memcpy(mdns_y_ass_thr_adj_value5_array,&DAT_000a0a5c,0x24);
  memcpy(mdns_y_edge_wei_adj_seg_array,&DAT_000a0a80,0x24);
  memcpy(mdns_y_luma_wei_adj_seg_array,&DAT_000a0aa4,0x24);
  memcpy(mdns_y_dtb_wei_adj_seg_array,&DAT_000a0ac8,0x24);
  memcpy(mdns_y_ass_wei_adj_seg_array,&DAT_000a0aec,0x24);
  memcpy(mdns_y_sad_wei_adj_seg_array,&DAT_000a0b10,0x24);
  memcpy(mdns_y_corner_wei_adj_value_array,&DAT_000a0b34,0x24);
  memcpy(mdns_y_edge_wei_adj_value0_array,&DAT_000a0b58,0x24);
  memcpy(mdns_y_edge_wei_adj_value1_array,&DAT_000a0b7c,0x24);
  memcpy(mdns_y_edge_wei_adj_value2_array,&DAT_000a0ba0,0x24);
  memcpy(mdns_y_edge_wei_adj_value3_array,&DAT_000a0bc4,0x24);
  memcpy(mdns_y_edge_wei_adj_value4_array,&DAT_000a0be8,0x24);
  memcpy(mdns_y_edge_wei_adj_value5_array,&DAT_000a0c0c,0x24);
  memcpy(mdns_y_luma_wei_adj_value0_array,&DAT_000a0c30,0x24);
  memcpy(mdns_y_luma_wei_adj_value1_array,&DAT_000a0c54,0x24);
  memcpy(mdns_y_luma_wei_adj_value2_array,&DAT_000a0c78,0x24);
  memcpy(mdns_y_luma_wei_adj_value3_array,&DAT_000a0c9c,0x24);
  memcpy(mdns_y_luma_wei_adj_value4_array,&DAT_000a0cc0,0x24);
  memcpy(mdns_y_luma_wei_adj_value5_array,&DAT_000a0ce4,0x24);
  memcpy(mdns_y_dtb_wei_adj_value0_array,&DAT_000a0d08,0x24);
  memcpy(mdns_y_dtb_wei_adj_value1_array,&DAT_000a0d2c,0x24);
  memcpy(mdns_y_dtb_wei_adj_value2_array,&DAT_000a0d50,0x24);
  memcpy(mdns_y_dtb_wei_adj_value3_array,&DAT_000a0d74,0x24);
  memcpy(mdns_y_dtb_wei_adj_value4_array,&DAT_000a0d98,0x24);
  memcpy(mdns_y_dtb_wei_adj_value5_array,&DAT_000a0dbc,0x24);
  memcpy(mdns_y_ass_wei_adj_value0_array,&DAT_000a0de0,0x24);
  memcpy(mdns_y_ass_wei_adj_value1_array,&DAT_000a0e04,0x24);
  memcpy(mdns_y_ass_wei_adj_value2_array,&DAT_000a0e28,0x24);
  memcpy(mdns_y_ass_wei_adj_value3_array,&DAT_000a0e4c,0x24);
  memcpy(mdns_y_ass_wei_adj_value4_array,&DAT_000a0e70,0x24);
  memcpy(mdns_y_ass_wei_adj_value5_array,&DAT_000a0e94,0x24);
  memcpy(mdns_y_sad_wei_adj_value0_array,&DAT_000a0eb8,0x24);
  memcpy(mdns_y_sad_wei_adj_value1_array,&DAT_000a0edc,0x24);
  memcpy(mdns_y_sad_wei_adj_value2_array,&DAT_000a0f00,0x24);
  memcpy(mdns_y_sad_wei_adj_value3_array,&DAT_000a0f24,0x24);
  memcpy(mdns_y_sad_wei_adj_value4_array,&DAT_000a0f48,0x24);
  memcpy(mdns_y_sad_wei_adj_value5_array,&DAT_000a0f6c,0x24);
  memcpy(mdns_y_pspa_cur_median_win_opt_array,&DAT_000a108c,0x24);
  memcpy(mdns_y_pspa_cur_bi_thres_array,&DAT_000a10b0,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei_seg_array,&DAT_000a10d4,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei0_array,&DAT_000a10f8,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei1_array,&DAT_000a111c,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei2_array,&DAT_000a1140,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei3_array,&DAT_000a1164,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei4_array,&DAT_000a1188,0x24);
  memcpy(mdns_y_pspa_cur_lmt_op_en_array,&DAT_000a11ac,0x24);
  memcpy(mdns_y_pspa_cur_lmt_wei_array,&DAT_000a11d0,0x24);
  memcpy(mdns_y_pspa_ref_median_win_opt_array,&DAT_000a11f4,0x24);
  memcpy(mdns_y_pspa_ref_bi_thres_array,&DAT_000a1218,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei_seg_array,&DAT_000a123c,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei0_array,&DAT_000a1260,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei1_array,&DAT_000a1284,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei2_array,&DAT_000a12a8,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei3_array,&DAT_000a12cc,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei4_array,&DAT_000a12f0,0x24);
  memcpy(mdns_y_pspa_ref_lmt_op_en_array,&DAT_000a1314,0x24);
  memcpy(mdns_y_pspa_ref_lmt_wei_array,&DAT_000a1338,0x24);
  memcpy(mdns_y_piir_edge_thres0_array,&DAT_000a135c,0x24);
  memcpy(mdns_y_piir_edge_thres1_array,&DAT_000a1380,0x24);
  memcpy(mdns_y_piir_edge_thres2_array,&DAT_000a13a4,0x24);
  memcpy(mdns_y_piir_edge_wei0_array,&DAT_000a13c8,0x24);
  memcpy(mdns_y_piir_edge_wei1_array,&DAT_000a13ec,0x24);
  memcpy(mdns_y_piir_edge_wei2_array,&DAT_000a1410,0x24);
  memcpy(mdns_y_piir_edge_wei3_array,&DAT_000a1434,0x24);
  memcpy(mdns_y_piir_cur_fs_wei_array,&DAT_000a1458,0x24);
  memcpy(mdns_y_piir_ref_fs_wei_array,&DAT_000a147c,0x24);
  memcpy(mdns_y_pspa_fnl_fus_thres_array,&DAT_000a14a0,0x24);
  memcpy(mdns_y_pspa_fnl_fus_swei_array,&DAT_000a14c4,0x24);
  memcpy(mdns_y_pspa_fnl_fus_dwei_array,&DAT_000a14e8,0x24);
  memcpy(mdns_y_fspa_cur_fus_seg_array,&DAT_000a150c,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_0_array,&DAT_000a1530,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_16_array,&DAT_000a1554,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_32_array,&DAT_000a1578,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_48_array,&DAT_000a159c,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_64_array,&DAT_000a15c0,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_80_array,&DAT_000a15e4,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_96_array,&DAT_000a1608,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_112_array,&DAT_000a162c,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_128_array,&DAT_000a1650,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_144_array,&DAT_000a1674,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_160_array,&DAT_000a1698,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_176_array,&DAT_000a16bc,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_192_array,&DAT_000a16e0,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_208_array,&DAT_000a1704,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_224_array,&DAT_000a1728,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_240_array,&DAT_000a174c,0x24);
  memcpy(mdns_y_fspa_ref_fus_seg_array,&DAT_000a1770,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_0_array,&DAT_000a1794,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_16_array,&DAT_000a17b8,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_32_array,&DAT_000a17dc,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_48_array,&DAT_000a1800,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_64_array,&DAT_000a1824,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_80_array,&DAT_000a1848,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_96_array,&DAT_000a186c,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_112_array,&DAT_000a1890,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_128_array,&DAT_000a18b4,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_144_array,&DAT_000a18d8,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_160_array,&DAT_000a18fc,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_176_array,&DAT_000a1920,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_192_array,&DAT_000a1944,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_208_array,&DAT_000a1968,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_224_array,&DAT_000a198c,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_240_array,&DAT_000a19b0,0x24);
  memcpy(mdns_y_fiir_edge_thres0_array,&DAT_000a19d4,0x24);
  memcpy(mdns_y_fiir_edge_thres1_array,&DAT_000a19f8,0x24);
  memcpy(mdns_y_fiir_edge_thres2_array,&DAT_000a1a1c,0x24);
  memcpy(mdns_y_fiir_edge_wei0_array,&DAT_000a1a40,0x24);
  memcpy(mdns_y_fiir_edge_wei1_array,&DAT_000a1a64,0x24);
  memcpy(mdns_y_fiir_edge_wei2_array,&DAT_000a1a88,0x24);
  memcpy(mdns_y_fiir_edge_wei3_array,&DAT_000a1aac,0x24);
  memcpy(mdns_y_fiir_fus_seg_array,&DAT_000a1ad0,0x24);
  memcpy(mdns_y_fiir_fus_wei0_array,&DAT_000a1af4,0x24);
  memcpy(mdns_y_fiir_fus_wei1_array,&DAT_000a1b18,0x24);
  memcpy(mdns_y_fiir_fus_wei2_array,&DAT_000a1b3c,0x24);
  memcpy(mdns_y_fiir_fus_wei3_array,&DAT_000a1b60,0x24);
  memcpy(mdns_y_fiir_fus_wei4_array,&DAT_000a1b84,0x24);
  memcpy(mdns_y_fiir_fus_wei5_array,&DAT_000a1ba8,0x24);
  memcpy(mdns_y_fiir_fus_wei6_array,&DAT_000a1bcc,0x24);
  memcpy(mdns_y_fiir_fus_wei7_array,&DAT_000a1bf0,0x24);
  memcpy(mdns_y_fiir_fus_wei8_array,&DAT_000a1c14,0x24);
  memcpy(mdns_y_con_thres_array,&DAT_000a1c38,0x24);
  memcpy(mdns_y_con_stren_array,&DAT_000a1c5c,0x24);
  memcpy(mdns_c_sad_win_opt_array,&DAT_000a20dc,0x24);
  memcpy(mdns_c_sad_ave_thres_array,&DAT_000a2100,0x24);
  memcpy(mdns_c_sad_ave_slope_array,&DAT_000a2124,0x24);
  memcpy(mdns_c_sad_dtb_thres_array,&DAT_000a2148,0x24);
  memcpy(mdns_c_sad_ass_thres_array,&DAT_000a216c,0x24);
  memcpy(mdns_c_ref_wei_mv_array,&DAT_000a2190,0x24);
  memcpy(mdns_c_ref_wei_fake_array,&DAT_000a21b4,0x24);
  memcpy(mdns_c_ref_wei_f_max_array,&DAT_000a21d8,0x24);
  memcpy(mdns_c_ref_wei_f_min_array,&DAT_000a21fc,0x24);
  memcpy(mdns_c_ref_wei_b_max_array,&DAT_000a2220,0x24);
  memcpy(mdns_c_ref_wei_b_min_array,&DAT_000a2244,0x24);
  memcpy(mdns_c_ref_wei_r_max_array,&DAT_000a2268,0x24);
  memcpy(mdns_c_ref_wei_r_min_array,&DAT_000a228c,0x24);
  memcpy(mdns_c_ref_wei_increase_array,&DAT_000a22b0,0x24);
  memcpy(mdns_c_edge_thr_adj_seg_array,&DAT_000a22d4,0x24);
  memcpy(mdns_c_luma_thr_adj_seg_array,&DAT_000a22f8,0x24);
  memcpy(mdns_c_dtb_thr_adj_seg_array,&DAT_000a231c,0x24);
  memcpy(mdns_c_ass_thr_adj_seg_array,&DAT_000a2340,0x24);
  memcpy(mdns_c_corner_thr_adj_value_array,&DAT_000a2364,0x24);
  memcpy(mdns_c_edge_thr_adj_value0_array,&DAT_000a2388,0x24);
  memcpy(mdns_c_edge_thr_adj_value1_array,&DAT_000a23ac,0x24);
  memcpy(mdns_c_edge_thr_adj_value2_array,&DAT_000a23d0,0x24);
  memcpy(mdns_c_edge_thr_adj_value3_array,&DAT_000a23f4,0x24);
  memcpy(mdns_c_edge_thr_adj_value4_array,&DAT_000a2418,0x24);
  memcpy(mdns_c_edge_thr_adj_value5_array,&DAT_000a243c,0x24);
  memcpy(mdns_c_luma_thr_adj_value0_array,&DAT_000a2460,0x24);
  memcpy(mdns_c_luma_thr_adj_value1_array,&DAT_000a2484,0x24);
  memcpy(mdns_c_luma_thr_adj_value2_array,&DAT_000a24a8,0x24);
  memcpy(mdns_c_luma_thr_adj_value3_array,&DAT_000a24cc,0x24);
  memcpy(mdns_c_luma_thr_adj_value4_array,&DAT_000a24f0,0x24);
  memcpy(mdns_c_luma_thr_adj_value5_array,&DAT_000a2514,0x24);
  memcpy(mdns_c_dtb_thr_adj_value0_array,&DAT_000a2538,0x24);
  memcpy(mdns_c_dtb_thr_adj_value1_array,&DAT_000a255c,0x24);
  memcpy(mdns_c_dtb_thr_adj_value2_array,&DAT_000a2580,0x24);
  memcpy(mdns_c_dtb_thr_adj_value3_array,&DAT_000a25a4,0x24);
  memcpy(mdns_c_dtb_thr_adj_value4_array,&DAT_000a25c8,0x24);
  memcpy(mdns_c_dtb_thr_adj_value5_array,&DAT_000a25ec,0x24);
  memcpy(mdns_c_ass_thr_adj_value0_array,&DAT_000a2610,0x24);
  memcpy(mdns_c_ass_thr_adj_value1_array,&DAT_000a2634,0x24);
  memcpy(mdns_c_ass_thr_adj_value2_array,&DAT_000a2658,0x24);
  memcpy(mdns_c_ass_thr_adj_value3_array,&DAT_000a267c,0x24);
  memcpy(mdns_c_ass_thr_adj_value4_array,&DAT_000a26a0,0x24);
  memcpy(mdns_c_ass_thr_adj_value5_array,&DAT_000a26c4,0x24);
  memcpy(mdns_c_edge_wei_adj_seg_array,&DAT_000a26e8,0x24);
  memcpy(mdns_c_luma_wei_adj_seg_array,&DAT_000a270c,0x24);
  memcpy(mdns_c_dtb_wei_adj_seg_array,&DAT_000a2730,0x24);
  memcpy(mdns_c_ass_wei_adj_seg_array,&DAT_000a2754,0x24);
  memcpy(mdns_c_sad_wei_adj_seg_array,&DAT_000a2778,0x24);
  memcpy(mdns_c_corner_wei_adj_value_array,&DAT_000a279c,0x24);
  memcpy(mdns_c_edge_wei_adj_value0_array,&DAT_000a27c0,0x24);
  memcpy(mdns_c_edge_wei_adj_value1_array,&DAT_000a27e4,0x24);
  memcpy(mdns_c_edge_wei_adj_value2_array,&DAT_000a2808,0x24);
  memcpy(mdns_c_edge_wei_adj_value3_array,&DAT_000a282c,0x24);
  memcpy(mdns_c_edge_wei_adj_value4_array,&DAT_000a2850,0x24);
  memcpy(mdns_c_edge_wei_adj_value5_array,&DAT_000a2874,0x24);
  memcpy(mdns_c_luma_wei_adj_value0_array,&DAT_000a2898,0x24);
  memcpy(mdns_c_luma_wei_adj_value1_array,&DAT_000a28bc,0x24);
  memcpy(mdns_c_luma_wei_adj_value2_array,&DAT_000a28e0,0x24);
  memcpy(mdns_c_luma_wei_adj_value3_array,&DAT_000a2904,0x24);
  memcpy(mdns_c_luma_wei_adj_value4_array,&DAT_000a2928,0x24);
  memcpy(mdns_c_luma_wei_adj_value5_array,&DAT_000a294c,0x24);
  memcpy(mdns_c_dtb_wei_adj_value0_array,&DAT_000a2970,0x24);
  memcpy(mdns_c_dtb_wei_adj_value1_array,&DAT_000a2994,0x24);
  memcpy(mdns_c_dtb_wei_adj_value2_array,&DAT_000a29b8,0x24);
  memcpy(mdns_c_dtb_wei_adj_value3_array,&DAT_000a29dc,0x24);
  memcpy(mdns_c_dtb_wei_adj_value4_array,&DAT_000a2a00,0x24);
  memcpy(mdns_c_dtb_wei_adj_value5_array,&DAT_000a2a24,0x24);
  memcpy(mdns_c_ass_wei_adj_value0_array,&DAT_000a2a48,0x24);
  memcpy(mdns_c_ass_wei_adj_value1_array,&DAT_000a2a6c,0x24);
  memcpy(mdns_c_ass_wei_adj_value2_array,&DAT_000a2a90,0x24);
  memcpy(mdns_c_ass_wei_adj_value3_array,&DAT_000a2ab4,0x24);
  memcpy(mdns_c_ass_wei_adj_value4_array,&DAT_000a2ad8,0x24);
  memcpy(mdns_c_ass_wei_adj_value5_array,&DAT_000a2afc,0x24);
  memcpy(mdns_c_sad_wei_adj_value0_array,&DAT_000a2b20,0x24);
  memcpy(mdns_c_sad_wei_adj_value1_array,&DAT_000a2b44,0x24);
  memcpy(mdns_c_sad_wei_adj_value2_array,&DAT_000a2b68,0x24);
  memcpy(mdns_c_sad_wei_adj_value3_array,&DAT_000a2b8c,0x24);
  memcpy(mdns_c_sad_wei_adj_value4_array,&DAT_000a2bb0,0x24);
  memcpy(mdns_c_sad_wei_adj_value5_array,&DAT_000a2bd4,0x24);
  memcpy(mdns_c_median_smj_thres_array,&DAT_000a2c88,0x24);
  memcpy(mdns_c_median_edg_thres_array,&DAT_000a2cac,0x24);
  memcpy(mdns_c_median_cur_lmt_op_en_array,&DAT_000a2cd0,0x24);
  memcpy(mdns_c_median_cur_lmt_wei_array,&DAT_000a2cf4,0x24);
  memcpy(mdns_c_median_cur_ss_wei_array,&DAT_000a2d18,0x24);
  memcpy(mdns_c_median_cur_se_wei_array,&DAT_000a2d3c,0x24);
  memcpy(mdns_c_median_cur_ms_wei_array,&DAT_000a2d60,0x24);
  memcpy(mdns_c_median_cur_me_wei_array,&DAT_000a2d84,0x24);
  memcpy(mdns_c_median_ref_lmt_op_en_array,&DAT_000a2da8,0x24);
  memcpy(mdns_c_median_ref_lmt_wei_array,&DAT_000a2dcc,0x24);
  memcpy(mdns_c_median_ref_ss_wei_array,&DAT_000a2df0,0x24);
  memcpy(mdns_c_median_ref_se_wei_array,&DAT_000a2e14,0x24);
  memcpy(mdns_c_median_ref_ms_wei_array,&DAT_000a2e38,0x24);
  memcpy(mdns_c_median_ref_me_wei_array,&DAT_000a2e5c,0x24);
  memcpy(mdns_c_bgm_win_opt_array,&DAT_000a2e80,0x24);
  memcpy(mdns_c_bgm_cur_src_array,&DAT_000a2ea4,0x24);
  memcpy(mdns_c_bgm_ref_src_array,&DAT_000a2ec8,0x24);
  memcpy(mdns_c_bgm_false_thres_array,&DAT_000a2eec,0x24);
  memcpy(mdns_c_bgm_false_step_array,&DAT_000a2f10,0x24);
  memcpy(mdns_c_piir_edge_thres0_array,&DAT_000a2f34,0x24);
  memcpy(mdns_c_piir_edge_thres1_array,&DAT_000a2f58,0x24);
  memcpy(mdns_c_piir_edge_thres2_array,&DAT_000a2f7c,0x24);
  memcpy(mdns_c_piir_edge_wei0_array,&DAT_000a2fa0,0x24);
  memcpy(mdns_c_piir_edge_wei1_array,&DAT_000a2fc4,0x24);
  memcpy(mdns_c_piir_edge_wei2_array,&DAT_000a2fe8,0x24);
  memcpy(mdns_c_piir_edge_wei3_array,&DAT_000a300c,0x24);
  memcpy(mdns_c_piir_cur_fs_wei_array,&DAT_000a3030,0x24);
  memcpy(mdns_c_piir_ref_fs_wei_array,&DAT_000a3054,0x24);
  memcpy(mdns_c_fspa_cur_fus_seg_array,&DAT_000a3078,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_0_array,&DAT_000a309c,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_16_array,&DAT_000a30c0,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_32_array,&DAT_000a30e4,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_48_array,&DAT_000a3108,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_64_array,&DAT_000a312c,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_80_array,&DAT_000a3150,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_96_array,&DAT_000a3174,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_112_array,&DAT_000a3198,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_128_array,&DAT_000a31bc,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_144_array,&DAT_000a31e0,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_160_array,&DAT_000a3204,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_176_array,&DAT_000a3228,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_192_array,&DAT_000a324c,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_208_array,&DAT_000a3270,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_224_array,&DAT_000a3294,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_240_array,&DAT_000a32b8,0x24);
  memcpy(mdns_c_fspa_ref_fus_seg_array,&DAT_000a32dc,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_0_array,&DAT_000a3300,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_16_array,&DAT_000a3324,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_32_array,&DAT_000a3348,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_48_array,&DAT_000a336c,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_64_array,&DAT_000a3390,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_80_array,&DAT_000a33b4,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_96_array,&DAT_000a33d8,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_112_array,&DAT_000a33fc,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_128_array,&DAT_000a3420,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_144_array,&DAT_000a3444,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_160_array,&DAT_000a3468,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_176_array,&DAT_000a348c,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_192_array,&DAT_000a34b0,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_208_array,&DAT_000a34d4,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_224_array,&DAT_000a34f8,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_240_array,&DAT_000a351c,0x24);
  memcpy(mdns_c_fiir_edge_thres0_array,&DAT_000a3540,0x24);
  memcpy(mdns_c_fiir_edge_thres1_array,&DAT_000a3564,0x24);
  memcpy(mdns_c_fiir_edge_thres2_array,&DAT_000a3588,0x24);
  memcpy(mdns_c_fiir_edge_wei0_array,&DAT_000a35ac,0x24);
  memcpy(mdns_c_fiir_edge_wei1_array,&DAT_000a35d0,0x24);
  memcpy(mdns_c_fiir_edge_wei2_array,&DAT_000a35f4,0x24);
  memcpy(mdns_c_fiir_edge_wei3_array,&DAT_000a3618,0x24);
  memcpy(mdns_c_fiir_fus_seg_array,&DAT_000a363c,0x24);
  memcpy(mdns_c_fiir_fus_wei0_array,&DAT_000a3660,0x24);
  memcpy(mdns_c_fiir_fus_wei1_array,&DAT_000a3684,0x24);
  memcpy(mdns_c_fiir_fus_wei2_array,&DAT_000a36a8,0x24);
  memcpy(mdns_c_fiir_fus_wei3_array,&DAT_000a36cc,0x24);
  memcpy(mdns_c_fiir_fus_wei4_array,&DAT_000a36f0,0x24);
  memcpy(mdns_c_fiir_fus_wei5_array,&DAT_000a3714,0x24);
  memcpy(mdns_c_fiir_fus_wei6_array,&DAT_000a3738,0x24);
  memcpy(mdns_c_fiir_fus_wei7_array,&DAT_000a375c,0x24);
  memcpy(mdns_c_fiir_fus_wei8_array,&DAT_000a3780,0x24);
  memcpy(mdns_c_false_smj_thres_array,&DAT_000a37a4,0x24);
  memcpy(mdns_c_false_edg_thres0_array,&DAT_000a37c8,0x24);
  memcpy(mdns_c_false_edg_thres1_array,&DAT_000a37ec,0x24);
  memcpy(mdns_c_false_edg_thres2_array,&DAT_000a3810,0x24);
  memcpy(mdns_c_false_thres_s0_array,&DAT_000a3834,0x24);
  memcpy(mdns_c_false_thres_s1_array,&DAT_000a3858,0x24);
  memcpy(mdns_c_false_thres_s2_array,&DAT_000a387c,0x24);
  memcpy(mdns_c_false_thres_s3_array,&DAT_000a38a0,0x24);
  memcpy(mdns_c_false_step_s0_array,&DAT_000a38c4,0x24);
  memcpy(mdns_c_false_step_s1_array,&DAT_000a38e8,0x24);
  memcpy(mdns_c_false_step_s2_array,&DAT_000a390c,0x24);
  memcpy(mdns_c_false_step_s3_array,&DAT_000a3930,0x24);
  memcpy(mdns_c_false_thres_m0_array,&DAT_000a3954,0x24);
  memcpy(mdns_c_false_thres_m1_array,&DAT_000a3978,0x24);
  memcpy(mdns_c_false_thres_m2_array,&DAT_000a399c,0x24);
  memcpy(mdns_c_false_thres_m3_array,&DAT_000a39c0,0x24);
  memcpy(mdns_c_false_step_m0_array,&DAT_000a39e4,0x24);
  memcpy(mdns_c_false_step_m1_array,&DAT_000a3a08,0x24);
  memcpy(mdns_c_false_step_m2_array,&DAT_000a3a2c,0x24);
  memcpy(mdns_c_false_step_m3_array,&DAT_000a3a50,0x24);
  memcpy(mdns_c_sat_lmt_thres_array,&DAT_000a3a74,0x24);
  memcpy(mdns_c_sat_lmt_stren_array,&DAT_000a3a98,0x24);
  memcpy(mdns_y_sad_ave_thres_wdr_array,&DAT_000a0f90,0x24);
  memcpy(mdns_y_sad_ass_thres_wdr_array,&DAT_000a0fb4,0x24);
  memcpy(mdns_y_sta_ave_thres_wdr_array,&DAT_000a0fd8,0x24);
  memcpy(mdns_y_sta_ass_thres_wdr_array,&DAT_000a0ffc,0x24);
  memcpy(mdns_y_sta_motion_thres_wdr_array,&DAT_000a1020,0x24);
  memcpy(mdns_y_ref_wei_b_max_wdr_array,&DAT_000a1044,0x24);
  memcpy(mdns_y_ref_wei_b_min_wdr_array,&DAT_000a1068,0x24);
  memcpy(mdns_y_pspa_cur_median_win_opt_wdr_array,&DAT_000a1c80,0x24);
  memcpy(mdns_y_pspa_cur_bi_thres_wdr_array,&DAT_000a1ca4,0x24);
  memcpy(mdns_y_pspa_cur_bi_wei0_wdr_array,&DAT_000a1cc8,0x24);
  memcpy(mdns_y_pspa_ref_median_win_opt_wdr_array,&DAT_000a1cec,0x24);
  memcpy(mdns_y_pspa_ref_bi_thres_wdr_array,&DAT_000a1d10,0x24);
  memcpy(mdns_y_pspa_ref_bi_wei0_wdr_array,&DAT_000a1d34,0x24);
  memcpy(mdns_y_piir_cur_fs_wei_wdr_array,&DAT_000a1d58,0x24);
  memcpy(mdns_y_piir_ref_fs_wei_wdr_array,&DAT_000a1d7c,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_144_wdr_array,&DAT_000a1da0,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_160_wdr_array,&DAT_000a1dc4,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_176_wdr_array,&DAT_000a1de8,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_192_wdr_array,&DAT_000a1e0c,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_208_wdr_array,&DAT_000a1e30,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_224_wdr_array,&DAT_000a1e54,0x24);
  memcpy(mdns_y_fspa_cur_fus_wei_240_wdr_array,&DAT_000a1e78,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_144_wdr_array,&DAT_000a1e9c,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_160_wdr_array,&DAT_000a1ec0,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_176_wdr_array,&DAT_000a1ee4,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_192_wdr_array,&DAT_000a1f08,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_208_wdr_array,&DAT_000a1f2c,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_224_wdr_array,&DAT_000a1f50,0x24);
  memcpy(mdns_y_fspa_ref_fus_wei_240_wdr_array,&DAT_000a1f74,0x24);
  memcpy(mdns_y_fiir_fus_wei0_wdr_array,&DAT_000a1f98,0x24);
  memcpy(mdns_y_fiir_fus_wei1_wdr_array,&DAT_000a1fbc,0x24);
  memcpy(mdns_y_fiir_fus_wei2_wdr_array,&DAT_000a1fe0,0x24);
  memcpy(mdns_y_fiir_fus_wei3_wdr_array,&DAT_000a2004,0x24);
  memcpy(mdns_y_fiir_fus_wei4_wdr_array,&DAT_000a2028,0x24);
  memcpy(mdns_y_fiir_fus_wei5_wdr_array,&DAT_000a204c,0x24);
  memcpy(mdns_y_fiir_fus_wei6_wdr_array,&DAT_000a2070,0x24);
  memcpy(mdns_y_fiir_fus_wei7_wdr_array,&DAT_000a2094,0x24);
  memcpy(mdns_y_fiir_fus_wei8_wdr_array,&DAT_000a20b8,0x24);
  memcpy(mdns_c_sad_ave_thres_wdr_array,&DAT_000a2bf8,0x24);
  memcpy(mdns_c_sad_ass_thres_wdr_array,&DAT_000a2c1c,0x24);
  memcpy(mdns_c_ref_wei_b_max_wdr_array,&DAT_000a2c40,0x24);
  memcpy(mdns_c_ref_wei_b_min_wdr_array,&DAT_000a2c64,0x24);
  memcpy(mdns_c_median_cur_ss_wei_wdr_array,&DAT_000a3abc,0x24);
  memcpy(mdns_c_median_cur_se_wei_wdr_array,&DAT_000a3ae0,0x24);
  memcpy(mdns_c_median_cur_ms_wei_wdr_array,&DAT_000a3b04,0x24);
  memcpy(mdns_c_median_cur_me_wei_wdr_array,&DAT_000a3b28,0x24);
  memcpy(mdns_c_median_ref_ss_wei_wdr_array,&DAT_000a3b4c,0x24);
  memcpy(mdns_c_median_ref_se_wei_wdr_array,&DAT_000a3b70,0x24);
  memcpy(mdns_c_median_ref_ms_wei_wdr_array,&DAT_000a3b94,0x24);
  memcpy(mdns_c_median_ref_me_wei_wdr_array,&DAT_000a3bb8,0x24);
  memcpy(mdns_c_piir_cur_fs_wei_wdr_array,&DAT_000a3bdc,0x24);
  memcpy(mdns_c_piir_ref_fs_wei_wdr_array,&DAT_000a3c00,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_144_wdr_array,&DAT_000a3c24,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_160_wdr_array,&DAT_000a3c48,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_176_wdr_array,&DAT_000a3c6c,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_192_wdr_array,&DAT_000a3c90,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_208_wdr_array,&DAT_000a3cb4,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_224_wdr_array,&DAT_000a3cd8,0x24);
  memcpy(mdns_c_fspa_cur_fus_wei_240_wdr_array,&DAT_000a3cfc,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_144_wdr_array,&DAT_000a3d20,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_160_wdr_array,&DAT_000a3d44,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_176_wdr_array,&DAT_000a3d68,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_192_wdr_array,&DAT_000a3d8c,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_208_wdr_array,&DAT_000a3db0,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_224_wdr_array,&DAT_000a3dd4,0x24);
  memcpy(mdns_c_fspa_ref_fus_wei_240_wdr_array,&DAT_000a3df8,0x24);
  memcpy(mdns_c_fiir_fus_wei0_wdr_array,&DAT_000a3e1c,0x24);
  memcpy(mdns_c_fiir_fus_wei1_wdr_array,&DAT_000a3e40,0x24);
  memcpy(mdns_c_fiir_fus_wei2_wdr_array,&DAT_000a3e64,0x24);
  memcpy(mdns_c_fiir_fus_wei3_wdr_array,&DAT_000a3e88,0x24);
  memcpy(mdns_c_fiir_fus_wei4_wdr_array,&DAT_000a3eac,0x24);
  memcpy(mdns_c_fiir_fus_wei5_wdr_array,&DAT_000a3ed0,0x24);
  memcpy(mdns_c_fiir_fus_wei6_wdr_array,&DAT_000a3ef4,0x24);
  memcpy(mdns_c_fiir_fus_wei7_wdr_array,&DAT_000a3f18,0x24);
  memcpy(mdns_c_fiir_fus_wei8_wdr_array,&DAT_000a3f3c,0x24);
  memcpy(mdns_c_sat_nml_stren_array,&DAT_000a3f60,0x24);
  if (mdns_ratio != 0x80) {
    tisp_s_mdns_ratio();
  }
  return 0;
}



int tiziano_mdns_dn_params_refresh(void)

{
  gain_old = gain_old + 0x200;
  tiziano_mdns_params_refresh();
  tisp_mdns_all_reg_refresh(gain_old);
  tisp_mdns_top_func_refresh();
  tisp_mdns_reg_trigger();
  return 0;
}



int tiziano_mdns_init(int param_1,int param_2)

{
  char *puVar1;
  int iVar2;
  int uVar3;
  
  uVar3 = 0xb0000;
  if (mdns_wdr_en == 0) {
    mdns_y_sad_ave_thres_array_now = (char *)&mdns_y_sad_ave_thres_array;
    mdns_y_sad_ass_thres_array_now = (char *)&mdns_y_sad_ass_thres_array;
    mdns_y_sta_ave_thres_array_now = (char *)&mdns_y_sta_ave_thres_array;
    mdns_y_sta_ass_thres_array_now = (char *)&mdns_y_sta_ass_thres_array;
    mdns_y_sta_motion_thres_array_now = mdns_y_sta_motion_thres_array;
    mdns_y_ref_wei_b_max_array_now = mdns_y_ref_wei_b_max_array;
    mdns_y_ref_wei_b_min_array_now = (char *)&mdns_y_ref_wei_b_min_array;
    mdns_y_pspa_cur_median_win_opt_array_now = mdns_y_pspa_cur_median_win_opt_array;
    mdns_y_pspa_cur_bi_thres_array_now = mdns_y_pspa_cur_bi_thres_array;
    mdns_y_pspa_cur_bi_wei0_array_now = mdns_y_pspa_cur_bi_wei0_array;
    mdns_y_pspa_ref_median_win_opt_array_now = mdns_y_pspa_ref_median_win_opt_array;
    mdns_y_pspa_ref_bi_thres_array_now = mdns_y_pspa_ref_bi_thres_array;
    mdns_y_pspa_ref_bi_wei0_array_now = mdns_y_pspa_ref_bi_wei0_array;
    mdns_y_piir_cur_fs_wei_array_now = mdns_y_piir_cur_fs_wei_array;
    mdns_y_piir_ref_fs_wei_array_now = mdns_y_piir_ref_fs_wei_array;
    mdns_y_fspa_cur_fus_wei_144_array_now = mdns_y_fspa_cur_fus_wei_144_array;
    mdns_y_fspa_cur_fus_wei_160_array_now = mdns_y_fspa_cur_fus_wei_160_array;
    mdns_y_fspa_cur_fus_wei_176_array_now = mdns_y_fspa_cur_fus_wei_176_array;
    mdns_y_fspa_cur_fus_wei_192_array_now = mdns_y_fspa_cur_fus_wei_192_array;
    mdns_y_fspa_cur_fus_wei_208_array_now = mdns_y_fspa_cur_fus_wei_208_array;
    mdns_y_fspa_cur_fus_wei_224_array_now = mdns_y_fspa_cur_fus_wei_224_array;
    mdns_y_fspa_cur_fus_wei_240_array_now = mdns_y_fspa_cur_fus_wei_240_array;
    mdns_y_fspa_ref_fus_wei_144_array_now = mdns_y_fspa_ref_fus_wei_144_array;
    mdns_y_fspa_ref_fus_wei_160_array_now = mdns_y_fspa_ref_fus_wei_160_array;
    mdns_y_fspa_ref_fus_wei_176_array_now = mdns_y_fspa_ref_fus_wei_176_array;
    mdns_y_fspa_ref_fus_wei_192_array_now = mdns_y_fspa_ref_fus_wei_192_array;
    mdns_y_fspa_ref_fus_wei_208_array_now = mdns_y_fspa_ref_fus_wei_208_array;
    mdns_y_fspa_ref_fus_wei_224_array_now = mdns_y_fspa_ref_fus_wei_224_array;
    mdns_y_fspa_ref_fus_wei_240_array_now = mdns_y_fspa_ref_fus_wei_240_array;
    mdns_y_fiir_fus_wei0_array_now = mdns_y_fiir_fus_wei0_array;
    mdns_y_fiir_fus_wei1_array_now = mdns_y_fiir_fus_wei1_array;
    mdns_y_fiir_fus_wei2_array_now = mdns_y_fiir_fus_wei2_array;
    mdns_y_fiir_fus_wei3_array_now = mdns_y_fiir_fus_wei3_array;
    mdns_y_fiir_fus_wei4_array_now = mdns_y_fiir_fus_wei4_array;
    mdns_y_fiir_fus_wei5_array_now = mdns_y_fiir_fus_wei5_array;
    mdns_y_fiir_fus_wei6_array_now = mdns_y_fiir_fus_wei6_array;
    mdns_y_fiir_fus_wei7_array_now = mdns_y_fiir_fus_wei7_array;
    mdns_y_fiir_fus_wei8_array_now = mdns_y_fiir_fus_wei8_array;
    mdns_c_sad_ave_thres_array_now = mdns_c_sad_ave_thres_array;
    mdns_c_sad_ass_thres_array_now = mdns_c_sad_ass_thres_array;
    mdns_c_ref_wei_b_max_array_now = mdns_c_ref_wei_b_max_array;
    mdns_c_ref_wei_b_min_array_now = mdns_c_ref_wei_b_min_array;
    mdns_c_median_cur_ss_wei_array_now = mdns_c_median_cur_ss_wei_array;
    mdns_c_median_cur_se_wei_array_now = mdns_c_median_cur_se_wei_array;
    mdns_c_median_cur_ms_wei_array_now = mdns_c_median_cur_ms_wei_array;
    mdns_c_median_cur_me_wei_array_now = mdns_c_median_cur_me_wei_array;
    mdns_c_median_ref_ss_wei_array_now = mdns_c_median_ref_ss_wei_array;
    mdns_c_median_ref_se_wei_array_now = mdns_c_median_ref_se_wei_array;
    mdns_c_median_ref_ms_wei_array_now = mdns_c_median_ref_ms_wei_array;
    mdns_c_median_ref_me_wei_array_now = mdns_c_median_ref_me_wei_array;
    mdns_c_piir_cur_fs_wei_array_now = mdns_c_piir_cur_fs_wei_array;
    mdns_c_piir_ref_fs_wei_array_now = mdns_c_piir_ref_fs_wei_array;
    mdns_c_fspa_cur_fus_wei_144_array_now = mdns_c_fspa_cur_fus_wei_144_array;
    mdns_c_fspa_cur_fus_wei_160_array_now = mdns_c_fspa_cur_fus_wei_160_array;
    mdns_c_fspa_cur_fus_wei_176_array_now = mdns_c_fspa_cur_fus_wei_176_array;
    mdns_c_fspa_cur_fus_wei_192_array_now = mdns_c_fspa_cur_fus_wei_192_array;
    mdns_c_fspa_cur_fus_wei_208_array_now = mdns_c_fspa_cur_fus_wei_208_array;
    mdns_c_fspa_cur_fus_wei_224_array_now = mdns_c_fspa_cur_fus_wei_224_array;
    mdns_c_fspa_cur_fus_wei_240_array_now = mdns_c_fspa_cur_fus_wei_240_array;
    mdns_c_fspa_ref_fus_wei_144_array_now = mdns_c_fspa_ref_fus_wei_144_array;
    mdns_c_fspa_ref_fus_wei_160_array_now = mdns_c_fspa_ref_fus_wei_160_array;
    mdns_c_fspa_ref_fus_wei_176_array_now = mdns_c_fspa_ref_fus_wei_176_array;
    mdns_c_fspa_ref_fus_wei_192_array_now = mdns_c_fspa_ref_fus_wei_192_array;
    mdns_c_fspa_ref_fus_wei_208_array_now = mdns_c_fspa_ref_fus_wei_208_array;
    mdns_c_fspa_ref_fus_wei_224_array_now = mdns_c_fspa_ref_fus_wei_224_array;
    mdns_c_fspa_ref_fus_wei_240_array_now = mdns_c_fspa_ref_fus_wei_240_array;
    mdns_c_fiir_fus_wei0_array_now = mdns_c_fiir_fus_wei0_array;
    mdns_c_fiir_fus_wei1_array_now = mdns_c_fiir_fus_wei1_array;
    mdns_c_fiir_fus_wei2_array_now = mdns_c_fiir_fus_wei2_array;
    mdns_c_fiir_fus_wei3_array_now = mdns_c_fiir_fus_wei3_array;
    mdns_c_fiir_fus_wei4_array_now = mdns_c_fiir_fus_wei4_array;
    mdns_c_fiir_fus_wei5_array_now = mdns_c_fiir_fus_wei5_array;
    mdns_c_fiir_fus_wei6_array_now = mdns_c_fiir_fus_wei6_array;
    mdns_c_fiir_fus_wei7_array_now = mdns_c_fiir_fus_wei7_array;
    puVar1 = mdns_c_fiir_fus_wei8_array;
  }
  else {
    mdns_y_sad_ave_thres_array_now = mdns_y_sad_ave_thres_wdr_array;
    mdns_y_sad_ass_thres_array_now = mdns_y_sad_ass_thres_wdr_array;
    mdns_y_sta_ave_thres_array_now = mdns_y_sta_ave_thres_wdr_array;
    mdns_y_sta_ass_thres_array_now = mdns_y_sta_ass_thres_wdr_array;
    mdns_y_sta_motion_thres_array_now = mdns_y_sta_motion_thres_wdr_array;
    mdns_y_ref_wei_b_max_array_now = mdns_y_ref_wei_b_max_wdr_array;
    mdns_y_ref_wei_b_min_array_now = mdns_y_ref_wei_b_min_wdr_array;
    mdns_y_pspa_cur_median_win_opt_array_now = mdns_y_pspa_cur_median_win_opt_wdr_array;
    mdns_y_pspa_cur_bi_thres_array_now = mdns_y_pspa_cur_bi_thres_wdr_array;
    mdns_y_pspa_cur_bi_wei0_array_now = mdns_y_pspa_cur_bi_wei0_wdr_array;
    mdns_y_pspa_ref_median_win_opt_array_now = mdns_y_pspa_ref_median_win_opt_wdr_array;
    mdns_y_pspa_ref_bi_thres_array_now = mdns_y_pspa_ref_bi_thres_wdr_array;
    mdns_y_pspa_ref_bi_wei0_array_now = mdns_y_pspa_ref_bi_wei0_wdr_array;
    mdns_y_piir_cur_fs_wei_array_now = mdns_y_piir_cur_fs_wei_wdr_array;
    mdns_y_piir_ref_fs_wei_array_now = mdns_y_piir_ref_fs_wei_wdr_array;
    mdns_y_fspa_cur_fus_wei_144_array_now = mdns_y_fspa_cur_fus_wei_144_wdr_array;
    mdns_y_fspa_cur_fus_wei_160_array_now = mdns_y_fspa_cur_fus_wei_160_wdr_array;
    mdns_y_fspa_cur_fus_wei_176_array_now = mdns_y_fspa_cur_fus_wei_176_wdr_array;
    mdns_y_fspa_cur_fus_wei_192_array_now = mdns_y_fspa_cur_fus_wei_192_wdr_array;
    mdns_y_fspa_cur_fus_wei_208_array_now = mdns_y_fspa_cur_fus_wei_208_wdr_array;
    mdns_y_fspa_cur_fus_wei_224_array_now = mdns_y_fspa_cur_fus_wei_224_wdr_array;
    mdns_y_fspa_cur_fus_wei_240_array_now = mdns_y_fspa_cur_fus_wei_240_wdr_array;
    mdns_y_fspa_ref_fus_wei_144_array_now = mdns_y_fspa_ref_fus_wei_144_wdr_array;
    mdns_y_fspa_ref_fus_wei_160_array_now = mdns_y_fspa_ref_fus_wei_160_wdr_array;
    mdns_y_fspa_ref_fus_wei_176_array_now = mdns_y_fspa_ref_fus_wei_176_wdr_array;
    mdns_y_fspa_ref_fus_wei_192_array_now = mdns_y_fspa_ref_fus_wei_192_wdr_array;
    mdns_y_fspa_ref_fus_wei_208_array_now = mdns_y_fspa_ref_fus_wei_208_wdr_array;
    mdns_y_fspa_ref_fus_wei_224_array_now = mdns_y_fspa_ref_fus_wei_224_wdr_array;
    mdns_y_fspa_ref_fus_wei_240_array_now = mdns_y_fspa_ref_fus_wei_240_wdr_array;
    mdns_y_fiir_fus_wei0_array_now = mdns_y_fiir_fus_wei0_wdr_array;
    mdns_y_fiir_fus_wei1_array_now = mdns_y_fiir_fus_wei1_wdr_array;
    mdns_y_fiir_fus_wei2_array_now = mdns_y_fiir_fus_wei2_wdr_array;
    mdns_y_fiir_fus_wei3_array_now = mdns_y_fiir_fus_wei3_wdr_array;
    mdns_y_fiir_fus_wei4_array_now = mdns_y_fiir_fus_wei4_wdr_array;
    mdns_y_fiir_fus_wei5_array_now = mdns_y_fiir_fus_wei5_wdr_array;
    mdns_y_fiir_fus_wei6_array_now = mdns_y_fiir_fus_wei6_wdr_array;
    mdns_y_fiir_fus_wei7_array_now = mdns_y_fiir_fus_wei7_wdr_array;
    mdns_y_fiir_fus_wei8_array_now = mdns_y_fiir_fus_wei8_wdr_array;
    mdns_c_sad_ave_thres_array_now = mdns_c_sad_ave_thres_wdr_array;
    mdns_c_sad_ass_thres_array_now = mdns_c_sad_ass_thres_wdr_array;
    mdns_c_ref_wei_b_max_array_now = mdns_c_ref_wei_b_max_wdr_array;
    mdns_c_ref_wei_b_min_array_now = mdns_c_ref_wei_b_min_wdr_array;
    mdns_c_median_cur_ss_wei_array_now = mdns_c_median_cur_ss_wei_wdr_array;
    mdns_c_median_cur_se_wei_array_now = mdns_c_median_cur_se_wei_wdr_array;
    mdns_c_median_cur_ms_wei_array_now = mdns_c_median_cur_ms_wei_wdr_array;
    mdns_c_median_cur_me_wei_array_now = mdns_c_median_cur_me_wei_wdr_array;
    mdns_c_median_ref_ss_wei_array_now = mdns_c_median_ref_ss_wei_wdr_array;
    mdns_c_median_ref_se_wei_array_now = mdns_c_median_ref_se_wei_wdr_array;
    mdns_c_median_ref_ms_wei_array_now = mdns_c_median_ref_ms_wei_wdr_array;
    mdns_c_median_ref_me_wei_array_now = mdns_c_median_ref_me_wei_wdr_array;
    mdns_c_piir_cur_fs_wei_array_now = mdns_c_piir_cur_fs_wei_wdr_array;
    mdns_c_piir_ref_fs_wei_array_now = mdns_c_piir_ref_fs_wei_wdr_array;
    mdns_c_fspa_cur_fus_wei_144_array_now = mdns_c_fspa_cur_fus_wei_144_wdr_array;
    mdns_c_fspa_cur_fus_wei_160_array_now = mdns_c_fspa_cur_fus_wei_160_wdr_array;
    mdns_c_fspa_cur_fus_wei_176_array_now = mdns_c_fspa_cur_fus_wei_176_wdr_array;
    mdns_c_fspa_cur_fus_wei_192_array_now = mdns_c_fspa_cur_fus_wei_192_wdr_array;
    mdns_c_fspa_cur_fus_wei_208_array_now = mdns_c_fspa_cur_fus_wei_208_wdr_array;
    mdns_c_fspa_cur_fus_wei_224_array_now = mdns_c_fspa_cur_fus_wei_224_wdr_array;
    mdns_c_fspa_cur_fus_wei_240_array_now = mdns_c_fspa_cur_fus_wei_240_wdr_array;
    mdns_c_fspa_ref_fus_wei_144_array_now = mdns_c_fspa_ref_fus_wei_144_wdr_array;
    mdns_c_fspa_ref_fus_wei_160_array_now = mdns_c_fspa_ref_fus_wei_160_wdr_array;
    mdns_c_fspa_ref_fus_wei_176_array_now = mdns_c_fspa_ref_fus_wei_176_wdr_array;
    mdns_c_fspa_ref_fus_wei_192_array_now = mdns_c_fspa_ref_fus_wei_192_wdr_array;
    mdns_c_fspa_ref_fus_wei_208_array_now = mdns_c_fspa_ref_fus_wei_208_wdr_array;
    mdns_c_fspa_ref_fus_wei_224_array_now = mdns_c_fspa_ref_fus_wei_224_wdr_array;
    mdns_c_fspa_ref_fus_wei_240_array_now = mdns_c_fspa_ref_fus_wei_240_wdr_array;
    mdns_c_fiir_fus_wei0_array_now = mdns_c_fiir_fus_wei0_wdr_array;
    mdns_c_fiir_fus_wei1_array_now = mdns_c_fiir_fus_wei1_wdr_array;
    mdns_c_fiir_fus_wei2_array_now = mdns_c_fiir_fus_wei2_wdr_array;
    mdns_c_fiir_fus_wei3_array_now = mdns_c_fiir_fus_wei3_wdr_array;
    mdns_c_fiir_fus_wei4_array_now = mdns_c_fiir_fus_wei4_wdr_array;
    mdns_c_fiir_fus_wei5_array_now = mdns_c_fiir_fus_wei5_wdr_array;
    mdns_c_fiir_fus_wei6_array_now = mdns_c_fiir_fus_wei6_wdr_array;
    mdns_c_fiir_fus_wei7_array_now = mdns_c_fiir_fus_wei7_wdr_array;
    puVar1 = mdns_c_fiir_fus_wei8_wdr_array;
  }
  gain_old = 0xffffffff;
  mdns_c_fiir_fus_wei8_array_now = puVar1;
  vin_height = param_2;
  vin_width = param_1;
  iVar2 = mdns_wdr_en;
  tiziano_mdns_params_refresh();
  tisp_mdns_par_refresh(0x10000,0x10000,vin_width,vin_height,iVar2,uVar3);
  tisp_mdns_bypass(0);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ctr_md_np_cfg(void)

{
  system_reg_write(0x2864,_DAT_000cb258 << 8 | DAT_000cb25c << 0x10 | ctr_md_np_array |
                          DAT_000cb260 << 0x18);
  system_reg_write(0x2868,DAT_000cb268 << 8 | DAT_000cb26c << 0x10 | DAT_000cb264 |
                          DAT_000cb270 << 0x18);
  system_reg_write(0x286c,DAT_000cb278 << 8 | DAT_000cb27c << 0x10 | DAT_000cb274 |
                          DAT_000cb280 << 0x18);
  system_reg_write(0x2870,DAT_000cb288 << 8 | DAT_000cb28c << 0x10 | DAT_000cb284 |
                          DAT_000cb290 << 0x18);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ctr_std_np_cfg(void)

{
  system_reg_write(0x2874,_DAT_000cb218 << 8 | DAT_000cb21c << 0x10 | ctr_std_np_array |
                          DAT_000cb220 << 0x18);
  system_reg_write(0x2878,DAT_000cb228 << 8 | DAT_000cb22c << 0x10 | DAT_000cb224 |
                          DAT_000cb230 << 0x18);
  system_reg_write(0x287c,DAT_000cb238 << 8 | DAT_000cb23c << 0x10 | DAT_000cb234 |
                          DAT_000cb240 << 0x18);
  system_reg_write(0x2880,DAT_000cb248 << 8 | DAT_000cb24c << 0x10 | DAT_000cb244 |
                          DAT_000cb250 << 0x18);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dpc_s_par_cfg(void)

{
  system_reg_write(0x2800,_DAT_000cb208 << 8 | DAT_000cb20c << 0xc | dpc_s_con_par_array |
                          DAT_000cb210 << 0x10);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dpc_d_m1_par_cfg(void)

{
  system_reg_write(0x2838,dpc_d_m1_dthres_intp << 0x10 | dpc_d_m1_fthres_intp);
  system_reg_write(0x281c,(dpc_d_m1_dthres_intp - _DAT_000cb1b4) * 0x10000 |
                          dpc_d_m1_fthres_intp - _DAT_000cb1b4);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dpc_d_m2_par_cfg(void)

{
  unsigned int uVar1;
  int iVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  
  if (dpc_d_m2_level_intp == 0) {
    uVar3 = 0;
    uVar4 = 0;
    iVar2 = 0;
    uVar1 = 0;
  }
  else {
    if (dpc_d_m2_level_intp == 1) {
      uVar3 = 0;
      uVar4 = 0;
      iVar2 = 0;
    }
    else {
      if (dpc_d_m2_level_intp == 2) {
        uVar3 = 0;
      }
      else {
        uVar3 = (uint)(dpc_d_m2_level_intp != 3);
      }
      uVar4 = (uint)(dpc_d_m2_level_intp != 2);
      iVar2 = 1;
    }
    uVar1 = 1;
  }
  system_reg_write(0x280c,iVar2 << 1 | uVar4 << 2 | uVar1 | uVar3 << 3 | iVar2 << 4 | uVar4 << 5 |
                          uVar3 << 6 | uVar4 << 8 | uVar3 << 9 | uVar3 << 0xc | uVar1 << 0x10 |
                          iVar2 << 0x11 | uVar4 << 0x12 | uVar3 << 0x13 | iVar2 << 0x14 |
                          uVar4 << 0x15 | uVar3 << 0x16 | uVar4 << 0x18 | uVar3 << 0x19 |
                          uVar3 << 0x1c);
  system_reg_write(0x283c,dpc_d_m2_hthres_intp << 0x10 | dpc_d_m2_lthres_intp);
  iVar2 = dpc_d_m2_hthres_intp - _DAT_000cb01c;
  uVar1 = dpc_d_m2_lthres_intp - _DAT_000cb01c;
  if (iVar2 < 0) {
    iVar2 = 0;
  }
  if ((int)uVar1 < 0) {
    uVar1 = 0;
  }
  system_reg_write(0x2820,iVar2 << 0x10 | uVar1);
  system_reg_write(0x2840,dpc_d_m2_p1_d1_thres_intp << 0x10 | dpc_d_m2_p0_d1_thres_intp);
  iVar2 = dpc_d_m2_p1_d1_thres_intp - _DAT_000cb01c;
  uVar1 = dpc_d_m2_p0_d1_thres_intp - _DAT_000cb01c;
  if (iVar2 < 0) {
    iVar2 = 0;
  }
  if ((int)uVar1 < 0) {
    uVar1 = 0;
  }
  system_reg_write(0x2824,iVar2 << 0x10 | uVar1);
  system_reg_write(0x2844,dpc_d_m2_p3_d1_thres_intp << 0x10 | dpc_d_m2_p2_d1_thres_intp);
  iVar2 = dpc_d_m2_p3_d1_thres_intp - _DAT_000cb01c;
  uVar1 = dpc_d_m2_p2_d1_thres_intp - _DAT_000cb01c;
  if (iVar2 < 0) {
    iVar2 = 0;
  }
  if ((int)uVar1 < 0) {
    uVar1 = 0;
  }
  system_reg_write(0x2828,iVar2 << 0x10 | uVar1);
  system_reg_write(0x2848,dpc_d_m2_p1_d2_thres_intp << 0x10 | dpc_d_m2_p0_d2_thres_intp);
  iVar2 = dpc_d_m2_p1_d2_thres_intp - _DAT_000cb01c;
  uVar1 = dpc_d_m2_p0_d2_thres_intp - _DAT_000cb01c;
  if (iVar2 < 0) {
    iVar2 = 0;
  }
  if ((int)uVar1 < 0) {
    uVar1 = 0;
  }
  system_reg_write(0x282c,iVar2 << 0x10 | uVar1);
  system_reg_write(0x284c,dpc_d_m2_p3_d2_thres_intp << 0x10 | dpc_d_m2_p2_d2_thres_intp);
  iVar2 = dpc_d_m2_p3_d2_thres_intp - _DAT_000cb01c;
  uVar1 = dpc_d_m2_p2_d2_thres_intp - _DAT_000cb01c;
  if (iVar2 < 0) {
    iVar2 = 0;
  }
  if ((int)uVar1 < 0) {
    uVar1 = 0;
  }
  system_reg_write(0x2830,iVar2 << 0x10 | uVar1);
  system_reg_write(0x2808,dpc_d_m2_con_par_array << 8 | dpc_d_m3_con_par_array << 0x10 |
                          dpc_d_m1_con_par_array | DAT_000cb010 << 0x18);
  system_reg_write(0x2818,DAT_000cb018 << 0x10 | DAT_000cb014);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dpc_d_m3_par_cfg(void)

{
  int iVar1;
  unsigned int uVar2;
  
  system_reg_write(0x2850,dpc_d_m3_dthres_intp << 0x10 | dpc_d_m3_fthres_intp);
  iVar1 = dpc_d_m3_dthres_intp - _DAT_000cafc0;
  uVar2 = dpc_d_m3_fthres_intp - _DAT_000cafc0;
  if (iVar1 < 0) {
    iVar1 = 0;
  }
  if ((int)uVar2 < 0) {
    uVar2 = 0;
  }
  system_reg_write(0x2834,iVar1 << 0x10 | uVar2);
  system_reg_write(0x2814,_DAT_000cafb8 << 0x10 | _DAT_000cafbc << 0x18 | _DAT_000cb1b0);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_dpc_cor_par_cfg(void)

{
  system_reg_write(0x2810,_DAT_000caf8c << 8 | DAT_000caf90 << 0x10 | dpc_d_cor_par_array |
                          DAT_000caf94 << 0x14 | DAT_000caf98 << 0x18);
  system_reg_write(0x2804,DAT_000caf9c << 8 | DAT_000cafa0 << 0x10 | _DAT_000cb204 |
                          DAT_000cafa4 << 0x18);
  system_reg_write(0x2884,DAT_000cafac << 0xc | DAT_000cafb0 << 0x18 | DAT_000cafa8);
  return 0;
}



int tisp_ctr_par_cfg(void)

{
  system_reg_write(0x2854,ctr_stren_intp << 0x10 | ctr_con_par_array);
  system_reg_write(0x2858,DAT_000caee4 << 8 | DAT_000caee0 | ctr_md_thres_intp << 0x10);
  system_reg_write(0x285c,DAT_000caef0 << 8 | DAT_000caef4 << 0x10 | DAT_000caeec);
  system_reg_write(0x2860,ctr_eh_thres_intp << 0x10 | ctr_el_thres_intp);
  return 0;
}



int tisp_dpc_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  dpc_d_m1_fthres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m1_fthres_array_now);
  dpc_d_m1_dthres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m1_dthres_array_now);
  dpc_d_m2_level_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_level_array);
  dpc_d_m2_hthres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_hthres_array);
  dpc_d_m2_lthres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_lthres_array);
  dpc_d_m2_p0_d1_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p0_d1_thres_array);
  dpc_d_m2_p1_d1_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p1_d1_thres_array);
  dpc_d_m2_p2_d1_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p2_d1_thres_array);
  dpc_d_m2_p3_d1_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p3_d1_thres_array);
  dpc_d_m2_p0_d2_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p0_d2_thres_array);
  dpc_d_m2_p1_d2_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p1_d2_thres_array);
  dpc_d_m2_p2_d2_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p2_d2_thres_array);
  dpc_d_m2_p3_d2_thres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m2_p3_d2_thres_array);
  dpc_d_m3_fthres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m3_fthres_array_now);
  dpc_d_m3_dthres_intp = tisp_simple_intp(iVar1,param_1,dpc_d_m3_dthres_array_now);
  ctr_stren_intp = tisp_simple_intp(iVar1,param_1,ctr_stren_array);
  ctr_md_thres_intp = tisp_simple_intp(iVar1,param_1,ctr_md_thres_array);
  ctr_el_thres_intp = tisp_simple_intp(iVar1,param_1,ctr_el_thres_array);
  ctr_eh_thres_intp = tisp_simple_intp(iVar1,param_1,ctr_eh_thres_array);
  return 0;
}



void tisp_dpc_wdr_en(int param_1)

{
  char *puVar1;
  
  dpc_wdr_en = param_1;
  if (param_1 == 0) {
    dpc_d_m1_dthres_array_now = (char *)&dpc_d_m1_dthres_array;
    dpc_d_m1_fthres_array_now = (char *)&dpc_d_m1_fthres_array;
    dpc_d_m3_dthres_array_now = (char *)&dpc_d_m3_dthres_array;
    puVar1 = (char *)&dpc_d_m3_fthres_array;
  }
  else {
    dpc_d_m1_dthres_array_now = dpc_d_m1_dthres_wdr_array;
    dpc_d_m1_fthres_array_now = dpc_d_m1_fthres_wdr_array;
    dpc_d_m3_dthres_array_now = dpc_d_m3_dthres_wdr_array;
    puVar1 = dpc_d_m3_fthres_wdr_array;
  }
  dpc_d_m3_fthres_array_now = puVar1;
  return;
}



int tisp_dpc_all_reg_refresh(void)

{
  tisp_dpc_intp();
  tisp_ctr_md_np_cfg();
  tisp_ctr_std_np_cfg();
  tisp_dpc_s_par_cfg();
  tisp_dpc_d_m1_par_cfg();
  tisp_dpc_d_m2_par_cfg();
  tisp_dpc_d_m3_par_cfg();
  tisp_dpc_cor_par_cfg();
  tisp_ctr_par_cfg();
  system_reg_write(0x2898,1);
  return 0;
}



int tisp_dpc_intp_reg_refresh(void)

{
  tisp_dpc_intp();
  tisp_dpc_d_m1_par_cfg();
  tisp_dpc_d_m2_par_cfg();
  tisp_dpc_d_m3_par_cfg();
  tisp_ctr_par_cfg();
  return 0;
}



int tisp_dpc_par_refresh(unsigned int param_1,unsigned int param_2,int param_3)

{
  code *pcVar1;
  unsigned int uVar2;
  
  if (gain_old == 0xffffffff) {
    pcVar1 = tisp_dpc_all_reg_refresh;
  }
  else {
    uVar2 = gain_old - param_1;
    if (gain_old <= param_1) {
      uVar2 = param_1 - gain_old;
    }
    if (uVar2 < param_2) goto LAB_00050f38;
    pcVar1 = tisp_dpc_intp_reg_refresh;
  }
  gain_old = param_1;
  (*pcVar1)();
LAB_00050f38:
  if (param_3 == 1) {
    system_reg_write(0x2898,1);
  }
  return 0;
}



int tisp_dpc_refresh(int param_1)

{
  tisp_dpc_par_refresh(param_1,0x100,1);
  return 0;
}



int tisp_dpc_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0xe6:
    __src = (char *)&ctr_md_np_array;
    goto LAB_00051178;
  case 0xe7:
    __src = (char *)&ctr_std_np_array;
LAB_00051178:
    __n = 0x40;
    goto LAB_0005118c;
  case 0xe8:
    __src = (char *)&dpc_s_con_par_array;
    goto LAB_00051188;
  case 0xe9:
    __src = (char *)&dpc_d_m1_fthres_array;
    break;
  case 0xea:
    __src = (char *)&dpc_d_m1_dthres_array;
    break;
  case 0xeb:
    __src = (char *)&dpc_d_m1_con_par_array;
    __n = 0xc;
    goto LAB_0005118c;
  case 0xec:
    __src = dpc_d_m2_level_array;
    break;
  case 0xed:
    __src = dpc_d_m2_hthres_array;
    break;
  case 0xee:
    __src = dpc_d_m2_lthres_array;
    break;
  case 0xef:
    __src = dpc_d_m2_p0_d1_thres_array;
    break;
  case 0xf0:
    __src = dpc_d_m2_p1_d1_thres_array;
    break;
  case 0xf1:
    __src = dpc_d_m2_p2_d1_thres_array;
    break;
  case 0xf2:
    __src = dpc_d_m2_p3_d1_thres_array;
    break;
  case 0xf3:
    __src = dpc_d_m2_p0_d2_thres_array;
    break;
  case 0xf4:
    __src = dpc_d_m2_p1_d2_thres_array;
    break;
  case 0xf5:
    __src = dpc_d_m2_p2_d2_thres_array;
    break;
  case 0xf6:
    __src = dpc_d_m2_p3_d2_thres_array;
    break;
  case 0xf7:
    __src = (char *)&dpc_d_m2_con_par_array;
LAB_00051188:
    __n = 0x14;
    goto LAB_0005118c;
  case 0xf8:
    __src = (char *)&dpc_d_m3_fthres_array;
    break;
  case 0xf9:
    __src = (char *)&dpc_d_m3_dthres_array;
    break;
  case 0xfa:
    __src = (char *)&dpc_d_m3_con_par_array;
    __n = 0x10;
    goto LAB_0005118c;
  case 0xfb:
    __src = (char *)&dpc_d_cor_par_array;
    __n = 0x2c;
    goto LAB_0005118c;
  case 0xfc:
    __src = ctr_stren_array;
    break;
  case 0xfd:
    __src = ctr_md_thres_array;
    break;
  case 0xfe:
    __src = ctr_el_thres_array;
    break;
  case 0xff:
    __src = ctr_eh_thres_array;
    break;
  case 0x100:
    __src = dpc_d_m1_fthres_wdr_array;
    break;
  case 0x101:
    __src = dpc_d_m1_dthres_wdr_array;
    break;
  case 0x102:
    __src = dpc_d_m3_fthres_wdr_array;
    break;
  case 0x103:
    __src = dpc_d_m3_dthres_wdr_array;
    break;
  case 0x104:
    __src = (char *)&ctr_con_par_array;
    __n = 0x1c;
    goto LAB_0005118c;
  default:
    isp_printf(2,"%s,%d: y sharpen not support param id %d\n","tisp_dpc_param_array_get",0x35f,
               param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_0005118c:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_dpc_param_array_set(int param_1,void *param_2,size_t *param_3)

{
  char *__dest;
  size_t __n;
  
  switch(param_1) {
  case 0xe6:
    __dest = (char *)&ctr_md_np_array;
    goto LAB_00051398;
  case 0xe7:
    __dest = (char *)&ctr_std_np_array;
LAB_00051398:
    __n = 0x40;
    goto LAB_000513ac;
  case 0xe8:
    __dest = (char *)&dpc_s_con_par_array;
    goto LAB_000513a8;
  case 0xe9:
    __dest = (char *)&dpc_d_m1_fthres_array;
    break;
  case 0xea:
    __dest = (char *)&dpc_d_m1_dthres_array;
    break;
  case 0xeb:
    __dest = (char *)&dpc_d_m1_con_par_array;
    __n = 0xc;
    goto LAB_000513ac;
  case 0xec:
    __dest = dpc_d_m2_level_array;
    break;
  case 0xed:
    __dest = dpc_d_m2_hthres_array;
    break;
  case 0xee:
    __dest = dpc_d_m2_lthres_array;
    break;
  case 0xef:
    __dest = dpc_d_m2_p0_d1_thres_array;
    break;
  case 0xf0:
    __dest = dpc_d_m2_p1_d1_thres_array;
    break;
  case 0xf1:
    __dest = dpc_d_m2_p2_d1_thres_array;
    break;
  case 0xf2:
    __dest = dpc_d_m2_p3_d1_thres_array;
    break;
  case 0xf3:
    __dest = dpc_d_m2_p0_d2_thres_array;
    break;
  case 0xf4:
    __dest = dpc_d_m2_p1_d2_thres_array;
    break;
  case 0xf5:
    __dest = dpc_d_m2_p2_d2_thres_array;
    break;
  case 0xf6:
    __dest = dpc_d_m2_p3_d2_thres_array;
    break;
  case 0xf7:
    __dest = (char *)&dpc_d_m2_con_par_array;
LAB_000513a8:
    __n = 0x14;
    goto LAB_000513ac;
  case 0xf8:
    __dest = (char *)&dpc_d_m3_fthres_array;
    break;
  case 0xf9:
    __dest = (char *)&dpc_d_m3_dthres_array;
    break;
  case 0xfa:
    __dest = (char *)&dpc_d_m3_con_par_array;
    __n = 0x10;
    goto LAB_000513ac;
  case 0xfb:
    __dest = (char *)&dpc_d_cor_par_array;
    __n = 0x2c;
    goto LAB_000513ac;
  case 0xfc:
    __dest = ctr_stren_array;
    break;
  case 0xfd:
    __dest = ctr_md_thres_array;
    break;
  case 0xfe:
    __dest = ctr_el_thres_array;
    break;
  case 0xff:
    __dest = ctr_eh_thres_array;
    break;
  case 0x100:
    __dest = dpc_d_m1_fthres_wdr_array;
    break;
  case 0x101:
    __dest = dpc_d_m1_dthres_wdr_array;
    break;
  case 0x102:
    __dest = dpc_d_m3_fthres_wdr_array;
    break;
  case 0x103:
    __dest = dpc_d_m3_dthres_wdr_array;
    break;
  case 0x104:
    __dest = (char *)&ctr_con_par_array;
    __n = 0x1c;
    goto LAB_000513ac;
  default:
    isp_printf(2,"%s,%d: y sharpen not support param id %d\n","tisp_dpc_param_array_set",0x3ec,
               param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_000513ac:
  *param_3 = __n;
  memcpy(__dest,param_2,__n);
  tisp_dpc_all_reg_refresh(gain_old + 0x200);
  return 0;
}



int tisp_s_dpc_str_internal(unsigned int param_1)

{
  int *piVar1;
  unsigned int *puVar2;
  unsigned int *puVar3;
  unsigned int uVar4;
  unsigned int *puVar5;
  unsigned int *puVar6;
  int iVar7;
  int iVar8;
  
  iVar7 = param_1 * 5 + -0x280;
  piVar1 = (int *)&DAT_0009e8e8;
  puVar6 = &dpc_d_m1_dthres_array;
  puVar5 = &dpc_d_m3_dthres_array;
  puVar3 = &dpc_d_m1_fthres_array;
  puVar2 = &dpc_d_m3_fthres_array;
  dpc_ratio = param_1;
  do {
    if (param_1 < 0x81) {
      uVar4 = param_1 * piVar1[-9] >> 7;
      if (uVar4 < 5) {
        *puVar3 = 5;
      }
      else {
        *puVar3 = uVar4;
      }
      uVar4 = param_1 * piVar1[0x74] >> 7;
      if (uVar4 < 5) {
        *puVar2 = 5;
      }
      else {
        *puVar2 = uVar4;
      }
      *puVar6 = (*piVar1 + -1000) * param_1 + 0x1f400 >> 7;
      uVar4 = (piVar1[0x7d] + -1000) * param_1 + 0x1f400;
    }
    else {
      iVar8 = piVar1[0x74];
      *puVar3 = ((0x4b0 - piVar1[-9]) * (param_1 - 0x80) >> 7) + piVar1[-9];
      *puVar2 = ((0x4b0 - iVar8) * (param_1 - 0x80) >> 7) + iVar8;
      *puVar6 = (0x100 - param_1) * *piVar1 + iVar7 >> 7;
      uVar4 = (0x100 - param_1) * piVar1[0x7d] + iVar7;
    }
    piVar1 = piVar1 + 1;
    *puVar5 = uVar4 >> 7;
    puVar6 = puVar6 + 1;
    puVar5 = puVar5 + 1;
    puVar3 = puVar3 + 1;
    puVar2 = puVar2 + 1;
  } while (piVar1 != (int *)&DAT_0009e90c);
  tisp_dpc_intp(gain_old + 0x200);
  tisp_ctr_md_np_cfg();
  tisp_ctr_std_np_cfg();
  tisp_dpc_s_par_cfg();
  tisp_dpc_d_m1_par_cfg();
  tisp_dpc_d_m2_par_cfg();
  tisp_dpc_d_m3_par_cfg();
  tisp_dpc_cor_par_cfg();
  tisp_ctr_par_cfg();
  system_reg_write(0x2898,1);
  return 0;
}



int tiziano_dpc_params_refresh(void)

{
  memcpy(&ctr_md_np_array,&DAT_0009e830,0x40);
  memcpy(&ctr_std_np_array,&DAT_0009e870,0x40);
  memcpy(&dpc_s_con_par_array,&DAT_0009e8b0,0x14);
  memcpy(&dpc_d_m1_fthres_array,&DAT_0009e8c4,0x24);
  memcpy(&dpc_d_m1_dthres_array,&DAT_0009e8e8,0x24);
  memcpy(&dpc_d_m1_con_par_array,&DAT_0009e90c,0xc);
  memcpy(dpc_d_m2_level_array,&DAT_0009e918,0x24);
  memcpy(dpc_d_m2_hthres_array,&DAT_0009e93c,0x24);
  memcpy(dpc_d_m2_lthres_array,&DAT_0009e960,0x24);
  memcpy(dpc_d_m2_p0_d1_thres_array,&DAT_0009e984,0x24);
  memcpy(dpc_d_m2_p1_d1_thres_array,&DAT_0009e9a8,0x24);
  memcpy(dpc_d_m2_p2_d1_thres_array,&DAT_0009e9cc,0x24);
  memcpy(dpc_d_m2_p3_d1_thres_array,&DAT_0009e9f0,0x24);
  memcpy(dpc_d_m2_p0_d2_thres_array,&DAT_0009ea14,0x24);
  memcpy(dpc_d_m2_p1_d2_thres_array,&DAT_0009ea38,0x24);
  memcpy(dpc_d_m2_p2_d2_thres_array,&DAT_0009ea5c,0x24);
  memcpy(dpc_d_m2_p3_d2_thres_array,&DAT_0009ea80,0x24);
  memcpy(&dpc_d_m2_con_par_array,&DAT_0009eaa4,0x14);
  memcpy(&dpc_d_m3_fthres_array,&DAT_0009eab8,0x24);
  memcpy(&dpc_d_m3_dthres_array,&DAT_0009eadc,0x24);
  memcpy(&dpc_d_m3_con_par_array,&DAT_0009eb00,0x10);
  memcpy(&dpc_d_cor_par_array,&DAT_0009eb10,0x2c);
  memcpy(ctr_stren_array,&DAT_0009eb3c,0x24);
  memcpy(ctr_md_thres_array,&DAT_0009eb60,0x24);
  memcpy(ctr_el_thres_array,&DAT_0009eb84,0x24);
  memcpy(ctr_eh_thres_array,&DAT_0009eba8,0x24);
  memcpy(dpc_d_m1_fthres_wdr_array,&DAT_0009ebcc,0x24);
  memcpy(dpc_d_m1_dthres_wdr_array,&DAT_0009ebf0,0x24);
  memcpy(dpc_d_m3_fthres_wdr_array,&DAT_0009ec14,0x24);
  memcpy(dpc_d_m3_dthres_wdr_array,&DAT_0009ec38,0x24);
  memcpy(&ctr_con_par_array,&DAT_0009ec5c,0x1c);
  if (dpc_ratio != 0x80) {
    tisp_s_dpc_str_internal();
  }
  return 0;
}



int tiziano_dpc_dn_params_refresh(void)

{
  gain_old = gain_old + 0x200;
  tiziano_dpc_params_refresh();
  tisp_dpc_all_reg_refresh(gain_old);
  return 0;
}



int tiziano_dpc_init(void)

{
  char *puVar1;
  
  if (dpc_wdr_en == 0) {
    dpc_d_m1_dthres_array_now = (char *)&dpc_d_m1_dthres_array;
    dpc_d_m1_fthres_array_now = (char *)&dpc_d_m1_fthres_array;
    dpc_d_m3_dthres_array_now = (char *)&dpc_d_m3_dthres_array;
    puVar1 = (char *)&dpc_d_m3_fthres_array;
  }
  else {
    dpc_d_m1_dthres_array_now = dpc_d_m1_dthres_wdr_array;
    dpc_d_m1_fthres_array_now = dpc_d_m1_fthres_wdr_array;
    dpc_d_m3_dthres_array_now = dpc_d_m3_dthres_wdr_array;
    puVar1 = dpc_d_m3_fthres_wdr_array;
  }
  gain_old = 0xffffffff;
  dpc_d_m3_fthres_array_now = puVar1;
  tiziano_dpc_params_refresh();
  tisp_dpc_par_refresh(0x10000,0x10000,1);
  return 0;
}



void tisp_g_dpc_str_internal(int *param_1)

{
  *param_1 = dpc_ratio;
  return;
}



void system_reg_write_clm(int param_1,int param_2,int param_3)

{
  if (param_1 == 1) {
    system_reg_write(0x6800,1);
  }
  system_reg_write(param_2,param_3);
  return;
}



void clm_lut2reg(ushort *param_1,char *param_2,int param_3,int param_4)

{
  ushort *puVar1;
  ushort *puVar2;
  char *pbVar3;
  int iVar4;
  unsigned int *puVar5;
  unsigned int *puVar6;
  
  iVar4 = 0;
  do {
    puVar1 = param_1;
    pbVar3 = param_2;
    puVar5 = (unsigned int *)(param_4 + iVar4);
    puVar6 = (unsigned int *)(param_3 + iVar4);
    do {
      puVar2 = puVar1 + 5;
      *puVar6 = (uint)puVar1[3] << 0x1b | *puVar1 & 0x1ff | (puVar1[2] & 0x1ff) << 0x12 |
                (puVar1[1] & 0x1ff) << 9;
      puVar6[1] = (puVar1[4] & 0x1ff) << 4 | (int)(puVar1[3] & 0x1e0) >> 5;
      *puVar5 = (uint)pbVar3[4] << 0x1c | *pbVar3 & 0x7f | (pbVar3[3] & 0x7f) << 0x15 |
                (pbVar3[2] & 0x7f) << 0xe | (pbVar3[1] & 0x7f) << 7;
      puVar5[1] = (int)(pbVar3[4] & 0x70) >> 4;
      puVar1 = puVar2;
      pbVar3 = pbVar3 + 5;
      puVar5 = puVar5 + 2;
      puVar6 = puVar6 + 2;
    } while (param_1 + 0x23 != puVar2);
    iVar4 = iVar4 + 0x38;
    param_2 = param_2 + 0x23;
    param_1 = param_1 + 0x23;
  } while (iVar4 != 0x690);
  return;
}



int tiziano_set_parameter_clm(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  
  clm_lut2reg(tiziano_clm_s_lut,tiziano_clm_h_lut,&tiziano_clm_s_reg,&tiziano_clm_h_reg);
  system_reg_write_clm(1,0x6804,tiziano_clm_lut_shift);
  iVar3 = 0x60000;
  do {
    iVar2 = iVar3;
    system_reg_write(iVar2,*(int *)(iVar2 + 0x6b2a4));
    iVar3 = iVar2 + 4;
  } while (iVar2 + 4 != 0x60690);
  iVar3 = iVar2 + 0x7974;
  do {
    iVar1 = iVar3 + 4;
    system_reg_write(iVar3,*(int *)(iVar3 + 0x632a4));
    iVar3 = iVar1;
  } while (iVar1 != iVar2 + 0x8004);
  iVar3 = 0x70000;
  do {
    iVar2 = iVar3;
    system_reg_write(iVar2,*(int *)(iVar2 + 0x5b934));
    iVar3 = iVar2 + 4;
  } while (iVar2 + 4 != 0x70690);
  iVar3 = iVar2 + 0x7974;
  do {
    iVar1 = iVar3 + 4;
    system_reg_write(iVar3,*(int *)(iVar3 + 0x53934));
    iVar3 = iVar1;
  } while (iVar1 != iVar2 + 0x8004);
  return 0;
}



int tiziano_clm_params_refresh(void)

{
  memcpy(tiziano_clm_h_lut,&DAT_000a3f84,0x41a);
  memcpy(tiziano_clm_s_lut,&DAT_000a439e,0x834);
  memcpy(&tiziano_clm_lut_shift,&DAT_000a4bd4,4);
  return 0;
}



int tiziano_clm_dn_params_refresh(void)

{
  tiziano_clm_params_refresh();
  tiziano_set_parameter_clm();
  return 0;
}



int tiziano_clm_init(void)

{
  tiziano_clm_params_refresh();
  tiziano_set_parameter_clm();
  return 0;
}



int tisp_clm_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  if (param_1 == 0x358) {
    __src = tiziano_clm_s_lut;
    __n = 0x834;
  }
  else if (param_1 == 0x359) {
    __src = (char *)&tiziano_clm_lut_shift;
    __n = 4;
  }
  else {
    if (param_1 != 0x357) {
      isp_printf(2,"%s,%d: clm not support param id %d\n","tisp_clm_param_array_get",0x7a,param_1);
      return 0xffffffff;
    }
    __src = tiziano_clm_h_lut;
    __n = 0x41a;
  }
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_clm_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  
  if (param_1 == 0x358) {
    memcpy(tiziano_clm_s_lut,param_2,0x834);
    uVar1 = 0x834;
  }
  else if (param_1 == 0x359) {
    memcpy(&tiziano_clm_lut_shift,param_2,4);
    tiziano_set_parameter_clm();
    uVar1 = 4;
  }
  else {
    if (param_1 != 0x357) {
      isp_printf(2,"%s,%d: clm not support param id %d\n","tisp_clm_param_array_set",0x9b,param_1);
      return 0xffffffff;
    }
    memcpy(tiziano_clm_h_lut,param_2,0x41a);
    uVar1 = 0x41a;
  }
  *param_3 = uVar1;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_set_csc_version(char param_1)

{
  switch(param_1) {
  case 0:
    memcpy(&csc_param_current,csc_bt601_full,0x3c);
    csc_version_now = 0;
    break;
  case 1:
    memcpy(&csc_param_current,csc_bt601_clip,0x3c);
    csc_version_now = 1;
    break;
  case 2:
    memcpy(&csc_param_current,csc_bt709_full,0x3c);
    csc_version_now = 2;
    break;
  case 3:
    memcpy(&csc_param_current,csc_bt709_clip,0x3c);
    csc_version_now = 3;
    break;
  case 4:
    memcpy(&csc_param_current,csc_manual,0x3c);
    csc_version_now = 4;
    break;
  default:
    isp_printf(2," [CSC] Input csc-version is error !!!");
    return 0xffffffff;
  }
  system_reg_write(0x6000,0x1f);
  system_reg_write(0x6004,0);
  system_reg_write(0x6010,(((int)_DAT_000ccc24 >> 0x1f ^ _DAT_000ccc24) -
                           ((int)_DAT_000ccc24 >> 0x1f) & 0x3ff) << 10 |
                          (((int)_DAT_000ccc28 >> 0x1f ^ _DAT_000ccc28) -
                           ((int)_DAT_000ccc28 >> 0x1f) & 0x3ff) << 0x14 |
                          ((int)csc_param_current >> 0x1f ^ csc_param_current) -
                          ((int)csc_param_current >> 0x1f) & 0x3ff);
  system_reg_write(0x6014,(((int)DAT_000ccc30 >> 0x1f ^ DAT_000ccc30) - ((int)DAT_000ccc30 >> 0x1f)
                          & 0x3ff) << 10 |
                          (((int)DAT_000ccc34 >> 0x1f ^ DAT_000ccc34) - ((int)DAT_000ccc34 >> 0x1f)
                          & 0x3ff) << 0x14 |
                          ((int)DAT_000ccc2c >> 0x1f ^ DAT_000ccc2c) - ((int)DAT_000ccc2c >> 0x1f) &
                          0x3ff);
  system_reg_write(0x6018,(((int)DAT_000ccc3c >> 0x1f ^ DAT_000ccc3c) - ((int)DAT_000ccc3c >> 0x1f)
                          & 0x3ff) << 10 |
                          (((int)DAT_000ccc40 >> 0x1f ^ DAT_000ccc40) - ((int)DAT_000ccc40 >> 0x1f)
                          & 0x3ff) << 0x14 |
                          ((int)DAT_000ccc38 >> 0x1f ^ DAT_000ccc38) - ((int)DAT_000ccc38 >> 0x1f) &
                          0x3ff);
  system_reg_write(0x6020,(DAT_000ccc48 & 0xff) << 8 | (uint)DAT_000ccc44);
  system_reg_write(0x6030,(uint)DAT_000ccc54 | DAT_000ccc50 << 0x18 | (DAT_000ccc58 & 0xff) << 8 |
                          (uint)DAT_000ccc4c << 0x10);
  return 1;
}



// WARNING: Removing unreachable block (ram,0x00051fa8)
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_set_user_csc(void *param_1)

{
  memcpy(csc_manual,param_1,0x3c);
  memcpy(&csc_param_current,csc_manual,0x3c);
  csc_version_now = 4;
  system_reg_write(0x6000,0x1f);
  system_reg_write(0x6004,0);
  system_reg_write(0x6010,(((int)_DAT_000ccc24 >> 0x1f ^ _DAT_000ccc24) -
                           ((int)_DAT_000ccc24 >> 0x1f) & 0x3ff) << 10 |
                          (((int)_DAT_000ccc28 >> 0x1f ^ _DAT_000ccc28) -
                           ((int)_DAT_000ccc28 >> 0x1f) & 0x3ff) << 0x14 |
                          ((int)csc_param_current >> 0x1f ^ csc_param_current) -
                          ((int)csc_param_current >> 0x1f) & 0x3ff);
  system_reg_write(0x6014,(((int)DAT_000ccc30 >> 0x1f ^ DAT_000ccc30) - ((int)DAT_000ccc30 >> 0x1f)
                          & 0x3ff) << 10 |
                          (((int)DAT_000ccc34 >> 0x1f ^ DAT_000ccc34) - ((int)DAT_000ccc34 >> 0x1f)
                          & 0x3ff) << 0x14 |
                          ((int)DAT_000ccc2c >> 0x1f ^ DAT_000ccc2c) - ((int)DAT_000ccc2c >> 0x1f) &
                          0x3ff);
  system_reg_write(0x6018,(((int)DAT_000ccc3c >> 0x1f ^ DAT_000ccc3c) - ((int)DAT_000ccc3c >> 0x1f)
                          & 0x3ff) << 10 |
                          (((int)DAT_000ccc40 >> 0x1f ^ DAT_000ccc40) - ((int)DAT_000ccc40 >> 0x1f)
                          & 0x3ff) << 0x14 |
                          ((int)DAT_000ccc38 >> 0x1f ^ DAT_000ccc38) - ((int)DAT_000ccc38 >> 0x1f) &
                          0x3ff);
  system_reg_write(0x6020,(DAT_000ccc48 & 0xff) << 8 | (uint)DAT_000ccc44);
  system_reg_write(0x6030,(uint)DAT_000ccc54 | DAT_000ccc50 << 0x18 | (DAT_000ccc58 & 0xff) << 8 |
                          (uint)DAT_000ccc4c << 0x10);
  return 1;
}



void tisp_get_current_csc(int *param_1,void *param_2)

{
  *param_1 = csc_version_now;
  memcpy(param_2,&csc_param_current,0x3c);
  return;
}



int tisp_defog_ev_update(unsigned int param_1,int param_2)

{
  ev_now = param_2 << 0x16 | param_1 >> 10;
  return 0;
}



void tiziano_defog_get_data(int param_1)

{
  unsigned int *puVar1;
  unsigned int uVar2;
  unsigned int *puVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  
  puVar3 = (unsigned int *)(param_1 + 8);
  puVar1 = &defog_block_hist_info;
  iVar4 = 0;
  do {
    uVar2 = *puVar3;
    uVar5 = puVar3[1];
    uVar7 = puVar3[2];
    uVar6 = puVar3[3];
    *(unsigned int *)((int)&defog_sum_block_b + iVar4) = uVar2 & 0xffffff;
    *(unsigned int *)((int)&defog_sum_block_g + iVar4) = (uVar5 & 0xffff) << 8 | uVar2 >> 0x18;
    *(unsigned int *)((int)&defog_sum_block_r + iVar4) =
         (uVar6 >> 0x10 & 0xfff) << 0xc | uVar5 >> 0x10 & 0xfff;
    iVar4 = iVar4 + 4;
    *puVar1 = uVar7 & 0xffff;
    puVar1[1] = uVar7 >> 0x10;
    puVar1[2] = uVar6 & 0xffff;
    puVar3 = puVar3 + 4;
    puVar1 = puVar1 + 3;
  } while (iVar4 != 0x2d0);
  return;
}



void tiziano_defog_set_reg_params(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  
  iVar3 = 0;
  do {
    iVar2 = iVar3 * 10 + 0x58000;
    iVar4 = 0;
    do {
      iVar1 = iVar3 + iVar4;
      system_reg_write(iVar2,*(int *)((int)&defog_block_air_light_r + iVar1) << 0x18 |
                             (uint)(char)(&defog_block_transmit_t)[iVar1] |
                             (uint)(char)(&defog_block_air_light_g)[iVar1] << 0x10 |
                             (*(unsigned int *)((int)&defog_block_air_light_b + iVar1) & 0xff) << 8);
      iVar4 = iVar4 + 0x48;
      iVar2 = iVar2 + 4;
    } while (iVar4 != 0x2d0);
    iVar3 = iVar3 + 4;
  } while (iVar3 != 0x48);
  return;
}



int tiziano_defog_interrupt_static(void)

{
  int iVar1;
  char auStack_40 [8];
  int local_38;
  
  tiziano_defog_set_reg_params();
  iVar1 = system_reg_read(0x5ba4);
  if (iVar1 == DAT_000b2748) {
    private_dma_cache_sync(0,DAT_000b2744,0x1000,0);
    tiziano_defog_get_data(DAT_000b2744);
  }
  if (iVar1 == DAT_000b2748 + 0x1000) {
    private_dma_cache_sync(0,DAT_000b2744 + 0x1000,0x1000,0);
    tiziano_defog_get_data(DAT_000b2744 + 0x1000);
  }
  if (iVar1 == DAT_000b2748 + 0x2000) {
    private_dma_cache_sync(0,DAT_000b2744 + 0x2000,0x1000,0);
    tiziano_defog_get_data(DAT_000b2744 + 0x2000);
  }
  if (iVar1 == DAT_000b2748 + 0x3000) {
    private_dma_cache_sync(0,DAT_000b2744 + 0x3000,0x1000,0);
    tiziano_defog_get_data(DAT_000b2744 + 0x3000);
  }
  local_38 = 3;
  tisp_event_push(auStack_40);
  return 1;
}



void tisp_defog_max_filter3(int param_1,char *param_2)

{
  int iVar1;
  char *pbVar2;
  int iVar3;
  char *puVar4;
  char *puVar5;
  int iVar6;
  char *pbVar7;
  char bVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  char bVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  char local_d0 [184];
  
  pbVar2 = local_d0;
  iVar1 = 0;
  do {
    iVar10 = iVar1 + -1;
    if (iVar1 == 0) {
      iVar10 = 0;
LAB_00052554:
      iVar13 = iVar1 + 1;
    }
    else {
      iVar13 = 9;
      if (iVar1 != 9) goto LAB_00052554;
    }
    iVar3 = 0;
    do {
      iVar6 = iVar3 + -1;
      if (iVar3 == 0) {
        iVar6 = 0;
LAB_00052580:
        iVar15 = iVar3 + 1;
      }
      else {
        iVar15 = 0x11;
        if (iVar3 != 0x11) goto LAB_00052580;
      }
      iVar14 = iVar10 * 0x12 + iVar6;
      iVar9 = 0;
      bVar8 = 0;
      for (iVar11 = iVar10; iVar11 <= iVar13; iVar11 = iVar11 + 1) {
        for (pbVar7 = (char *)(param_1 + iVar14 + iVar9);
            (int)(pbVar7 + (((iVar6 - param_1) - iVar14) - iVar9)) <= iVar15; pbVar7 = pbVar7 + 1) {
          bVar12 = *pbVar7;
          if (*pbVar7 < bVar8) {
            bVar12 = bVar8;
          }
          bVar8 = bVar12;
        }
        iVar9 = iVar9 + 0x12;
      }
      iVar6 = iVar3 + iVar1 * 0x12;
      iVar3 = iVar3 + 1;
      local_d0[iVar6] = bVar8;
    } while (iVar3 != 0x12);
    iVar1 = iVar1 + 1;
    puVar4 = param_2 + 0xb4;
    if (iVar1 == 10) {
      do {
        puVar5 = param_2 + 1;
        *param_2 = *pbVar2;
        pbVar2 = pbVar2 + 1;
        param_2 = puVar5;
      } while (puVar5 != puVar4);
      return;
    }
  } while( true );
}



void tisp_defog_img_filter5(int param_1,char *param_2,int param_3)

{
  char bVar1;
  bool bVar2;
  int iVar3;
  char *puVar4;
  int iVar5;
  char *puVar6;
  char *puVar7;
  int iVar8;
  char *pbVar9;
  unsigned int uVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  unsigned int uVar15;
  char local_e0 [188];
  
  puVar4 = local_e0;
  iVar5 = 0;
  bVar2 = false;
  while( true ) {
    iVar8 = 0;
    do {
      uVar15 = (uint)(iVar8 != 0);
      iVar13 = ((iVar5 - (uint)bVar2) * 0x12 + iVar8) - uVar15;
      iVar12 = 0;
      uVar10 = 0;
      iVar14 = 0;
      iVar11 = -(uint)bVar2;
      do {
        iVar3 = param_3 + (iVar11 * 3 - uVar15) * 4;
        pbVar9 = (char *)(param_1 + iVar13 + iVar12);
        do {
          bVar1 = *pbVar9;
          pbVar9 = pbVar9 + 1;
          uVar10 = uVar10 + *(int *)(iVar3 + 0x10);
          iVar14 = (uint)bVar1 * *(int *)(iVar3 + 0x10) + iVar14;
          iVar3 = iVar3 + 4;
        } while ((int)(pbVar9 + (((-param_1 - uVar15) - iVar13) - iVar12)) <=
                 (int)(uint)(iVar8 != 0x11));
        iVar11 = iVar11 + 1;
        iVar12 = iVar12 + 0x12;
      } while (iVar11 <= (int)(uint)(iVar5 != 9));
      iVar11 = iVar8 + iVar5 * 0x12;
      iVar8 = iVar8 + 1;
      local_e0[iVar11] = (char)(((uVar10 >> 1) + iVar14) / uVar10);
    } while (iVar8 != 0x12);
    iVar5 = iVar5 + 1;
    if (iVar5 == 10) break;
    bVar2 = iVar5 != 0;
  }
  puVar6 = param_2;
  do {
    puVar7 = puVar6 + 1;
    *puVar6 = *puVar4;
    puVar4 = puVar4 + 1;
    puVar6 = puVar7;
  } while (param_2 + 0xb4 != puVar7);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tisp_defog_soft_process
               (int param_1,int param_2,int param_3,int param_4,int param_5,unsigned int *param_6,
               unsigned int *param_7,unsigned int *param_8,unsigned int *param_9,int param_10,int *param_11,int param_12,
               int param_13,int param_14,unsigned int *param_15,unsigned int *param_16,unsigned int *param_17,unsigned int *param_18
               ,unsigned int *param_19,unsigned int *param_20,unsigned int *param_21,unsigned int *param_22,int *param_23,
               int *param_24)

{
  bool bVar1;
  longlong lVar2;
  char bVar3;
  int *__s;
  int *__s_00;
  char *__s_01;
  int iVar4;
  unsigned int uVar5;
  int iVar6;
  int iVar7;
  unsigned int uVar8;
  int iVar9;
  int iVar10;
  unsigned int uVar11;
  short *psVar12;
  unsigned int uVar13;
  char *pbVar14;
  int iVar15;
  int iVar16;
  char *pbVar17;
  unsigned int uVar18;
  int *piVar19;
  int *piVar20;
  int iVar21;
  int *piVar22;
  int iVar23;
  int iVar24;
  unsigned int *puVar25;
  int iVar26;
  unsigned int uVar27;
  short *psVar28;
  int iVar29;
  unsigned int uVar30;
  unsigned int *puVar31;
  unsigned int uVar32;
  short *psVar33;
  char auStack_f0 [40];
  unsigned int *local_c8;
  unsigned int local_c4;
  unsigned int local_c0;
  unsigned int local_bc;
  unsigned int local_b8;
  unsigned int *local_b4;
  unsigned int *local_b0;
  unsigned int *local_ac;
  unsigned int *local_a8;
  unsigned int *local_a4;
  int local_a0;
  void *local_9c;
  void *local_98;
  char *local_94;
  int local_90;
  int local_8c;
  int local_88;
  unsigned int *local_84;
  unsigned int *local_80;
  int local_7c;
  int local_78;
  int local_74;
  int local_70;
  int local_6c;
  int local_68;
  int local_64;
  int local_60;
  int *local_5c;
  int local_58;
  int local_54;
  int local_50;
  int local_4c;
  int local_48;
  int local_44;
  int local_40;
  unsigned int local_3c;
  unsigned int local_38;
  unsigned int *local_34;
  int local_30;
  
  local_60 = param_5;
  local_5c = param_11;
  local_c8 = param_6;
  local_b4 = param_8;
  local_84 = param_9;
  local_58 = param_12;
  local_4c = *(int *)(param_10 + 0xc);
  local_54 = param_13;
  local_50 = param_14;
  local_48 = *(int *)(param_10 + 0x10);
  local_80 = param_15;
  local_b0 = param_17;
  local_44 = *(int *)(param_10 + 0x14);
  local_ac = param_18;
  local_b8 = *(int *)(param_10 + 0x18);
  local_a8 = param_19;
  local_bc = *(int *)(param_10 + 0x1c);
  local_a4 = param_20;
  local_7c = *param_24;
  local_34 = param_16;
  local_78 = param_24[1];
  local_a0 = param_24[2];
  local_8c = param_24[3];
  local_40 = param_24[4];
  local_c4 = 0x100 - *(int *)(param_10 + 8);
  local_74 = 1;
  if (local_a0 < local_8c) {
    local_74 = local_8c - local_a0;
  }
  local_c0 = *(int *)(param_10 + 4) + 1;
  local_70 = param_1;
  local_6c = param_2;
  local_68 = param_3;
  local_64 = param_4;
  memcpy(auStack_f0,&DAT_0007cce0,0x24);
  local_94 = (char *)kmem_cache_alloc(_DAT_000da0b8,0x20);
  local_88 = kmem_cache_alloc(_DAT_000da0bc,0x20);
  local_98 = (void *)kmem_cache_alloc(_DAT_000da0c0,0x20);
  memset(local_98,0,0x2d0);
  local_9c = (void *)kmem_cache_alloc(_DAT_000da0c0,0x20);
  memset(local_9c,0,0x2d0);
  __s = (int *)kmem_cache_alloc(_DAT_000da0b4,0x20);
  memset(__s,0,0x3c);
  __s_00 = (int *)kmem_cache_alloc(_DAT_000da0b4,0x20);
  memset(__s_00,0,0x3c);
  __s_01 = (char *)kmem_cache_alloc(_DAT_000da0b8,0x20);
  memset(__s_01,0,0xb4);
  iVar10 = 0xff;
  if ((int)local_bc < 0x100) {
    iVar10 = local_bc;
  }
  iVar15 = local_b8;
  if (iVar10 < (int)local_b8) {
    iVar15 = iVar10;
  }
  local_3c = local_c0;
  if ((int)local_c0 < 2) {
    local_3c = 2;
  }
  if (iVar15 < 0) {
    iVar15 = 0;
  }
  local_38 = 2;
  if (1 < (int)local_c4) {
    local_38 = local_c4;
  }
  iVar10 = iVar10 - iVar15;
  iVar16 = 0;
  local_b8 = 0;
  local_bc = 0;
  local_c0 = 0;
  local_c4 = 0;
  local_90 = 0;
  uVar18 = 0;
  do {
    uVar11 = 0;
    puVar25 = (unsigned int *)(local_60 + iVar16);
    piVar22 = (int *)(local_58 + iVar16);
    piVar20 = (int *)(local_54 + iVar16);
    piVar19 = (int *)(local_50 + iVar16);
    local_30 = uVar18 * 0x12;
    iVar4 = uVar18 * 0x24;
    do {
      if (uVar18 < *local_84) {
        if (local_84[1] <= uVar11) {
          uVar5 = local_b4[1];
        }
        else {
          uVar5 = *local_b4;
        }
      }
      else if (local_84[1] <= uVar11) {
        uVar5 = local_b4[3];
      }
      else {
        uVar5 = local_b4[2];
      }
      iVar7 = iVar16 + uVar11 * 4;
      uVar30 = (uint)((longlong)((ulonglong)uVar5 * (ulonglong)*(unsigned int *)(local_6c + iVar7)) >> 0x24)
      ;
      uVar32 = (uint)((longlong)((ulonglong)uVar5 * (ulonglong)*(unsigned int *)(local_68 + iVar7)) >> 0x24)
      ;
      uVar13 = (uint)((longlong)((ulonglong)uVar5 * (ulonglong)*(unsigned int *)(local_64 + iVar7)) >> 0x24)
      ;
      uVar8 = (int)(uVar32 * 0x26 + uVar30 * 0x13 + uVar13 * 7) >> 6;
      if ((int)uVar8 < 0) {
        uVar8 = 0;
      }
      if (0xff < (int)uVar8) {
        uVar8 = 0xff;
      }
      if (local_40 == 1) {
        iVar7 = ((int)(iVar10 * uVar8) >> 8) + iVar15;
        *piVar22 = iVar7;
        *piVar20 = iVar7;
      }
      else {
        iVar7 = local_4c + uVar30 + -0x40;
        if (iVar7 < 0) {
          iVar7 = 0;
        }
        if (0xff < iVar7) {
          iVar7 = 0xff;
        }
        *piVar22 = iVar15 + (iVar7 * iVar10 >> 8);
        iVar7 = local_48 + uVar32 + -0x40;
        if (iVar7 < 0) {
          iVar7 = 0;
        }
        if (0xff < iVar7) {
          iVar7 = 0xff;
        }
        *piVar20 = iVar15 + (iVar7 * iVar10 >> 8);
        iVar7 = local_44 + uVar13 + -0x40;
        if (iVar7 < 0) {
          iVar7 = 0;
        }
        if (0xff < iVar7) {
          iVar7 = 0xff;
        }
        iVar7 = iVar15 + (iVar7 * iVar10 >> 8);
      }
      *piVar19 = iVar7;
      local_94[uVar11 + local_30] = (char)uVar8;
      *(short *)(local_88 + uVar11 * 2 + iVar4) = (short)uVar8 - (short)*puVar25;
      *puVar25 = uVar8;
      if (*param_23 == 0) {
        uVar27 = *param_21;
        if (uVar30 < uVar27) {
          uVar30 = param_21[5];
        }
        else if (uVar30 < param_21[1]) {
          uVar30 = param_21[6];
        }
        else if (uVar30 < param_21[2]) {
          uVar30 = param_21[7];
        }
        else if (uVar30 < param_21[3]) {
          uVar30 = param_21[8];
        }
        else if (uVar30 < param_21[4]) {
          uVar30 = param_21[9];
        }
        else {
          uVar30 = param_21[10];
        }
        if (uVar32 < uVar27) {
          uVar32 = param_21[5];
        }
        else if (uVar32 < param_21[1]) {
          uVar32 = param_21[6];
        }
        else if (uVar32 < param_21[2]) {
          uVar32 = param_21[7];
        }
        else if (uVar32 < param_21[3]) {
          uVar32 = param_21[8];
        }
        else if (uVar32 < param_21[4]) {
          uVar32 = param_21[9];
        }
        else {
          uVar32 = param_21[10];
        }
        if (uVar13 < uVar27) {
          uVar13 = param_21[5];
        }
        else if (uVar13 < param_21[1]) {
          uVar13 = param_21[6];
        }
        else if (uVar13 < param_21[2]) {
          uVar13 = param_21[7];
        }
        else if (uVar13 < param_21[3]) {
          uVar13 = param_21[8];
        }
        else if (uVar13 < param_21[4]) {
          uVar13 = param_21[9];
        }
        else {
          uVar13 = param_21[10];
        }
        if (uVar8 < uVar27) {
          uVar8 = param_21[5];
        }
        else if (uVar8 < param_21[1]) {
          uVar8 = param_21[6];
        }
        else if (uVar8 < param_21[2]) {
          uVar8 = param_21[7];
        }
        else if (uVar8 < param_21[3]) {
          uVar8 = param_21[8];
        }
        else if (uVar8 < param_21[4]) {
          uVar8 = param_21[9];
        }
        else {
          uVar8 = param_21[10];
        }
        iVar7 = iVar16 + uVar11 * 4;
        local_c4 = local_c4 + uVar30;
        local_c0 = local_c0 + uVar32;
        local_bc = local_bc + uVar13;
        local_b8 = local_b8 + uVar8;
        puVar31 = (unsigned int *)(local_70 + local_90 * 4);
        lVar2 = (ulonglong)uVar5 * (ulonglong)*puVar31;
        uVar8 = (uint)lVar2;
        *(unsigned int *)((int)local_98 + iVar7) =
             (((int)((ulonglong)lVar2 >> 0x20) << 0x10 | uVar8 >> 0x10) + (uVar8 >> 0xf & 1)) /
             local_3c;
        lVar2 = (ulonglong)uVar5 * (ulonglong)puVar31[2];
        uVar5 = (uint)lVar2;
        *(unsigned int *)((int)local_9c + iVar7) =
             (((int)((ulonglong)lVar2 >> 0x20) << 0x10 | uVar5 >> 0x10) + (uVar5 >> 0xf & 1)) /
             local_38;
        local_90 = local_90 + 3;
      }
      uVar11 = uVar11 + 1;
      puVar25 = puVar25 + 1;
      piVar22 = piVar22 + 1;
      piVar20 = piVar20 + 1;
      piVar19 = piVar19 + 1;
    } while (uVar11 != 0x12);
    uVar18 = uVar18 + 1;
    iVar16 = iVar16 + 0x48;
  } while (uVar18 != 10);
  if (*param_23 == 0) {
    iVar10 = 0;
    do {
      iVar15 = 0;
      piVar19 = (int *)((int)local_9c + iVar10);
      piVar20 = (int *)((int)local_98 + iVar10);
      do {
        iVar15 = iVar15 + 1;
        *__s = *__s + *piVar20;
        *__s_00 = *__s_00 + *piVar19;
        __s[1] = __s[1] + piVar20[4];
        __s_00[1] = __s_00[1] + piVar19[4];
        __s[2] = __s[2] + piVar20[7];
        __s_00[2] = __s_00[2] + piVar19[7];
        __s[3] = __s[3] + piVar20[10];
        __s_00[3] = __s_00[3] + piVar19[10];
        __s[4] = __s[4] + piVar20[0xe];
        __s_00[4] = __s_00[4] + piVar19[0xe];
        __s[5] = __s[5] + piVar20[0x36];
        __s_00[5] = __s_00[5] + piVar19[0x36];
        __s[6] = __s[6] + piVar20[0x3a];
        __s_00[6] = __s_00[6] + piVar19[0x3a];
        __s[7] = __s[7] + piVar20[0x3d];
        __s_00[7] = __s_00[7] + piVar19[0x3d];
        __s[8] = __s[8] + piVar20[0x40];
        __s_00[8] = __s_00[8] + piVar19[0x40];
        __s[9] = __s[9] + piVar20[0x44];
        __s_00[9] = __s_00[9] + piVar19[0x44];
        __s[10] = __s[10] + piVar20[0x6c];
        __s_00[10] = __s_00[10] + piVar19[0x6c];
        __s[0xb] = __s[0xb] + piVar20[0x70];
        __s_00[0xb] = __s_00[0xb] + piVar19[0x70];
        __s[0xc] = __s[0xc] + piVar20[0x73];
        __s_00[0xc] = __s_00[0xc] + piVar19[0x73];
        __s[0xd] = __s[0xd] + piVar20[0x76];
        __s_00[0xd] = __s_00[0xd] + piVar19[0x76];
        __s[0xe] = __s[0xe] + piVar20[0x7a];
        __s_00[0xe] = __s_00[0xe] + piVar19[0x7a];
        piVar19 = piVar19 + 1;
        piVar20 = piVar20 + 1;
      } while (iVar15 != 4);
      iVar10 = iVar10 + 0x48;
    } while (iVar10 != 0x120);
    iVar10 = 0;
    piVar19 = __s;
    piVar20 = __s_00;
    do {
      uVar18 = ((*piVar20 >> 6) + 1) / 3;
      uVar11 = ((*piVar19 >> 6) + 1) / 3;
      bVar1 = param_22[3] < uVar18;
      if (param_22[3] < uVar11) {
        if (bVar1) {
          uVar18 = param_22[4];
        }
        else if (param_22[2] < uVar18) {
          uVar18 = param_22[5];
        }
        else if (param_22[1] < uVar18) {
          uVar18 = param_22[6];
        }
        else if (*param_22 < uVar18) {
          uVar18 = param_22[7];
        }
        else {
          uVar18 = param_22[8];
        }
      }
      else {
        uVar5 = param_22[2];
        if (uVar5 < uVar11) {
          if (bVar1) {
            uVar18 = param_22[9];
          }
          else if (uVar5 < uVar18) {
            uVar18 = param_22[10];
          }
          else if (param_22[1] < uVar18) {
            uVar18 = param_22[0xb];
          }
          else if (*param_22 < uVar18) {
            uVar18 = param_22[0xc];
          }
          else {
            uVar18 = param_22[0xd];
          }
        }
        else {
          uVar8 = param_22[1];
          if (uVar8 < uVar11) {
            if (bVar1) {
              uVar18 = param_22[0xe];
            }
            else if (uVar5 < uVar18) {
              uVar18 = param_22[0xf];
            }
            else if (uVar8 < uVar18) {
              uVar18 = param_22[0x10];
            }
            else if (*param_22 < uVar18) {
              uVar18 = param_22[0x11];
            }
            else {
              uVar18 = param_22[0x12];
            }
          }
          else {
            uVar13 = *param_22;
            if (uVar13 < uVar11) {
              if (bVar1) {
                uVar18 = param_22[0x13];
              }
              else if (uVar5 < uVar18) {
                uVar18 = param_22[0x14];
              }
              else if (uVar8 < uVar18) {
                uVar18 = param_22[0x15];
              }
              else if (uVar13 < uVar18) {
                uVar18 = param_22[0x16];
              }
              else {
                uVar18 = param_22[0x17];
              }
            }
            else if (bVar1) {
              uVar18 = param_22[0x18];
            }
            else if (uVar5 < uVar18) {
              uVar18 = param_22[0x19];
            }
            else if (uVar8 < uVar18) {
              uVar18 = param_22[0x1a];
            }
            else if (uVar13 < uVar18) {
              uVar18 = param_22[0x1b];
            }
            else {
              uVar18 = param_22[0x1c];
            }
          }
        }
      }
      piVar19 = piVar19 + 1;
      iVar10 = iVar10 + uVar18;
      piVar20 = piVar20 + 1;
    } while (__s + 0xf != piVar19);
    param_23[6] = iVar10;
    uVar18 = local_c4 + local_c0 + local_bc + local_b8 + iVar10;
    param_23[2] = local_c4;
    param_23[1] = uVar18;
    param_23[3] = local_c0;
    param_23[4] = local_bc;
    param_23[5] = local_b8;
  }
  else {
    uVar18 = param_23[1];
  }
  iVar10 = 0;
  puVar25 = local_80;
  while( true ) {
    if (uVar18 < *puVar25) break;
    puVar25 = puVar25 + 1;
    if (iVar10 == 8) {
      *param_7 = local_34[8];
      param_7[1] = local_b0[8];
      param_7[2] = local_ac[8];
      param_7[3] = local_a8[8];
      uVar18 = local_a4[8];
      goto LAB_000534d4;
    }
    iVar10 = iVar10 + 1;
  }
  if (iVar10 == 0) {
    *param_7 = *local_34;
    param_7[1] = *local_b0;
    param_7[2] = *local_ac;
    param_7[3] = *local_a8;
    uVar18 = *local_a4;
LAB_000534d4:
    param_7[4] = uVar18;
  }
  else {
    iVar16 = uVar18 - local_80[iVar10 + -1];
    iVar15 = *puVar25 - uVar18;
    uVar18 = iVar16 + iVar15;
    iVar7 = (int)uVar18 >> 1;
    *param_7 = (iVar16 * local_34[iVar10] + iVar15 * local_34[iVar10 + -1] + iVar7) / uVar18;
    param_7[1] = (iVar16 * local_b0[iVar10] + iVar15 * local_b0[iVar10 + -1] + iVar7) / uVar18;
    param_7[2] = (iVar16 * local_ac[iVar10] + iVar15 * local_ac[iVar10 + -1] + iVar7) / uVar18;
    param_7[3] = (iVar16 * local_a8[iVar10] + iVar15 * local_a8[iVar10 + -1] + iVar7) / uVar18;
    param_7[4] = (iVar16 * local_a4[iVar10] + iVar15 * local_a4[iVar10 + -1] + iVar7) / uVar18;
  }
  local_c0 = local_c8[1];
  uVar13 = param_7[1];
  uVar8 = param_7[2];
  local_bc = *local_c8;
  uVar5 = param_7[3];
  uVar11 = local_c8[2];
  uVar18 = local_c8[3];
  local_b8 = local_c8[4];
  local_b4 = (unsigned int *)*param_7;
  local_b0 = (unsigned int *)param_7[4];
  local_34 = (unsigned int *)iVar4;
  if (local_7c == 1) {
    iVar10 = 0;
    bVar1 = true;
    do {
      if (bVar1) {
        iVar15 = 0;
        iVar16 = iVar10 + 2;
      }
      else {
        iVar15 = iVar10 + -2;
        iVar16 = 9;
        if (iVar10 < 7) {
          iVar16 = iVar10 + 2;
        }
      }
      local_ac = (unsigned int *)((iVar16 - iVar15) + 1);
      local_a8 = (unsigned int *)(iVar15 * 0x12);
      iVar4 = 0;
      pbVar17 = __s_01 + iVar10 * 0x12;
      do {
        if (iVar4 < 3) {
          iVar7 = 0;
LAB_000535b0:
          iVar21 = iVar4 + 2;
        }
        else {
          iVar7 = iVar4 + -2;
          iVar21 = 0x11;
          if (iVar4 < 0xf) goto LAB_000535b0;
        }
        iVar6 = ((iVar21 - iVar7) + 1) * (int)local_ac;
        psVar12 = (short *)(local_88 + ((int)local_a8 + iVar7) * 2);
        iVar9 = 0;
        local_c4 = 0;
        psVar28 = psVar12;
        for (iVar26 = iVar15; iVar24 = iVar7, psVar33 = psVar28, iVar26 <= iVar16;
            iVar26 = iVar26 + 1) {
          while (iVar24 <= iVar21) {
            iVar23 = (int)*psVar33;
            local_c4 = local_c4 + iVar23;
            iVar29 = -iVar23;
            if (0 < iVar23) {
              iVar29 = iVar23;
            }
            iVar9 = iVar9 + iVar29;
            iVar24 = iVar24 + 1;
            psVar33 = psVar33 + 1;
          }
          psVar28 = psVar28 + 0x12;
        }
        iVar24 = 0;
        for (iVar26 = iVar15; iVar29 = iVar7, psVar28 = psVar12, iVar26 <= iVar16;
            iVar26 = iVar26 + 1) {
          while (iVar29 <= iVar21) {
            iVar24 = (int)*psVar28 - (int)local_c4 / iVar6;
            iVar24 = iVar24 * iVar24;
            iVar29 = iVar29 + 1;
            psVar28 = psVar28 + 1;
          }
          psVar12 = psVar12 + 0x12;
        }
        iVar7 = ((iVar24 / iVar6 + local_78) * ((iVar9 << 6) / iVar6)) / local_78;
        if (local_8c < iVar7) {
          bVar3 = 0xff;
LAB_000536f0:
          *pbVar17 = bVar3;
        }
        else {
          if (local_a0 <= iVar7) {
            bVar3 = (char)(((iVar7 - local_a0) * 0x100) / local_74);
            goto LAB_000536f0;
          }
          *pbVar17 = 0;
        }
        iVar4 = iVar4 + 1;
        pbVar17 = pbVar17 + 1;
      } while (iVar4 != 0x12);
      iVar10 = iVar10 + 1;
      bVar1 = iVar10 < 3;
    } while (iVar10 != 10);
    tisp_defog_max_filter3(__s_01,__s_01);
    tisp_defog_img_filter5(__s_01,__s_01,auStack_f0);
  }
  pbVar17 = local_94;
  piVar19 = local_5c;
  pbVar14 = __s_01;
  do {
    uVar30 = (uint)*pbVar17;
    if (uVar30 < *local_c8) {
      uVar32 = *param_7;
    }
    else {
      if (uVar30 < local_c8[1]) {
        uVar32 = *param_7;
        iVar10 = (int)((uVar13 - (int)local_b4) * (uVar30 - *local_c8)) / (int)(local_c0 - local_bc)
        ;
      }
      else if (uVar30 < local_c8[2]) {
        uVar32 = param_7[1];
        iVar10 = (int)((uVar8 - uVar13) * (uVar30 - local_c8[1])) / (int)(uVar11 - local_c0);
      }
      else if (uVar30 < local_c8[3]) {
        uVar32 = param_7[2];
        iVar10 = (int)((uVar5 - uVar8) * (uVar30 - local_c8[2])) / (int)(uVar18 - uVar11);
      }
      else {
        if (local_c8[4] <= uVar30) {
          uVar32 = param_7[4];
          goto LAB_00053854;
        }
        uVar32 = param_7[3];
        iVar10 = (int)(((int)local_b0 - uVar5) * (uVar30 - local_c8[3])) / (int)(local_b8 - uVar18);
      }
      uVar32 = iVar10 + uVar32;
    }
LAB_00053854:
    iVar10 = (int)(uVar32 * 0x28f) >> 8;
    if (iVar10 < 0) {
      iVar10 = 0;
    }
    if (0xff < iVar10) {
      iVar10 = 0xff;
    }
    if (local_7c == 1) {
      *piVar19 = ((int)((0xff - iVar10) * (uint)*pbVar14) >> 8) + iVar10;
    }
    else {
      *piVar19 = iVar10;
    }
    pbVar17 = pbVar17 + 1;
    pbVar14 = pbVar14 + 1;
    piVar19 = piVar19 + 1;
    if (local_94 + 0xb4 == pbVar17) {
      kfree(local_94);
      kfree(local_88);
      kfree(local_98);
      kfree(local_9c);
      kfree(__s);
      kfree(__s_00);
      kfree(__s_01);
      return;
    }
  } while( true );
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_defog_algorithm(void)

{
  unsigned int uVar1;
  char local_58 [80];
  
  if (defog_frm_num < 2) {
    defog_update_paras = 0;
  }
  else if (_DAT_000ac650 == 0) {
    defog_update_paras = 0;
  }
  else {
    defog_update_paras = 1;
  }
  DAT_000ac658 = 0x528;
  DAT_000ac65c = 300;
  DAT_000ac660 = 4000;
  DAT_000ac664 = (uint)(_DAT_000ac648 != 0);
  DAT_000ac668 = (uint)(_DAT_000ac64c != 0);
  if (_DAT_000ac638 == 1) {
    defog_manual_ctrl = _DAT_000ac638;
    DAT_000ce278 = ev_now;
  }
  TizianoDefogStructMe = &defog_block_hist_info;
  DAT_000ccc64 = &defog_sum_block_r;
  DAT_000ccc68 = &defog_sum_block_g;
  DAT_000ccc6c = &defog_sum_block_b;
  DAT_000ccc70 = defog_block_mean_y_last;
  DAT_000cccb8 = &defog_manual_ctrl;
  DAT_000ccc74 = param_defog_block_t_x_array_now;
  DAT_000ccc78 = param_defog_block_t_y_array;
  DAT_000ccc7c = &defog_block_area_div;
  DAT_000ccc80 = &defog_block_area_index;
  DAT_000cccbc = &defog_update_paras;
  DAT_000ccc84 = param_defog_fpga_para_array_now;
  DAT_000ccc88 = &defog_block_transmit_t;
  DAT_000ccc8c = &defog_block_air_light_r;
  DAT_000ccc90 = &defog_block_air_light_g;
  DAT_000ccc94 = &defog_block_air_light_b;
  DAT_000ccc98 = defog_ev_list_now;
  DAT_000ccc9c = defog_trsy0_list_now;
  DAT_000ccca0 = defog_trsy1_list_now;
  DAT_000ccca4 = defog_trsy2_list_now;
  DAT_000ccca8 = defog_trsy3_list_now;
  DAT_000cccac = defog_trsy4_list_now;
  DAT_000cccb0 = defog_t_par_list1;
  DAT_000cccb4 = defog_t_par_list2;
  for (uVar1 = 0; uVar1 < 0x50; uVar1 = uVar1 + 1) {
    local_58[uVar1] = *(char *)((int)&DAT_000ccc70 + uVar1);
  }
  tisp_defog_soft_process
            (&defog_block_hist_info,&defog_sum_block_r,&defog_sum_block_g,&defog_sum_block_b);
  defog_frm_num = defog_frm_num + 1;
  if (defog_frm_num == 0x10000) {
    defog_frm_num = 0x80;
  }
  return 0;
}



int tisp_defog_process(void)

{
  tiziano_defog_algorithm();
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_defog_params_init(void)

{
  system_reg_write(0x5850,(_DAT_000ac12c & 0x7fff) << 0x10 | param_defog_cent3_w_dis_array & 0x7fff)
  ;
  system_reg_write(0x5854,(DAT_000ac134 & 0x7fff) << 0x10 | DAT_000ac130 & 0x7fff);
  system_reg_write(0x5858,(DAT_000ac13c & 0x7fff) << 0x10 | DAT_000ac138 & 0x7fff);
  system_reg_write(0x585c,(DAT_000ac144 & 0x7fff) << 0x10 | DAT_000ac140 & 0x7fff);
  system_reg_write(0x5860,(DAT_000ac14c & 0x7fff) << 0x10 | DAT_000ac148 & 0x7fff);
  system_reg_write(0x5864,(DAT_000ac154 & 0x7fff) << 0x10 | DAT_000ac150 & 0x7fff);
  system_reg_write(0x5868,(DAT_000ac15c & 0x7fff) << 0x10 | DAT_000ac158 & 0x7fff);
  system_reg_write(0x586c,(DAT_000ac164 & 0x7fff) << 0x10 | DAT_000ac160 & 0x7fff);
  system_reg_write(0x5870,(DAT_000ac16c & 0x7fff) << 0x10 | DAT_000ac168 & 0x7fff);
  system_reg_write(0x5874,(DAT_000ac174 & 0x7fff) << 0x10 | DAT_000ac170 & 0x7fff);
  system_reg_write(0x5878,(DAT_000ac17c & 0x7fff) << 0x10 | DAT_000ac178 & 0x7fff);
  system_reg_write(0x587c,(DAT_000ac184 & 0x7fff) << 0x10 | DAT_000ac180 & 0x7fff);
  system_reg_write(0x5880,(_DAT_000ac0b0 & 0x7fff) << 0x10 | param_defog_cent5_w_dis_array & 0x7fff)
  ;
  system_reg_write(0x5884,(DAT_000ac0b8 & 0x7fff) << 0x10 | DAT_000ac0b4 & 0x7fff);
  system_reg_write(0x5888,(DAT_000ac0c0 & 0x7fff) << 0x10 | DAT_000ac0bc & 0x7fff);
  system_reg_write(0x588c,(DAT_000ac0c8 & 0x7fff) << 0x10 | DAT_000ac0c4 & 0x7fff);
  system_reg_write(0x5890,(DAT_000ac0d0 & 0x7fff) << 0x10 | DAT_000ac0cc & 0x7fff);
  system_reg_write(0x5894,(DAT_000ac0d8 & 0x7fff) << 0x10 | DAT_000ac0d4 & 0x7fff);
  system_reg_write(0x5898,(DAT_000ac0e0 & 0x7fff) << 0x10 | DAT_000ac0dc & 0x7fff);
  system_reg_write(0x589c,(DAT_000ac0e8 & 0x7fff) << 0x10 | DAT_000ac0e4 & 0x7fff);
  system_reg_write(0x58a0,(DAT_000ac0f0 & 0x7fff) << 0x10 | DAT_000ac0ec & 0x7fff);
  system_reg_write(0x58a4,(DAT_000ac0f8 & 0x7fff) << 0x10 | DAT_000ac0f4 & 0x7fff);
  system_reg_write(0x58a8,(DAT_000ac100 & 0x7fff) << 0x10 | DAT_000ac0fc & 0x7fff);
  system_reg_write(0x58ac,(DAT_000ac108 & 0x7fff) << 0x10 | DAT_000ac104 & 0x7fff);
  system_reg_write(0x58b0,(DAT_000ac110 & 0x7fff) << 0x10 | DAT_000ac10c & 0x7fff);
  system_reg_write(0x58b4,(DAT_000ac118 & 0x7fff) << 0x10 | DAT_000ac114 & 0x7fff);
  system_reg_write(0x58b8,(DAT_000ac120 & 0x7fff) << 0x10 | DAT_000ac11c & 0x7fff);
  system_reg_write(0x58bc,DAT_000ac124 & 0x7fff);
  system_reg_write(0x58c0,(_DAT_000ac30c & 0x1f) << 8 | (_DAT_000ac310 & 0x1f) << 0x10 |
                          param_defog_weightlut02 & 0x1f | (DAT_000ac314 & 0x1f) << 0x18);
  system_reg_write(0x58c4,(DAT_000ac31c & 0x1f) << 8 | (DAT_000ac320 & 0x1f) << 0x10 |
                          DAT_000ac318 & 0x1f | (DAT_000ac324 & 0x1f) << 0x18);
  system_reg_write(0x58c8,(DAT_000ac32c & 0x1f) << 8 | (DAT_000ac330 & 0x1f) << 0x10 |
                          DAT_000ac328 & 0x1f | (DAT_000ac334 & 0x1f) << 0x18);
  system_reg_write(0x58cc,(DAT_000ac33c & 0x1f) << 8 | (DAT_000ac340 & 0x1f) << 0x10 |
                          DAT_000ac338 & 0x1f | (DAT_000ac344 & 0x1f) << 0x18);
  system_reg_write(0x58d0,(DAT_000ac34c & 0x1f) << 8 | (DAT_000ac350 & 0x1f) << 0x10 |
                          DAT_000ac348 & 0x1f | (DAT_000ac354 & 0x1f) << 0x18);
  system_reg_write(0x58d4,(DAT_000ac35c & 0x1f) << 8 | (DAT_000ac360 & 0x1f) << 0x10 |
                          DAT_000ac358 & 0x1f | (DAT_000ac364 & 0x1f) << 0x18);
  system_reg_write(0x58d8,(DAT_000ac36c & 0x1f) << 8 | (DAT_000ac370 & 0x1f) << 0x10 |
                          DAT_000ac368 & 0x1f | (DAT_000ac374 & 0x1f) << 0x18);
  system_reg_write(0x58dc,(DAT_000ac37c & 0x1f) << 8 | (DAT_000ac380 & 0x1f) << 0x10 |
                          DAT_000ac378 & 0x1f | (DAT_000ac384 & 0x1f) << 0x18);
  system_reg_write(0x58e0,(_DAT_000ac38c & 0x1f) << 8 | (_DAT_000ac390 & 0x1f) << 0x10 |
                          param_defog_weightlut20 & 0x1f | (DAT_000ac394 & 0x1f) << 0x18);
  system_reg_write(0x58e4,(DAT_000ac39c & 0x1f) << 8 | (DAT_000ac3a0 & 0x1f) << 0x10 |
                          DAT_000ac398 & 0x1f | (DAT_000ac3a4 & 0x1f) << 0x18);
  system_reg_write(0x58e8,(DAT_000ac3ac & 0x1f) << 8 | (DAT_000ac3b0 & 0x1f) << 0x10 |
                          DAT_000ac3a8 & 0x1f | (DAT_000ac3b4 & 0x1f) << 0x18);
  system_reg_write(0x58ec,(DAT_000ac3bc & 0x1f) << 8 | (DAT_000ac3c0 & 0x1f) << 0x10 |
                          DAT_000ac3b8 & 0x1f | (DAT_000ac3c4 & 0x1f) << 0x18);
  system_reg_write(0x58f0,(DAT_000ac3cc & 0x1f) << 8 | (DAT_000ac3d0 & 0x1f) << 0x10 |
                          DAT_000ac3c8 & 0x1f | (DAT_000ac3d4 & 0x1f) << 0x18);
  system_reg_write(0x58f4,(DAT_000ac3dc & 0x1f) << 8 | (DAT_000ac3e0 & 0x1f) << 0x10 |
                          DAT_000ac3d8 & 0x1f | (DAT_000ac3e4 & 0x1f) << 0x18);
  system_reg_write(0x58f8,(DAT_000ac3ec & 0x1f) << 8 | (DAT_000ac3f0 & 0x1f) << 0x10 |
                          DAT_000ac3e8 & 0x1f | (DAT_000ac3f4 & 0x1f) << 0x18);
  system_reg_write(0x58fc,(DAT_000ac3fc & 0x1f) << 8 | (DAT_000ac400 & 0x1f) << 0x10 |
                          DAT_000ac3f8 & 0x1f | (DAT_000ac404 & 0x1f) << 0x18);
  system_reg_write(0x5900,(_DAT_000ac18c & 0x1f) << 8 | (_DAT_000ac190 & 0x1f) << 0x10 |
                          param_defog_weightlut21 & 0x1f | (DAT_000ac194 & 0x1f) << 0x18);
  system_reg_write(0x5904,(DAT_000ac19c & 0x1f) << 8 | (DAT_000ac1a0 & 0x1f) << 0x10 |
                          DAT_000ac198 & 0x1f | (DAT_000ac1a4 & 0x1f) << 0x18);
  system_reg_write(0x5908,(DAT_000ac1ac & 0x1f) << 8 | (DAT_000ac1b0 & 0x1f) << 0x10 |
                          DAT_000ac1a8 & 0x1f | (DAT_000ac1b4 & 0x1f) << 0x18);
  system_reg_write(0x590c,(DAT_000ac1bc & 0x1f) << 8 | (DAT_000ac1c0 & 0x1f) << 0x10 |
                          DAT_000ac1b8 & 0x1f | (DAT_000ac1c4 & 0x1f) << 0x18);
  system_reg_write(0x5910,(DAT_000ac1cc & 0x1f) << 8 | (DAT_000ac1d0 & 0x1f) << 0x10 |
                          DAT_000ac1c8 & 0x1f | (DAT_000ac1d4 & 0x1f) << 0x18);
  system_reg_write(0x5914,(DAT_000ac1dc & 0x1f) << 8 | (DAT_000ac1e0 & 0x1f) << 0x10 |
                          DAT_000ac1d8 & 0x1f | (DAT_000ac1e4 & 0x1f) << 0x18);
  system_reg_write(0x5918,(DAT_000ac1ec & 0x1f) << 8 | (DAT_000ac1f0 & 0x1f) << 0x10 |
                          DAT_000ac1e8 & 0x1f | (DAT_000ac1f4 & 0x1f) << 0x18);
  system_reg_write(0x591c,(DAT_000ac1fc & 0x1f) << 8 | (DAT_000ac200 & 0x1f) << 0x10 |
                          DAT_000ac1f8 & 0x1f | (DAT_000ac204 & 0x1f) << 0x18);
  system_reg_write(0x5920,(_DAT_000ac28c & 0x1f) << 8 | (_DAT_000ac290 & 0x1f) << 0x10 |
                          param_defog_weightlut12 & 0x1f | (DAT_000ac294 & 0x1f) << 0x18);
  system_reg_write(0x5924,(DAT_000ac29c & 0x1f) << 8 | (DAT_000ac2a0 & 0x1f) << 0x10 |
                          DAT_000ac298 & 0x1f | (DAT_000ac2a4 & 0x1f) << 0x18);
  system_reg_write(0x5928,(DAT_000ac2ac & 0x1f) << 8 | (DAT_000ac2b0 & 0x1f) << 0x10 |
                          DAT_000ac2a8 & 0x1f | (DAT_000ac2b4 & 0x1f) << 0x18);
  system_reg_write(0x592c,(DAT_000ac2bc & 0x1f) << 8 | (DAT_000ac2c0 & 0x1f) << 0x10 |
                          DAT_000ac2b8 & 0x1f | (DAT_000ac2c4 & 0x1f) << 0x18);
  system_reg_write(0x5930,(DAT_000ac2cc & 0x1f) << 8 | (DAT_000ac2d0 & 0x1f) << 0x10 |
                          DAT_000ac2c8 & 0x1f | (DAT_000ac2d4 & 0x1f) << 0x18);
  system_reg_write(0x5934,(DAT_000ac2dc & 0x1f) << 8 | (DAT_000ac2e0 & 0x1f) << 0x10 |
                          DAT_000ac2d8 & 0x1f | (DAT_000ac2e4 & 0x1f) << 0x18);
  system_reg_write(0x5938,(DAT_000ac2ec & 0x1f) << 8 | (DAT_000ac2f0 & 0x1f) << 0x10 |
                          DAT_000ac2e8 & 0x1f | (DAT_000ac2f4 & 0x1f) << 0x18);
  system_reg_write(0x593c,(DAT_000ac2fc & 0x1f) << 8 | (DAT_000ac300 & 0x1f) << 0x10 |
                          DAT_000ac2f8 & 0x1f | (DAT_000ac304 & 0x1f) << 0x18);
  system_reg_write(0x5940,(_DAT_000ac20c & 0x1f) << 8 | (_DAT_000ac210 & 0x1f) << 0x10 |
                          param_defog_weightlut22 & 0x1f | (DAT_000ac214 & 0x1f) << 0x18);
  system_reg_write(0x5944,(DAT_000ac21c & 0x1f) << 8 | (DAT_000ac220 & 0x1f) << 0x10 |
                          DAT_000ac218 & 0x1f | (DAT_000ac224 & 0x1f) << 0x18);
  system_reg_write(0x5948,(DAT_000ac22c & 0x1f) << 8 | (DAT_000ac230 & 0x1f) << 0x10 |
                          DAT_000ac228 & 0x1f | (DAT_000ac234 & 0x1f) << 0x18);
  system_reg_write(0x594c,(DAT_000ac23c & 0x1f) << 8 | (DAT_000ac240 & 0x1f) << 0x10 |
                          DAT_000ac238 & 0x1f | (DAT_000ac244 & 0x1f) << 0x18);
  system_reg_write(0x5950,(DAT_000ac24c & 0x1f) << 8 | (DAT_000ac250 & 0x1f) << 0x10 |
                          DAT_000ac248 & 0x1f | (DAT_000ac254 & 0x1f) << 0x18);
  system_reg_write(0x5954,(DAT_000ac25c & 0x1f) << 8 | (DAT_000ac260 & 0x1f) << 0x10 |
                          DAT_000ac258 & 0x1f | (DAT_000ac264 & 0x1f) << 0x18);
  system_reg_write(0x5958,(DAT_000ac26c & 0x1f) << 8 | (DAT_000ac270 & 0x1f) << 0x10 |
                          DAT_000ac268 & 0x1f | (DAT_000ac274 & 0x1f) << 0x18);
  system_reg_write(0x595c,(DAT_000ac27c & 0x1f) << 8 | (DAT_000ac280 & 0x1f) << 0x10 |
                          DAT_000ac278 & 0x1f | (DAT_000ac284 & 0x1f) << 0x18);
  system_reg_write(0x5a00,(*(unsigned int *)(param_defog_main_para_array_now + 4) & 0xff) << 8 |
                          (uint)(char)*param_defog_main_para_array_now);
  system_reg_write(0x5a04,(*(unsigned int *)(param_defog_main_para_array_now + 0xc) & 0xf) << 2 |
                          (*(unsigned int *)(param_defog_main_para_array_now + 0x10) & 0x1f) << 8 |
                          *(unsigned int *)(param_defog_main_para_array_now + 8) & 1 |
                          (*(unsigned int *)(param_defog_main_para_array_now + 0x14) & 0x1f) << 0x10 |
                          (*(unsigned int *)(param_defog_main_para_array_now + 0x18) & 0x1f) << 0x18);
  system_reg_write(0x5a08,(*(unsigned int *)(param_defog_main_para_array_now + 0x20) & 0x1f) << 8 |
                          (*(unsigned int *)(param_defog_main_para_array_now + 0x24) & 0x1f) << 0x10 |
                          *(unsigned int *)(param_defog_main_para_array_now + 0x1c) & 0x1f |
                          (*(unsigned int *)(param_defog_main_para_array_now + 0x28) & 0x1f) << 0x18);
  system_reg_write(0x5a10,(uint)param_defog_color_control_array | DAT_000ac4f8 << 0x18 |
                          (DAT_000ac4f0 & 0xff) << 8 | (uint)DAT_000ac4f4 << 0x10);
  system_reg_write(0x5a14,(DAT_000ac504 & 0x3f) << 8 | (DAT_000ac508 & 0x3f) << 0x10 |
                          DAT_000ac500 & 0x3f | (DAT_000ac50c & 0x3f) << 0x18);
  system_reg_write(0x5a18,(DAT_000ac510 & 0x3f) << 0x10 | (uint)DAT_000ac4fc);
  system_reg_write(0x5a1c,(DAT_000ac518 & 7) << 8 | (DAT_000ac51c & 7) << 0x10 | DAT_000ac514 & 7 |
                          (DAT_000ac520 & 7) << 0x18);
  system_reg_write(0x5a20,(_DAT_000ac4c8 & 7) << 8 | (_DAT_000ac4cc & 7) << 0x10 |
                          param_defog_lc_s_array & 7 | (DAT_000ac4d0 & 7) << 0x18);
  system_reg_write(0x5a24,(DAT_000ac4d8 & 0x1f) << 8 | (DAT_000ac4dc & 0x1f) << 0x10 |
                          DAT_000ac4d4 & 0x1f);
  system_reg_write(0x5a28,(DAT_000ac4e4 & 0x3f) << 8 | (DAT_000ac4e8 & 0x3f) << 0x10 |
                          DAT_000ac4e0 & 0x3f);
  system_reg_write(0x5a30,(_DAT_000ac4a0 & 7) << 8 | (_DAT_000ac4a4 & 7) << 0x10 |
                          param_defog_lc_v_array & 7 | (DAT_000ac4a8 & 7) << 0x18);
  system_reg_write(0x5a34,(DAT_000ac4b0 & 0xff) << 8 | (uint)DAT_000ac4b4 << 0x10 |
                          (uint)DAT_000ac4ac);
  system_reg_write(0x5a38,(DAT_000ac4bc & 0x3f) << 8 | (DAT_000ac4c0 & 0x3f) << 0x10 |
                          DAT_000ac4b8 & 0x3f);
  system_reg_write(0x5a40,(_DAT_000ac480 & 7) << 8 | param_defog_cc_s_array & 7);
  system_reg_write(0x5a44,(DAT_000ac488 & 0x1f) << 8 | (DAT_000ac48c & 0x1f) << 0x10 |
                          DAT_000ac484 & 0x1f);
  system_reg_write(0x5a48,(DAT_000ac494 & 0x3f) << 8 | (DAT_000ac498 & 0x3f) << 0x10 |
                          DAT_000ac490 & 0x3f);
  system_reg_write(0x5a50,(_DAT_000ac45c & 7) << 8 | (DAT_000ac460 & 7) << 0x10 |
                          param_defog_cc_v_array & 7);
  system_reg_write(0x5a54,(DAT_000ac468 & 0xff) << 8 | (uint)DAT_000ac46c << 0x10 |
                          (uint)DAT_000ac464);
  system_reg_write(0x5a58,(DAT_000ac474 & 0x3f) << 8 | (DAT_000ac478 & 0x3f) << 0x10 |
                          DAT_000ac470 & 0x3f);
  system_reg_write(0x5a60,(_DAT_000ac434 & 7) << 8 | (DAT_000ac438 & 7) << 0x10 |
                          param_defog_dark_l1_array & 7);
  system_reg_write(0x5a64,(DAT_000ac440 & 0xff) << 8 | (uint)DAT_000ac444 << 0x10 |
                          (uint)DAT_000ac43c);
  system_reg_write(0x5a68,(DAT_000ac44c & 0x3f) << 8 | (DAT_000ac450 & 0x3f) << 0x10 |
                          DAT_000ac448 & 0x3f | (DAT_000ac454 & 0x3f) << 0x18);
  system_reg_write(0x5a70,(_DAT_000ac40c & 7) << 8 | (DAT_000ac410 & 7) << 0x10 |
                          param_defog_dark_l2_array & 7);
  system_reg_write(0x5a74,(DAT_000ac418 & 0xff) << 8 | (uint)DAT_000ac41c << 0x10 |
                          (uint)DAT_000ac414);
  system_reg_write(0x5a78,(DAT_000ac424 & 0x3f) << 8 | (DAT_000ac428 & 0x3f) << 0x10 |
                          DAT_000ac420 & 0x3f | (DAT_000ac42c & 0x3f) << 0x18);
  system_reg_write(0x5b10,(uint)(char)param_defog_fpga_para_array_now[8] << 0x10 |
                          (uint)(char)param_defog_fpga_para_array_now[4]);
  return 0;
}



int tiziano_defog_params_refresh(void)

{
  int *__src;
  
  memcpy(&defog_rgbra_list,&DAT_000a5044,0x24);
  if (defog_rgbra_list == 1) {
    memcpy(&param_defog_weightlut20,&DAT_000a4bd8,0x80);
    memcpy(&param_defog_weightlut02,&DAT_000a4c58,0x80);
    memcpy(&param_defog_weightlut12,&DAT_000a4cd8,0x80);
    memcpy(&param_defog_weightlut22,&DAT_000a4d58,0x80);
    memcpy(&param_defog_weightlut21,&DAT_000a4dd8,0x80);
    memcpy(&param_defog_cent3_w_dis_array,&DAT_000a4e90,0x60);
    __src = (int *)&DAT_000a4ef0;
  }
  else {
    if (defog_rgbra_list != 0) {
      return 0xffffffff;
    }
    memcpy(&param_defog_weightlut20,param_defog_weightlut20_tmp,0x80);
    memcpy(&param_defog_weightlut02,param_defog_weightlut02_tmp,0x80);
    memcpy(&param_defog_weightlut12,param_defog_weightlut12_tmp,0x80);
    memcpy(&param_defog_weightlut22,param_defog_weightlut22_tmp,0x80);
    memcpy(&param_defog_weightlut21,param_defog_weightlut21_tmp,0x80);
    memcpy(&param_defog_cent3_w_dis_array,&param_defog_cent3_w_dis_array_tmp,0x60);
    __src = &param_defog_cent5_w_dis_array_tmp;
  }
  memcpy(&param_defog_cent5_w_dis_array,__src,0x7c);
  memcpy(defog_t_par_list1,&DAT_000a51d8,0x2c);
  memcpy(defog_t_par_list2,&DAT_000a5204,0x74);
  memcpy(&defog_manual_ctrl,&DAT_000a5278,0x1c);
  memcpy(defog_ev_list,&DAT_000a4f6c,0x24);
  memcpy(defog_trsy0_list,&DAT_000a4f90,0x24);
  memcpy(defog_trsy1_list,&DAT_000a4fb4,0x24);
  memcpy(defog_trsy2_list,&DAT_000a4fd8,0x24);
  memcpy(defog_trsy3_list,&DAT_000a4ffc,0x24);
  memcpy(defog_trsy4_list,&DAT_000a5020,0x24);
  memcpy(&param_defog_main_para_array,&DAT_000a5068,0x2c);
  memcpy(&param_defog_color_control_array,&DAT_000a5094,0x38);
  memcpy(&param_defog_lc_s_array,&DAT_000a50cc,0x28);
  memcpy(&param_defog_lc_v_array,&DAT_000a50f4,0x28);
  memcpy(&param_defog_cc_s_array,&DAT_000a511c,0x20);
  memcpy(&param_defog_cc_v_array,&DAT_000a513c,0x24);
  memcpy(&param_defog_dark_l1_array,&DAT_000a5160,0x28);
  memcpy(&param_defog_dark_l2_array,&DAT_000a5188,0x28);
  memcpy(param_defog_block_t_x_array,&DAT_000a51b0,0x14);
  memcpy(param_defog_block_t_y_array,&DAT_000a51c4,0x14);
  memcpy(defog_ev_list_wdr,&DAT_000a5294,0x24);
  memcpy(&defog_trsy0_list_wdr,&DAT_000a52b8,0x24);
  memcpy(&defog_trsy1_list_wdr,&DAT_000a52dc,0x24);
  memcpy(&defog_trsy2_list_wdr,&DAT_000a5300,0x24);
  memcpy(&defog_trsy3_list_wdr,&DAT_000a5324,0x24);
  memcpy(&defog_trsy4_list_wdr,&DAT_000a5348,0x24);
  memcpy(param_defog_main_para_wdr_array,&DAT_000a536c,0x2c);
  memcpy(param_defog_block_t_x_wdr_array,&DAT_000a5398,0x14);
  memcpy(param_defog_fpga_para_wdr_array,&DAT_000a53ac,0x40);
  memcpy(param_defog_fpga_para_array,&DAT_000a53ec,0x40);
  return 0;
}



void tisp_defog_wdr_en(int param_1)

{
  char *puVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  if (param_1 == 0) {
    defog_ev_list_now = defog_ev_list;
    defog_trsy0_list_now = defog_trsy0_list;
    defog_trsy1_list_now = defog_trsy1_list;
    defog_trsy2_list_now = defog_trsy2_list;
    defog_trsy3_list_now = defog_trsy3_list;
    defog_trsy4_list_now = defog_trsy4_list;
    param_defog_block_t_x_array_now = param_defog_block_t_x_array;
    param_defog_fpga_para_array_now = param_defog_fpga_para_array;
    puVar1 = &param_defog_main_para_array;
  }
  else {
    defog_ev_list_now = defog_ev_list_wdr;
    defog_trsy0_list_now = (char *)&defog_trsy0_list_wdr;
    defog_trsy1_list_now = (char *)&defog_trsy1_list_wdr;
    defog_trsy2_list_now = (char *)&defog_trsy2_list_wdr;
    defog_trsy3_list_now = (char *)&defog_trsy3_list_wdr;
    defog_trsy4_list_now = (char *)&defog_trsy4_list_wdr;
    param_defog_block_t_x_array_now = param_defog_block_t_x_wdr_array;
    param_defog_fpga_para_array_now = param_defog_fpga_para_wdr_array;
    puVar1 = param_defog_main_para_wdr_array;
  }
  param_defog_main_para_array_now = puVar1;
  defog_wdr_en = param_1;
  tiziano_defog_params_refresh();
  tiziano_defog_params_init();
  iVar4 = 0;
  do {
    iVar3 = iVar4 * 10 + 0x58000;
    iVar5 = 0;
    do {
      iVar2 = iVar4 + iVar5;
      system_reg_write(iVar3,*(int *)((int)&defog_block_air_light_r + iVar2) << 0x18 |
                             (uint)(char)(&defog_block_transmit_t)[iVar2] |
                             (uint)(char)(&defog_block_air_light_g)[iVar2] << 0x10 |
                             (*(unsigned int *)((int)&defog_block_air_light_b + iVar2) & 0xff) << 8);
      iVar5 = iVar5 + 0x48;
      iVar3 = iVar3 + 4;
    } while (iVar5 != 0x2d0);
    iVar4 = iVar4 + 4;
  } while (iVar4 != 0x48);
  return;
}



int tiziano_defog_dn_params_refresh(void)

{
  tiziano_defog_params_refresh();
  tiziano_defog_params_init();
  tiziano_defog_set_reg_params();
  return 0;
}



void defog_wei_interpcot(int param_1,int param_2,int param_3,int param_4,unsigned int *param_5)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int *piVar4;
  int *piVar5;
  unsigned int *puVar6;
  unsigned int uVar7;
  int iVar8;
  int iVar9;
  int local_118 [32];
  unsigned int local_98 [32];
  
  memset(local_98,0,0x80);
  memset(local_118,0,0x80);
  tiziano_defog_set_reg_params();
  iVar2 = 0;
  for (iVar8 = 0; piVar5 = (int *)(param_3 + iVar2), iVar8 != param_1; iVar8 = iVar8 + 1) {
    piVar4 = (int *)(param_4 + iVar2);
    for (iVar3 = 0; iVar3 != param_2; iVar3 = iVar3 + 1) {
      iVar1 = *piVar5;
      iVar9 = *piVar4;
      local_98[iVar1] = local_98[iVar1] + 1;
      local_118[iVar1] = local_118[iVar1] + iVar9;
      piVar5 = piVar5 + 1;
      piVar4 = piVar4 + 1;
    }
    iVar2 = iVar2 + param_2 * 4;
  }
  puVar6 = local_98;
  piVar5 = local_118;
  iVar2 = 0;
  do {
    uVar7 = *puVar6;
    if (uVar7 == 0) {
      *param_5 = 0;
    }
    else {
      uVar7 = ((uVar7 >> 1) + *piVar5) / uVar7;
      if (uVar7 < 0x20) {
        *param_5 = uVar7;
      }
      else {
        *param_5 = 0x1f;
      }
    }
    if ((iVar2 != 0) && (*param_5 < param_5[-1])) {
      *param_5 = param_5[-1];
    }
    iVar2 = iVar2 + 1;
    puVar6 = puVar6 + 1;
    param_5 = param_5 + 1;
    piVar5 = piVar5 + 1;
  } while (iVar2 != 0x20);
  return;
}



int defog_3x3_5x5_params_init(int param_1,int param_2)

{
  bool bVar1;
  int *puVar2;
  int *puVar3;
  int *puVar4;
  int iVar5;
  int *piVar6;
  int *puVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  int *puVar12;
  int iVar13;
  int *puVar14;
  unsigned int *puVar15;
  int *puVar16;
  unsigned int *puVar17;
  int *puVar18;
  int iVar19;
  int *puVar20;
  int iVar21;
  int *puVar22;
  int *puVar23;
  unsigned int *puVar24;
  int iVar25;
  int iVar26;
  int iVar27;
  int iVar28;
  unsigned int uVar29;
  int iVar30;
  unsigned int uVar31;
  unsigned int uVar32;
  unsigned int local_2b0 [63];
  int local_1b4 [63];
  int local_b8 [24];
  int *local_58;
  int *local_54;
  int *local_50;
  int *local_4c;
  int *local_48;
  int local_44;
  unsigned int local_40;
  unsigned int local_3c;
  int local_38;
  int local_34;
  int local_30;
  int local_2c;
  
  memcpy(local_b8,&DAT_0007cd04,0x60);
  memcpy(local_1b4,&DAT_0007cd64,0xfc);
  memset(local_2b0,0,0xfc);
  local_40 = (param_2 + 5U) / 10;
  iVar11 = 0;
  uVar31 = (param_1 + 9U) / 0x12;
  iVar26 = local_40 * 5 + -1;
  local_3c = uVar31 * 4;
  local_44 = uVar31 * 5 + -1;
  uVar32 = (((param_2 * param_1 + 0x3f4U) / 0x7e9) * DAT_000ac634 + 0x32) / 100;
  do {
    piVar6 = (int *)((int)local_b8 + iVar11);
    puVar17 = (unsigned int *)((int)&param_defog_cent3_w_dis_array_tmp + iVar11);
    iVar11 = iVar11 + 4;
    *puVar17 = uVar32 * *piVar6 + 0x2000 >> 0xe;
  } while (iVar11 != 0x60);
  iVar11 = 0;
  do {
    puVar17 = (unsigned int *)((int)local_2b0 + iVar11);
    piVar6 = (int *)((int)local_1b4 + iVar11);
    iVar11 = iVar11 + 4;
    *puVar17 = uVar32 * *piVar6 + 0x1000 >> 0xd;
  } while (iVar11 != 0xfc);
  puVar17 = local_2b0;
  iVar11 = 0;
  do {
    puVar15 = (unsigned int *)((int)&param_defog_cent5_w_dis_array_tmp + iVar11);
    iVar11 = iVar11 + 4;
    *puVar15 = puVar17[1];
    puVar17 = puVar17 + 2;
  } while (iVar11 != 0x7c);
  iVar27 = local_40 * uVar31;
  iVar25 = iVar27 * 4;
  puVar2 = (int *)private_vmalloc(iVar25);
  puVar3 = (int *)private_vmalloc(iVar25);
  puVar4 = (int *)private_vmalloc(iVar25);
  local_58 = (int *)private_vmalloc(iVar25);
  local_54 = (int *)private_vmalloc(iVar25);
  local_50 = (int *)private_vmalloc(iVar25);
  local_4c = (int *)private_vmalloc(iVar25);
  local_48 = (int *)private_vmalloc(iVar25);
  iVar11 = local_3c;
  uVar32 = local_40;
  iVar5 = 0;
  puVar7 = local_50;
  puVar12 = local_4c;
  puVar14 = puVar4;
  puVar16 = puVar3;
  puVar18 = puVar2;
  puVar20 = local_48;
  puVar22 = local_54;
  puVar23 = local_58;
  while (bVar1 = iVar5 != iVar27, iVar5 = iVar5 + 1, bVar1) {
    *puVar18 = 0;
    *puVar16 = 0;
    puVar18 = puVar18 + 1;
    *puVar14 = 0;
    puVar16 = puVar16 + 1;
    *puVar23 = 0;
    puVar14 = puVar14 + 1;
    *puVar22 = 0;
    puVar23 = puVar23 + 1;
    *puVar7 = 0;
    puVar22 = puVar22 + 1;
    *puVar12 = 0;
    puVar7 = puVar7 + 1;
    *puVar20 = 0;
    puVar12 = puVar12 + 1;
    puVar20 = puVar20 + 1;
  }
  local_38 = local_40 * -2;
  local_34 = uVar31 * -2;
  local_30 = local_40 * 2;
  local_2c = uVar31 * 2;
  iVar5 = 0;
  uVar29 = 0;
  do {
    if (uVar29 == uVar32) {
      local_40 = uVar32;
      local_3c = iVar11;
      local_44 = private_vmalloc(iVar25);
      iVar26 = private_vmalloc(iVar25);
      iVar5 = private_vmalloc(iVar25);
      iVar27 = private_vmalloc(iVar25);
      iVar25 = private_vmalloc(iVar25);
      iVar11 = local_44;
      iVar8 = 0;
      for (uVar32 = 0; uVar32 != local_40; uVar32 = uVar32 + 1) {
        puVar17 = (unsigned int *)((int)local_54 + iVar8);
        puVar24 = (unsigned int *)((int)local_50 + iVar8);
        puVar15 = (unsigned int *)((int)local_48 + iVar8);
        for (iVar13 = 0; iVar28 = iVar8 + iVar13, local_3c != iVar13; iVar13 = iVar13 + 4) {
          *(unsigned int *)(local_44 + iVar28) = *puVar17 >> 1;
          *(unsigned int *)(iVar26 + iVar28) = *puVar17 + *puVar24 >> 2;
          *(unsigned int *)(iVar5 + iVar28) = *puVar17 + *puVar15 >> 2;
          *(unsigned int *)(iVar27 + iVar28) = *puVar24 >> 1;
          *(unsigned int *)(iVar25 + iVar28) = *puVar15 >> 1;
          puVar17 = puVar17 + 1;
          puVar24 = puVar24 + 1;
          puVar15 = puVar15 + 1;
        }
        iVar8 = iVar8 + local_3c;
      }
      local_40 = local_44;
      local_44 = iVar25;
      defog_wei_interpcot(uVar32,uVar31,iVar11,puVar2,param_defog_weightlut22_tmp);
      defog_wei_interpcot(uVar32,uVar31,iVar26,puVar3,param_defog_weightlut21_tmp);
      defog_wei_interpcot(uVar32,uVar31,iVar5,local_58,param_defog_weightlut12_tmp);
      defog_wei_interpcot(uVar32,uVar31,iVar27,puVar4,param_defog_weightlut20_tmp);
      defog_wei_interpcot(uVar32,uVar31,local_44,local_4c,param_defog_weightlut02_tmp);
      private_vfree(puVar2);
      private_vfree(puVar3);
      private_vfree(puVar4);
      private_vfree(local_58);
      private_vfree(local_54);
      private_vfree(local_50);
      private_vfree(local_4c);
      private_vfree(local_48);
      private_vfree(local_40);
      private_vfree(iVar26);
      private_vfree(iVar5);
      private_vfree(iVar27);
      private_vfree(local_44);
      return 0;
    }
    iVar8 = iVar26 + local_38;
    iVar30 = iVar8 * iVar8;
    iVar8 = iVar8 + uVar32 * -2;
    iVar28 = iVar26 * iVar26;
    iVar8 = iVar8 * iVar8;
    iVar27 = local_44;
    for (iVar13 = 0; iVar13 != iVar11; iVar13 = iVar13 + 4) {
      iVar9 = iVar27 + uVar31 * -2;
      iVar21 = iVar9 * iVar9;
      iVar9 = iVar9 + uVar31 * -2;
      iVar19 = iVar27 * iVar27;
      iVar9 = iVar9 * iVar9;
      local_40 = iVar19 + iVar8 + 0x20 >> 6;
      local_3c = iVar21 + iVar8 + 0x20 >> 6;
      puVar17 = local_2b0;
      iVar10 = 0;
      do {
        if ((uint)(iVar28 + iVar19 + 0x20 >> 6) < *puVar17) {
          *(int *)((int)puVar2 + iVar13 + iVar5) = 0x3f - iVar10;
          break;
        }
        iVar10 = iVar10 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar10 != 0x3f);
      puVar17 = local_2b0;
      iVar10 = 0;
      do {
        if ((uint)(iVar28 + iVar21 + 0x20 >> 6) < *puVar17) {
          *(int *)((int)puVar3 + iVar13 + iVar5) = 0x3f - iVar10;
          break;
        }
        iVar10 = iVar10 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar10 != 0x3f);
      puVar17 = local_2b0;
      iVar10 = 0;
      do {
        if ((uint)(iVar28 + iVar9 + 0x20 >> 6) < *puVar17) {
          *(int *)((int)puVar4 + iVar13 + iVar5) = 0x3f - iVar10;
          break;
        }
        iVar10 = iVar10 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar10 != 0x3f);
      puVar17 = local_2b0;
      iVar10 = 0;
      do {
        if ((uint)(iVar19 + iVar30 + 0x20 >> 6) < *puVar17) {
          *(int *)((int)local_58 + iVar13 + iVar5) = 0x3f - iVar10;
          break;
        }
        iVar10 = iVar10 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar10 != 0x3f);
      puVar17 = local_2b0;
      iVar10 = 0;
      do {
        if ((uint)(iVar21 + iVar30 + 0x20 >> 6) < *puVar17) {
          *(int *)((int)local_54 + iVar13 + iVar5) = 0x3f - iVar10;
          break;
        }
        iVar10 = iVar10 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar10 != 0x3f);
      puVar17 = local_2b0;
      iVar10 = 0;
      do {
        if ((uint)(iVar9 + iVar30 + 0x20 >> 6) < *puVar17) {
          *(int *)((int)local_50 + iVar13 + iVar5) = 0x3f - iVar10;
          break;
        }
        iVar10 = iVar10 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar10 != 0x3f);
      puVar17 = local_2b0;
      iVar9 = 0;
      do {
        if (local_40 < *puVar17) {
          *(int *)((int)local_4c + iVar13 + iVar5) = 0x3f - iVar9;
          break;
        }
        iVar9 = iVar9 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar9 != 0x3f);
      puVar17 = local_2b0;
      iVar9 = 0;
      do {
        if (local_3c < *puVar17) {
          *(int *)((int)local_48 + iVar13 + iVar5) = 0x3f - iVar9;
          break;
        }
        iVar9 = iVar9 + 1;
        puVar17 = puVar17 + 1;
      } while (iVar9 != 0x3f);
      iVar27 = iVar27 + -2;
    }
    uVar29 = uVar29 + 1;
    iVar26 = iVar26 + -2;
    iVar5 = iVar5 + iVar11;
  } while( true );
}



int tiziano_defog_init(unsigned int param_1,unsigned int param_2)

{
  char *puVar1;
  unsigned int uVar2;
  int *piVar3;
  int iVar4;
  int iVar5;
  
  defog_frm_num = 0;
  iVar4 = param_2 * param_1;
  if (defog_wdr_en == 0) {
    defog_ev_list_now = defog_ev_list;
    defog_trsy0_list_now = defog_trsy0_list;
    defog_trsy1_list_now = defog_trsy1_list;
    defog_trsy2_list_now = defog_trsy2_list;
    defog_trsy3_list_now = defog_trsy3_list;
    defog_trsy4_list_now = defog_trsy4_list;
    param_defog_block_t_x_array_now = param_defog_block_t_x_array;
    param_defog_fpga_para_array_now = param_defog_fpga_para_array;
    puVar1 = &param_defog_main_para_array;
  }
  else {
    defog_ev_list_now = defog_ev_list_wdr;
    defog_trsy0_list_now = (char *)&defog_trsy0_list_wdr;
    defog_trsy1_list_now = (char *)&defog_trsy1_list_wdr;
    defog_trsy2_list_now = (char *)&defog_trsy2_list_wdr;
    defog_trsy3_list_now = (char *)&defog_trsy3_list_wdr;
    defog_trsy4_list_now = (char *)&defog_trsy4_list_wdr;
    param_defog_block_t_x_array_now = param_defog_block_t_x_wdr_array;
    param_defog_fpga_para_array_now = param_defog_fpga_para_wdr_array;
    puVar1 = param_defog_main_para_wdr_array;
  }
  param_defog_main_para_array_now = puVar1;
  tiziano_defog_params_refresh();
  if (param_2 == 0x2d0) {
    puVar1 = block_sizem_720;
LAB_00055f14:
    memcpy(&defog_block_sizem,puVar1,0x2c);
    defog_block_area_index = 0;
  }
  else {
    if (param_2 == 0x438) {
      puVar1 = block_sizem_1080;
      goto LAB_00055f14;
    }
    if (param_2 != 0x510) {
      if (param_2 == 0x5a0) {
        puVar1 = block_sizem_1440;
      }
      else {
        if (param_2 != 0x780) {
          if (param_2 == 0x798) {
            memcpy(&defog_block_sizem,block_sizem_1944,0x2c);
            defog_block_area_index = 4;
          }
          else {
            piVar3 = (int *)&defog_block_sizem;
            uVar2 = 1;
            defog_block_area_index = param_2 % 10;
            do {
              iVar5 = param_2 / 10 + *piVar3;
              if (uVar2 <= param_2 % 10) {
                iVar5 = iVar5 + 1;
              }
              uVar2 = uVar2 + 1;
              piVar3[1] = iVar5;
              piVar3 = piVar3 + 1;
            } while (uVar2 != 0xb);
          }
          goto LAB_00055ffc;
        }
        puVar1 = block_sizem_1920;
      }
      goto LAB_00055f14;
    }
    memcpy(&defog_block_sizem,block_sizem_1296,0x2c);
    defog_block_area_index = 6;
  }
LAB_00055ffc:
  piVar3 = (int *)&defog_block_sizen;
  if (param_1 == 0x500) {
    memcpy(&defog_block_sizen,block_sizen_1280,0x4c);
    DAT_000ac670 = 2;
  }
  else if (param_1 == 0x780) {
    memcpy(&defog_block_sizen,block_sizen_1920,0x4c);
    DAT_000ac670 = 0xc;
  }
  else {
    if (param_1 == 0x900) {
      puVar1 = block_sizen_2304;
    }
    else {
      if (param_1 == 0xa00) {
        memcpy(&defog_block_sizen,block_sizen_2560,0x4c);
        DAT_000ac670 = 4;
        goto LAB_00056120;
      }
      if (param_1 != 0xa20) {
        uVar2 = 1;
        DAT_000ac670 = param_1 % 0x12;
        do {
          iVar5 = param_1 / 0x12 + *piVar3;
          if (uVar2 <= param_1 % 0x12) {
            iVar5 = iVar5 + 1;
          }
          uVar2 = uVar2 + 1;
          piVar3[1] = iVar5;
          piVar3 = piVar3 + 1;
        } while (uVar2 != 0x13);
        goto LAB_00056120;
      }
      puVar1 = block_sizen_2592;
    }
    memcpy(&defog_block_sizen,puVar1,0x4c);
    DAT_000ac670 = 0;
  }
LAB_00056120:
  if (iVar4 == 0xe1000) {
    memcpy(&param_defog_cent3_w_dis_array_tmp,weight3_1280_720,0x60);
    memcpy(&param_defog_cent5_w_dis_array_tmp,weight5_1280_720,0x7c);
    memcpy(param_defog_weightlut22_tmp,wei22_16_9,0x80);
    memcpy(param_defog_weightlut12_tmp,wei12_16_9,0x80);
    memcpy(param_defog_weightlut21_tmp,wei21_16_9,0x80);
    memcpy(param_defog_weightlut20_tmp,wei20_16_9,0x80);
    memcpy(param_defog_weightlut02_tmp,wei02_16_9,0x80);
    defog_block_area_div = 0xc78031;
    DAT_000ac67c = 0xca4587;
    DAT_000ac678 = 0xca4f85;
    DAT_000ac680 = 0xcd1ed9;
  }
  else if (iVar4 == 0x1fa400) {
    memcpy(&param_defog_cent3_w_dis_array_tmp,weight3_1920_1080,0x60);
    memcpy(&param_defog_cent5_w_dis_array_tmp,weight5_1920_1080,0x7c);
    memcpy(param_defog_weightlut22_tmp,wei22_16_9,0x80);
    memcpy(param_defog_weightlut12_tmp,wei12_16_9,0x80);
    memcpy(param_defog_weightlut21_tmp,wei21_16_9,0x80);
    memcpy(param_defog_weightlut20_tmp,wei20_16_9,0x80);
    memcpy(param_defog_weightlut02_tmp,wei02_16_9,0x80);
    defog_block_area_div = 0x59e7fd;
    DAT_000ac678 = 0x5ac11e;
    DAT_000ac67c = 0x5abd19;
    DAT_000ac680 = 0x5b983e;
  }
  else if (iVar4 == 0x2d9000) {
    memcpy(&param_defog_cent3_w_dis_array_tmp,weight3_2304_1296,0x60);
    memcpy(&param_defog_cent5_w_dis_array_tmp,weight5_2304_1296,0x7c);
    memcpy(param_defog_weightlut22_tmp,wei22_16_9,0x80);
    memcpy(param_defog_weightlut12_tmp,wei12_16_9,0x80);
    memcpy(param_defog_weightlut21_tmp,wei21_16_9,0x80);
    memcpy(param_defog_weightlut20_tmp,wei20_16_9,0x80);
    memcpy(param_defog_weightlut02_tmp,wei02_16_9,0x80);
    defog_block_area_div = 0x3e86e2;
    DAT_000ac67c = 0x3f02f8;
    DAT_000ac678 = 0x3f03f0;
    DAT_000ac680 = 0x3f80fe;
  }
  else if (iVar4 == 0x384000) {
    memcpy(&param_defog_cent3_w_dis_array_tmp,weight3_2560_1440,0x60);
    memcpy(&param_defog_cent5_w_dis_array_tmp,weight5_2560_1440,0x7c);
    memcpy(param_defog_weightlut22_tmp,wei22_16_9,0x80);
    memcpy(param_defog_weightlut12_tmp,wei12_16_9,0x80);
    memcpy(param_defog_weightlut21_tmp,wei21_16_9,0x80);
    memcpy(param_defog_weightlut20_tmp,wei20_16_9,0x80);
    memcpy(param_defog_weightlut02_tmp,wei02_16_9,0x80);
    defog_block_area_div = 0x329202;
    DAT_000ac678 = 0x32ed2d;
    DAT_000ac67c = 0x32ebe9;
    DAT_000ac680 = 0x3347b6;
  }
  else if (iVar4 == 0x4b0000) {
    memcpy(&param_defog_cent3_w_dis_array_tmp,weight3_2560_1920,0x60);
    memcpy(&param_defog_cent5_w_dis_array_tmp,weight5_2560_1920,0x7c);
    memcpy(param_defog_weightlut22_tmp,wei22_4_3,0x80);
    memcpy(param_defog_weightlut12_tmp,wei12_4_3,0x80);
    memcpy(param_defog_weightlut21_tmp,wei21_4_3,0x80);
    memcpy(param_defog_weightlut20_tmp,wei20_4_3,0x80);
    memcpy(param_defog_weightlut02_tmp,wei02_4_3,0x80);
    DAT_000ac678 = 0x2642c5;
    defog_block_area_div = 0x25fe46;
    DAT_000ac67c = 0x2630ef;
    DAT_000ac680 = 0x2675c9;
  }
  else if (iVar4 == 0x4ce300) {
    memcpy(&param_defog_cent3_w_dis_array_tmp,weight3_2592_1944,0x60);
    memcpy(&param_defog_cent5_w_dis_array_tmp,weight5_2592_1944,0x7c);
    memcpy(param_defog_weightlut22_tmp,wei22_4_3,0x80);
    memcpy(param_defog_weightlut12_tmp,wei12_4_3,0x80);
    memcpy(param_defog_weightlut21_tmp,wei21_4_3,0x80);
    memcpy(param_defog_weightlut20_tmp,wei20_4_3,0x80);
    memcpy(param_defog_weightlut02_tmp,wei02_4_3,0x80);
    defog_block_area_div = 0x2515bd;
    DAT_000ac678 = 0x2557ab;
    DAT_000ac67c = 0x2546ad;
    DAT_000ac680 = 0x2588f2;
  }
  else {
    defog_3x3_5x5_params_init(param_1,param_2);
    iVar4 = param_2 / 10 + 1;
    iVar5 = iVar4 * (param_1 / 0x12 + 1);
    defog_block_area_div = fix_point_div_64(0,iVar4,0,0x10,iVar5,0,iVar4);
    iVar5 = iVar5 - iVar4;
    DAT_000ac678 = fix_point_div_64(0,iVar5,0,0x10,iVar5,0);
    DAT_000ac67c = fix_point_div_64(0);
    DAT_000ac680 = fix_point_div_64(0);
  }
  if (defog_rgbra_list == 0) {
    memcpy(&param_defog_cent3_w_dis_array,&param_defog_cent3_w_dis_array_tmp,0x60);
    memcpy(&param_defog_cent5_w_dis_array,&param_defog_cent5_w_dis_array_tmp,0x7c);
    memcpy(&param_defog_weightlut22,param_defog_weightlut22_tmp,0x80);
    memcpy(&param_defog_weightlut12,param_defog_weightlut12_tmp,0x80);
    memcpy(&param_defog_weightlut21,param_defog_weightlut21_tmp,0x80);
    memcpy(&param_defog_weightlut20,param_defog_weightlut20_tmp,0x80);
    memcpy(&param_defog_weightlut02,param_defog_weightlut02_tmp,0x80);
  }
  system_reg_write(0x5b04,0);
  system_reg_write(0x5b0c,0xffffffff);
  system_reg_write(0x5b00,0);
  system_reg_write(0x5800,(DAT_000ac5a0 & 0xfff) << 0x10 | defog_block_sizem & 0xfff);
  system_reg_write(0x5804,(DAT_000ac5a8 & 0xfff) << 0x10 | DAT_000ac5a4 & 0xfff);
  system_reg_write(0x5808,(DAT_000ac5b0 & 0xfff) << 0x10 | DAT_000ac5ac & 0xfff);
  system_reg_write(0x580c,(DAT_000ac5b8 & 0xfff) << 0x10 | DAT_000ac5b4 & 0xfff);
  system_reg_write(0x5810,(DAT_000ac5c0 & 0xfff) << 0x10 | DAT_000ac5bc & 0xfff);
  system_reg_write(0x5814,DAT_000ac5c4 & 0xfff);
  system_reg_write(0x5820,(DAT_000ac554 & 0xfff) << 0x10 | defog_block_sizen & 0xfff);
  system_reg_write(0x5824,(DAT_000ac55c & 0xfff) << 0x10 | DAT_000ac558 & 0xfff);
  system_reg_write(0x5828,(DAT_000ac564 & 0xfff) << 0x10 | DAT_000ac560 & 0xfff);
  system_reg_write(0x582c,(DAT_000ac56c & 0xfff) << 0x10 | DAT_000ac568 & 0xfff);
  system_reg_write(0x5830,(DAT_000ac574 & 0xfff) << 0x10 | DAT_000ac570 & 0xfff);
  system_reg_write(0x5834,(DAT_000ac57c & 0xfff) << 0x10 | DAT_000ac578 & 0xfff);
  system_reg_write(0x5838,(DAT_000ac584 & 0xfff) << 0x10 | DAT_000ac580 & 0xfff);
  system_reg_write(0x583c,(DAT_000ac58c & 0xfff) << 0x10 | DAT_000ac588 & 0xfff);
  system_reg_write(0x5840,(DAT_000ac594 & 0xfff) << 0x10 | DAT_000ac590 & 0xfff);
  system_reg_write(0x5844,DAT_000ac598 & 0xfff);
  tiziano_defog_params_init();
  tiziano_defog_set_reg_params();
  system_irq_func_set(0x14,tiziano_defog_interrupt_static);
  tisp_event_set_cb(3,tisp_defog_process);
  return 0;
}



int tisp_defog_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x35a:
    __src = (char *)&param_defog_weightlut20;
    goto LAB_00056cec;
  case 0x35b:
    __src = (char *)&param_defog_weightlut02;
    goto LAB_00056cec;
  case 0x35c:
    __src = (char *)&param_defog_weightlut12;
    goto LAB_00056cec;
  case 0x35d:
    __src = (char *)&param_defog_weightlut22;
    goto LAB_00056cec;
  case 0x35e:
    __src = (char *)&param_defog_weightlut21;
LAB_00056cec:
    __n = 0x80;
    goto LAB_00056cf0;
  case 0x35f:
    __src = param_defog_col_ct_array;
    goto LAB_00056bb0;
  case 0x360:
    __src = (char *)&param_defog_cent3_w_dis_array;
    __n = 0x60;
    goto LAB_00056cf0;
  case 0x361:
    __src = (char *)&param_defog_cent5_w_dis_array;
    __n = 0x7c;
    goto LAB_00056cf0;
  case 0x362:
    __src = defog_ev_list;
    break;
  case 0x363:
    __src = defog_trsy0_list;
    break;
  case 0x364:
    __src = defog_trsy1_list;
    break;
  case 0x365:
    __src = defog_trsy2_list;
    break;
  case 0x366:
    __src = defog_trsy3_list;
    break;
  case 0x367:
    __src = defog_trsy4_list;
    break;
  case 0x368:
    __src = (char *)&defog_rgbra_list;
    break;
  case 0x369:
    __src = &param_defog_main_para_array;
    goto LAB_00056c74;
  case 0x36a:
    __src = &param_defog_color_control_array;
LAB_00056bb0:
    __n = 0x38;
    goto LAB_00056cf0;
  case 0x36b:
    __src = (char *)&param_defog_lc_s_array;
    goto LAB_00056c00;
  case 0x36c:
    __src = (char *)&param_defog_lc_v_array;
    goto LAB_00056c00;
  case 0x36d:
    __src = (char *)&param_defog_cc_s_array;
    __n = 0x20;
    goto LAB_00056cf0;
  case 0x36e:
    __src = (char *)&param_defog_cc_v_array;
    break;
  case 0x36f:
    __src = (char *)&param_defog_dark_l1_array;
    goto LAB_00056c00;
  case 0x370:
    __src = (char *)&param_defog_dark_l2_array;
LAB_00056c00:
    __n = 0x28;
    goto LAB_00056cf0;
  case 0x371:
    __src = param_defog_block_t_x_array;
    goto LAB_00056c84;
  case 0x372:
    __src = param_defog_block_t_y_array;
    goto LAB_00056c84;
  case 0x373:
    __src = defog_t_par_list1;
    goto LAB_00056c74;
  case 0x374:
    __src = defog_t_par_list2;
    __n = 0x74;
    goto LAB_00056cf0;
  case 0x375:
    __src = (char *)&defog_manual_ctrl;
    __n = 0x1c;
    goto LAB_00056cf0;
  case 0x376:
    __src = defog_ev_list_wdr;
    break;
  case 0x377:
    __src = (char *)&defog_trsy0_list_wdr;
    break;
  case 0x378:
    __src = (char *)&defog_trsy1_list_wdr;
    break;
  case 0x379:
    __src = (char *)&defog_trsy2_list_wdr;
    break;
  case 0x37a:
    __src = (char *)&defog_trsy3_list_wdr;
    break;
  case 0x37b:
    __src = (char *)&defog_trsy4_list_wdr;
    break;
  case 0x37c:
    __src = param_defog_main_para_wdr_array;
LAB_00056c74:
    __n = 0x2c;
    goto LAB_00056cf0;
  case 0x37d:
    __src = param_defog_block_t_x_wdr_array;
LAB_00056c84:
    __n = 0x14;
    goto LAB_00056cf0;
  case 0x37e:
    __src = param_defog_fpga_para_wdr_array;
    goto LAB_00056ca0;
  case 0x37f:
    __src = param_defog_fpga_para_array;
LAB_00056ca0:
    __n = 0x40;
    goto LAB_00056cf0;
  default:
    isp_printf(2,"%s,%d: defog not support param id %d\n","tisp_defog_param_array_get",0x93e,param_1
              );
    return 0xffffffff;
  }
  __n = 0x24;
LAB_00056cf0:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_defog_param_array_set(int param_1,void *param_2,int *param_3)

{
  int *puVar1;
  char *puVar2;
  int uVar3;
  
  switch(param_1) {
  case 0x35a:
    puVar1 = &param_defog_weightlut20;
    goto LAB_00056d80;
  case 0x35b:
    puVar1 = &param_defog_weightlut02;
    goto LAB_00056d80;
  case 0x35c:
    puVar1 = &param_defog_weightlut12;
    goto LAB_00056d80;
  case 0x35d:
    puVar1 = &param_defog_weightlut22;
    goto LAB_00056d80;
  case 0x35e:
    puVar1 = &param_defog_weightlut21;
LAB_00056d80:
    memcpy(puVar1,param_2,0x80);
    *param_3 = 0x80;
    return 0;
  case 0x35f:
    puVar2 = param_defog_col_ct_array;
    goto LAB_00056f88;
  case 0x360:
    memcpy(&param_defog_cent3_w_dis_array,param_2,0x60);
    uVar3 = 0x60;
    goto LAB_00057140;
  case 0x361:
    memcpy(&param_defog_cent5_w_dis_array,param_2,0x7c);
    uVar3 = 0x7c;
    goto LAB_00057140;
  case 0x362:
    puVar2 = defog_ev_list;
    break;
  case 0x363:
    puVar2 = defog_trsy0_list;
    break;
  case 0x364:
    puVar2 = defog_trsy1_list;
    break;
  case 0x365:
    puVar2 = defog_trsy2_list;
    break;
  case 0x366:
    puVar2 = defog_trsy3_list;
    break;
  case 0x367:
    puVar2 = defog_trsy4_list;
    break;
  case 0x368:
    memcpy(&defog_rgbra_list,param_2,0x24);
    uVar3 = 0x24;
    if (defog_rgbra_list == 0) {
      memcpy(&param_defog_cent3_w_dis_array,&param_defog_cent3_w_dis_array_tmp,0x60);
      memcpy(&param_defog_cent5_w_dis_array,&param_defog_cent5_w_dis_array_tmp,0x7c);
      memcpy(&param_defog_weightlut22,param_defog_weightlut22_tmp,0x80);
      memcpy(&param_defog_weightlut12,param_defog_weightlut12_tmp,0x80);
      memcpy(&param_defog_weightlut21,param_defog_weightlut21_tmp,0x80);
      memcpy(&param_defog_weightlut02,param_defog_weightlut02_tmp,0x80);
      memcpy(&param_defog_weightlut20,param_defog_weightlut20_tmp,0x80);
      *param_3 = 0x24;
      return 0;
    }
    goto LAB_00057140;
  case 0x369:
    puVar2 = &param_defog_main_para_array;
    goto LAB_000570a4;
  case 0x36a:
    puVar2 = &param_defog_color_control_array;
LAB_00056f88:
    memcpy(puVar2,param_2,0x38);
    *param_3 = 0x38;
    return 0;
  case 0x36b:
    puVar1 = &param_defog_lc_s_array;
    goto LAB_00056ffc;
  case 0x36c:
    puVar1 = &param_defog_lc_v_array;
    goto LAB_00056ffc;
  case 0x36d:
    memcpy(&param_defog_cc_s_array,param_2,0x20);
    uVar3 = 0x20;
    goto LAB_00057140;
  case 0x36e:
    puVar2 = (char *)&param_defog_cc_v_array;
    break;
  case 0x36f:
    puVar1 = &param_defog_dark_l1_array;
    goto LAB_00056ffc;
  case 0x370:
    puVar1 = &param_defog_dark_l2_array;
LAB_00056ffc:
    memcpy(puVar1,param_2,0x28);
    *param_3 = 0x28;
    return 0;
  case 0x371:
    puVar2 = param_defog_block_t_x_array;
    goto LAB_000570c0;
  case 0x372:
    puVar2 = param_defog_block_t_y_array;
    goto LAB_000570c0;
  case 0x373:
    puVar2 = defog_t_par_list1;
    goto LAB_000570a4;
  case 0x374:
    memcpy(defog_t_par_list2,param_2,0x74);
    uVar3 = 0x74;
    goto LAB_00057140;
  case 0x375:
    memcpy(&defog_manual_ctrl,param_2,0x1c);
    uVar3 = 0x1c;
    goto LAB_00057140;
  case 0x376:
    puVar2 = defog_ev_list_wdr;
    break;
  case 0x377:
    puVar2 = (char *)&defog_trsy0_list_wdr;
    break;
  case 0x378:
    puVar2 = (char *)&defog_trsy1_list_wdr;
    break;
  case 0x379:
    puVar2 = (char *)&defog_trsy2_list_wdr;
    break;
  case 0x37a:
    puVar2 = (char *)&defog_trsy3_list_wdr;
    break;
  case 0x37b:
    puVar2 = (char *)&defog_trsy4_list_wdr;
    break;
  case 0x37c:
    puVar2 = param_defog_main_para_wdr_array;
LAB_000570a4:
    memcpy(puVar2,param_2,0x2c);
    *param_3 = 0x2c;
    return 0;
  case 0x37d:
    puVar2 = param_defog_block_t_x_wdr_array;
LAB_000570c0:
    memcpy(puVar2,param_2,0x14);
    *param_3 = 0x14;
    return 0;
  case 0x37e:
    memcpy(param_defog_fpga_para_wdr_array,param_2,0x40);
    uVar3 = 0x40;
    goto LAB_00057140;
  case 0x37f:
    memcpy(param_defog_fpga_para_array,param_2,0x40);
    tiziano_defog_params_init();
    uVar3 = 0x40;
LAB_00057140:
    *param_3 = uVar3;
    return 0;
  default:
    isp_printf(2,"%s,%d: defog not support param id %d\n","tisp_defog_param_array_set",0xa19,param_1
              );
    return 0xffffffff;
  }
  memcpy(puVar2,param_2,0x24);
  *param_3 = 0x24;
  return 0;
}



int defog_itp(int param_1,int param_2,int param_3)

{
  if (0x7f < param_1) {
    return (0x180 - param_1) * param_3 + ((param_2 * 100) / 0xff) * (param_1 + -0x80) >> 8;
  }
  return param_1 * param_3 + (0x80 - param_1) * 100 >> 7;
}



void tisp_g_defog_str_internal(char *param_1)

{
  *param_1 = (char)defog_strength_attr;
  return;
}



void tisp_s_defog_str_internal(char *param_1)

{
  int iVar1;
  int uVar2;
  int uVar3;
  int uVar4;
  int uVar5;
  int uVar6;
  int iVar7;
  int *puVar8;
  int *puVar9;
  unsigned int uVar10;
  code *pcVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  
  iVar1 = defog_wdr_en;
  uVar10 = (uint)*param_1;
  iVar7 = 0x1f;
  if (0x1e < *(int *)param_defog_main_para_array_now) {
    iVar7 = *(int *)param_defog_main_para_array_now;
  }
  puVar9 = (int *)&DAT_000a4f90;
  iVar12 = 0;
  iVar16 = 0xb0000;
  iVar15 = 0xb0000;
  iVar14 = 0xb0000;
  iVar13 = 0x24;
  defog_strength_attr = uVar10;
  do {
    pcVar11 = defog_itp;
    if (iVar1 == 0) {
      uVar2 = defog_itp(uVar10,iVar7,*puVar9);
      uVar3 = (*pcVar11)(uVar10,iVar7,puVar9[9]);
      uVar4 = (*pcVar11)(uVar10,iVar7,puVar9[0x12]);
      uVar5 = (*pcVar11)(uVar10,iVar7,puVar9[0x1b]);
      uVar6 = (*pcVar11)(uVar10,iVar7,puVar9[0x24]);
    }
    else {
      uVar6 = defog_itp(uVar10,iVar7,puVar9[0xee]);
      uVar3 = (*pcVar11)(uVar10,iVar7,puVar9[0xd3]);
      uVar4 = (*pcVar11)(uVar10,iVar7,puVar9[0xdc]);
      uVar5 = (*pcVar11)(uVar10,iVar7,puVar9[0xe5]);
      uVar2 = uVar6;
    }
    puVar9 = puVar9 + 1;
    *(int *)(defog_trsy0_list_now + iVar12) = uVar2;
    *(int *)(defog_trsy1_list_now + iVar12) = uVar3;
    *(int *)(*(int *)(iVar16 + -0x5aac) + iVar12) = uVar4;
    *(int *)(*(int *)(iVar15 + -0x5ab0) + iVar12) = uVar5;
    puVar8 = (int *)(*(int *)(iVar14 + -0x5ab4) + iVar12);
    iVar12 = iVar12 + 4;
    *puVar8 = uVar6;
  } while (iVar12 != iVar13);
  return;
}



int tisp_adr_ev_update(unsigned int param_1,int param_2)

{
  ev_changed = 1;
  ev_now = param_2 << 0x16 | param_1 >> 10;
  return 0;
}



void tiziano_adr_get_data(unsigned int *param_1)

{
  unsigned int *puVar1;
  unsigned int *puVar2;
  unsigned int *puVar3;
  int iVar4;
  int iVar5;
  unsigned int *puVar6;
  int iVar7;
  
  iVar4 = 0;
  puVar2 = param_1;
  do {
    iVar5 = 0;
    puVar1 = (unsigned int *)((int)&adr_block_hist + iVar4 * 5);
    puVar3 = puVar2;
    puVar6 = puVar2;
    do {
      *puVar1 = (uint)*(ushort *)(puVar6 + 2);
      puVar1[1] = (uint)*(ushort *)((int)puVar6 + 10);
      puVar6 = puVar6 + 4;
      puVar1[2] = (uint)*(ushort *)(puVar3 + 3);
      puVar1[3] = (uint)*(ushort *)((int)puVar3 + 0xe);
      puVar1[4] = (uint)*(ushort *)(puVar3 + 5);
      iVar7 = iVar4 + iVar5;
      iVar5 = iVar5 + 0x18;
      *(unsigned int *)((int)&adr_block_y + iVar7) = puVar3[4] & 0xfffffff;
      puVar1 = puVar1 + 0x1e;
      puVar3 = puVar3 + 4;
    } while (iVar5 != 0xc0);
    iVar4 = iVar4 + 4;
    puVar2 = puVar2 + 0x20;
  } while (iVar4 != 0x18);
  puVar2 = &adr_hist;
  puVar1 = param_1 + 0xc2;
  do {
    puVar3 = puVar1 + 2;
    *puVar2 = *puVar1 & 0x1fffff;
    puVar2[1] = (puVar1[1] & 0x3ff) << 0xb | *puVar1 >> 0x15;
    puVar2[2] = puVar1[1] >> 10 & 0x1fffff;
    puVar2 = puVar2 + 3;
    puVar1 = puVar3;
  } while (param_1 + 0x216 != puVar3);
  DAT_000cf898 = param_1[0x216] & 0x1fffff;
  DAT_000cf89c = (param_1[0x217] & 0x3ff) << 0xb | param_1[0x216] >> 0x15;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_adr_algorithm(void)

{
  ushort uVar1;
  bool bVar2;
  bool bVar3;
  char *puVar4;
  char *puVar5;
  char *puVar6;
  int iVar7;
  unsigned int *puVar8;
  unsigned int *puVar9;
  int uVar10;
  int iVar11;
  unsigned int uVar12;
  unsigned int uVar13;
  int iVar14;
  unsigned int *puVar15;
  int iVar16;
  unsigned int uVar17;
  unsigned int uVar18;
  unsigned int uVar19;
  unsigned int *puVar20;
  unsigned int uVar21;
  char local_58 [52];
  
  uVar12 = ev_now;
  if (ev_changed != 1) goto LAB_0005a4b8;
  ev_changed = 0;
  iVar14 = 0;
  puVar9 = (unsigned int *)adr_ev_list_now;
  do {
    uVar21 = *puVar9;
    iVar7 = iVar14 * 4;
    if (ev_now <= uVar21) {
      if (iVar14 == 0) {
        *(int *)adr_map_mode_now = DAT_000af08c;
        puVar6 = adr_map_mode_now;
        *(int *)(adr_map_mode_now + 8) = DAT_000af0c0;
        *(int *)(puVar6 + 0x14) = *(int *)adr_blp2_list_now;
        *(int *)(adr_light_end_now + 0x70) = *(int *)adr_ligb_list_now;
        puVar6 = adr_block_light_now;
        *(int *)(adr_block_light_now + 0x28) = *(int *)adr_mapb1_list_now;
        *(int *)(puVar6 + 0x2c) = *(int *)adr_mapb2_list_now;
        *(int *)(puVar6 + 0x30) = *(int *)adr_mapb3_list_now;
        uVar10 = *(int *)adr_mapb4_list_now;
        goto LAB_00057ca4;
      }
      iVar11 = iVar14 * 4 + -4;
      uVar18 = *(unsigned int *)(adr_ev_list_now + iVar11);
      if (uVar21 == uVar18) {
        *(int *)adr_map_mode_now = (&param_adr_min_kneepoint_array)[iVar14 + 1];
        puVar6 = adr_map_mode_now;
        *(int *)(adr_map_mode_now + 8) = (&param_adr_min_kneepoint_array)[iVar14 + 0xe];
        *(int *)(puVar6 + 0x14) = *(int *)(adr_blp2_list_now + iVar7);
        *(int *)(adr_light_end_now + 0x70) = *(int *)(adr_ligb_list_now + iVar7);
        puVar6 = adr_block_light_now;
        *(int *)(adr_block_light_now + 0x28) = *(int *)(adr_mapb1_list_now + iVar7);
        *(int *)(puVar6 + 0x2c) = *(int *)(adr_mapb2_list_now + iVar7);
        *(int *)(puVar6 + 0x30) = *(int *)(adr_mapb3_list_now + iVar7);
        *(int *)(puVar6 + 0x34) = *(int *)(adr_mapb4_list_now + iVar7);
      }
      else {
        uVar19 = (&param_adr_min_kneepoint_array)[iVar14];
        uVar13 = (&param_adr_min_kneepoint_array)[iVar14 + 1];
        if (uVar13 < uVar19) {
          iVar16 = ev_now - uVar18;
          if (ev_now <= uVar18) {
            iVar16 = uVar18 - ev_now;
          }
          uVar17 = uVar18 - uVar21;
          if (uVar18 <= uVar21) {
            uVar17 = uVar21 - uVar18;
          }
          uVar17 = -((iVar16 * (uVar19 - uVar13)) / uVar17);
        }
        else {
          iVar16 = ev_now - uVar18;
          if (ev_now <= uVar18) {
            iVar16 = uVar18 - ev_now;
          }
          uVar17 = uVar21 - uVar18;
          if (uVar18 > uVar21) {
            uVar17 = uVar18 - uVar21;
          }
          uVar17 = (iVar16 * (uVar13 - uVar19)) / uVar17;
        }
        *(unsigned int *)adr_map_mode_now = uVar19 + uVar17;
        puVar4 = adr_map_mode_now;
        puVar6 = adr_blp2_list_now;
        uVar21 = (&param_adr_min_kneepoint_array)[iVar14 + 0xd];
        uVar18 = (&param_adr_min_kneepoint_array)[iVar14 + 0xe];
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(adr_map_mode_now + 8) = uVar21 + uVar19;
        puVar5 = adr_ligb_list_now;
        uVar21 = *(unsigned int *)(puVar6 + iVar11);
        uVar18 = *(unsigned int *)(puVar6 + iVar7);
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar4 + 0x14) = uVar21 + uVar19;
        puVar6 = adr_mapb1_list_now;
        uVar21 = *(unsigned int *)(puVar5 + iVar11);
        uVar18 = *(unsigned int *)(puVar5 + iVar7);
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(adr_light_end_now + 0x70) = uVar21 + uVar19;
        puVar5 = adr_block_light_now;
        puVar4 = adr_mapb2_list_now;
        uVar21 = *(unsigned int *)(puVar6 + iVar11);
        uVar18 = *(unsigned int *)(puVar6 + iVar7);
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(adr_block_light_now + 0x28) = uVar21 + uVar19;
        puVar6 = adr_mapb3_list_now;
        uVar21 = *(unsigned int *)(puVar4 + iVar11);
        uVar18 = *(unsigned int *)(puVar4 + iVar7);
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar5 + 0x2c) = uVar21 + uVar19;
        puVar4 = adr_mapb4_list_now;
        uVar21 = *(unsigned int *)(puVar6 + iVar11);
        uVar18 = *(unsigned int *)(puVar6 + iVar7);
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar5 + 0x30) = uVar21 + uVar19;
        uVar21 = *(unsigned int *)(puVar4 + iVar11);
        uVar18 = *(unsigned int *)(puVar4 + iVar7);
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + iVar11);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + iVar7);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar5 + 0x34) = uVar21 + uVar19;
      }
      goto LAB_00057ca8;
    }
    iVar14 = iVar14 + 1;
    puVar9 = puVar9 + 1;
  } while (iVar14 != 9);
  *(int *)adr_map_mode_now = DAT_000af0ac;
  puVar6 = adr_map_mode_now;
  *(int *)(adr_map_mode_now + 8) = DAT_000af0e0;
  *(int *)(puVar6 + 0x14) = *(int *)(adr_blp2_list_now + 0x20);
  *(int *)(adr_light_end_now + 0x70) = *(int *)(adr_ligb_list_now + 0x20);
  puVar6 = adr_block_light_now;
  *(int *)(adr_block_light_now + 0x28) = *(int *)(adr_mapb1_list_now + 0x20);
  *(int *)(puVar6 + 0x2c) = *(int *)(adr_mapb2_list_now + 0x20);
  *(int *)(puVar6 + 0x30) = *(int *)(adr_mapb3_list_now + 0x20);
  uVar10 = *(int *)(adr_mapb4_list_now + 0x20);
LAB_00057ca4:
  *(int *)(puVar6 + 0x34) = uVar10;
LAB_00057ca8:
  if (_DAT_000ac73c != 1) goto LAB_0005a4b8;
  uVar21 = *(unsigned int *)adr_ev_list_now;
  if (uVar12 <= uVar21) {
    *(unsigned int *)adr_ctc_map2cut_y_now = (uint)param_adr_gam_y_array;
    puVar6 = adr_ctc_map2cut_y_now;
    *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = (uint)DAT_000aeaee;
    *(unsigned int *)(puVar6 + 8) = (uint)DAT_000aeaf0;
    *(unsigned int *)(puVar6 + 0xc) = (uint)DAT_000aeaf2;
    *(unsigned int *)(puVar6 + 0x10) = (uint)DAT_000aeaf4;
    *(unsigned int *)(puVar6 + 0x14) = (uint)DAT_000aeaf6;
    *(unsigned int *)(puVar6 + 0x18) = (uint)DAT_000aeaf8;
    *(unsigned int *)(puVar6 + 0x1c) = (uint)DAT_000aeafa;
    uVar1 = DAT_000aeafc;
LAB_0005a4b0:
    *(unsigned int *)(puVar6 + 0x20) = (uint)uVar1;
    goto LAB_0005a4b8;
  }
  uVar18 = *(unsigned int *)(adr_ev_list_now + 4);
  if (uVar18 < uVar12) {
    uVar21 = *(unsigned int *)(adr_ev_list_now + 8);
    if (uVar21 < uVar12) {
      uVar18 = *(unsigned int *)(adr_ev_list_now + 0xc);
      if (uVar18 < uVar12) {
        uVar21 = *(unsigned int *)(adr_ev_list_now + 0x10);
        if (uVar21 < uVar12) {
          uVar18 = *(unsigned int *)(adr_ev_list_now + 0x14);
          if (uVar18 < uVar12) {
            uVar21 = *(unsigned int *)(adr_ev_list_now + 0x18);
            if (uVar21 < uVar12) {
              uVar18 = *(unsigned int *)(adr_ev_list_now + 0x1c);
              if (uVar18 < uVar12) {
                uVar21 = *(unsigned int *)(adr_ev_list_now + 0x20);
                if (uVar21 < uVar12) {
                  *(unsigned int *)adr_ctc_map2cut_y_now = (uint)DAT_000aeb94;
                  puVar6 = adr_ctc_map2cut_y_now;
                  *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = (uint)DAT_000aeb96;
                  *(unsigned int *)(puVar6 + 8) = (uint)DAT_000aeb98;
                  *(unsigned int *)(puVar6 + 0xc) = (uint)DAT_000aeb9a;
                  *(unsigned int *)(puVar6 + 0x10) = (uint)DAT_000aeb9c;
                  *(unsigned int *)(puVar6 + 0x14) = (uint)DAT_000aeb9e;
                  *(unsigned int *)(puVar6 + 0x18) = (uint)DAT_000aeba0;
                  *(unsigned int *)(puVar6 + 0x1c) = (uint)DAT_000aeba2;
                  uVar1 = DAT_000aeba4;
                  goto LAB_0005a4b0;
                }
                uVar19 = (uint)DAT_000aeb80;
                uVar13 = (uint)DAT_000aeb94;
                if (uVar13 < uVar19) {
                  uVar17 = uVar21 - uVar18;
                  if (uVar21 < uVar18) {
                    uVar17 = uVar18 - uVar21;
                  }
                  uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar18)) / uVar17);
                }
                else {
                  uVar17 = uVar21 - uVar18;
                  if (uVar21 < uVar18) {
                    uVar17 = uVar18 - uVar21;
                  }
                  uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar18)) / uVar17;
                }
                *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
                puVar6 = adr_ctc_map2cut_y_now;
                uVar21 = (uint)DAT_000aeb82;
                uVar18 = (uint)DAT_000aeb96;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb84;
                uVar18 = (uint)DAT_000aeb98;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb86;
                uVar18 = (uint)DAT_000aeb9a;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb88;
                uVar18 = (uint)DAT_000aeb9c;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb8a;
                uVar18 = (uint)DAT_000aeb9e;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb8c;
                uVar18 = (uint)DAT_000aeba0;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb8e;
                uVar18 = (uint)DAT_000aeba2;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
                uVar18 = (uint)DAT_000aeb90;
                uVar21 = (uint)DAT_000aeba4;
                if (uVar18 <= uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar12 = iVar14 * (uVar21 - uVar18);
                  uVar21 = *(unsigned int *)(adr_ev_list_now + 0x20);
                  goto LAB_0005a444;
                }
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar12 = iVar14 * (uVar18 - uVar21);
                uVar21 = *(unsigned int *)(adr_ev_list_now + 0x20);
              }
              else {
                uVar19 = (uint)DAT_000aeb6c;
                uVar13 = (uint)DAT_000aeb80;
                if (uVar13 < uVar19) {
                  uVar17 = uVar18 - uVar21;
                  if (uVar18 < uVar21) {
                    uVar17 = uVar21 - uVar18;
                  }
                  uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar21)) / uVar17);
                }
                else {
                  uVar17 = uVar18 - uVar21;
                  if (uVar18 < uVar21) {
                    uVar17 = uVar21 - uVar18;
                  }
                  uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar21)) / uVar17;
                }
                *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
                puVar6 = adr_ctc_map2cut_y_now;
                uVar21 = (uint)DAT_000aeb6e;
                uVar18 = (uint)DAT_000aeb82;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb70;
                uVar18 = (uint)DAT_000aeb84;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb72;
                uVar18 = (uint)DAT_000aeb86;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb74;
                uVar18 = (uint)DAT_000aeb88;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb76;
                uVar18 = (uint)DAT_000aeb8a;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb78;
                uVar18 = (uint)DAT_000aeb8c;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
                uVar21 = (uint)DAT_000aeb7a;
                uVar18 = (uint)DAT_000aeb8e;
                if (uVar18 < uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
                }
                else {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar17 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  uVar19 = uVar17 - uVar13;
                  if (uVar17 < uVar13) {
                    uVar19 = uVar13 - uVar17;
                  }
                  uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
                }
                *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
                uVar18 = (uint)DAT_000aeb7c;
                uVar21 = (uint)DAT_000aeb90;
                if (uVar18 <= uVar21) {
                  uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                  iVar14 = uVar13 - uVar12;
                  if (uVar13 < uVar12) {
                    iVar14 = uVar12 - uVar13;
                  }
                  uVar12 = iVar14 * (uVar21 - uVar18);
                  uVar21 = *(unsigned int *)(adr_ev_list_now + 0x1c);
                  goto LAB_0005a444;
                }
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x18);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar12 = iVar14 * (uVar18 - uVar21);
                uVar21 = *(unsigned int *)(adr_ev_list_now + 0x1c);
              }
            }
            else {
              uVar19 = (uint)DAT_000aeb54;
              uVar13 = (uint)DAT_000aeb6c;
              if (uVar13 < uVar19) {
                uVar17 = uVar21 - uVar18;
                if (uVar21 < uVar18) {
                  uVar17 = uVar18 - uVar21;
                }
                uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar18)) / uVar17);
              }
              else {
                uVar17 = uVar21 - uVar18;
                if (uVar21 < uVar18) {
                  uVar17 = uVar18 - uVar21;
                }
                uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar18)) / uVar17;
              }
              *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
              puVar6 = adr_ctc_map2cut_y_now;
              uVar21 = (uint)DAT_000aeb56;
              uVar18 = (uint)DAT_000aeb6e;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
              uVar21 = (uint)DAT_000aeb58;
              uVar18 = (uint)DAT_000aeb70;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
              uVar21 = (uint)DAT_000aeb5a;
              uVar18 = (uint)DAT_000aeb72;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
              uVar21 = (uint)DAT_000aeb5c;
              uVar18 = (uint)DAT_000aeb74;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
              uVar21 = (uint)DAT_000aeb5e;
              uVar18 = (uint)DAT_000aeb76;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
              uVar21 = (uint)DAT_000aeb60;
              uVar18 = (uint)DAT_000aeb78;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
              uVar21 = (uint)DAT_000aeb62;
              uVar18 = (uint)DAT_000aeb7a;
              if (uVar18 < uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
              }
              else {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar17 = *(unsigned int *)(adr_ev_list_now + 0x18);
                uVar19 = uVar17 - uVar13;
                if (uVar17 < uVar13) {
                  uVar19 = uVar13 - uVar17;
                }
                uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
              }
              *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
              uVar18 = (uint)DAT_000aeb64;
              uVar21 = (uint)DAT_000aeb7c;
              if (uVar18 <= uVar21) {
                uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
                iVar14 = uVar13 - uVar12;
                if (uVar13 < uVar12) {
                  iVar14 = uVar12 - uVar13;
                }
                uVar12 = iVar14 * (uVar21 - uVar18);
                uVar21 = *(unsigned int *)(adr_ev_list_now + 0x18);
                goto LAB_0005a444;
              }
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x14);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar12 = iVar14 * (uVar18 - uVar21);
              uVar21 = *(unsigned int *)(adr_ev_list_now + 0x18);
            }
          }
          else {
            uVar19 = (uint)DAT_000aeb40;
            uVar13 = (uint)DAT_000aeb54;
            if (uVar13 < uVar19) {
              uVar17 = uVar18 - uVar21;
              if (uVar18 < uVar21) {
                uVar17 = uVar21 - uVar18;
              }
              uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar21)) / uVar17);
            }
            else {
              uVar17 = uVar18 - uVar21;
              if (uVar18 < uVar21) {
                uVar17 = uVar21 - uVar18;
              }
              uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar21)) / uVar17;
            }
            *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
            puVar6 = adr_ctc_map2cut_y_now;
            uVar21 = (uint)DAT_000aeb42;
            uVar18 = (uint)DAT_000aeb56;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
            uVar21 = (uint)DAT_000aeb44;
            uVar18 = (uint)DAT_000aeb58;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
            uVar21 = (uint)DAT_000aeb46;
            uVar18 = (uint)DAT_000aeb5a;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
            uVar21 = (uint)DAT_000aeb48;
            uVar18 = (uint)DAT_000aeb5c;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
            uVar21 = (uint)DAT_000aeb4a;
            uVar18 = (uint)DAT_000aeb5e;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
            uVar21 = (uint)DAT_000aeb4c;
            uVar18 = (uint)DAT_000aeb60;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
            uVar21 = (uint)DAT_000aeb4e;
            uVar18 = (uint)DAT_000aeb62;
            if (uVar18 < uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
            }
            else {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar17 = *(unsigned int *)(adr_ev_list_now + 0x14);
              uVar19 = uVar17 - uVar13;
              if (uVar17 < uVar13) {
                uVar19 = uVar13 - uVar17;
              }
              uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
            }
            *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
            uVar18 = (uint)DAT_000aeb50;
            uVar21 = (uint)DAT_000aeb64;
            if (uVar18 <= uVar21) {
              uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
              iVar14 = uVar13 - uVar12;
              if (uVar13 < uVar12) {
                iVar14 = uVar12 - uVar13;
              }
              uVar12 = iVar14 * (uVar21 - uVar18);
              uVar21 = *(unsigned int *)(adr_ev_list_now + 0x14);
              goto LAB_0005a444;
            }
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0x10);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar12 = iVar14 * (uVar18 - uVar21);
            uVar21 = *(unsigned int *)(adr_ev_list_now + 0x14);
          }
        }
        else {
          uVar19 = (uint)DAT_000aeb2c;
          uVar13 = (uint)DAT_000aeb40;
          if (uVar13 < uVar19) {
            uVar17 = uVar21 - uVar18;
            if (uVar21 < uVar18) {
              uVar17 = uVar18 - uVar21;
            }
            uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar18)) / uVar17);
          }
          else {
            uVar17 = uVar21 - uVar18;
            if (uVar21 < uVar18) {
              uVar17 = uVar18 - uVar21;
            }
            uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar18)) / uVar17;
          }
          *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
          puVar6 = adr_ctc_map2cut_y_now;
          uVar21 = (uint)DAT_000aeb2e;
          uVar18 = (uint)DAT_000aeb42;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
          uVar21 = (uint)DAT_000aeb30;
          uVar18 = (uint)DAT_000aeb44;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
          uVar21 = (uint)DAT_000aeb32;
          uVar18 = (uint)DAT_000aeb46;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
          uVar21 = (uint)DAT_000aeb34;
          uVar18 = (uint)DAT_000aeb48;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
          uVar21 = (uint)DAT_000aeb36;
          uVar18 = (uint)DAT_000aeb4a;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
          uVar21 = (uint)DAT_000aeb38;
          uVar18 = (uint)DAT_000aeb4c;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
          uVar21 = (uint)DAT_000aeb3a;
          uVar18 = (uint)DAT_000aeb4e;
          if (uVar18 < uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
          }
          else {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar17 = *(unsigned int *)(adr_ev_list_now + 0x10);
            uVar19 = uVar17 - uVar13;
            if (uVar17 < uVar13) {
              uVar19 = uVar13 - uVar17;
            }
            uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
          }
          *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
          uVar18 = (uint)DAT_000aeb3c;
          uVar21 = (uint)DAT_000aeb50;
          if (uVar18 <= uVar21) {
            uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
            iVar14 = uVar13 - uVar12;
            if (uVar13 < uVar12) {
              iVar14 = uVar12 - uVar13;
            }
            uVar12 = iVar14 * (uVar21 - uVar18);
            uVar21 = *(unsigned int *)(adr_ev_list_now + 0x10);
            goto LAB_0005a444;
          }
          uVar13 = *(unsigned int *)(adr_ev_list_now + 0xc);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar12 = iVar14 * (uVar18 - uVar21);
          uVar21 = *(unsigned int *)(adr_ev_list_now + 0x10);
        }
      }
      else {
        uVar19 = (uint)DAT_000aeb14;
        uVar13 = (uint)DAT_000aeb2c;
        if (uVar13 < uVar19) {
          uVar17 = uVar18 - uVar21;
          if (uVar18 < uVar21) {
            uVar17 = uVar21 - uVar18;
          }
          uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar21)) / uVar17);
        }
        else {
          uVar17 = uVar18 - uVar21;
          if (uVar18 < uVar21) {
            uVar17 = uVar21 - uVar18;
          }
          uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar21)) / uVar17;
        }
        *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
        puVar6 = adr_ctc_map2cut_y_now;
        uVar21 = (uint)DAT_000aeb16;
        uVar18 = (uint)DAT_000aeb2e;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
        uVar21 = (uint)DAT_000aeb18;
        uVar18 = (uint)DAT_000aeb30;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
        uVar21 = (uint)DAT_000aeb1a;
        uVar18 = (uint)DAT_000aeb32;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
        uVar21 = (uint)DAT_000aeb1c;
        uVar18 = (uint)DAT_000aeb34;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
        uVar21 = (uint)DAT_000aeb1e;
        uVar18 = (uint)DAT_000aeb36;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
        uVar21 = (uint)DAT_000aeb20;
        uVar18 = (uint)DAT_000aeb38;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
        uVar21 = (uint)DAT_000aeb22;
        uVar18 = (uint)DAT_000aeb3a;
        if (uVar18 < uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
        }
        else {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar17 = *(unsigned int *)(adr_ev_list_now + 0xc);
          uVar19 = uVar17 - uVar13;
          if (uVar17 < uVar13) {
            uVar19 = uVar13 - uVar17;
          }
          uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
        }
        *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
        uVar18 = (uint)DAT_000aeb24;
        uVar21 = (uint)DAT_000aeb3c;
        if (uVar18 <= uVar21) {
          uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
          iVar14 = uVar13 - uVar12;
          if (uVar13 < uVar12) {
            iVar14 = uVar12 - uVar13;
          }
          uVar12 = iVar14 * (uVar21 - uVar18);
          uVar21 = *(unsigned int *)(adr_ev_list_now + 0xc);
          goto LAB_0005a444;
        }
        uVar13 = *(unsigned int *)(adr_ev_list_now + 8);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar12 = iVar14 * (uVar18 - uVar21);
        uVar21 = *(unsigned int *)(adr_ev_list_now + 0xc);
      }
    }
    else {
      uVar19 = (uint)DAT_000aeb00;
      uVar13 = (uint)DAT_000aeb14;
      if (uVar13 < uVar19) {
        uVar17 = uVar21 - uVar18;
        if (uVar21 < uVar18) {
          uVar17 = uVar18 - uVar21;
        }
        uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar18)) / uVar17);
      }
      else {
        uVar17 = uVar21 - uVar18;
        if (uVar21 < uVar18) {
          uVar17 = uVar18 - uVar21;
        }
        uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar18)) / uVar17;
      }
      *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
      puVar6 = adr_ctc_map2cut_y_now;
      uVar21 = (uint)DAT_000aeb02;
      uVar18 = (uint)DAT_000aeb16;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
      uVar21 = (uint)DAT_000aeb04;
      uVar18 = (uint)DAT_000aeb18;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
      uVar21 = (uint)DAT_000aeb06;
      uVar18 = (uint)DAT_000aeb1a;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
      uVar21 = (uint)DAT_000aeb08;
      uVar18 = (uint)DAT_000aeb1c;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
      uVar21 = (uint)DAT_000aeb0a;
      uVar18 = (uint)DAT_000aeb1e;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
      uVar21 = (uint)DAT_000aeb0c;
      uVar18 = (uint)DAT_000aeb20;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
      uVar21 = (uint)DAT_000aeb0e;
      uVar18 = (uint)DAT_000aeb22;
      if (uVar18 < uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
      }
      else {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar17 = *(unsigned int *)(adr_ev_list_now + 8);
        uVar19 = uVar17 - uVar13;
        if (uVar17 < uVar13) {
          uVar19 = uVar13 - uVar17;
        }
        uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
      }
      *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
      uVar18 = (uint)DAT_000aeb10;
      uVar21 = (uint)DAT_000aeb24;
      if (uVar18 <= uVar21) {
        uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
        iVar14 = uVar13 - uVar12;
        if (uVar13 < uVar12) {
          iVar14 = uVar12 - uVar13;
        }
        uVar12 = iVar14 * (uVar21 - uVar18);
        uVar21 = *(unsigned int *)(adr_ev_list_now + 8);
        goto LAB_0005a444;
      }
      uVar13 = *(unsigned int *)(adr_ev_list_now + 4);
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar12 = iVar14 * (uVar18 - uVar21);
      uVar21 = *(unsigned int *)(adr_ev_list_now + 8);
    }
LAB_0005a404:
    uVar19 = uVar21 - uVar13;
    if (uVar21 < uVar13) {
      uVar19 = uVar13 - uVar21;
    }
    iVar14 = uVar18 - uVar12 / uVar19;
  }
  else {
    uVar19 = (uint)param_adr_gam_y_array;
    uVar13 = (uint)DAT_000aeb00;
    if (uVar13 < uVar19) {
      uVar17 = uVar21 - uVar18;
      if (uVar21 <= uVar18) {
        uVar17 = uVar18 - uVar21;
      }
      uVar17 = -(((uVar19 - uVar13) * (uVar12 - uVar21)) / uVar17);
    }
    else {
      uVar17 = uVar18 - uVar21;
      if (uVar21 > uVar18) {
        uVar17 = uVar21 - uVar18;
      }
      uVar17 = ((uVar13 - uVar19) * (uVar12 - uVar21)) / uVar17;
    }
    *(unsigned int *)adr_ctc_map2cut_y_now = uVar19 + uVar17;
    puVar6 = adr_ctc_map2cut_y_now;
    uVar21 = (uint)DAT_000aeaee;
    uVar18 = (uint)DAT_000aeb02;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(adr_ctc_map2cut_y_now + 4) = uVar21 + uVar19;
    uVar21 = (uint)DAT_000aeaf0;
    uVar18 = (uint)DAT_000aeb04;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(puVar6 + 8) = uVar21 + uVar19;
    uVar21 = (uint)DAT_000aeaf2;
    uVar18 = (uint)DAT_000aeb06;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(puVar6 + 0xc) = uVar21 + uVar19;
    uVar21 = (uint)DAT_000aeaf4;
    uVar18 = (uint)DAT_000aeb08;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(puVar6 + 0x10) = uVar21 + uVar19;
    uVar21 = (uint)DAT_000aeaf6;
    uVar18 = (uint)DAT_000aeb0a;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(puVar6 + 0x14) = uVar21 + uVar19;
    uVar21 = (uint)DAT_000aeaf8;
    uVar18 = (uint)DAT_000aeb0c;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(puVar6 + 0x18) = uVar21 + uVar19;
    uVar21 = (uint)DAT_000aeafa;
    uVar18 = (uint)DAT_000aeb0e;
    if (uVar18 < uVar21) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = -((iVar14 * (uVar21 - uVar18)) / uVar19);
    }
    else {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar17 = *(unsigned int *)(adr_ev_list_now + 4);
      uVar19 = uVar17 - uVar13;
      if (uVar17 < uVar13) {
        uVar19 = uVar13 - uVar17;
      }
      uVar19 = (iVar14 * (uVar18 - uVar21)) / uVar19;
    }
    *(unsigned int *)(puVar6 + 0x1c) = uVar21 + uVar19;
    uVar18 = (uint)DAT_000aeafc;
    uVar21 = (uint)DAT_000aeb10;
    if (uVar21 < uVar18) {
      uVar13 = *(unsigned int *)adr_ev_list_now;
      iVar14 = uVar13 - uVar12;
      if (uVar13 < uVar12) {
        iVar14 = uVar12 - uVar13;
      }
      uVar12 = iVar14 * (uVar18 - uVar21);
      uVar21 = *(unsigned int *)(adr_ev_list_now + 4);
      goto LAB_0005a404;
    }
    uVar13 = *(unsigned int *)adr_ev_list_now;
    iVar14 = uVar13 - uVar12;
    if (uVar13 < uVar12) {
      iVar14 = uVar12 - uVar13;
    }
    uVar12 = iVar14 * (uVar21 - uVar18);
    uVar21 = *(unsigned int *)(adr_ev_list_now + 4);
LAB_0005a444:
    uVar19 = uVar21 - uVar13;
    if (uVar21 < uVar13) {
      uVar19 = uVar13 - uVar21;
    }
    iVar14 = uVar12 / uVar19 + uVar18;
  }
  *(int *)(puVar6 + 0x20) = iVar14;
LAB_0005a4b8:
  iVar14 = 0;
  iVar7 = 0;
  do {
    *(int *)((int)&min_kneepoint_x + iVar14) =
         *(int *)((int)&param_adr_min_kneepoint_array_def + iVar14);
    *(int *)((int)&map_kneepoint_x + iVar14) =
         *(int *)((int)&param_adr_map_kneepoint_array + iVar14);
    if (iVar7 < 9) {
      *(int *)((int)&ctc_kneepoint_x + iVar14) =
           *(int *)((int)&param_adr_ctc_kneepoint_array + iVar14);
    }
    iVar7 = iVar7 + 1;
    iVar14 = iVar14 + 4;
  } while (iVar7 != 0xb);
  TizianoAdrFpgaStructMe = &ctc_kneepoint_x;
  DAT_000cfbb0 = &adr_hist;
  DAT_000cfbb4 = &adr_block_y;
  DAT_000cfbb8 = &adr_block_hist;
  DAT_000cfbbc = &adr_tm_base_lut;
  DAT_000cfbc0 = &param_adr_gam_x_array;
  DAT_000cfbc4 = &param_adr_gam_y_array_def;
  DAT_000cfbc8 = adr_ctc_map2cut_y_now;
  DAT_000cfbcc = adr_map_mode_now;
  DAT_000cfb9c = &ctc_kneepoint_y;
  DAT_000cfbd0 = adr_light_end_now;
  DAT_000cfba4 = &min_kneepoint_y;
  puVar9 = &map_kneepoint_y;
  DAT_000cfbd4 = adr_block_light_now;
  DAT_000cfba0 = &min_kneepoint_x;
  _DAT_000cfba8 = &map_kneepoint_x;
  DAT_000cfbac = &map_kneepoint_y;
  for (uVar12 = 0; uVar12 < 0x30; uVar12 = uVar12 + 1) {
    local_58[uVar12] = (&DAT_000cfba8)[uVar12];
  }
  Tiziano_adr_fpga(&ctc_kneepoint_x,&ctc_kneepoint_y,&min_kneepoint_x,&min_kneepoint_y);
  iVar14 = _DAT_000ac75c;
  if (_DAT_000ac760 == 1) {
    puVar15 = &map_kneepoint_y_pre;
    bVar3 = false;
    uVar12 = _DAT_000ac764;
    do {
      iVar7 = 0;
      uVar21 = 0;
      do {
        uVar19 = *(unsigned int *)((int)puVar9 + iVar7);
        uVar13 = *(unsigned int *)((int)puVar15 + iVar7);
        iVar7 = iVar7 + 4;
        uVar18 = uVar13 - uVar19;
        if (uVar13 < uVar19) {
          uVar18 = uVar19 - uVar13;
        }
        if ((int)uVar21 < (int)uVar18) {
          uVar21 = uVar18;
        }
      } while (iVar7 != 0x2c);
      if (uVar12 < 0x201) {
        bVar2 = uVar12 < uVar21;
        if ((iVar14 != 9) && (uVar12 == 0)) {
          uVar12 = 1;
          goto LAB_0005a6f0;
        }
      }
      else {
        uVar12 = 0x200;
LAB_0005a6f0:
        bVar3 = true;
        bVar2 = uVar12 < uVar21;
      }
      if (bVar2) {
        uVar21 = (uVar12 << 0x15) / uVar21;
        uVar18 = 0xff5;
        puVar8 = puVar15;
        puVar20 = puVar9;
        do {
          uVar19 = *puVar20;
          uVar13 = *puVar8;
          if (uVar13 < uVar19) {
            uVar13 = (int)((uVar19 - uVar13) * uVar21 + 0x100000) / 0x200000 + uVar13;
            if (uVar18 < uVar13) {
              uVar13 = uVar18;
            }
          }
          else {
            uVar13 = uVar13 - (int)((uVar13 - uVar19) * uVar21 + 0x100000) / 0x200000;
            if (uVar18 < uVar13) {
              uVar13 = uVar18;
            }
          }
          uVar18 = uVar18 + 1;
          *puVar20 = uVar13;
          *puVar8 = uVar13;
          puVar20 = puVar20 + 1;
          puVar8 = puVar8 + 1;
        } while (uVar18 != 0x1000);
      }
      else {
        uVar21 = 0xff5;
        puVar8 = puVar9;
        do {
          if (uVar21 < *puVar8) {
            *puVar8 = uVar21;
          }
          uVar18 = uVar21 + 1;
          puVar15[uVar21 - 0xff5] = *puVar8;
          puVar8 = puVar8 + 1;
          uVar21 = uVar18;
        } while (uVar18 != 0x1000);
      }
      puVar15 = puVar15 + 0xb;
      puVar9 = puVar9 + 0xb;
    } while (puVar15 != &map_kneepoint_y);
    if (bVar3) {
      _DAT_000ac764 = uVar12;
    }
  }
  return 0;
}



int tisp_adr_process(void)

{
  tiziano_adr_algorithm();
  return 0;
}



void tisp_adr_set_params(void)

{
  unsigned int *puVar1;
  int iVar2;
  int iVar3;
  
  puVar1 = &min_kneepoint_y;
  iVar3 = 0x4390;
  do {
    iVar2 = iVar3 + 4;
    system_reg_write(iVar3,puVar1[1] << 0x10 | *puVar1);
    puVar1 = puVar1 + 2;
    iVar3 = iVar2;
  } while (iVar2 != 0x43a4);
  puVar1 = &ctc_kneepoint_y;
  system_reg_write(0x43a4,DAT_000ae998);
  iVar3 = 0x4354;
  do {
    iVar2 = iVar3 + 4;
    system_reg_write(iVar3,puVar1[1] << 0x10 | *puVar1);
    puVar1 = puVar1 + 2;
    iVar3 = iVar2;
  } while (iVar2 != 0x4364);
  system_reg_write(0x4364,DAT_000ae9bc);
  puVar1 = &map_kneepoint_y;
  iVar3 = 0x4084;
  do {
    iVar2 = iVar3 + 4;
    system_reg_write(iVar3,puVar1[1] << 0x10 | *puVar1);
    puVar1 = puVar1 + 2;
    iVar3 = iVar2;
  } while (iVar2 != 0x4294);
  return;
}



int tiziano_adr_interrupt_static(void)

{
  int iVar1;
  char auStack_40 [8];
  int local_38;
  
  tisp_adr_set_params();
  iVar1 = system_reg_read(0x44b0);
  if (iVar1 == DAT_000b273c) {
    private_dma_cache_sync(0,DAT_000b2738,0x1000,0);
    tiziano_adr_get_data(DAT_000b2738);
  }
  if (iVar1 == DAT_000b273c + 0x1000) {
    private_dma_cache_sync(0,DAT_000b2738 + 0x1000,0x1000,0);
    tiziano_adr_get_data(DAT_000b2738 + 0x1000);
  }
  if (iVar1 == DAT_000b273c + 0x2000) {
    private_dma_cache_sync(0,DAT_000b2738 + 0x2000,0x1000,0);
    tiziano_adr_get_data(DAT_000b2738 + 0x2000);
  }
  if (iVar1 == DAT_000b273c + 0x3000) {
    private_dma_cache_sync(0,DAT_000b2738 + 0x3000,0x1000,0);
    tiziano_adr_get_data(DAT_000b2738 + 0x3000);
  }
  local_38 = 2;
  tisp_event_push(auStack_40);
  return 1;
}



int tiziano_adr_5x5_param_distance(int param_1,int param_2,int param_3,int param_4,int param_5)

{
  int iVar1;
  int *piVar2;
  
  if (param_3 < param_1) {
    param_3 = param_1 - param_3;
  }
  else {
    param_3 = param_3 - param_1;
  }
  if (param_4 < param_2) {
    param_2 = param_2 - param_4;
  }
  else {
    param_2 = param_4 - param_2;
  }
  piVar2 = (int *)(param_5 + 0x78);
  iVar1 = 0x1e;
  do {
    if ((param_2 / 8) * (param_2 / 8) + (param_3 / 8) * (param_3 / 8) <= *piVar2) {
      return iVar1 + 1;
    }
    iVar1 = iVar1 + -1;
    piVar2 = piVar2 + -1;
  } while (iVar1 != -1);
  return 0;
}



int tiziano_adr_5x5_param(void)

{
  longlong lVar1;
  int iVar2;
  int *piVar3;
  int iVar4;
  int *piVar5;
  int iVar6;
  int *piVar7;
  unsigned int uVar8;
  int iVar9;
  int *piVar10;
  unsigned int *puVar11;
  int iVar12;
  int *piVar13;
  int *puVar14;
  code *pcVar15;
  int iVar16;
  int iVar17;
  int iVar18;
  int iVar19;
  int iVar20;
  unsigned int uVar21;
  int local_c0 [32];
  char8 local_40;
  int *local_38;
  int local_34;
  int local_30;
  
  memcpy(local_c0,&DAT_0007cfd0,0x7c);
  iVar2 = 0;
  do {
    *(int *)((int)&adr_lut7_counter + iVar2) = 0;
    *(int *)((int)&adr_lut8_counter + iVar2) = 0;
    *(int *)((int)&adr_lut12_counter + iVar2) = 0;
    *(int *)((int)&adr_lut1_value_sum + iVar2) = 0;
    *(int *)((int)&adr_lut2_value_sum + iVar2) = 0;
    *(int *)((int)&adr_lut3_value_sum + iVar2) = 0;
    *(int *)((int)&adr_lut6_value_sum + iVar2) = 0;
    puVar14 = (int *)((int)&adr_lut11_value_sum + iVar2);
    iVar2 = iVar2 + 4;
    *puVar14 = 0;
    local_38 = &adr_lut7_counter;
  } while (iVar2 != 0x80);
  uVar21 = (width_def + 3U) / 6;
  uVar8 = height_def + 2U >> 2;
  iVar6 = uVar8 * 2;
  local_34 = uVar8 * 3;
  iVar17 = (int)(uVar8 + 1) >> 1;
  iVar20 = uVar8 + iVar17;
  iVar9 = uVar8 + iVar20;
  iVar2 = 0;
  puVar14 = &param_adr_centre_w_dis_array_tmp;
  local_30 = uVar21 * 3;
  local_40 = (ulonglong)DAT_000ac734 * (ulonglong)DAT_000ac734;
  iVar19 = (int)(uVar21 + 1) >> 1;
  iVar18 = uVar21 + iVar19;
  iVar4 = uVar21 + iVar18;
  do {
    piVar3 = (int *)((int)local_c0 + iVar2);
    puVar11 = (unsigned int *)((int)&param_adr_centre_w_dis_array_tmp + iVar2);
    iVar2 = iVar2 + 4;
    lVar1 = local_40 * *piVar3 + 0x20000;
    *puVar11 = (int)((ulonglong)lVar1 >> 0x20) * 0x4000 | (uint)lVar1 >> 0x12;
  } while (iVar2 != 0x7c);
  iVar2 = 0x60000;
  for (; iVar12 = uVar21 * 2, iVar6 <= local_34; iVar6 = iVar6 + 1) {
    for (; pcVar15 = (code *)(iVar2 + -0x555c), iVar12 <= local_30; iVar12 = iVar12 + 1) {
      local_40 = CONCAT44(local_40._4_4_,iVar2);
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar20,iVar18,puVar14);
      iVar16 = iVar2 * 4;
      local_38[iVar2] = local_38[iVar2] + 1;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar17,iVar19,puVar14);
      *(int *)((int)&adr_lut1_value_sum + iVar16) =
           *(int *)((int)&adr_lut1_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar20,iVar19,puVar14);
      *(int *)((int)&adr_lut2_value_sum + iVar16) =
           *(int *)((int)&adr_lut2_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar17,iVar18,puVar14);
      *(int *)((int)&adr_lut6_value_sum + iVar16) =
           *(int *)((int)&adr_lut6_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar9,iVar18,puVar14);
      iVar16 = iVar2 * 4;
      (&adr_lut8_counter)[iVar2] = (&adr_lut8_counter)[iVar2] + 1;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar9,iVar19,puVar14);
      *(int *)((int)&adr_lut3_value_sum + iVar16) =
           *(int *)((int)&adr_lut3_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar20,iVar4,puVar14);
      iVar16 = iVar2 * 4;
      (&adr_lut12_counter)[iVar2] = (&adr_lut12_counter)[iVar2] + 1;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar17,iVar4,puVar14);
      *(int *)((int)&adr_lut11_value_sum + iVar16) =
           *(int *)((int)&adr_lut11_value_sum + iVar16) + iVar2;
      iVar2 = (int)local_40;
    }
  }
  piVar13 = &param_adr_weight_20_lut_array_tmp;
  piVar10 = &param_adr_weight_02_lut_array_tmp;
  piVar7 = &param_adr_weight_22_lut_array_tmp;
  piVar5 = &param_adr_weight_12_lut_array_tmp;
  piVar3 = &param_adr_weight_21_lut_array_tmp;
  iVar2 = 0;
  uVar8 = 0;
  do {
    uVar21 = *(unsigned int *)((int)local_38 + iVar2);
    if ((uVar21 | uVar8) == 0) {
      param_adr_weight_22_lut_array_tmp = 0;
      param_adr_weight_12_lut_array_tmp = 0;
      param_adr_weight_21_lut_array_tmp = 0;
    }
    else if (uVar21 == 0) {
      *piVar7 = piVar7[-1];
      *piVar5 = piVar5[-1];
      *piVar3 = piVar3[-1];
    }
    else {
      iVar4 = (int)uVar21 / 2;
      *piVar7 = (iVar4 + *(int *)((int)&adr_lut1_value_sum + iVar2)) / (int)uVar21;
      *piVar5 = (iVar4 + *(int *)((int)&adr_lut2_value_sum + iVar2)) / (int)uVar21;
      *piVar3 = (iVar4 + *(int *)((int)&adr_lut6_value_sum + iVar2)) / (int)uVar21;
    }
    uVar21 = *(unsigned int *)((int)&adr_lut8_counter + iVar2);
    if ((uVar21 | uVar8) == 0) {
      param_adr_weight_02_lut_array_tmp = 0;
    }
    else {
      if (uVar21 == 0) {
        iVar4 = piVar10[-1];
      }
      else {
        iVar4 = ((int)uVar21 / 2 + *(int *)((int)&adr_lut3_value_sum + iVar2)) / (int)uVar21;
      }
      *piVar10 = iVar4;
    }
    uVar21 = *(unsigned int *)((int)&adr_lut12_counter + iVar2);
    if ((uVar21 | uVar8) == 0) {
      param_adr_weight_20_lut_array_tmp = 0;
    }
    else {
      if (uVar21 == 0) {
        iVar4 = piVar13[-1];
      }
      else {
        iVar4 = ((int)uVar21 / 2 + *(int *)((int)&adr_lut11_value_sum + iVar2)) / (int)uVar21;
      }
      *piVar13 = iVar4;
    }
    uVar8 = uVar8 + 1;
    iVar2 = iVar2 + 4;
    piVar13 = piVar13 + 1;
    piVar10 = piVar10 + 1;
    piVar7 = piVar7 + 1;
    piVar5 = piVar5 + 1;
    piVar3 = piVar3 + 1;
  } while (uVar8 != 0x20);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_adr_params_init(void)

{
  char *puVar1;
  
  if (adr_wdr_en == 0) {
    adr_ctc_map2cut_y_now = (char *)&adr_ctc_map2cut_y;
    adr_light_end_now = adr_light_end;
    adr_map_mode_now = (char *)&adr_map_mode;
    adr_ev_list_now = (char *)&adr_ev_list;
    adr_ligb_list_now = (char *)&adr_ligb_list;
    adr_mapb1_list_now = (char *)&adr_mapb1_list;
    adr_mapb2_list_now = (char *)&adr_mapb2_list;
    adr_mapb3_list_now = (char *)&adr_mapb3_list;
    adr_mapb4_list_now = (char *)&adr_mapb4_list;
    adr_block_light_now = adr_block_light;
    puVar1 = (char *)&adr_blp2_list;
  }
  else {
    adr_ctc_map2cut_y_now = adr_ctc_map2cut_y_wdr;
    adr_light_end_now = adr_light_end_wdr;
    adr_map_mode_now = adr_map_mode_wdr;
    adr_ev_list_now = adr_ev_list_wdr;
    adr_ligb_list_now = adr_ligb_list_wdr;
    adr_mapb1_list_now = adr_mapb1_list_wdr;
    adr_mapb2_list_now = adr_mapb2_list_wdr;
    adr_mapb3_list_now = adr_mapb3_list_wdr;
    adr_mapb4_list_now = adr_mapb4_list_wdr;
    adr_block_light_now = adr_block_light_wdr;
    puVar1 = adr_blp2_list_wdr;
  }
  adr_blp2_list_now = puVar1;
  system_reg_write(0x4004,param_adr_para_array << 4 | DAT_000af3c4 << 0x10 | DAT_000af3ac);
  system_reg_write(0x4448,DAT_000af3b4 << 0x10 | DAT_000af3b0);
  system_reg_write(0x444c,DAT_000af3bc << 0x10 | DAT_000af3b8);
  system_reg_write(0x4450,DAT_000af3c0);
  system_reg_write(0x402c,DAT_000aee30 << 0x10 | param_adr_centre_w_dis_array);
  system_reg_write(0x4030,DAT_000aee38 << 0x10 | DAT_000aee34);
  system_reg_write(0x4034,DAT_000aee40 << 0x10 | DAT_000aee3c);
  system_reg_write(0x4038,DAT_000aee48 << 0x10 | DAT_000aee44);
  system_reg_write(0x403c,DAT_000aee50 << 0x10 | DAT_000aee4c);
  system_reg_write(0x4040,DAT_000aee58 << 0x10 | DAT_000aee54);
  system_reg_write(0x4044,DAT_000aee60 << 0x10 | DAT_000aee5c);
  system_reg_write(0x4048,DAT_000aee68 << 0x10 | DAT_000aee64);
  system_reg_write(0x404c,DAT_000aee70 << 0x10 | DAT_000aee6c);
  system_reg_write(0x4050,DAT_000aee78 << 0x10 | DAT_000aee74);
  system_reg_write(0x4054,DAT_000aee80 << 0x10 | DAT_000aee7c);
  system_reg_write(0x4058,DAT_000aee88 << 0x10 | DAT_000aee84);
  system_reg_write(0x405c,DAT_000aee90 << 0x10 | DAT_000aee8c);
  system_reg_write(0x4060,DAT_000aee98 << 0x10 | DAT_000aee94);
  system_reg_write(0x4064,DAT_000aeea0 << 0x10 | DAT_000aee9c);
  system_reg_write(0x4068,DAT_000aeea4);
  system_reg_write(0x4340,_DAT_000af0e8 << 0x10 | param_adr_ctc_kneepoint_array);
  system_reg_write(0x4344,DAT_000af0f0 << 0x10 | DAT_000af0ec);
  system_reg_write(0x4348,DAT_000af0f8 << 0x10 | DAT_000af0f4);
  system_reg_write(0x434c,DAT_000af100 << 0x10 | DAT_000af0fc);
  system_reg_write(0x4350,DAT_000af104);
  system_reg_write(0x4368,DAT_000af10c << 0x10 | DAT_000af108);
  system_reg_write(0x436c,DAT_000af114 << 0x10 | DAT_000af110);
  system_reg_write(0x4370,DAT_000af11c << 0x10 | DAT_000af118);
  system_reg_write(0x4374,DAT_000af124 << 0x10 | DAT_000af120);
  system_reg_write(0x406c,DAT_000aefd4 << 0x10 | param_adr_map_kneepoint_array);
  system_reg_write(0x4070,DAT_000aefdc << 0x10 | DAT_000aefd8);
  system_reg_write(0x4074,DAT_000aefe4 << 0x10 | DAT_000aefe0);
  system_reg_write(0x4078,DAT_000aefec << 0x10 | DAT_000aefe8);
  system_reg_write(0x407c,DAT_000aeff4 << 0x10 | DAT_000aeff0);
  system_reg_write(0x4080,DAT_000aeff8);
  system_reg_write(0x4334,DAT_000af008 << 0x18 | DAT_000af004 << 0x10 | DAT_000aeffc |
                          DAT_000af000 << 8);
  system_reg_write(0x4338,DAT_000af018 << 0x18 | DAT_000af014 << 0x10 | DAT_000af00c |
                          DAT_000af010 << 8);
  system_reg_write(0x433c,DAT_000af028 << 0x18 | DAT_000af024 << 0x10 | DAT_000af01c |
                          DAT_000af020 << 8);
  system_reg_write(0x4294,_DAT_000af334 << 0x18 | DAT_000af330 << 0x10 |
                          param_adr_weight_20_lut_array | DAT_000af32c << 8);
  system_reg_write(0x4298,DAT_000af344 << 0x18 | DAT_000af340 << 0x10 | DAT_000af338 |
                          DAT_000af33c << 8);
  system_reg_write(0x429c,DAT_000af354 << 0x18 | DAT_000af350 << 0x10 | DAT_000af348 |
                          DAT_000af34c << 8);
  system_reg_write(0x42a0,DAT_000af364 << 0x18 | DAT_000af360 << 0x10 | DAT_000af358 |
                          DAT_000af35c << 8);
  system_reg_write(0x42a4,DAT_000af374 << 0x18 | DAT_000af370 << 0x10 | DAT_000af368 |
                          DAT_000af36c << 8);
  system_reg_write(0x42a8,DAT_000af384 << 0x18 | DAT_000af380 << 0x10 | DAT_000af378 |
                          DAT_000af37c << 8);
  system_reg_write(0x42ac,DAT_000af394 << 0x18 | DAT_000af390 << 0x10 | DAT_000af388 |
                          DAT_000af38c << 8);
  system_reg_write(0x42b0,DAT_000af3a4 << 0x18 | DAT_000af3a0 << 0x10 | DAT_000af398 |
                          DAT_000af39c << 8);
  system_reg_write(0x42b4,_DAT_000af2b4 << 0x18 | DAT_000af2b0 << 0x10 |
                          param_adr_weight_02_lut_array | DAT_000af2ac << 8);
  system_reg_write(0x42b8,DAT_000af2c4 << 0x18 | DAT_000af2c0 << 0x10 | DAT_000af2b8 |
                          DAT_000af2bc << 8);
  system_reg_write(0x42bc,DAT_000af2d4 << 0x18 | DAT_000af2d0 << 0x10 | DAT_000af2c8 |
                          DAT_000af2cc << 8);
  system_reg_write(0x42c0,DAT_000af2e4 << 0x18 | DAT_000af2e0 << 0x10 | DAT_000af2d8 |
                          DAT_000af2dc << 8);
  system_reg_write(0x42c4,DAT_000af2f4 << 0x18 | DAT_000af2f0 << 0x10 | DAT_000af2e8 |
                          DAT_000af2ec << 8);
  system_reg_write(0x42c8,DAT_000af304 << 0x18 | DAT_000af300 << 0x10 | DAT_000af2f8 |
                          DAT_000af2fc << 8);
  system_reg_write(0x42cc,DAT_000af314 << 0x18 | DAT_000af310 << 0x10 | DAT_000af308 |
                          DAT_000af30c << 8);
  system_reg_write(0x42d0,DAT_000af324 << 0x18 | DAT_000af320 << 0x10 | DAT_000af318 |
                          DAT_000af31c << 8);
  system_reg_write(0x42d4,_DAT_000af234 << 0x18 | DAT_000af230 << 0x10 |
                          param_adr_weight_12_lut_array | DAT_000af22c << 8);
  system_reg_write(0x42d8,DAT_000af244 << 0x18 | DAT_000af240 << 0x10 | DAT_000af238 |
                          DAT_000af23c << 8);
  system_reg_write(0x42dc,DAT_000af254 << 0x18 | DAT_000af250 << 0x10 | DAT_000af248 |
                          DAT_000af24c << 8);
  system_reg_write(0x42e0,DAT_000af264 << 0x18 | DAT_000af260 << 0x10 | DAT_000af258 |
                          DAT_000af25c << 8);
  system_reg_write(0x42e4,DAT_000af274 << 0x18 | DAT_000af270 << 0x10 | DAT_000af268 |
                          DAT_000af26c << 8);
  system_reg_write(0x42e8,DAT_000af284 << 0x18 | DAT_000af280 << 0x10 | DAT_000af278 |
                          DAT_000af27c << 8);
  system_reg_write(0x42ec,DAT_000af294 << 0x18 | DAT_000af290 << 0x10 | DAT_000af288 |
                          DAT_000af28c << 8);
  system_reg_write(0x42f0,DAT_000af2a4 << 0x18 | DAT_000af2a0 << 0x10 | DAT_000af298 |
                          DAT_000af29c << 8);
  system_reg_write(0x4314,_DAT_000af1b4 << 0x18 | DAT_000af1b0 << 0x10 |
                          param_adr_weight_22_lut_array | DAT_000af1ac << 8);
  system_reg_write(0x4318,DAT_000af1c4 << 0x18 | DAT_000af1c0 << 0x10 | DAT_000af1b8 |
                          DAT_000af1bc << 8);
  system_reg_write(0x431c,DAT_000af1d4 << 0x18 | DAT_000af1d0 << 0x10 | DAT_000af1c8 |
                          DAT_000af1cc << 8);
  system_reg_write(0x4320,DAT_000af1e4 << 0x18 | DAT_000af1e0 << 0x10 | DAT_000af1d8 |
                          DAT_000af1dc << 8);
  system_reg_write(0x4324,DAT_000af1f4 << 0x18 | DAT_000af1f0 << 0x10 | DAT_000af1e8 |
                          DAT_000af1ec << 8);
  system_reg_write(0x4328,DAT_000af204 << 0x18 | DAT_000af200 << 0x10 | DAT_000af1f8 |
                          DAT_000af1fc << 8);
  system_reg_write(0x432c,DAT_000af214 << 0x18 | DAT_000af210 << 0x10 | DAT_000af208 |
                          DAT_000af20c << 8);
  system_reg_write(0x4330,DAT_000af224 << 0x18 | DAT_000af220 << 0x10 | DAT_000af218 |
                          DAT_000af21c << 8);
  system_reg_write(0x42f4,_DAT_000af134 << 0x18 | DAT_000af130 << 0x10 |
                          param_adr_weight_21_lut_array | DAT_000af12c << 8);
  system_reg_write(0x42f8,DAT_000af144 << 0x18 | DAT_000af140 << 0x10 | DAT_000af138 |
                          DAT_000af13c << 8);
  system_reg_write(0x42fc,DAT_000af154 << 0x18 | DAT_000af150 << 0x10 | DAT_000af148 |
                          DAT_000af14c << 8);
  system_reg_write(0x4300,DAT_000af164 << 0x18 | DAT_000af160 << 0x10 | DAT_000af158 |
                          DAT_000af15c << 8);
  system_reg_write(0x4304,DAT_000af174 << 0x18 | DAT_000af170 << 0x10 | DAT_000af168 |
                          DAT_000af16c << 8);
  system_reg_write(0x4308,DAT_000af184 << 0x18 | DAT_000af180 << 0x10 | DAT_000af178 |
                          DAT_000af17c << 8);
  system_reg_write(0x430c,DAT_000af194 << 0x18 | DAT_000af190 << 0x10 | DAT_000af188 |
                          DAT_000af18c << 8);
  system_reg_write(0x4310,DAT_000af1a4 << 0x18 | DAT_000af1a0 << 0x10 | DAT_000af198 |
                          DAT_000af19c << 8);
  system_reg_write(0x4378,DAT_000af030 << 0x10 | param_adr_min_kneepoint_array_def);
  system_reg_write(0x437c,DAT_000af038 << 0x10 | DAT_000af034);
  system_reg_write(0x4380,DAT_000af040 << 0x10 | DAT_000af03c);
  system_reg_write(0x4384,DAT_000af048 << 0x10 | DAT_000af044);
  system_reg_write(0x4388,DAT_000af050 << 0x10 | DAT_000af04c);
  system_reg_write(0x438c,DAT_000af054);
  system_reg_write(0x43a8,DAT_000af064 << 0x18 | DAT_000af060 << 0x10 | DAT_000af058 |
                          DAT_000af05c << 8);
  system_reg_write(0x43ac,DAT_000af074 << 0x18 | DAT_000af070 << 0x10 | DAT_000af068 |
                          DAT_000af06c << 8);
  system_reg_write(0x43b0,DAT_000af084 << 0x18 | DAT_000af080 << 0x10 | DAT_000af078 |
                          DAT_000af07c << 8);
  system_reg_write(0x43b4,_DAT_000aefa4 << 0x10 | param_adr_coc_kneepoint_y1_array);
  system_reg_write(0x43b8,DAT_000aefac << 0x10 | DAT_000aefa8);
  system_reg_write(0x43bc,DAT_000aefb4 << 0x10 | DAT_000aefb0);
  system_reg_write(0x43c0,DAT_000aefbc << 0x10 | DAT_000aefb8);
  system_reg_write(0x43c4,DAT_000aefc4 << 0x10 | DAT_000aefc0);
  system_reg_write(0x43c8,DAT_000aefcc << 0x10 | DAT_000aefc8);
  system_reg_write(0x43cc,_DAT_000aef74 << 0x10 | param_adr_coc_kneepoint_y2_array);
  system_reg_write(0x43d0,DAT_000aef7c << 0x10 | DAT_000aef78);
  system_reg_write(0x43d4,DAT_000aef84 << 0x10 | DAT_000aef80);
  system_reg_write(0x43d8,DAT_000aef8c << 0x10 | DAT_000aef88);
  system_reg_write(0x43dc,DAT_000aef94 << 0x10 | DAT_000aef90);
  system_reg_write(0x43e0,DAT_000aef9c << 0x10 | DAT_000aef98);
  system_reg_write(0x43e4,_DAT_000aef44 << 0x10 | param_adr_coc_kneepoint_y3_array);
  system_reg_write(0x43e8,DAT_000aef4c << 0x10 | DAT_000aef48);
  system_reg_write(0x43ec,DAT_000aef54 << 0x10 | DAT_000aef50);
  system_reg_write(0x43f0,DAT_000aef5c << 0x10 | DAT_000aef58);
  system_reg_write(0x43f4,DAT_000aef64 << 0x10 | DAT_000aef60);
  system_reg_write(0x43f8,DAT_000aef6c << 0x10 | DAT_000aef68);
  system_reg_write(0x43fc,_DAT_000aef14 << 0x10 | param_adr_coc_kneepoint_y4_array);
  system_reg_write(0x4400,DAT_000aef1c << 0x10 | DAT_000aef18);
  system_reg_write(0x4404,DAT_000aef24 << 0x10 | DAT_000aef20);
  system_reg_write(0x4408,DAT_000aef2c << 0x10 | DAT_000aef28);
  system_reg_write(0x440c,DAT_000aef34 << 0x10 | DAT_000aef30);
  system_reg_write(0x4410,DAT_000aef3c << 0x10 | DAT_000aef38);
  system_reg_write(0x4414,_DAT_000aeee4 << 0x10 | param_adr_coc_kneepoint_y5_array);
  system_reg_write(0x4418,DAT_000aeeec << 0x10 | DAT_000aeee8);
  system_reg_write(0x441c,DAT_000aeef4 << 0x10 | DAT_000aeef0);
  system_reg_write(0x4420,DAT_000aeefc << 0x10 | DAT_000aeef8);
  system_reg_write(0x4424,DAT_000aef04 << 0x10 | DAT_000aef00);
  system_reg_write(0x4428,DAT_000aef0c << 0x10 | DAT_000aef08);
  system_reg_write(0x442c,_DAT_000aeeac << 0x10 | param_adr_coc_adjust_array);
  system_reg_write(0x4430,DAT_000aeeb4 << 0x10 | DAT_000aeeb0);
  system_reg_write(0x4434,DAT_000aeeb8);
  system_reg_write(0x4438,DAT_000aeec0 << 0x10 | DAT_000aeebc);
  system_reg_write(0x443c,DAT_000aeec8 << 0x10 | DAT_000aeec4);
  system_reg_write(0x4440,DAT_000aeecc);
  system_reg_write(0x4444,DAT_000aeed4 << 8 | DAT_000aeed8 << 0x10 | DAT_000aeed0 |
                          DAT_000aeedc << 0x18);
  system_reg_write(0x4484,_DAT_000aee20 << 0x10 | param_adr_stat_block_hist_diff_array);
  system_reg_write(0x4488,DAT_000aee28 << 0x10 | DAT_000aee24);
  adr_block_light._36_4_ = height_def;
  adr_block_light_wdr._36_4_ = height_def;
  adr_block_light._32_4_ = width_def;
  adr_block_light_wdr._32_4_ = width_def;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_adr_gamma_refresh(void)

{
  unsigned int uVar1;
  unsigned int *puVar2;
  int iVar3;
  unsigned int uVar4;
  int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  ushort *puVar8;
  unsigned int uVar9;
  int *piVar10;
  unsigned int *puVar11;
  unsigned int *puVar12;
  int iVar13;
  unsigned int uVar14;
  unsigned int uVar15;
  int local_18 [3];
  
  local_18[0] = 0;
  uVar5 = 0x3c;
  if (adr_wdr_en != 0) {
    uVar5 = 0x3d;
  }
  tisp_gamma_param_array_get(uVar5,&param_adr_gam_y_array_def,local_18);
  if (local_18[0] == 0x102) {
    puVar11 = &histSub_4096_out;
    uVar14 = (uint)_DAT_000aedf4;
    uVar15 = (uint)param_adr_gam_x_array;
    iVar13 = 0;
    puVar12 = puVar11;
    do {
      puVar8 = &param_adr_gam_y_array_def;
      uVar1 = *(unsigned int *)((int)&histSub_4096 + iVar13);
      iVar3 = 0;
      do {
        uVar6 = (uint)*puVar8;
        if (uVar1 <= uVar6) {
          if (iVar3 == 0) {
            *puVar12 = uVar15;
          }
          else {
            uVar9 = (uint)(&param_adr_gam_x_array)[iVar3 + -1];
            uVar4 = (uint)(&param_adr_gam_x_array)[iVar3];
            if (uVar4 < uVar9) {
              uVar7 = (uint)(ushort)(&param_adr_gam_y_array_def)[iVar3 + -1];
              iVar3 = uVar7 - uVar1;
              if (uVar7 < uVar1) {
                iVar3 = uVar1 - uVar7;
              }
              uVar1 = uVar6 - uVar7;
              if (uVar6 < uVar7) {
                uVar1 = uVar7 - uVar6;
              }
              uVar1 = -((iVar3 * (uVar9 - uVar4)) / uVar1);
            }
            else {
              uVar7 = (uint)(ushort)(&param_adr_gam_y_array_def)[iVar3 + -1];
              iVar3 = uVar7 - uVar1;
              if (uVar7 < uVar1) {
                iVar3 = uVar1 - uVar7;
              }
              uVar1 = uVar6 - uVar7;
              if (uVar6 < uVar7) {
                uVar1 = uVar7 - uVar6;
              }
              uVar1 = (iVar3 * (uVar4 - uVar9)) / uVar1;
            }
            *puVar12 = uVar9 + uVar1;
          }
          goto LAB_0005c408;
        }
        iVar3 = iVar3 + 1;
        puVar8 = puVar8 + 1;
      } while (iVar3 != 0x81);
      *puVar12 = uVar14;
LAB_0005c408:
      puVar2 = (unsigned int *)((int)&adr_tm_base_lut + iVar13);
      iVar13 = iVar13 + 4;
      *puVar2 = *puVar12;
      puVar12 = puVar12 + 1;
    } while (iVar13 != 0x24);
    iVar13 = 0;
    do {
      piVar10 = (int *)((int)&histSub_4096_diff + iVar13);
      iVar13 = iVar13 + 4;
      *piVar10 = puVar11[1] - *puVar11;
      puVar11 = puVar11 + 1;
    } while (iVar13 != 0x20);
    uVar5 = 0;
  }
  else {
    isp_printf(2,"get gamma error!!!");
    uVar5 = 0xffffffff;
  }
  return uVar5;
}



int tisp_adr_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x380:
    __src = (char *)&param_adr_para_array;
    goto LAB_0005c700;
  case 0x381:
    __src = (char *)&param_adr_weight_20_lut_array;
    goto LAB_0005c710;
  case 0x382:
    __src = (char *)&param_adr_weight_02_lut_array;
    goto LAB_0005c710;
  case 899:
    __src = (char *)&param_adr_weight_12_lut_array;
    goto LAB_0005c710;
  case 900:
    __src = (char *)&param_adr_weight_22_lut_array;
    goto LAB_0005c710;
  case 0x385:
    __src = (char *)&param_adr_weight_21_lut_array;
LAB_0005c710:
    __n = 0x80;
    goto LAB_0005c714;
  case 0x386:
    __src = (char *)&param_adr_ctc_kneepoint_array;
    __n = 0x44;
    goto LAB_0005c714;
  case 0x387:
    __src = (char *)&param_adr_min_kneepoint_array;
    goto LAB_0005c4f8;
  case 0x388:
    __src = (char *)&param_adr_map_kneepoint_array;
LAB_0005c4f8:
    __n = 0x5c;
    goto LAB_0005c714;
  case 0x389:
    __src = (char *)&param_adr_coc_kneepoint_y1_array;
    goto LAB_0005c514;
  case 0x38a:
    __src = (char *)&param_adr_coc_kneepoint_y2_array;
    goto LAB_0005c514;
  case 0x38b:
    __src = (char *)&param_adr_coc_kneepoint_y3_array;
    goto LAB_0005c514;
  case 0x38c:
    __src = (char *)&param_adr_coc_kneepoint_y4_array;
    goto LAB_0005c514;
  case 0x38d:
    __src = (char *)&param_adr_coc_kneepoint_y5_array;
LAB_0005c514:
    __n = 0x30;
    goto LAB_0005c714;
  case 0x38e:
    __src = (char *)&param_adr_coc_adjust_array;
    goto LAB_0005c5d8;
  case 0x38f:
    __src = (char *)&param_adr_centre_w_dis_array;
    __n = 0x7c;
    goto LAB_0005c714;
  case 0x390:
    __src = (char *)&param_adr_stat_block_hist_diff_array;
    __n = 0x10;
    goto LAB_0005c714;
  case 0x391:
    __src = (char *)&adr_tm_base_lut;
    break;
  case 0x392:
    __src = (char *)&param_adr_gam_x_array;
    goto LAB_0005c58c;
  case 0x393:
    __src = (char *)&param_adr_gam_y_array;
LAB_0005c58c:
    __n = 0x102;
    goto LAB_0005c714;
  case 0x394:
    __src = (char *)&adr_ctc_map2cut_y;
    break;
  case 0x395:
    __src = adr_light_end;
    goto LAB_0005c63c;
  case 0x396:
    __src = adr_block_light;
    goto LAB_0005c64c;
  case 0x397:
    __src = (char *)&adr_map_mode;
    goto LAB_0005c65c;
  case 0x398:
    __src = (char *)&histSub_4096_diff;
LAB_0005c700:
    __n = 0x20;
    goto LAB_0005c714;
  case 0x399:
    __src = (char *)&param_adr_tool_control_array;
LAB_0005c5d8:
    __n = 0x38;
    goto LAB_0005c714;
  case 0x39a:
    __src = (char *)&adr_ev_list;
    break;
  case 0x39b:
    __src = (char *)&adr_ligb_list;
    break;
  case 0x39c:
    __src = (char *)&adr_mapb1_list;
    break;
  case 0x39d:
    __src = (char *)&adr_mapb2_list;
    break;
  case 0x39e:
    __src = (char *)&adr_mapb3_list;
    break;
  case 0x39f:
    __src = (char *)&adr_mapb4_list;
    break;
  case 0x3a0:
    __src = adr_ctc_map2cut_y_wdr;
    break;
  case 0x3a1:
    __src = adr_light_end_wdr;
LAB_0005c63c:
    __n = 0x74;
    goto LAB_0005c714;
  case 0x3a2:
    __src = adr_block_light_wdr;
LAB_0005c64c:
    __n = 0x3c;
    goto LAB_0005c714;
  case 0x3a3:
    __src = adr_map_mode_wdr;
LAB_0005c65c:
    __n = 0x2c;
    goto LAB_0005c714;
  case 0x3a4:
    __src = adr_ev_list_wdr;
    break;
  case 0x3a5:
    __src = adr_ligb_list_wdr;
    break;
  case 0x3a6:
    __src = adr_mapb1_list_wdr;
    break;
  case 0x3a7:
    __src = adr_mapb2_list_wdr;
    break;
  case 0x3a8:
    __src = adr_mapb3_list_wdr;
    break;
  case 0x3a9:
    __src = adr_mapb4_list_wdr;
    break;
  case 0x3aa:
    __src = adr_blp2_list_wdr;
    break;
  case 0x3ab:
    __src = (char *)&adr_blp2_list;
    break;
  default:
    isp_printf(2,"%s,%d: gib not support param id %d\n","tisp_adr_param_array_get",0x7a4,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_0005c714:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_adr_param_array_set(int param_1,int *param_2,int *param_3)

{
  bool bVar1;
  int iVar2;
  short *__dest;
  int *puVar3;
  char *puVar4;
  int uVar5;
  
  switch(param_1) {
  case 0x380:
    puVar3 = &param_adr_para_array;
    goto LAB_0005c99c;
  case 0x381:
    puVar3 = &param_adr_weight_20_lut_array;
    goto LAB_0005c7ac;
  case 0x382:
    puVar3 = &param_adr_weight_02_lut_array;
    goto LAB_0005c7ac;
  case 899:
    puVar3 = &param_adr_weight_12_lut_array;
    goto LAB_0005c7ac;
  case 900:
    puVar3 = &param_adr_weight_22_lut_array;
    goto LAB_0005c7ac;
  case 0x385:
    puVar3 = &param_adr_weight_21_lut_array;
LAB_0005c7ac:
    memcpy(puVar3,param_2,0x80);
    *param_3 = 0x80;
    return 0;
  case 0x386:
    memcpy(&param_adr_ctc_kneepoint_array,param_2,0x44);
    uVar5 = 0x44;
    goto LAB_0005cc5c;
  case 0x387:
    puVar3 = &param_adr_min_kneepoint_array;
    goto LAB_0005c830;
  case 0x388:
    puVar3 = &param_adr_map_kneepoint_array;
LAB_0005c830:
    memcpy(puVar3,param_2,0x5c);
    *param_3 = 0x5c;
    return 0;
  case 0x389:
    puVar3 = &param_adr_coc_kneepoint_y1_array;
    goto LAB_0005c864;
  case 0x38a:
    puVar3 = &param_adr_coc_kneepoint_y2_array;
    goto LAB_0005c864;
  case 0x38b:
    puVar3 = &param_adr_coc_kneepoint_y3_array;
    goto LAB_0005c864;
  case 0x38c:
    puVar3 = &param_adr_coc_kneepoint_y4_array;
    goto LAB_0005c864;
  case 0x38d:
    puVar3 = &param_adr_coc_kneepoint_y5_array;
LAB_0005c864:
    memcpy(puVar3,param_2,0x30);
    *param_3 = 0x30;
    return 0;
  case 0x38e:
    memcpy(&param_adr_coc_adjust_array,param_2,0x38);
    uVar5 = 0x38;
    goto LAB_0005cc5c;
  case 0x38f:
    memcpy(&param_adr_centre_w_dis_array,param_2,0x7c);
    uVar5 = 0x7c;
    goto LAB_0005cc5c;
  case 0x390:
    memcpy(&param_adr_stat_block_hist_diff_array,param_2,0x10);
    uVar5 = 0x10;
    goto LAB_0005cc5c;
  case 0x391:
    puVar4 = (char *)&adr_tm_base_lut;
    break;
  case 0x392:
    __dest = &param_adr_gam_x_array;
    goto LAB_0005c938;
  case 0x393:
    __dest = &param_adr_gam_y_array;
LAB_0005c938:
    memcpy(__dest,param_2,0x102);
    *param_3 = 0x102;
    return 0;
  case 0x394:
    puVar4 = (char *)&adr_ctc_map2cut_y;
    break;
  case 0x395:
    puVar4 = adr_light_end;
    goto LAB_0005cb0c;
  case 0x396:
    puVar4 = adr_block_light;
    goto LAB_0005cb30;
  case 0x397:
    puVar4 = (char *)&adr_map_mode;
    goto LAB_0005cb54;
  case 0x398:
    puVar3 = &histSub_4096_diff;
LAB_0005c99c:
    memcpy(puVar3,param_2,0x20);
    *param_3 = 0x20;
    return 0;
  case 0x399:
    puVar3 = &param_adr_tool_control_array;
    iVar2 = 0;
    do {
      bVar1 = iVar2 != 1;
      iVar2 = iVar2 + 1;
      if (bVar1) {
        *puVar3 = *param_2;
      }
      param_2 = param_2 + 1;
      puVar3 = puVar3 + 1;
    } while (iVar2 != 0xe);
    uVar5 = 0x38;
    if (param_adr_tool_control_array == 0) {
      memcpy(&param_adr_centre_w_dis_array,&param_adr_centre_w_dis_array_tmp,0x7c);
      memcpy(&param_adr_weight_20_lut_array,&param_adr_weight_20_lut_array_tmp,0x80);
      memcpy(&param_adr_weight_02_lut_array,&param_adr_weight_02_lut_array_tmp,0x80);
      memcpy(&param_adr_weight_12_lut_array,&param_adr_weight_12_lut_array_tmp,0x80);
      memcpy(&param_adr_weight_22_lut_array,&param_adr_weight_22_lut_array_tmp,0x80);
      memcpy(&param_adr_weight_21_lut_array,&param_adr_weight_21_lut_array_tmp,0x80);
      *param_3 = 0x38;
      return 0;
    }
LAB_0005cc5c:
    *param_3 = uVar5;
    return 0;
  case 0x39a:
    puVar4 = (char *)&adr_ev_list;
    break;
  case 0x39b:
    puVar4 = (char *)&adr_ligb_list;
    break;
  case 0x39c:
    puVar4 = (char *)&adr_mapb1_list;
    break;
  case 0x39d:
    puVar4 = (char *)&adr_mapb2_list;
    break;
  case 0x39e:
    puVar4 = (char *)&adr_mapb3_list;
    break;
  case 0x39f:
    puVar4 = (char *)&adr_mapb4_list;
    break;
  case 0x3a0:
    puVar4 = adr_ctc_map2cut_y_wdr;
    break;
  case 0x3a1:
    puVar4 = adr_light_end_wdr;
LAB_0005cb0c:
    memcpy(puVar4,param_2,0x74);
    *param_3 = 0x74;
    return 0;
  case 0x3a2:
    puVar4 = adr_block_light_wdr;
LAB_0005cb30:
    memcpy(puVar4,param_2,0x3c);
    *param_3 = 0x3c;
    return 0;
  case 0x3a3:
    puVar4 = adr_map_mode_wdr;
LAB_0005cb54:
    memcpy(puVar4,param_2,0x2c);
    *param_3 = 0x2c;
    return 0;
  case 0x3a4:
    puVar4 = adr_ev_list_wdr;
    break;
  case 0x3a5:
    puVar4 = adr_ligb_list_wdr;
    break;
  case 0x3a6:
    puVar4 = adr_mapb1_list_wdr;
    break;
  case 0x3a7:
    puVar4 = adr_mapb2_list_wdr;
    break;
  case 0x3a8:
    puVar4 = adr_mapb3_list_wdr;
    break;
  case 0x3a9:
    puVar4 = adr_mapb4_list_wdr;
    break;
  case 0x3aa:
    puVar4 = adr_blp2_list_wdr;
    break;
  case 0x3ab:
    memcpy(&adr_blp2_list,param_2,0x24);
    tiziano_adr_params_init();
    ev_changed = 1;
    *param_3 = 0x24;
    return 0;
  default:
    isp_printf(2,"%s,%d: Adr not support param id %d\n","tisp_adr_param_array_set",0x89d,param_1);
    return 0xffffffff;
  }
  memcpy(puVar4,param_2,0x24);
  *param_3 = 0x24;
  return 0;
}



void tisp_g_adr_str_internal(int *param_1)

{
  *param_1 = adr_ratio;
  return;
}



void tisp_s_adr_str_internal(unsigned int param_1)

{
  int iVar1;
  unsigned int *puVar2;
  int iVar3;
  unsigned int uVar4;
  int iVar5;
  unsigned int *puVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  int iVar9;
  int iVar10;
  unsigned int uVar11;
  
  iVar1 = adr_wdr_en;
  iVar10 = param_1 - 0x80;
  puVar2 = (unsigned int *)&DAT_000a5f1c;
  iVar9 = 0;
  adr_ratio = param_1;
  do {
    if (iVar1 == 0) {
      uVar8 = puVar2[-0x76];
      if (param_1 >= 0x81) {
        iVar3 = 400 - uVar8;
        if (399 < uVar8) {
          iVar3 = 0;
        }
        uVar11 = puVar2[-0x6d];
        iVar5 = 500 - uVar11;
        uVar8 = ((uint)(iVar3 * iVar10) >> 7) + uVar8;
        if (499 < uVar11) {
          iVar5 = 0;
        }
        uVar7 = puVar2[-100];
        uVar11 = ((uint)(iVar5 * iVar10) >> 7) + uVar11;
        iVar3 = 600 - uVar7;
        if (599 < uVar7) {
          iVar3 = 0;
        }
        uVar7 = ((uint)(iVar3 * iVar10) >> 7) + uVar7;
        uVar4 = puVar2[-0x5b];
        goto LAB_0005cde0;
      }
      uVar11 = puVar2[-0x6d];
      uVar7 = puVar2[-100];
      uVar4 = puVar2[-0x5b];
LAB_0005ce20:
      uVar11 = param_1 * uVar11 >> 7;
      uVar8 = param_1 * uVar8 >> 7;
      uVar7 = param_1 * uVar7 >> 7;
      uVar4 = param_1 * uVar4 >> 7;
    }
    else {
      uVar8 = *puVar2;
      if (param_1 < 0x81) {
        uVar11 = puVar2[9];
        uVar7 = puVar2[0x12];
        uVar4 = puVar2[0x1b];
        goto LAB_0005ce20;
      }
      iVar3 = 400 - uVar8;
      if (399 < uVar8) {
        iVar3 = 0;
      }
      uVar11 = puVar2[9];
      iVar5 = 500 - uVar11;
      uVar8 = ((uint)(iVar3 * iVar10) >> 7) + uVar8;
      if (499 < uVar11) {
        iVar5 = 0;
      }
      uVar7 = puVar2[0x12];
      uVar11 = ((uint)(iVar5 * iVar10) >> 7) + uVar11;
      iVar3 = 600 - uVar7;
      if (599 < uVar7) {
        iVar3 = 0;
      }
      uVar7 = ((uint)(iVar3 * iVar10) >> 7) + uVar7;
      uVar4 = puVar2[0x1b];
LAB_0005cde0:
      iVar3 = 600 - uVar4;
      if (599 < uVar4) {
        iVar3 = 0;
      }
      uVar4 = ((uint)(iVar3 * iVar10) >> 7) + uVar4;
    }
    if (uVar8 <= histSub_4096_diff) {
      uVar8 = histSub_4096_diff;
    }
    *(unsigned int *)(adr_mapb1_list_now + iVar9) = uVar8;
    if (uVar11 <= DAT_000ae0c4) {
      uVar11 = DAT_000ae0c4;
    }
    *(unsigned int *)(adr_mapb2_list_now + iVar9) = uVar11;
    if (uVar7 <= DAT_000ae0c8) {
      uVar7 = DAT_000ae0c8;
    }
    *(unsigned int *)(adr_mapb3_list_now + iVar9) = uVar7;
    puVar6 = (unsigned int *)(adr_mapb4_list_now + iVar9);
    if (uVar4 <= DAT_000ae0cc) {
      uVar4 = DAT_000ae0cc;
    }
    iVar9 = iVar9 + 4;
    *puVar6 = uVar4;
    puVar2 = puVar2 + 1;
    if (iVar9 == 0x24) {
      tiziano_adr_params_init();
      ev_changed = 1;
      return;
    }
  } while( true );
}



int tiziano_adr_params_refresh(void)

{
  bool bVar1;
  int iVar2;
  int *puVar3;
  int *puVar4;
  int local_40 [14];
  
  memcpy(&param_adr_para_array,&DAT_000a542c,0x20);
  memcpy(&param_adr_ctc_kneepoint_array,&DAT_000a56cc,0x44);
  memcpy(&param_adr_min_kneepoint_array,&DAT_000a5710,0x5c);
  memcpy(&param_adr_map_kneepoint_array,&DAT_000a576c,0x5c);
  memcpy(&param_adr_coc_kneepoint_y1_array,&DAT_000a57c8,0x30);
  memcpy(&param_adr_coc_kneepoint_y2_array,&DAT_000a57f8,0x30);
  memcpy(&param_adr_coc_kneepoint_y3_array,&DAT_000a5828,0x30);
  memcpy(&param_adr_coc_kneepoint_y4_array,&DAT_000a5858,0x30);
  memcpy(&param_adr_coc_kneepoint_y5_array,&DAT_000a5888,0x30);
  memcpy(&param_adr_coc_adjust_array,&DAT_000a58b8,0x38);
  memcpy(&param_adr_stat_block_hist_diff_array,&DAT_000a596c,0x10);
  memcpy(&adr_tm_base_lut,&DAT_000a597c,0x24);
  memcpy(&param_adr_gam_x_array,&DAT_000a59a0,0x102);
  memcpy(&param_adr_gam_y_array,&DAT_000a5aa2,0x102);
  memcpy(&adr_ctc_map2cut_y,&DAT_000a5ba4,0x24);
  memcpy(adr_light_end,&DAT_000a5bc8,0x74);
  memcpy(adr_block_light,&DAT_000a5c3c,0x3c);
  memcpy(&adr_map_mode,&DAT_000a5c78,0x2c);
  memcpy(&histSub_4096_diff,&DAT_000a5ca4,0x20);
  memcpy(&adr_ev_list,&DAT_000a5cfc,0x24);
  memcpy(&adr_ligb_list,&DAT_000a5d20,0x24);
  memcpy(&adr_mapb1_list,&DAT_000a5d44,0x24);
  memcpy(&adr_mapb2_list,&DAT_000a5d68,0x24);
  memcpy(&adr_mapb3_list,&DAT_000a5d8c,0x24);
  memcpy(&adr_mapb4_list,&DAT_000a5db0,0x24);
  memcpy(&adr_blp2_list,&DAT_000a5fd0,0x24);
  memcpy(adr_ev_list_wdr,&DAT_000a5ed4,0x24);
  memcpy(adr_ligb_list_wdr,&DAT_000a5ef8,0x24);
  memcpy(adr_mapb1_list_wdr,&DAT_000a5f1c,0x24);
  memcpy(adr_mapb2_list_wdr,&DAT_000a5f40,0x24);
  memcpy(adr_mapb3_list_wdr,&DAT_000a5f64,0x24);
  memcpy(adr_mapb4_list_wdr,&DAT_000a5f88,0x24);
  memcpy(adr_blp2_list_wdr,&DAT_000a5fac,0x24);
  memcpy(adr_ctc_map2cut_y_wdr,&DAT_000a5dd4,0x24);
  memcpy(adr_light_end_wdr,&DAT_000a5df8,0x74);
  memcpy(adr_block_light_wdr,&DAT_000a5e6c,0x3c);
  memcpy(adr_map_mode_wdr,&DAT_000a5ea8,0x2c);
  memcpy(local_40,&DAT_000a5cc4,0x38);
  puVar4 = local_40;
  puVar3 = &param_adr_tool_control_array;
  iVar2 = 0;
  do {
    bVar1 = iVar2 != 1;
    iVar2 = iVar2 + 1;
    if (bVar1) {
      *puVar3 = *puVar4;
    }
    puVar4 = puVar4 + 1;
    puVar3 = puVar3 + 1;
  } while (iVar2 != 0xe);
  if (param_adr_tool_control_array == 1) {
    memcpy(&param_adr_weight_20_lut_array,&DAT_000a544c,0x80);
    memcpy(&param_adr_weight_02_lut_array,&DAT_000a54cc,0x80);
    memcpy(&param_adr_weight_12_lut_array,&DAT_000a554c,0x80);
    memcpy(&param_adr_weight_22_lut_array,&DAT_000a55cc,0x80);
    memcpy(&param_adr_weight_21_lut_array,&DAT_000a564c,0x80);
    puVar4 = (int *)&DAT_000a58f0;
  }
  else {
    if (param_adr_tool_control_array != 0) {
      isp_printf(2,"ADR TOOL CTL[0] overflow!!!\n");
      return 0xffffffff;
    }
    memcpy(&param_adr_weight_20_lut_array,&param_adr_weight_20_lut_array_tmp,0x80);
    memcpy(&param_adr_weight_02_lut_array,&param_adr_weight_02_lut_array_tmp,0x80);
    memcpy(&param_adr_weight_12_lut_array,&param_adr_weight_12_lut_array_tmp,0x80);
    memcpy(&param_adr_weight_22_lut_array,&param_adr_weight_22_lut_array_tmp,0x80);
    memcpy(&param_adr_weight_21_lut_array,&param_adr_weight_21_lut_array_tmp,0x80);
    puVar4 = &param_adr_centre_w_dis_array_tmp;
  }
  memcpy(&param_adr_centre_w_dis_array,puVar4,0x7c);
  if (adr_ratio != 0x80) {
    tisp_s_adr_str_internal();
  }
  tiziano_adr_gamma_refresh();
  ev_changed = 1;
  return 0;
}



int tiziano_adr_dn_params_refresh(void)

{
  tiziano_adr_params_refresh();
  tiziano_adr_params_init();
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_adr_wdr_en(int param_1)

{
  char *puVar1;
  
  if (param_1 == 0) {
    adr_ctc_map2cut_y_now = (char *)&adr_ctc_map2cut_y;
    adr_light_end_now = adr_light_end;
    adr_block_light_now = adr_block_light;
    adr_map_mode_now = (char *)&adr_map_mode;
    adr_ev_list_now = (char *)&adr_ev_list;
    adr_ligb_list_now = (char *)&adr_ligb_list;
    adr_mapb1_list_now = (char *)&adr_mapb1_list;
    adr_mapb2_list_now = (char *)&adr_mapb2_list;
    adr_mapb3_list_now = (char *)&adr_mapb3_list;
    adr_mapb4_list_now = (char *)&adr_mapb4_list;
    puVar1 = (char *)&adr_blp2_list;
  }
  else {
    adr_ctc_map2cut_y_now = adr_ctc_map2cut_y_wdr;
    adr_light_end_now = adr_light_end_wdr;
    adr_block_light_now = adr_block_light_wdr;
    adr_map_mode_now = adr_map_mode_wdr;
    adr_ev_list_now = adr_ev_list_wdr;
    adr_ligb_list_now = adr_ligb_list_wdr;
    adr_mapb1_list_now = adr_mapb1_list_wdr;
    adr_mapb2_list_now = adr_mapb2_list_wdr;
    adr_mapb3_list_now = adr_mapb3_list_wdr;
    adr_mapb4_list_now = adr_mapb4_list_wdr;
    puVar1 = adr_blp2_list_wdr;
  }
  adr_blp2_list_now = puVar1;
  adr_wdr_en = param_1;
  tiziano_adr_params_refresh();
  if (adr_wdr_en == 0) {
    adr_ctc_map2cut_y_now = (char *)&adr_ctc_map2cut_y;
    adr_light_end_now = adr_light_end;
    adr_map_mode_now = (char *)&adr_map_mode;
    adr_ev_list_now = (char *)&adr_ev_list;
    adr_ligb_list_now = (char *)&adr_ligb_list;
    adr_mapb1_list_now = (char *)&adr_mapb1_list;
    adr_mapb2_list_now = (char *)&adr_mapb2_list;
    adr_mapb3_list_now = (char *)&adr_mapb3_list;
    adr_mapb4_list_now = (char *)&adr_mapb4_list;
    adr_block_light_now = adr_block_light;
    puVar1 = (char *)&adr_blp2_list;
  }
  else {
    adr_ctc_map2cut_y_now = adr_ctc_map2cut_y_wdr;
    adr_light_end_now = adr_light_end_wdr;
    adr_map_mode_now = adr_map_mode_wdr;
    adr_ev_list_now = adr_ev_list_wdr;
    adr_ligb_list_now = adr_ligb_list_wdr;
    adr_mapb1_list_now = adr_mapb1_list_wdr;
    adr_mapb2_list_now = adr_mapb2_list_wdr;
    adr_mapb3_list_now = adr_mapb3_list_wdr;
    adr_mapb4_list_now = adr_mapb4_list_wdr;
    adr_block_light_now = adr_block_light_wdr;
    puVar1 = adr_blp2_list_wdr;
  }
  adr_blp2_list_now = puVar1;
  system_reg_write(0x4004,param_adr_para_array << 4 | DAT_000af3c4 << 0x10 | DAT_000af3ac);
  system_reg_write(0x4448,DAT_000af3b4 << 0x10 | DAT_000af3b0);
  system_reg_write(0x444c,DAT_000af3bc << 0x10 | DAT_000af3b8);
  system_reg_write(0x4450,DAT_000af3c0);
  system_reg_write(0x402c,DAT_000aee30 << 0x10 | param_adr_centre_w_dis_array);
  system_reg_write(0x4030,DAT_000aee38 << 0x10 | DAT_000aee34);
  system_reg_write(0x4034,DAT_000aee40 << 0x10 | DAT_000aee3c);
  system_reg_write(0x4038,DAT_000aee48 << 0x10 | DAT_000aee44);
  system_reg_write(0x403c,DAT_000aee50 << 0x10 | DAT_000aee4c);
  system_reg_write(0x4040,DAT_000aee58 << 0x10 | DAT_000aee54);
  system_reg_write(0x4044,DAT_000aee60 << 0x10 | DAT_000aee5c);
  system_reg_write(0x4048,DAT_000aee68 << 0x10 | DAT_000aee64);
  system_reg_write(0x404c,DAT_000aee70 << 0x10 | DAT_000aee6c);
  system_reg_write(0x4050,DAT_000aee78 << 0x10 | DAT_000aee74);
  system_reg_write(0x4054,DAT_000aee80 << 0x10 | DAT_000aee7c);
  system_reg_write(0x4058,DAT_000aee88 << 0x10 | DAT_000aee84);
  system_reg_write(0x405c,DAT_000aee90 << 0x10 | DAT_000aee8c);
  system_reg_write(0x4060,DAT_000aee98 << 0x10 | DAT_000aee94);
  system_reg_write(0x4064,DAT_000aeea0 << 0x10 | DAT_000aee9c);
  system_reg_write(0x4068,DAT_000aeea4);
  system_reg_write(0x4340,_DAT_000af0e8 << 0x10 | param_adr_ctc_kneepoint_array);
  system_reg_write(0x4344,DAT_000af0f0 << 0x10 | DAT_000af0ec);
  system_reg_write(0x4348,DAT_000af0f8 << 0x10 | DAT_000af0f4);
  system_reg_write(0x434c,DAT_000af100 << 0x10 | DAT_000af0fc);
  system_reg_write(0x4350,DAT_000af104);
  system_reg_write(0x4368,DAT_000af10c << 0x10 | DAT_000af108);
  system_reg_write(0x436c,DAT_000af114 << 0x10 | DAT_000af110);
  system_reg_write(0x4370,DAT_000af11c << 0x10 | DAT_000af118);
  system_reg_write(0x4374,DAT_000af124 << 0x10 | DAT_000af120);
  system_reg_write(0x406c,DAT_000aefd4 << 0x10 | param_adr_map_kneepoint_array);
  system_reg_write(0x4070,DAT_000aefdc << 0x10 | DAT_000aefd8);
  system_reg_write(0x4074,DAT_000aefe4 << 0x10 | DAT_000aefe0);
  system_reg_write(0x4078,DAT_000aefec << 0x10 | DAT_000aefe8);
  system_reg_write(0x407c,DAT_000aeff4 << 0x10 | DAT_000aeff0);
  system_reg_write(0x4080,DAT_000aeff8);
  system_reg_write(0x4334,DAT_000af008 << 0x18 | DAT_000af004 << 0x10 | DAT_000aeffc |
                          DAT_000af000 << 8);
  system_reg_write(0x4338,DAT_000af018 << 0x18 | DAT_000af014 << 0x10 | DAT_000af00c |
                          DAT_000af010 << 8);
  system_reg_write(0x433c,DAT_000af028 << 0x18 | DAT_000af024 << 0x10 | DAT_000af01c |
                          DAT_000af020 << 8);
  system_reg_write(0x4294,_DAT_000af334 << 0x18 | DAT_000af330 << 0x10 |
                          param_adr_weight_20_lut_array | DAT_000af32c << 8);
  system_reg_write(0x4298,DAT_000af344 << 0x18 | DAT_000af340 << 0x10 | DAT_000af338 |
                          DAT_000af33c << 8);
  system_reg_write(0x429c,DAT_000af354 << 0x18 | DAT_000af350 << 0x10 | DAT_000af348 |
                          DAT_000af34c << 8);
  system_reg_write(0x42a0,DAT_000af364 << 0x18 | DAT_000af360 << 0x10 | DAT_000af358 |
                          DAT_000af35c << 8);
  system_reg_write(0x42a4,DAT_000af374 << 0x18 | DAT_000af370 << 0x10 | DAT_000af368 |
                          DAT_000af36c << 8);
  system_reg_write(0x42a8,DAT_000af384 << 0x18 | DAT_000af380 << 0x10 | DAT_000af378 |
                          DAT_000af37c << 8);
  system_reg_write(0x42ac,DAT_000af394 << 0x18 | DAT_000af390 << 0x10 | DAT_000af388 |
                          DAT_000af38c << 8);
  system_reg_write(0x42b0,DAT_000af3a4 << 0x18 | DAT_000af3a0 << 0x10 | DAT_000af398 |
                          DAT_000af39c << 8);
  system_reg_write(0x42b4,_DAT_000af2b4 << 0x18 | DAT_000af2b0 << 0x10 |
                          param_adr_weight_02_lut_array | DAT_000af2ac << 8);
  system_reg_write(0x42b8,DAT_000af2c4 << 0x18 | DAT_000af2c0 << 0x10 | DAT_000af2b8 |
                          DAT_000af2bc << 8);
  system_reg_write(0x42bc,DAT_000af2d4 << 0x18 | DAT_000af2d0 << 0x10 | DAT_000af2c8 |
                          DAT_000af2cc << 8);
  system_reg_write(0x42c0,DAT_000af2e4 << 0x18 | DAT_000af2e0 << 0x10 | DAT_000af2d8 |
                          DAT_000af2dc << 8);
  system_reg_write(0x42c4,DAT_000af2f4 << 0x18 | DAT_000af2f0 << 0x10 | DAT_000af2e8 |
                          DAT_000af2ec << 8);
  system_reg_write(0x42c8,DAT_000af304 << 0x18 | DAT_000af300 << 0x10 | DAT_000af2f8 |
                          DAT_000af2fc << 8);
  system_reg_write(0x42cc,DAT_000af314 << 0x18 | DAT_000af310 << 0x10 | DAT_000af308 |
                          DAT_000af30c << 8);
  system_reg_write(0x42d0,DAT_000af324 << 0x18 | DAT_000af320 << 0x10 | DAT_000af318 |
                          DAT_000af31c << 8);
  system_reg_write(0x42d4,_DAT_000af234 << 0x18 | DAT_000af230 << 0x10 |
                          param_adr_weight_12_lut_array | DAT_000af22c << 8);
  system_reg_write(0x42d8,DAT_000af244 << 0x18 | DAT_000af240 << 0x10 | DAT_000af238 |
                          DAT_000af23c << 8);
  system_reg_write(0x42dc,DAT_000af254 << 0x18 | DAT_000af250 << 0x10 | DAT_000af248 |
                          DAT_000af24c << 8);
  system_reg_write(0x42e0,DAT_000af264 << 0x18 | DAT_000af260 << 0x10 | DAT_000af258 |
                          DAT_000af25c << 8);
  system_reg_write(0x42e4,DAT_000af274 << 0x18 | DAT_000af270 << 0x10 | DAT_000af268 |
                          DAT_000af26c << 8);
  system_reg_write(0x42e8,DAT_000af284 << 0x18 | DAT_000af280 << 0x10 | DAT_000af278 |
                          DAT_000af27c << 8);
  system_reg_write(0x42ec,DAT_000af294 << 0x18 | DAT_000af290 << 0x10 | DAT_000af288 |
                          DAT_000af28c << 8);
  system_reg_write(0x42f0,DAT_000af2a4 << 0x18 | DAT_000af2a0 << 0x10 | DAT_000af298 |
                          DAT_000af29c << 8);
  system_reg_write(0x4314,_DAT_000af1b4 << 0x18 | DAT_000af1b0 << 0x10 |
                          param_adr_weight_22_lut_array | DAT_000af1ac << 8);
  system_reg_write(0x4318,DAT_000af1c4 << 0x18 | DAT_000af1c0 << 0x10 | DAT_000af1b8 |
                          DAT_000af1bc << 8);
  system_reg_write(0x431c,DAT_000af1d4 << 0x18 | DAT_000af1d0 << 0x10 | DAT_000af1c8 |
                          DAT_000af1cc << 8);
  system_reg_write(0x4320,DAT_000af1e4 << 0x18 | DAT_000af1e0 << 0x10 | DAT_000af1d8 |
                          DAT_000af1dc << 8);
  system_reg_write(0x4324,DAT_000af1f4 << 0x18 | DAT_000af1f0 << 0x10 | DAT_000af1e8 |
                          DAT_000af1ec << 8);
  system_reg_write(0x4328,DAT_000af204 << 0x18 | DAT_000af200 << 0x10 | DAT_000af1f8 |
                          DAT_000af1fc << 8);
  system_reg_write(0x432c,DAT_000af214 << 0x18 | DAT_000af210 << 0x10 | DAT_000af208 |
                          DAT_000af20c << 8);
  system_reg_write(0x4330,DAT_000af224 << 0x18 | DAT_000af220 << 0x10 | DAT_000af218 |
                          DAT_000af21c << 8);
  system_reg_write(0x42f4,_DAT_000af134 << 0x18 | DAT_000af130 << 0x10 |
                          param_adr_weight_21_lut_array | DAT_000af12c << 8);
  system_reg_write(0x42f8,DAT_000af144 << 0x18 | DAT_000af140 << 0x10 | DAT_000af138 |
                          DAT_000af13c << 8);
  system_reg_write(0x42fc,DAT_000af154 << 0x18 | DAT_000af150 << 0x10 | DAT_000af148 |
                          DAT_000af14c << 8);
  system_reg_write(0x4300,DAT_000af164 << 0x18 | DAT_000af160 << 0x10 | DAT_000af158 |
                          DAT_000af15c << 8);
  system_reg_write(0x4304,DAT_000af174 << 0x18 | DAT_000af170 << 0x10 | DAT_000af168 |
                          DAT_000af16c << 8);
  system_reg_write(0x4308,DAT_000af184 << 0x18 | DAT_000af180 << 0x10 | DAT_000af178 |
                          DAT_000af17c << 8);
  system_reg_write(0x430c,DAT_000af194 << 0x18 | DAT_000af190 << 0x10 | DAT_000af188 |
                          DAT_000af18c << 8);
  system_reg_write(0x4310,DAT_000af1a4 << 0x18 | DAT_000af1a0 << 0x10 | DAT_000af198 |
                          DAT_000af19c << 8);
  system_reg_write(0x4378,DAT_000af030 << 0x10 | param_adr_min_kneepoint_array_def);
  system_reg_write(0x437c,DAT_000af038 << 0x10 | DAT_000af034);
  system_reg_write(0x4380,DAT_000af040 << 0x10 | DAT_000af03c);
  system_reg_write(0x4384,DAT_000af048 << 0x10 | DAT_000af044);
  system_reg_write(0x4388,DAT_000af050 << 0x10 | DAT_000af04c);
  system_reg_write(0x438c,DAT_000af054);
  system_reg_write(0x43a8,DAT_000af064 << 0x18 | DAT_000af060 << 0x10 | DAT_000af058 |
                          DAT_000af05c << 8);
  system_reg_write(0x43ac,DAT_000af074 << 0x18 | DAT_000af070 << 0x10 | DAT_000af068 |
                          DAT_000af06c << 8);
  system_reg_write(0x43b0,DAT_000af084 << 0x18 | DAT_000af080 << 0x10 | DAT_000af078 |
                          DAT_000af07c << 8);
  system_reg_write(0x43b4,_DAT_000aefa4 << 0x10 | param_adr_coc_kneepoint_y1_array);
  system_reg_write(0x43b8,DAT_000aefac << 0x10 | DAT_000aefa8);
  system_reg_write(0x43bc,DAT_000aefb4 << 0x10 | DAT_000aefb0);
  system_reg_write(0x43c0,DAT_000aefbc << 0x10 | DAT_000aefb8);
  system_reg_write(0x43c4,DAT_000aefc4 << 0x10 | DAT_000aefc0);
  system_reg_write(0x43c8,DAT_000aefcc << 0x10 | DAT_000aefc8);
  system_reg_write(0x43cc,_DAT_000aef74 << 0x10 | param_adr_coc_kneepoint_y2_array);
  system_reg_write(0x43d0,DAT_000aef7c << 0x10 | DAT_000aef78);
  system_reg_write(0x43d4,DAT_000aef84 << 0x10 | DAT_000aef80);
  system_reg_write(0x43d8,DAT_000aef8c << 0x10 | DAT_000aef88);
  system_reg_write(0x43dc,DAT_000aef94 << 0x10 | DAT_000aef90);
  system_reg_write(0x43e0,DAT_000aef9c << 0x10 | DAT_000aef98);
  system_reg_write(0x43e4,_DAT_000aef44 << 0x10 | param_adr_coc_kneepoint_y3_array);
  system_reg_write(0x43e8,DAT_000aef4c << 0x10 | DAT_000aef48);
  system_reg_write(0x43ec,DAT_000aef54 << 0x10 | DAT_000aef50);
  system_reg_write(0x43f0,DAT_000aef5c << 0x10 | DAT_000aef58);
  system_reg_write(0x43f4,DAT_000aef64 << 0x10 | DAT_000aef60);
  system_reg_write(0x43f8,DAT_000aef6c << 0x10 | DAT_000aef68);
  system_reg_write(0x43fc,_DAT_000aef14 << 0x10 | param_adr_coc_kneepoint_y4_array);
  system_reg_write(0x4400,DAT_000aef1c << 0x10 | DAT_000aef18);
  system_reg_write(0x4404,DAT_000aef24 << 0x10 | DAT_000aef20);
  system_reg_write(0x4408,DAT_000aef2c << 0x10 | DAT_000aef28);
  system_reg_write(0x440c,DAT_000aef34 << 0x10 | DAT_000aef30);
  system_reg_write(0x4410,DAT_000aef3c << 0x10 | DAT_000aef38);
  system_reg_write(0x4414,_DAT_000aeee4 << 0x10 | param_adr_coc_kneepoint_y5_array);
  system_reg_write(0x4418,DAT_000aeeec << 0x10 | DAT_000aeee8);
  system_reg_write(0x441c,DAT_000aeef4 << 0x10 | DAT_000aeef0);
  system_reg_write(0x4420,DAT_000aeefc << 0x10 | DAT_000aeef8);
  system_reg_write(0x4424,DAT_000aef04 << 0x10 | DAT_000aef00);
  system_reg_write(0x4428,DAT_000aef0c << 0x10 | DAT_000aef08);
  system_reg_write(0x442c,_DAT_000aeeac << 0x10 | param_adr_coc_adjust_array);
  system_reg_write(0x4430,DAT_000aeeb4 << 0x10 | DAT_000aeeb0);
  system_reg_write(0x4434,DAT_000aeeb8);
  system_reg_write(0x4438,DAT_000aeec0 << 0x10 | DAT_000aeebc);
  system_reg_write(0x443c,DAT_000aeec8 << 0x10 | DAT_000aeec4);
  system_reg_write(0x4440,DAT_000aeecc);
  system_reg_write(0x4444,DAT_000aeed4 << 8 | DAT_000aeed8 << 0x10 | DAT_000aeed0 |
                          DAT_000aeedc << 0x18);
  system_reg_write(0x4484,_DAT_000aee20 << 0x10 | param_adr_stat_block_hist_diff_array);
  system_reg_write(0x4488,DAT_000aee28 << 0x10 | DAT_000aee24);
  adr_block_light._36_4_ = height_def;
  adr_block_light_wdr._36_4_ = height_def;
  adr_block_light._32_4_ = width_def;
  adr_block_light_wdr._32_4_ = width_def;
  return 0;
}



int tiziano_adr_init(unsigned int param_1,unsigned int param_2)

{
  char *__src;
  int *puVar1;
  int *puVar2;
  unsigned int uVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  
  uVar7 = (param_2 >> 2) - (param_2 >> 2 & 1);
  uVar6 = (uVar7 >> 2) - (uVar7 >> 2 & 1);
  if (uVar6 < 0x14) {
    uVar6 = 0x14;
  }
  uVar3 = param_1 / 6 - (param_1 / 6 & 1);
  uVar5 = (uVar3 >> 2) - (uVar3 >> 2 & 1);
  if (uVar5 < 0x14) {
    uVar5 = 0x14;
  }
  adr_block_light._32_4_ = param_1;
  adr_block_light._36_4_ = param_2;
  height_def = param_2;
  width_def = param_1;
  system_reg_write(0x4000,uVar3 | uVar7 * 0x10000);
  system_reg_write(0x4010,uVar7 * 0x10000);
  system_reg_write(0x4014,uVar7 * 0x30000 | uVar7 * 2);
  system_reg_write(0x4018,param_2);
  system_reg_write(0x401c,uVar3 * 0x10000);
  system_reg_write(0x4020,uVar3 * 0x30000 | uVar3 * 2);
  system_reg_write(0x4024,uVar3 * 0x50000 | uVar3 * 4);
  system_reg_write(0x4028,param_1);
  system_reg_write(0x4454,(param_2 - uVar6) * 0x10000 | uVar6);
  system_reg_write(0x4458,(param_1 - uVar5) * 0x10000 | uVar5);
  tiziano_adr_params_refresh();
  uVar5 = uVar3 + 1 >> 1;
  tisp_adr_set_params();
  uVar6 = uVar7 + 1 >> 1;
  if (uVar5 < uVar6) {
    iVar4 = (uVar3 + 1 & 0xfffffffe) + uVar5;
  }
  else {
    iVar4 = (uVar7 + 1 & 0xfffffffe) + uVar6;
  }
  DAT_000ac734 = iVar4 + 1U >> 1;
  if (width_def == 0x780) {
    if (height_def == 0x438) {
      iVar4 = 0;
      do {
        puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp_1080P + iVar4);
        puVar1 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x7c);
      iVar4 = 0;
      do {
        *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_20_lut_array_tmp_1080P + iVar4);
        *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_02_lut_array_tmp_1080P + iVar4);
        *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_12_lut_array_tmp_1080P + iVar4);
        *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_22_lut_array_tmp_1080P + iVar4);
        puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp_1080P + iVar4);
        puVar1 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x80);
      goto LAB_0005dffc;
    }
  }
  else if (width_def == 0x900) {
    if (height_def == 0x510) {
      iVar4 = 0;
      do {
        puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp_3M + iVar4);
        puVar1 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x7c);
      iVar4 = 0;
      do {
        *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_20_lut_array_tmp_3M + iVar4);
        *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_02_lut_array_tmp_3M + iVar4);
        *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_12_lut_array_tmp_3M + iVar4);
        *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_22_lut_array_tmp_3M + iVar4);
        puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp_3M + iVar4);
        puVar1 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x80);
      goto LAB_0005dffc;
    }
  }
  else if (width_def == 0xa20) {
    if (height_def == 0x798) {
      iVar4 = 0;
      do {
        puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp_5M + iVar4);
        puVar1 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x7c);
      iVar4 = 0;
      do {
        *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_20_lut_array_tmp_5M + iVar4);
        *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_02_lut_array_tmp_5M + iVar4);
        *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_12_lut_array_tmp_5M + iVar4);
        *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_22_lut_array_tmp_5M + iVar4);
        puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp_5M + iVar4);
        puVar1 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x80);
      goto LAB_0005dffc;
    }
  }
  else if (width_def == 0xa00) {
    if (height_def == 0x5a0) {
      iVar4 = 0;
      do {
        puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp_4M + iVar4);
        puVar1 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x7c);
      iVar4 = 0;
      do {
        *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_20_lut_array_tmp_4M + iVar4);
        *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_02_lut_array_tmp_4M + iVar4);
        *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_12_lut_array_tmp_4M + iVar4);
        *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_22_lut_array_tmp_4M + iVar4);
        puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp_4M + iVar4);
        puVar1 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x80);
      goto LAB_0005dffc;
    }
    if (height_def == 0x780) {
      iVar4 = 0;
      do {
        puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp_5MA + iVar4);
        puVar1 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x7c);
      iVar4 = 0;
      do {
        *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_20_lut_array_tmp_5MA + iVar4);
        *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_02_lut_array_tmp_5MA + iVar4);
        *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_12_lut_array_tmp_5MA + iVar4);
        *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_22_lut_array_tmp_5MA + iVar4);
        puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp_5MA + iVar4);
        puVar1 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x80);
      goto LAB_0005dffc;
    }
  }
  else if (width_def == 0x500) {
    if (height_def == 0x2d0) {
      iVar4 = 0;
      do {
        puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp_720P + iVar4);
        puVar1 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x7c);
      iVar4 = 0;
      do {
        *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_20_lut_array_tmp_720P + iVar4);
        *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_02_lut_array_tmp_720P + iVar4);
        *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_12_lut_array_tmp_720P + iVar4);
        *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4) =
             *(int *)((int)&param_adr_weight_22_lut_array_tmp_720P + iVar4);
        puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp_720P + iVar4);
        puVar1 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
        iVar4 = iVar4 + 4;
        *puVar1 = *puVar2;
      } while (iVar4 != 0x80);
      goto LAB_0005dffc;
    }
  }
  else if (width_def == 0x6c0) {
    if (height_def == 0x3cc) {
      memcpy(&param_adr_centre_w_dis_array_tmp,param_adr_centre_w_dis_array_tmp_1728_972,0x7c);
      memcpy(&param_adr_weight_20_lut_array_tmp,param_adr_weigth_20_lut_array_tmp_1728_972,0x80);
      memcpy(&param_adr_weight_02_lut_array_tmp,param_adr_weigth_02_lut_array_tmp_1728_972,0x80);
      memcpy(&param_adr_weight_12_lut_array_tmp,param_adr_weigth_12_lut_array_tmp_1728_972,0x80);
      memcpy(&param_adr_weight_22_lut_array_tmp,param_adr_weigth_22_lut_array_tmp_1728_972,0x80);
      __src = param_adr_weigth_21_lut_array_tmp_1728_972;
      goto LAB_0005dfd4;
    }
  }
  else if (width_def == 0x438) {
    if (height_def == 0x5a0) {
      memcpy(&param_adr_centre_w_dis_array_tmp,param_adr_centre_w_dis_array_tmp_1080_1440,0x7c);
      memcpy(&param_adr_weight_20_lut_array_tmp,param_adr_weigth_20_lut_array_tmp_1080_1440,0x80);
      memcpy(&param_adr_weight_02_lut_array_tmp,param_adr_weigth_02_lut_array_tmp_1080_1440,0x80);
      memcpy(&param_adr_weight_12_lut_array_tmp,param_adr_weigth_12_lut_array_tmp_1080_1440,0x80);
      memcpy(&param_adr_weight_22_lut_array_tmp,param_adr_weigth_22_lut_array_tmp_1080_1440,0x80);
      __src = param_adr_weigth_21_lut_array_tmp_1080_1440;
LAB_0005dfd4:
      memcpy(&param_adr_weight_21_lut_array_tmp,__src,0x80);
      goto LAB_0005dffc;
    }
  }
  else if ((width_def == 0x430) && (height_def == 0x5a0)) {
    memcpy(&param_adr_centre_w_dis_array_tmp,param_adr_centre_w_dis_array_tmp_1072_1440,0x7c);
    memcpy(&param_adr_weight_20_lut_array_tmp,param_adr_weigth_20_lut_array_tmp_1072_1440,0x80);
    memcpy(&param_adr_weight_02_lut_array_tmp,param_adr_weigth_02_lut_array_tmp_1072_1440,0x80);
    memcpy(&param_adr_weight_12_lut_array_tmp,param_adr_weigth_12_lut_array_tmp_1072_1440,0x80);
    memcpy(&param_adr_weight_22_lut_array_tmp,param_adr_weigth_22_lut_array_tmp_1072_1440,0x80);
    __src = param_adr_weigth_21_lut_array_tmp_1072_1440;
    goto LAB_0005dfd4;
  }
  tiziano_adr_5x5_param();
LAB_0005dffc:
  iVar4 = 0;
  if (param_adr_tool_control_array == 0) {
    do {
      puVar2 = (int *)((int)&param_adr_centre_w_dis_array_tmp + iVar4);
      puVar1 = (int *)((int)&param_adr_centre_w_dis_array + iVar4);
      iVar4 = iVar4 + 4;
      *puVar1 = *puVar2;
    } while (iVar4 != 0x7c);
    iVar4 = 0;
    do {
      *(int *)((int)&param_adr_weight_20_lut_array + iVar4) =
           *(int *)((int)&param_adr_weight_20_lut_array_tmp + iVar4);
      *(int *)((int)&param_adr_weight_02_lut_array + iVar4) =
           *(int *)((int)&param_adr_weight_02_lut_array_tmp + iVar4);
      *(int *)((int)&param_adr_weight_12_lut_array + iVar4) =
           *(int *)((int)&param_adr_weight_12_lut_array_tmp + iVar4);
      *(int *)((int)&param_adr_weight_22_lut_array + iVar4) =
           *(int *)((int)&param_adr_weight_22_lut_array_tmp + iVar4);
      puVar2 = (int *)((int)&param_adr_weight_21_lut_array_tmp + iVar4);
      puVar1 = (int *)((int)&param_adr_weight_21_lut_array + iVar4);
      iVar4 = iVar4 + 4;
      *puVar1 = *puVar2;
    } while (iVar4 != 0x80);
  }
  tiziano_adr_params_init();
  system_irq_func_set(0x12,tiziano_adr_interrupt_static);
  tisp_event_set_cb(2,tisp_adr_process);
  return 0;
}



int tisp_hldc_con_par_cfg(void)

{
  system_reg_write(0x9000,hldc_con_par_array._12_4_ << 0x10 | hldc_con_par_array._8_4_);
  system_reg_write(0x9004,hldc_con_par_array._20_4_ << 0x10 | hldc_con_par_array._16_4_);
  system_reg_write(0x9008,hldc_con_par_array._48_4_ << 0x10 | hldc_con_par_array._44_4_);
  system_reg_write(0x900c,hldc_con_par_array._24_4_);
  system_reg_write(0x9010,hldc_con_par_array._52_4_);
  system_reg_write(0x9014,hldc_con_par_array._28_4_);
  system_reg_write(0x9018,hldc_con_par_array._60_4_);
  system_reg_write(0x901c,hldc_con_par_array._36_4_ << 0x10 | hldc_con_par_array._32_4_);
  system_reg_write(0x9020,hldc_con_par_array._64_4_ << 0x10 | hldc_con_par_array._56_4_);
  system_reg_write(0x9024,hldc_con_par_array._40_4_);
  system_reg_write(0x9028,hldc_con_par_array._68_4_);
  return 0;
}



int tisp_hldc_par_refresh(int param_1)

{
  tisp_hldc_con_par_cfg();
  if (param_1 == 1) {
    system_reg_write(0x9044,3);
  }
  return 0;
}



int tiziano_hldc_params_refresh(void)

{
  memcpy(hldc_con_par_array,&DAT_000a5ff4,0x48);
  return 0;
}



int tiziano_hldc_init(void)

{
  tiziano_hldc_params_refresh();
  tisp_hldc_con_par_cfg();
  system_reg_write(0x9044,3);
  return 0;
}



int tisp_hldc_param_array_get(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  
  if (param_1 == 0x3ac) {
    memcpy(param_2,hldc_con_par_array,0x48);
    *param_3 = 0x48;
    uVar1 = 0;
  }
  else {
    isp_printf(2,"%s,%d: hldc not support param id %d\n","tisp_hldc_param_array_get",0x56,param_1);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_hldc_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  
  if (param_1 == 0x3ac) {
    memcpy(hldc_con_par_array,param_2,0x48);
    tisp_hldc_con_par_cfg();
    system_reg_write(0x9044,3);
    *param_3 = 0x48;
    uVar1 = 0;
  }
  else {
    isp_printf(2,"%s,%d: hldc not support param id %d\n","tisp_hldc_param_array_set",0x6d,param_1);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_set_sensor_integration_time(int param_1)

{
  int iVar1;
  int uVar2;
  char auStack_38 [16];
  short local_28;
  
  if (tisp_ae_ctrls == 0) {
    iVar1 = (*(code *)sensor_ctrl._112_4_)(param_1,auStack_38);
    _ae_reg = iVar1;
    if (param_1 != iVar1) {
      uVar2 = fix_point_mult2_32(_AePointPos,DAT_000cfc60,param_1 << (_AePointPos & 0x1f));
      DAT_000cfc60 = fix_point_div_32(_AePointPos,uVar2,iVar1 << (_AePointPos & 0x1f));
    }
    (*(code *)sensor_ctrl._120_4_)(local_28,0);
    DAT_000d3e78 = _ae_reg;
  }
  else {
    _ae_reg = (*(code *)sensor_ctrl._112_4_)(DAT_000d3e78,auStack_38);
    DAT_000d3e78 = _ae_reg;
    (*(code *)sensor_ctrl._120_4_)(local_28,0);
  }
  return 0;
}



int tisp_set_sensor_integration_time_short(int param_1)

{
  int iVar1;
  int uVar2;
  char auStack_38 [18];
  short local_26;
  
  if (DAT_000d3ecc == 0) {
    iVar1 = (*(code *)sensor_ctrl._116_4_)(param_1,auStack_38);
    DAT_000cfc68 = iVar1;
    if (param_1 != iVar1) {
      uVar2 = fix_point_mult2_32(_AePointPos,DAT_000cfc6c,param_1 << (_AePointPos & 0x1f));
      DAT_000cfc6c = fix_point_div_32(_AePointPos,uVar2,iVar1 << (_AePointPos & 0x1f));
    }
    (*(code *)sensor_ctrl._124_4_)(local_26,0);
    DAT_000d3eb8 = DAT_000cfc68;
  }
  else {
    DAT_000cfc68 = (*(code *)sensor_ctrl._116_4_)(DAT_000d3eb8,auStack_38);
    DAT_000d3eb8 = DAT_000cfc68;
    (*(code *)sensor_ctrl._124_4_)(local_26,0);
  }
  return 0;
}



unsigned int tisp_set_sensor_analog_gain(int param_1)

{
  int uVar1;
  unsigned int uVar2;
  short local_28 [14];
  
  uVar1 = tisp_log2_fixed_to_fixed(param_1 << 6,0x10,0x10);
  uVar1 = (*(code *)sensor_ctrl._100_4_)(uVar1,local_28);
  uVar2 = tisp_math_exp2(uVar1,0x10,0x10);
  (*(code *)sensor_ctrl._136_4_)(local_28[0],0);
  return uVar2 >> 6;
}



unsigned int tisp_set_sensor_analog_gain_short(int param_1)

{
  int uVar1;
  unsigned int uVar2;
  char auStack_28 [14];
  short local_1a;
  
  uVar1 = tisp_log2_fixed_to_fixed(param_1 << 6,0x10,0x10);
  uVar1 = (*(code *)sensor_ctrl._104_4_)(uVar1,auStack_28);
  uVar2 = tisp_math_exp2(uVar1,0x10,0x10);
  (*(code *)sensor_ctrl._140_4_)(local_1a,0);
  return uVar2 >> 6;
}



unsigned int tisp_set_sensor_digital_gain_short(int param_1)

{
  int uVar1;
  unsigned int uVar2;
  char auStack_28 [2];
  short local_26;
  
  uVar1 = tisp_log2_fixed_to_fixed(param_1 << 6,0x10,0x10);
  uVar1 = (*(code *)sensor_ctrl._108_4_)(uVar1,auStack_28);
  uVar2 = tisp_math_exp2(uVar1,0x10,0x10);
  (*(code *)sensor_ctrl._144_4_)(local_26,0);
  return uVar2 >> 6;
}



void tisp_set_sensor_digital_gain(void)

{
  tisp_set_sensor_digital_gain_short();
  return;
}



void JZ_Isp_Ae_Reg2par(unsigned int *param_1,unsigned int *param_2)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int iVar3;
  unsigned int *puVar4;
  int iVar5;
  int iVar6;
  unsigned int *puVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  unsigned int local_90 [16];
  unsigned int local_50 [17];
  
  uVar1 = *param_2;
  puVar4 = param_2 + 5;
  iVar5 = 0;
  do {
    uVar10 = puVar4[-4];
    uVar9 = *puVar4;
    iVar3 = 0;
    do {
      uVar8 = iVar3 << 1;
      iVar6 = iVar5 + iVar3;
      uVar2 = 0x7f << (uVar8 & 0x1f);
      iVar3 = iVar3 + 4;
      *(unsigned int *)((int)local_50 + iVar6) = (uVar10 & uVar2) >> (uVar8 & 0x1f);
      *(unsigned int *)((int)local_90 + iVar6) = (uVar2 & uVar9) >> (uVar8 & 0x1f);
    } while (iVar3 != 0x10);
    iVar5 = iVar5 + 0x10;
    puVar4 = puVar4 + 1;
  } while (iVar5 != 0x40);
  uVar9 = param_2[9];
  iVar5 = 0;
  param_1[3] = uVar1 >> 0x1c;
  *param_1 = uVar1 & 0x7ff;
  param_1[1] = (uVar1 & 0xf000) >> 0xc;
  param_1[2] = (uVar1 << 5) >> 0x15;
  puVar4 = param_1 + 4;
  do {
    *puVar4 = *(unsigned int *)((int)local_50 + iVar5);
    puVar7 = (unsigned int *)((int)local_90 + iVar5);
    iVar5 = iVar5 + 4;
    puVar4[0xf] = *puVar7;
    puVar4 = puVar4 + 1;
  } while (iVar5 != 0x3c);
  param_1[0x22] = uVar9 & 0xff;
  param_1[0x23] = (uVar9 & 0xff00) >> 8;
  param_1[0x24] = uVar9 >> 0x10 & 0xf;
  param_1[0x25] = uVar9 >> 0x14 & 0xf;
  return;
}



void JZ_Isp_Ae_Dg2reg(int param_1,unsigned int *param_2,unsigned int param_3,int *param_4)

{
  unsigned int uVar1;
  int iVar2;
  
  uVar1 = fix_point_mult2_32(param_1,*param_4);
  iVar2 = fix_point_mult2_32(param_1,param_4[1],param_3);
  *param_2 = param_3 << 0x10 | uVar1;
  param_2[1] = iVar2 << 0x10 | param_3;
  return;
}



void printf_func0(unsigned int param_1,unsigned int param_2)

{
  bool bVar1;
  int iVar2;
  int *puVar3;
  int *puVar4;
  int *local_38;
  
  iVar2 = IntNum_32264 + 1;
  bVar1 = IntNum_32264 < 35000;
  IntNum_32264 = iVar2;
  if (bVar1) {
    isp_printf(1,"AE0 Current IntNum %d\n");
    puVar4 = &IspAeStatic;
    local_38 = &IspAeStatic;
    for (; param_1 <= param_2; param_1 = param_1 + 1) {
      switch(param_1) {
      case 1:
        isp_printf(1,&_LC1);
        puVar4 = local_38;
        break;
      case 2:
        isp_printf(1,&_LC2);
        puVar4 = &DAT_000d0038;
        break;
      case 3:
        isp_printf(1,&_LC3);
        puVar4 = &DAT_000d03bc;
        break;
      case 4:
        isp_printf(1,&_LC4);
        puVar4 = &DAT_000d0ac4;
        break;
      case 5:
        isp_printf(1,&_LC5);
        puVar4 = &DAT_000d0e48;
        break;
      case 6:
        isp_printf(1,&_LC6);
        puVar4 = &DAT_000d0740;
        break;
      case 7:
        isp_printf(1,"hist\n");
        puVar4 = &DAT_000d11cc;
        break;
      case 8:
        isp_printf(1,"ir_hist\n");
        puVar4 = &DAT_000d15cc;
      }
      puVar3 = puVar4;
      do {
        iVar2 = 0;
        do {
          isp_printf(1,&_LC9,*(int *)((int)puVar3 + iVar2));
          iVar2 = iVar2 + 4;
        } while (iVar2 != 0x3c);
        puVar3 = puVar3 + 0xf;
        isp_printf(1,&_LC10);
      } while (puVar3 != puVar4 + 0xe1);
      isp_printf(1,&_LC10);
    }
  }
  return;
}



void printf_func1(unsigned int param_1,unsigned int param_2)

{
  bool bVar1;
  int iVar2;
  int *puVar3;
  int *puVar4;
  int *local_38;
  
  iVar2 = IntNum_32292 + 1;
  bVar1 = IntNum_32292 < 35000;
  IntNum_32292 = iVar2;
  if (bVar1) {
    isp_printf(1,"AE1 Current IntNum %d\n");
    puVar4 = &DAT_000d19cc;
    local_38 = &DAT_000d19cc;
    for (; param_1 <= param_2; param_1 = param_1 + 1) {
      switch(param_1) {
      case 1:
        isp_printf(1,&_LC1);
        puVar4 = local_38;
        break;
      case 2:
        isp_printf(1,&_LC2);
        puVar4 = &DAT_000d1d50;
        break;
      case 3:
        isp_printf(1,&_LC3);
        puVar4 = &DAT_000d20d4;
        break;
      case 4:
        isp_printf(1,&_LC4);
        puVar4 = &DAT_000d2458;
        break;
      case 5:
        isp_printf(1,&_LC5);
        puVar4 = &DAT_000d27dc;
        break;
      case 6:
        isp_printf(1,"hist\n");
        puVar4 = &DAT_000d2b60;
      }
      puVar3 = puVar4;
      do {
        iVar2 = 0;
        do {
          isp_printf(1,&_LC9,*(int *)((int)puVar3 + iVar2));
          iVar2 = iVar2 + 4;
        } while (iVar2 != 0x3c);
        puVar3 = puVar3 + 0xf;
        isp_printf(1,&_LC10);
      } while (puVar3 != puVar4 + 0xe1);
      isp_printf(1,&_LC10);
    }
  }
  return;
}



void tisp_ae0_get_statistics(unsigned int *param_1,unsigned int param_2)

{
  bool bVar1;
  unsigned int *puVar2;
  unsigned int *puVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  
  for (uVar4 = 0; uVar4 != (param_2 & 0xf000) >> 0xc; uVar4 = uVar4 + 1) {
    uVar5 = 0;
    puVar2 = param_1;
    puVar3 = &IspAeStatic + uVar4 * 0xf;
    while (bVar1 = uVar5 != param_2 >> 0x1c, uVar5 = uVar5 + 1, bVar1) {
      *puVar3 = *puVar2 & 0x1fffff;
      puVar3[0xe1] = (puVar2[1] & 0x3ff) << 0xb | *puVar2 >> 0x15;
      puVar3[0x1c2] = (puVar2[1] & 0x7ffffc00) >> 10;
      puVar3[900] = (puVar2[2] & 0xfff) << 1 | puVar2[1] >> 0x1f;
      puVar3[0x465] = (puVar2[2] & 0x1fff000) >> 0xc;
      puVar3[0x2a3] = (puVar2[3] & 0x3fff) << 7 | puVar2[2] >> 0x19;
      puVar2 = puVar2 + 4;
      puVar3 = puVar3 + 1;
    }
    param_1 = param_1 + (param_2 >> 0x1c) * 4;
  }
  return;
}



int ae0_interrupt_static(void)

{
  unsigned int uVar1;
  int iVar2;
  
  uVar1 = system_reg_read(0xa050);
  iVar2 = (uVar1 & 0x30) * 0x100;
  private_dma_cache_sync(0,iVar2 + DAT_000b26fc,0x1000,0);
  tisp_ae0_get_statistics(iVar2 + DAT_000b26fc,0xf001f001);
  if (DAT_000b06e0 == 1) {
    DAT_000b06e0 = 0;
    *(int *)(DAT_000d3d8c + 4) = 0;
  }
  return 1;
}



void tisp_ae1_get_statistics(unsigned int *param_1,unsigned int param_2)

{
  unsigned int *puVar1;
  int *puVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  
  for (uVar3 = 0; uVar3 != (param_2 & 0xf000) >> 0xc; uVar3 = uVar3 + 1) {
    puVar1 = param_1;
    puVar2 = &IspAeStatic + uVar3 * 0xf;
    for (uVar4 = 0; uVar4 != param_2 >> 0x1c; uVar4 = uVar4 + 1) {
      puVar2[0x746] = *puVar1 & 0x1fffff;
      puVar2[0x827] = (puVar1[1] & 0x3ff) << 0xb | *puVar1 >> 0x15;
      puVar2[0x908] = (puVar1[1] & 0x7ffffc00) >> 10;
      puVar2[0x9e9] = (puVar1[2] & 0xfff) << 1 | puVar1[1] >> 0x1f;
      puVar2[0xaca] = (puVar1[2] & 0x1fff000) >> 0xc;
      puVar1 = puVar1 + 4;
      puVar2 = puVar2 + 1;
    }
    param_1 = param_1 + (param_2 >> 0x1c) * 4;
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int ae1_interrupt_static(void)

{
  unsigned int uVar1;
  int iVar2;
  
  uVar1 = system_reg_read(0xa850);
  iVar2 = (uVar1 & 0x30) * 0x100;
  private_dma_cache_sync(0,iVar2 + DAT_000b2714,0x1000,0);
  tisp_ae1_get_statistics(iVar2 + DAT_000b2714,0xf001f001);
  _DAT_000b06dc = 1;
  return 1;
}



void tisp_ae1_get_hist(unsigned int *param_1)

{
  int *puVar1;
  unsigned int *puVar2;
  unsigned int *puVar3;
  
  puVar1 = &IspAeStatic;
  puVar2 = param_1;
  do {
    puVar3 = puVar2 + 2;
    puVar1[0xbab] = *puVar2 & 0x1fffff;
    puVar1[0xbac] = puVar2[1] & 0x1fffff;
    puVar1 = puVar1 + 2;
    puVar2 = puVar3;
  } while (puVar3 != param_1 + 0x100);
  return;
}



int ae1_interrupt_hist(void)

{
  unsigned int uVar1;
  int iVar2;
  char auStack_40 [8];
  int local_38;
  
  uVar1 = system_reg_read(0xa850);
  iVar2 = (uVar1 & 3) * 0x800;
  private_dma_cache_sync(0,iVar2 + DAT_000b2720,0x800,0);
  tisp_ae1_get_hist(iVar2 + DAT_000b2720);
  local_38 = 6;
  tisp_event_push(auStack_40);
  return 2;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tisp_ae0_get_hist(unsigned int *param_1,int param_2,int param_3)

{
  bool bVar1;
  int *puVar2;
  int iVar3;
  int uVar4;
  unsigned int uVar5;
  unsigned int *puVar6;
  int *puVar7;
  int local_40 [2];
  int local_38;
  int *local_34;
  int local_30;
  int local_2c;
  
  puVar6 = param_1 + 0x100;
  puVar2 = &IspAeStatic;
  do {
    if (param_2 == 1) {
      puVar2[0x546] = *param_1 & 0x1fffff;
      puVar2[0x547] = param_1[1] & 0x1fffff;
      if (param_3 == 1) {
        puVar2[0x646] = param_1[0x100] & 0x1fffff;
        uVar5 = param_1[0x101];
LAB_0005f240:
        puVar2[0x647] = uVar5 & 0x1fffff;
      }
    }
    else if (param_3 == 1) {
      puVar2[0x646] = *param_1 & 0x1fffff;
      uVar5 = param_1[1];
      goto LAB_0005f240;
    }
    param_1 = param_1 + 2;
    puVar2 = puVar2 + 2;
    if (param_1 == puVar6) {
      memcpy(&tisp_ae_hist,&DAT_000d11cc,0x400);
      __private_spin_lock_irqsave(0x10000,local_40);
      memcpy(&DAT_000d477c,tisp_ae_hist_last + 0x414,0x10);
      puVar7 = &tisp_ae_hist;
      private_spin_unlock_irqrestore(0x10000,local_40[0]);
      _DAT_000d4768 = 0;
      _DAT_000d476c = 0;
      _DAT_000d4770 = 0;
      _DAT_000d4774 = 0;
      _DAT_000d4778 = 0;
      bVar1 = false;
      iVar3 = 0;
      puVar2 = &IspAeStatic;
      for (uVar5 = 0; uVar5 != _DAT_000d477c; uVar5 = uVar5 + 1) {
        iVar3 = iVar3 + puVar2[0x546];
        bVar1 = true;
        puVar2 = puVar2 + 1;
      }
      if (bVar1) {
        _DAT_000d4768 = iVar3;
      }
      bVar1 = false;
      iVar3 = 0;
      for (uVar5 = _DAT_000d477c; uVar5 < _DAT_000d4780; uVar5 = uVar5 + 1) {
        iVar3 = iVar3 + (&DAT_000d11cc)[uVar5];
        bVar1 = true;
      }
      if (bVar1) {
        _DAT_000d476c = iVar3;
      }
      bVar1 = false;
      iVar3 = 0;
      for (uVar5 = _DAT_000d4780; uVar5 < _DAT_000d4784; uVar5 = uVar5 + 1) {
        iVar3 = iVar3 + (&DAT_000d11cc)[uVar5];
        bVar1 = true;
      }
      if (bVar1) {
        _DAT_000d4770 = iVar3;
      }
      bVar1 = false;
      iVar3 = 0;
      for (uVar5 = _DAT_000d4784; uVar5 < _DAT_000d4788; uVar5 = uVar5 + 1) {
        iVar3 = iVar3 + (&DAT_000d11cc)[uVar5];
        bVar1 = true;
      }
      if (bVar1) {
        _DAT_000d4774 = iVar3;
      }
      bVar1 = false;
      iVar3 = 0;
      for (uVar5 = _DAT_000d4788; uVar5 < 0x100; uVar5 = uVar5 + 1) {
        iVar3 = iVar3 + (&DAT_000d11cc)[uVar5];
        bVar1 = true;
      }
      if (bVar1) {
        _DAT_000d4778 = iVar3;
      }
      if (_DAT_000d4768 + _DAT_000d476c + _DAT_000d4770 + _DAT_000d4774 + _DAT_000d4778 == 0) {
        _DAT_000d4768 = 0xffff;
        _DAT_000d476c = 0;
        _DAT_000d4770 = 0;
        _DAT_000d4774 = 0;
        _DAT_000d4778 = 0;
      }
      else {
        local_34 = (int *)&DAT_000d4378;
        local_30 = 0xffff;
        local_2c = 0;
        local_38 = 0x20000;
        do {
          (*(code *)(local_38 + 0x768))(0,local_34,puVar7[0x101],0,local_30,local_2c);
          uVar4 = fix_point_div(0);
          puVar7[0x101] = uVar4;
          puVar7 = puVar7 + 1;
        } while (puVar7 != local_34);
        _DAT_000d4768 = (0xffff - _DAT_000d4778) - (_DAT_000d476c + _DAT_000d4770 + _DAT_000d4774);
      }
      __private_spin_lock_irqsave(0x10000,local_40);
      memcpy(tisp_ae_hist_last,&tisp_ae_hist,0x400);
      memcpy(tisp_ae_hist_last + 0x400,&DAT_000d4768,0x14);
      private_spin_unlock_irqrestore(0x10000,local_40[0]);
      return;
    }
  } while( true );
}



int ae0_interrupt_hist(void)

{
  unsigned int uVar1;
  int iVar2;
  char auStack_40 [8];
  int local_38;
  
  uVar1 = system_reg_read(0xa050);
  iVar2 = (uVar1 & 3) * 0x800;
  private_dma_cache_sync(0,iVar2 + DAT_000b2708,0x800,0);
  tisp_ae0_get_hist(iVar2 + DAT_000b2708,1,DAT_000b06f0 != 1);
  local_38 = 1;
  tisp_event_push(auStack_40);
  return 2;
}



int tisp_ae_get_hist_custome(void *param_1)

{
  int local_18 [3];
  
  __private_spin_lock_irqsave(0x10000,local_18);
  memcpy(param_1,tisp_ae_hist_last,0x42c);
  private_spin_unlock_irqrestore(0x10000,local_18[0]);
  return 0;
}



int tisp_ae_set_hist_custome(void)

{
  int local_10 [2];
  
  __private_spin_lock_irqsave(0x10000,local_10);
  memcpy(tisp_ae_hist_last + 0x414,&stack0x00000414,0x10);
  private_spin_unlock_irqrestore(0x10000,local_10[0]);
  return 0;
}



int AePweightCalculate(unsigned int param_1,int param_2,int param_3,int param_4)

{
  int uVar1;
  
  if (param_2 != 0) {
    param_2 = param_2 << (param_1 & 0x1f);
    uVar1 = fix_point_div_32(param_1,param_4 * param_3 << (param_1 & 0x1f),param_2);
    uVar1 = tisp_log2_fixed_to_fixed(uVar1,param_1,param_1 & 0xff);
    uVar1 = fix_point_mult2_32(param_1,param_2,uVar1);
    uVar1 = fix_point_div_32(param_1,uVar1,param_3 << (param_1 & 0x1f));
    return uVar1;
  }
  return 0;
}



void ae0_weight_mean2(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6
                     ,int param_7,void *param_8,void *param_9,int param_10,int param_11,
                     int param_12,int param_13,int param_14,int param_15,int param_16,
                     int param_17,unsigned int *param_18,int param_19,int param_20,unsigned int *param_21,
                     int *param_22,int *param_23,unsigned int *param_24,unsigned int *param_25)

{
  unsigned int uVar1;
  int iVar2;
  int uVar3;
  int *piVar4;
  unsigned int uVar5;
  int iVar6;
  int *piVar7;
  int *piVar8;
  int *piVar9;
  int *piVar10;
  int *piVar11;
  unsigned int *puVar12;
  int *piVar13;
  int *piVar14;
  int *piVar15;
  int iVar16;
  int iVar17;
  unsigned int uVar18;
  int iVar19;
  code *pcVar20;
  int iVar21;
  int iVar22;
  int *piVar23;
  int local_e0 [2];
  int local_d8;
  int local_d4;
  int local_d0;
  unsigned int local_cc;
  unsigned int local_c8;
  unsigned int local_c4;
  unsigned int local_c0;
  unsigned int local_bc;
  unsigned int local_b8;
  int local_b4;
  int local_b0;
  void *local_ac;
  int local_a8;
  int local_a4;
  int local_a0;
  int local_9c;
  int local_98;
  int local_94;
  int local_90;
  int local_8c;
  int local_88;
  int local_84;
  int local_80;
  void *local_7c;
  int local_78;
  int local_74;
  int local_70;
  int local_6c;
  int local_68;
  int local_64;
  int local_60;
  int local_5c;
  int local_58;
  int local_54;
  int *local_50;
  int *local_4c;
  int *local_48;
  int *local_44;
  unsigned int *local_40;
  int *local_3c;
  int *local_38;
  int *local_34;
  int *local_30;
  int local_2c;
  
  local_94 = param_5;
  local_90 = param_6;
  local_8c = param_11;
  local_88 = param_12;
  local_84 = param_14;
  local_80 = param_15;
  local_b4 = param_16;
  local_a4 = *(int *)(param_10 + 0x8c);
  local_b0 = param_17;
  uVar18 = *param_18;
  local_ac = param_8;
  local_74 = *(int *)(param_13 + 4);
  local_7c = param_9;
  local_a8 = *(int *)(param_10 + 0xc);
  local_78 = *(int *)(param_10 + 4);
  local_70 = local_a8 << 2;
  local_64 = *(int *)(param_10 + 0x88) + 1;
  local_e0[0] = 0;
  local_b8 = 0;
  local_bc = 0;
  local_c0 = 0;
  local_c4 = 0;
  local_c8 = 0;
  local_cc = 0;
  local_d0 = 0;
  local_d4 = 0;
  local_d8 = 0;
  local_60 = 0x60000;
  iVar17 = 0;
  local_5c = (local_a4 + -1) - *(int *)(param_10 + 0x88);
  local_58 = 0x20000;
  local_a0 = param_1;
  local_9c = param_2;
  local_98 = param_3;
  for (iVar21 = 0; iVar21 != local_78; iVar21 = iVar21 + 1) {
    piVar13 = (int *)(param_10 + 0x10);
    piVar14 = (int *)(local_8c + iVar17);
    piVar7 = (int *)(local_a0 + iVar17);
    piVar4 = (int *)(local_9c + iVar17);
    piVar23 = (int *)(local_98 + iVar17);
    puVar12 = (unsigned int *)((int)local_ac + iVar17);
    piVar11 = (int *)(local_80 + iVar17);
    piVar10 = (int *)(local_84 + iVar17);
    piVar9 = (int *)(local_90 + iVar17);
    piVar8 = (int *)(local_94 + iVar17);
    local_68 = param_10 + iVar21 * 4;
    for (iVar22 = 0; iVar22 != local_a8; iVar22 = iVar22 + 1) {
      uVar1 = *(int *)(local_68 + 0x4c) * *piVar13;
      uVar5 = *piVar7 + *piVar4 + *piVar23;
      *puVar12 = uVar5 / uVar1;
      *param_23 = *param_23 + uVar5 / uVar1;
      local_c4 = local_c4 + uVar5 * *piVar11;
      local_c0 = local_c0 + uVar1 * *piVar11;
      local_bc = local_bc + uVar5 * *piVar10;
      local_b8 = local_b8 + uVar1 * *piVar10;
      local_2c = *piVar9 * param_20;
      iVar6 = *piVar8 * param_19;
      iVar16 = (uVar1 - *piVar9) - *piVar8;
      iVar19 = local_2c + iVar6 + iVar16;
      local_6c = param_20 * *piVar23 + param_19 * *piVar7 + *piVar4;
      local_d8 = local_d8 + local_2c;
      local_d4 = local_d4 + iVar6;
      local_d0 = local_d0 + iVar19;
      iVar2 = 1;
      piVar15 = piVar14;
      if ((*(int *)(local_88 + 0x24) != 0) && (local_74 != 1)) {
        pcVar20 = (code *)(local_60 + -0x90c);
        local_54 = iVar22;
        local_50 = piVar13;
        local_4c = piVar14;
        local_48 = piVar7;
        local_44 = piVar4;
        local_40 = puVar12;
        local_3c = piVar11;
        local_38 = piVar10;
        local_34 = piVar9;
        local_30 = piVar8;
        iVar22 = (*pcVar20)(uVar18,iVar6,iVar19,local_64,local_b4,local_b0);
        iVar2 = (*pcVar20)(uVar18,iVar16,iVar19,local_5c,local_b4,local_b0);
        iVar6 = (*pcVar20)(uVar18,local_2c,iVar19,0x100 - local_a4,local_b4,local_b0);
        uVar1 = (*(code *)(local_58 + 0xe24))(uVar18,iVar22 + iVar2 + iVar6);
        iVar2 = ((uVar1 >> (uVar18 & 0x1f)) >> 2) + 1;
        piVar4 = local_44;
        piVar7 = local_48;
        piVar8 = local_30;
        piVar9 = local_34;
        piVar10 = local_38;
        piVar11 = local_3c;
        puVar12 = local_40;
        piVar13 = local_50;
        piVar15 = local_4c;
        iVar22 = local_54;
      }
      piVar14 = piVar15 + 1;
      local_cc = local_cc + local_6c * *piVar15 * iVar2;
      piVar13 = piVar13 + 1;
      local_c8 = local_c8 + iVar19 * *piVar15 * iVar2;
      piVar7 = piVar7 + 1;
      piVar4 = piVar4 + 1;
      piVar23 = piVar23 + 1;
      puVar12 = puVar12 + 1;
      piVar11 = piVar11 + 1;
      piVar10 = piVar10 + 1;
      piVar9 = piVar9 + 1;
      piVar8 = piVar8 + 1;
    }
    iVar17 = iVar17 + local_70;
  }
  __private_spin_lock_irqsave(0x10000,local_e0);
  memcpy(local_7c,local_ac,900);
  private_spin_unlock_irqrestore(0x10000,local_e0[0]);
  *param_24 = local_c4 / local_c0;
  *param_25 = local_bc / local_b8;
  uVar1 = local_cc / local_c8;
  if (uVar1 == 0) {
    uVar1 = 1;
  }
  *param_21 = uVar1;
  iVar17 = local_d0 << (uVar18 & 0x1f);
  uVar3 = fix_point_div_32(uVar18,local_d8 << (uVar18 & 0x1f),iVar17);
  *param_22 = uVar3;
  uVar3 = fix_point_div_32(uVar18,local_d4 << (uVar18 & 0x1f),iVar17);
  param_22[1] = uVar3;
  return;
}



void tisp_ae_tune(int *param_1,int *param_2,int *param_3,int param_4,unsigned int param_5,unsigned int param_6)

{
  int uVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  iVar3 = *param_2;
  iVar2 = *param_1;
  if (param_6 < (uint)(*param_1 + iVar3)) {
    iVar2 = param_6 - iVar3;
  }
  param_4 = param_4 << (param_5 & 0x1f);
  iVar5 = param_1[1];
  if (param_6 < (uint)(param_1[1] + *param_3)) {
    iVar5 = param_6 - *param_3;
  }
  uVar1 = fix_point_mult3_32(param_5,param_4,iVar2,iVar2);
  iVar4 = 0x80 << (param_5 & 0x1f);
  iVar2 = fix_point_div_32(param_5,uVar1,iVar4);
  *param_2 = iVar3 + iVar2;
  iVar3 = *param_3;
  uVar1 = fix_point_mult3_32(param_5,param_4,iVar5,iVar5);
  iVar2 = fix_point_div_32(param_5,uVar1,iVar4);
  *param_3 = iVar3 + iVar2;
  return;
}



int tisp_ae_target(unsigned int param_1,int *param_2,int *param_3,unsigned int param_4)

{
  int iVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int *puVar4;
  unsigned int uVar5;
  int *piVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  
  if (param_1 <= (uint)(*param_2 << (param_4 & 0x1f))) {
    return *param_3;
  }
  if ((uint)(param_2[9] << (param_4 & 0x1f)) <= param_1) {
    return param_3[9];
  }
  iVar1 = 0;
  piVar6 = param_2;
  while ((param_1 < (uint)(*piVar6 << (param_4 & 0x1f)) ||
         ((uint)(piVar6[1] << (param_4 & 0x1f)) < param_1))) {
    iVar1 = iVar1 + 1;
    piVar6 = piVar6 + 1;
    if (iVar1 == 9) {
      iVar1 = 0;
LAB_0005fe68:
      uVar7 = *(unsigned int *)((int)param_3 + iVar1);
      uVar3 = *(unsigned int *)((int)param_3 + iVar1 + 4);
      param_1 = param_1 >> (param_4 & 0x1f);
      puVar4 = (unsigned int *)((int)param_2 + iVar1 + 4);
      if (uVar7 <= uVar3) {
        uVar8 = *(unsigned int *)((int)param_2 + iVar1);
        iVar1 = uVar8 - param_1;
        if (uVar8 < param_1) {
          iVar1 = param_1 - uVar8;
        }
        uVar5 = *puVar4;
        uVar2 = uVar8 - uVar5;
        if (uVar8 <= uVar5) {
          uVar2 = uVar5 - uVar8;
        }
        return ((uVar3 - uVar7) * iVar1) / uVar2 + uVar7;
      }
      uVar8 = *(unsigned int *)((int)param_2 + iVar1);
      iVar1 = uVar8 - param_1;
      if (uVar8 < param_1) {
        iVar1 = param_1 - uVar8;
      }
      uVar5 = *puVar4;
      uVar2 = uVar8 - uVar5;
      if (uVar8 <= uVar5) {
        uVar2 = uVar5 - uVar8;
      }
      return uVar7 - ((uVar7 - uVar3) * iVar1) / uVar2;
    }
  }
  iVar1 = iVar1 << 2;
  goto LAB_0005fe68;
}



void ae0_tune2(int *param_1,int param_2,code *param_3,int param_4,unsigned int param_5,
              unsigned int *param_6,unsigned int *param_7,unsigned int *param_8,int param_9,int *param_10,int *param_11,
              int *param_12,int param_13_00,int *param_13,unsigned int *param_14,
              unsigned int *param_15,int *param_16,unsigned int *param_17,int *param_18,unsigned int *param_19,
              unsigned int *param_20,int *param_21,int param_23_00,unsigned int *param_22,unsigned int *param_23,
              int param_26_00,unsigned int *param_24,unsigned int *param_25,unsigned int *param_26,
              int param_30_00,unsigned int *param_27)

{
  bool bVar1;
  longlong lVar2;
  int iVar3;
  int iVar4;
  int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  unsigned int *puVar9;
  int *puVar10;
  int *puVar11;
  unsigned int *puVar12;
  unsigned int uVar13;
  unsigned int uVar14;
  unsigned int *puVar15;
  int *piVar16;
  int iVar17;
  unsigned int uVar18;
  int *piVar19;
  unsigned int uVar20;
  unsigned int uVar21;
  char8 uVar22;
  longlong lVar23;
  unsigned int param_28;
  int param_29;
  unsigned int param_30;
  unsigned int param_31;
  unsigned int param_32;
  unsigned int param_33;
  unsigned int param_34;
  unsigned int param_35;
  char auStack_160 [8];
  int local_158;
  unsigned int local_150;
  int local_14c;
  unsigned int local_130 [10];
  unsigned int local_108 [10];
  unsigned int local_e0;
  int local_dc;
  unsigned int *local_d8;
  unsigned int local_d4;
  unsigned int local_d0;
  unsigned int local_cc;
  unsigned int local_c8;
  unsigned int local_c4;
  unsigned int local_c0;
  unsigned int local_bc;
  unsigned int local_b8;
  int local_b4;
  unsigned int local_b0;
  unsigned int local_ac;
  int *local_a8;
  unsigned int *local_a4;
  int local_a0;
  unsigned int local_9c;
  unsigned int local_98;
  code *local_94;
  unsigned int local_90;
  unsigned int local_8c;
  unsigned int local_88;
  code *local_84;
  int local_80;
  int local_7c;
  char8 local_78;
  char8 local_70;
  int local_68;
  int local_64;
  int local_60;
  unsigned int local_5c;
  unsigned int local_58;
  unsigned int local_54;
  unsigned int local_50;
  int *local_4c;
  int local_48;
  int local_44;
  int local_40;
  int local_3c;
  unsigned int local_38;
  code *local_34;
  int local_30;
  
  local_a4 = param_7;
  local_d8 = param_8;
  local_dc = *param_12;
  local_cc = param_5;
  local_a8 = param_10;
  local_e0 = param_12[1];
  local_80 = param_12[2];
  local_78._0_4_ = param_12[3];
  local_70._0_4_ = param_12[4];
  local_7c = *param_13;
  local_68 = param_13[1];
  local_64 = param_13[2];
  local_60 = param_13[3];
  local_5c = *param_14;
  local_58 = param_14[1];
  local_54 = param_14[2];
  local_50 = param_14[3];
  uVar18 = *param_15;
  local_b0 = *param_17;
  uVar20 = param_1[2];
  local_94 = (code *)param_20;
  local_4c = param_21;
  local_b4 = *param_11;
  local_a0 = param_11[1];
  local_48 = param_11[2];
  local_9c = *param_22;
  local_ac = *param_23;
  local_98 = *param_24;
  local_c4 = *param_25;
  local_d4 = *param_26;
  local_d0 = *param_27;
  local_90 = *param_6;
  local_8c = param_6[1];
  local_88 = param_6[2];
  uVar21 = *param_8;
  local_bc = param_8[1];
  local_c8 = param_8[3];
  local_c0 = param_8[4];
  local_34 = param_3;
  local_b8 = fix_point_mult3_32(uVar18,local_8c,local_88,local_90 << (uVar18 & 0x1f));
  local_44 = param_1[7];
  local_40 = param_1[8];
  local_84 = fix_point_mult3_32;
  local_3c = *param_1;
  local_38 = param_1[1];
  iVar3 = 0;
  do {
    *(int *)((int)local_108 + iVar3) = *(int *)(local_34 + iVar3);
    puVar11 = (int *)(local_cc + iVar3);
    puVar10 = (int *)((int)local_130 + iVar3);
    iVar3 = iVar3 + 4;
    *puVar10 = *puVar11;
  } while (iVar3 != 0x28);
  if (DAT_000a9bdc == 1) {
    iVar3 = 0;
    uVar8 = 0;
    do {
      iVar4 = *param_16;
      param_16 = param_16 + 1;
      iVar4 = iVar3 * iVar4;
      iVar3 = iVar3 + 1;
      uVar8 = iVar4 + uVar8;
    } while (iVar3 != 0x100);
    puVar15 = local_108;
    uVar8 = uVar8 / (uint)(_ae_parameter._16_4_ * _ae_parameter._76_4_ * _ae_parameter._4_4_ *
                          _ae_parameter._12_4_);
    local_cc = 0xff;
    if (uVar8 < 0x100) {
      local_cc = uVar8;
    }
    uVar5 = fix_point_div_32(uVar18,0x100 - (local_cc >> 1) << (uVar18 & 0x1f),
                             0x100 << (uVar18 & 0x1f));
    puVar9 = local_130;
    local_30 = 0x20000;
    do {
      local_34 = (code *)(local_30 + 0xe24);
      uVar8 = (*local_34)(uVar18,*puVar15 << (uVar18 & 0x1f),uVar5);
      uVar13 = *puVar9;
      *puVar15 = uVar8 >> (uVar18 & 0x1f);
      uVar8 = (*local_34)(uVar18,uVar13 << (uVar18 & 0x1f),uVar5);
      *puVar9 = uVar8 >> (uVar18 & 0x1f);
      puVar15 = puVar15 + 1;
      puVar9 = puVar9 + 1;
    } while (puVar15 != &local_e0);
    local_158 = 8;
    local_150 = local_cc;
    local_14c = 0;
    tisp_event_push(auStack_160);
    iVar3 = *param_18;
  }
  else {
    iVar3 = *param_18;
  }
  iVar4 = 0;
  if (iVar3 == 1) {
    puVar12 = local_108;
    puVar9 = local_130;
    piVar16 = local_4c + 10;
    piVar19 = local_4c;
    puVar15 = (unsigned int *)local_94;
    do {
      uVar8 = *puVar9;
      iVar3 = param_18[1];
      iVar17 = param_18[2];
      uVar13 = iVar3 * *puVar12 >> 7;
      iVar4 = *piVar19;
      *puVar12 = uVar13;
      uVar8 = (iVar3 * uVar8 >> 7) * iVar4 * iVar17 >> 0xe;
      *puVar9 = uVar8;
      if (uVar13 == 0) {
        *puVar12 = 1;
      }
      if (uVar8 == 0) {
        *puVar9 = 1;
      }
      piVar19 = piVar19 + 1;
      *param_19 = *puVar12;
      puVar12 = puVar12 + 1;
      *puVar15 = *puVar9;
      puVar9 = puVar9 + 1;
      param_19 = param_19 + 1;
      puVar15 = puVar15 + 1;
    } while (piVar19 != piVar16);
  }
  else {
    do {
      *(int *)((int)param_19 + iVar4) = *(int *)((int)local_108 + iVar4);
      puVar11 = (int *)((int)local_130 + iVar4);
      puVar10 = (int *)((int)local_94 + iVar4);
      iVar4 = iVar4 + 4;
      *puVar10 = *puVar11;
    } while (iVar4 != 0x28);
  }
  puVar10 = (int *)(param_9 + 4);
  do {
    puVar11 = puVar10 + 1;
    puVar10[-1] = *puVar10;
    puVar10 = puVar11;
  } while (puVar11 != (int *)(param_9 + 0x3c));
  *(unsigned int *)(param_9 + 0x38) = param_28;
  uVar8 = param_28;
  if (IspAeFlag == 1) {
    ftune_wmeans_32574 = IspAeFlag;
    if (local_bc == 1) {
LAB_000603b0:
      ftune_wmeans_32574 = 0;
      goto LAB_000603b8;
    }
  }
  else {
    if (local_bc == 1) goto LAB_000603b0;
LAB_000603b8:
    if (ftune_wmeans_32574 != 1) {
      if (uVar20 < 0x10) {
        if (uVar20 == 0) {
          uVar20 = 1;
        }
      }
      else {
        uVar20 = 0xf;
      }
      iVar3 = 0xf - uVar20;
      piVar19 = (int *)(param_9 + iVar3 * 4);
      uVar8 = 0;
      uVar20 = 0;
      do {
        iVar3 = iVar3 + 1;
        uVar8 = uVar8 + iVar3;
        uVar20 = iVar3 * *piVar19 + uVar20;
        piVar19 = piVar19 + 1;
      } while (iVar3 != 0xf);
      uVar8 = uVar20 / uVar8;
    }
  }
  if (uVar8 == 0) {
    uVar8 = 1;
  }
  if (IspAeFlag == 1) {
    if (ae_ev_init_en == 1) {
      DAT_000b06ec = 0;
      local_b8 = ae_ev_init_strict << (uVar18 & 0x1f);
      ae_ev_init_en = 0;
    }
    uVar21 = tisp_ae_target(local_b8,local_108,local_130,uVar18);
  }
  iVar3 = uVar8 << (uVar18 & 0x1f);
  uVar13 = fix_point_div_32(uVar18,uVar21 << (uVar18 & 0x1f),iVar3);
  uVar5 = fix_point_mult2_32(uVar18,local_b8,uVar13);
  uVar20 = local_b8;
  if (local_bc == 1) {
    if ((uVar13 < local_5c) && (local_58 < uVar13)) {
      local_d8[2] = param_28;
      local_cc = 1;
    }
    else {
      local_d8[1] = 0;
LAB_00060500:
      if (uVar8 < uVar21 - local_54) {
        local_cc = 0;
      }
      else if (uVar21 + local_50 < uVar8) {
        local_cc = 0;
      }
      else {
        local_d8[1] = 1;
        local_d8[2] = param_28;
        *local_d8 = uVar21;
        if (DAT_000b06e4 != 1) {
          local_cc = 1;
          goto LAB_00060a1c;
        }
        local_cc = 1;
      }
      DAT_000b06e4 = 0;
      uVar21 = tisp_ae_target(uVar5,local_108,local_130,uVar18);
      *local_d8 = uVar21;
      iVar4 = uVar21 - uVar8;
      if (uVar21 <= uVar8) {
        iVar4 = uVar8 - uVar21;
      }
      uVar13 = fix_point_div_32(uVar18,iVar4 << (uVar18 & 0x1f),iVar3);
      uVar20 = 1 << (uVar18 & 0x1f);
      iVar3 = local_44;
      if (((local_b4 == 0) || (iVar3 = local_40, local_b4 == 1)) && (0 < iVar3)) {
        tisp_ae_tune(param_29,&local_dc,&local_e0,iVar3,uVar18,uVar20);
      }
      local_94 = fix_point_mult2_64;
      if (uVar8 < uVar21) {
        if ((uint)local_78 < uVar13) {
          uVar22 = __ashldi3();
          local_5c = (uint)((ulonglong)uVar22 >> 0x20);
          local_58 = (uint)uVar22;
          local_70 = __ashldi3(local_e0,0,uVar18);
          local_78._0_4_ = uVar18 << 1;
          __ashldi3(uVar13,0,uVar18);
          uVar22 = (*local_94)((uint)local_78);
          uVar13 = (int)uVar22 + local_58;
          bVar1 = uVar13 < local_58;
          iVar3 = (int)((ulonglong)uVar22 >> 0x20) + local_5c;
        }
        else {
          uVar22 = __ashldi3(uVar20,0,uVar18);
          local_70._0_4_ = (uint)((ulonglong)uVar22 >> 0x20);
          local_5c = (uint)uVar22;
          local_78 = __ashldi3(uVar13,0,uVar18);
          __ashldi3(local_e0,0,uVar18);
          uVar22 = fix_point_mult3_64(uVar18 << 1);
          uVar13 = (int)uVar22 + local_5c;
          bVar1 = uVar13 < local_5c;
          iVar3 = (int)((ulonglong)uVar22 >> 0x20) + (uint)local_70;
        }
        uVar6 = (uint)bVar1 + iVar3;
      }
      else {
        if (-(uint)local_70 < -uVar13) {
          uVar22 = __ashldi3();
          local_5c = (uint)((ulonglong)uVar22 >> 0x20);
          local_58 = (uint)uVar22;
          local_70._0_4_ = uVar18 << 1;
          local_78 = __ashldi3(uVar13,0,uVar18);
          __ashldi3(local_dc,0,uVar18);
          uVar22 = fix_point_mult3_64((uint)local_70);
          local_78 = uVar22;
          __ashldi3(uVar20 - uVar13,0,uVar18);
          uVar22 = fix_point_div_64((uint)local_70);
          uVar13 = local_58 - (int)uVar22;
          bVar1 = local_58 < uVar13;
          iVar3 = local_5c - (int)((ulonglong)uVar22 >> 0x20);
        }
        else {
          uVar22 = __ashldi3(uVar20,0,uVar18);
          local_5c = (uint)((ulonglong)uVar22 >> 0x20);
          local_58 = (uint)uVar22;
          local_70 = __ashldi3(local_dc,0,uVar18);
          local_78._0_4_ = uVar18 << 1;
          __ashldi3(uVar13,0,uVar18);
          uVar22 = (*local_94)((uint)local_78);
          uVar13 = local_58 - (int)uVar22;
          bVar1 = local_58 < uVar13;
          iVar3 = local_5c - (int)((ulonglong)uVar22 >> 0x20);
        }
        uVar6 = iVar3 - (uint)bVar1;
      }
      local_58 = uVar13;
      uVar22 = __ashldi3(uVar20,0,uVar18);
      local_78._0_4_ = (uint)((ulonglong)uVar22 >> 0x20);
      local_5c = (uint)uVar22;
      local_70._0_4_ = (uint)local_78;
      lVar23 = __ashldi3(local_80,0,uVar18);
      iVar3 = (int)lVar23;
      lVar2 = lVar23 + CONCAT44((uint)local_70,local_5c);
      uVar13 = (uint)lVar2;
      uVar7 = (uint)((ulonglong)lVar2 >> 0x20);
      if (uVar6 < uVar7) {
LAB_00060904:
        if (uVar6 <= (uint)local_70) {
          if (uVar6 == (uint)local_78) {
            if (local_5c < local_58) goto LAB_00060990;
            uVar7 = local_5c - iVar3;
          }
          else {
            uVar7 = local_5c - iVar3;
          }
          goto LAB_00060928;
        }
      }
      else {
        if (uVar7 == uVar6) {
          if (local_58 < uVar13) goto LAB_00060904;
          uVar7 = local_5c - iVar3;
        }
        else {
          uVar7 = local_5c - iVar3;
        }
LAB_00060928:
        uVar14 = ((uint)local_70 - (int)((ulonglong)lVar23 >> 0x20)) - (uint)(local_5c < uVar7);
        uVar13 = local_58;
        if ((((uVar14 < uVar6) || ((uVar6 == uVar14 && (uVar7 < local_58)))) &&
            (uVar13 = uVar7, (uint)local_70 <= uVar6)) &&
           ((uVar13 = local_58, (uint)local_78 == uVar6 && (uVar13 = uVar7, local_5c <= local_58))))
        {
          uVar13 = local_58;
        }
      }
LAB_00060990:
      local_80 = uVar18 << 1;
      local_78._0_4_ = uVar13;
      __ashldi3(local_b8,0,uVar18);
      uVar22 = (*local_94)(local_80);
      uVar22 = __lshrdi3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar18);
      if ((int)((ulonglong)uVar22 >> 0x20) == 0) {
        if (uVar20 <= (uint)uVar22) {
          uVar20 = (uint)uVar22;
        }
      }
      else {
        uVar20 = 0xffffffff;
      }
    }
  }
  else {
    if (local_bc == 0) goto LAB_00060500;
    uVar20 = 0;
    local_cc = local_bc;
LAB_00060a1c:
    uVar21 = 0;
  }
  _ae_ev = uVar20;
  if (((local_b8 == uVar20) && (DAT_000b06e8 == 0)) && (DAT_000b06ec != 0)) {
    local_d0 = local_88;
    local_d4 = local_8c;
    local_c4 = local_90;
    goto LAB_00061024;
  }
  DAT_000b06ec = 1;
  DAT_000b06e8 = 0;
  if (DAT_000d3ea0 == 0) {
    local_94 = (code *)fix_point_mult2_32(uVar18,local_d4,local_d0);
    local_b8 = local_c4 << (uVar18 & 0x1f);
    uVar13 = fix_point_mult2_32(uVar18,local_94,local_b8);
    if (uVar20 <= uVar13) goto LAB_00061024;
    local_c4 = fix_point_div_32(uVar18,uVar20,local_94);
    uVar20 = local_9c << (uVar18 & 0x1f);
    uVar6 = fix_point_div_32(uVar18,local_ac,local_d4);
    uVar13 = fix_point_div_32(uVar18,local_98,local_d0);
    uVar7 = fix_point_div_32(uVar18,local_3c << (uVar18 & 0x1f),local_94);
    if ((local_b4 == 0) || (uVar14 = *local_a8 << (uVar18 & 0x1f), uVar20 < uVar14)) {
      if (uVar20 < local_c4) {
        uVar7 = fix_point_mult2_32(uVar18,uVar20,uVar6);
        uVar14 = local_c4;
        if (uVar7 < local_c4) {
          uVar7 = (*local_84)(uVar18,uVar20,uVar6,uVar13);
          bVar1 = true;
          if (local_c4 <= uVar7) {
            uVar5 = fix_point_mult2_32(uVar18,uVar20,uVar6);
            uVar13 = fix_point_div_32(uVar18,local_c4,uVar5);
            goto LAB_00060c08;
          }
          goto LAB_00060dbc;
        }
LAB_00060c8c:
        uVar6 = fix_point_div_32(uVar18,uVar14,uVar20);
      }
      else {
        uVar20 = (local_c4 >> (uVar18 & 0x1f)) << (uVar18 & 0x1f);
        uVar14 = local_c4;
        if (uVar7 < local_c4) goto LAB_00060c8c;
        uVar6 = 1 << (uVar18 & 0x1f);
      }
LAB_00060c9c:
      uVar13 = 1 << (uVar18 & 0x1f);
LAB_00060c08:
      bVar1 = false;
    }
    else {
      if (local_b4 == 1) {
        if (local_c4 < uVar14) {
          if (local_a0 == 0) {
            uVar20 = (local_c4 >> (uVar18 & 0x1f)) << (uVar18 & 0x1f);
            uVar6 = fix_point_div_32(uVar18,local_c4,uVar20);
            uVar13 = local_b4 << (uVar18 & 0x1f);
          }
          else {
            if (local_a0 != 1) {
              local_b8 = local_c4;
              local_c4 = uVar14;
              uVar5 = fix_point_div_32(uVar18,local_48 << (uVar18 & 0x1f),uVar21 << (uVar18 & 0x1f))
              ;
              uVar20 = fix_point_mult2_32(uVar18,local_c4,uVar5);
              uVar20 = (uVar20 >> (uVar18 & 0x1f)) << (uVar18 & 0x1f);
              if (local_c4 <= uVar20) {
                uVar20 = local_c4;
              }
              uVar6 = local_b4 << (uVar18 & 0x1f);
              if (uVar20 <= local_b8) {
                uVar20 = (local_b8 >> (uVar18 & 0x1f)) << (uVar18 & 0x1f);
                uVar14 = local_b8;
                goto LAB_00060c8c;
              }
              goto LAB_00060c9c;
            }
            uVar13 = 1 << (uVar18 & 0x1f);
            uVar20 = uVar14;
            uVar6 = uVar13;
          }
        }
        else {
          piVar19 = local_a8 + local_b0;
          uVar7 = fix_point_div_32(uVar18,*piVar19 << (uVar18 & 0x1f),local_b8);
          while ((0x14 << (uVar18 & 0x1f)) + uVar20 < uVar7) {
            piVar19 = piVar19 + -1;
            local_b0 = local_b0 - 1;
            if (local_b0 == 0) {
              local_b0 = 1;
              break;
            }
            uVar7 = *piVar19 << (uVar18 & 0x1f);
          }
          uVar7 = 1;
          piVar19 = local_a8;
          while ((piVar19 = piVar19 + 1, uVar7 <= local_b0 &&
                 ((uint)(*piVar19 << (uVar18 & 0x1f)) <= local_c4))) {
            uVar7 = uVar7 + 1;
          }
          uVar7 = local_a8[uVar7 - 1] << (uVar18 & 0x1f);
          if (uVar7 < uVar20) {
            uVar20 = uVar7;
          }
          uVar7 = fix_point_div_32(uVar18,local_c4,uVar20);
          if (uVar6 < uVar7) {
            uVar7 = fix_point_div_32(uVar18,uVar7,uVar6);
            if (uVar7 < uVar13) {
              uVar13 = uVar7;
            }
            bVar1 = true;
            goto LAB_00060dbc;
          }
          uVar13 = 1 << (uVar18 & 0x1f);
          uVar6 = uVar7;
        }
        goto LAB_00060c08;
      }
      bVar1 = false;
      uVar13 = 0;
      uVar6 = 0;
      uVar20 = 0;
    }
LAB_00060dbc:
    local_c4 = uVar20 >> (uVar18 & 0x1f);
    local_d4 = fix_point_mult2_32(uVar18,uVar6,local_d4);
    local_d0 = fix_point_mult2_32(uVar18,uVar13,local_d0);
    if ((local_cc == 0) && (local_bc != 1)) {
LAB_00060f04:
      if (uVar8 < uVar21) {
        if (param_33 < param_32) {
          uVar8 = param_34 << (uVar18 & 0x1f);
          uVar20 = param_35 << (uVar18 & 0x1f);
          uVar21 = fix_point_mult2_32(uVar18,uVar20,local_64);
          if ((uVar8 <= uVar21) || (local_c8 = 2, param_34 < 0x29)) {
            uVar21 = fix_point_mult2_32(uVar18,uVar8,local_7c);
            local_c8 = 0;
            if (uVar21 < uVar20) {
              local_c8 = param_35 < 0x29 ^ 1;
            }
          }
        }
      }
      else if (param_31 < param_30) {
        param_34 = param_34 << (uVar18 & 0x1f);
        param_35 = param_35 << (uVar18 & 0x1f);
        uVar21 = fix_point_mult2_32(uVar18,param_35,local_60);
        local_c8 = 2;
        if (param_34 <= uVar21) {
          uVar21 = fix_point_mult2_32(uVar18,param_34,local_68);
          local_c8 = (uint)(uVar21 < param_35);
        }
      }
    }
    local_d8[3] = local_c8;
    if (bVar1) {
LAB_00060ff4:
      local_c0 = local_c0 + (local_c0 < 0xff);
      goto LAB_00061038;
    }
  }
  else {
    if (DAT_000d3ea0 == 1) {
      if ((local_c4 < DAT_000d3e78) && (local_c4 = local_9c, DAT_000d3e78 < local_9c)) {
        local_c4 = DAT_000d3e78;
      }
      iVar3 = local_c4 << (uVar18 & 0x1f);
      DAT_000d3e78 = local_c4;
      uVar13 = (*local_84)(uVar18,iVar3,local_d4,local_d0);
      if (uVar20 <= uVar13) goto LAB_00061024;
      uVar13 = fix_point_div_32(uVar18,uVar20,iVar3);
      uVar6 = fix_point_mult2_32(uVar18,local_ac,local_d0);
      if (uVar13 <= uVar6) {
        uVar5 = fix_point_mult2_32(uVar18,iVar3,local_d0);
        local_d4 = fix_point_div_32(uVar18,uVar20,uVar5);
        goto LAB_00061024;
      }
      uVar5 = fix_point_mult2_32(uVar18,iVar3,local_ac);
      uVar20 = fix_point_div_32(uVar18,uVar20,uVar5);
      local_d0 = local_98;
      if (uVar20 < local_98) {
        local_d0 = uVar20;
      }
      if ((local_cc == 0) && (local_d4 = local_ac, local_bc != 1)) {
        bVar1 = true;
        goto LAB_00060f04;
      }
      local_d8[3] = local_c8;
      local_d4 = local_ac;
      goto LAB_00060ff4;
    }
    local_d0 = 0;
    local_d4 = 0;
    local_c4 = 0;
LAB_00061024:
    if ((local_cc == 0) && (bVar1 = false, local_bc != 1)) goto LAB_00060f04;
    local_d8[3] = local_c8;
  }
  local_c0 = 0;
LAB_00061038:
  if (local_c0 == local_38) {
    local_cc = 1;
  }
  local_d8[1] = local_cc;
  local_d8[4] = local_c0;
  *local_a4 = local_c4;
  local_a4[1] = local_d4;
  local_a4[2] = local_d0;
  return;
}



int tisp_ae_g_min(int *param_1)

{
  *param_1 = *DAT_000cfc84;
  param_1[1] = *DAT_000cfc88;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ae_s_min(unsigned int param_1,unsigned int param_2,unsigned int param_3,unsigned int param_4)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  
  uVar2 = param_3;
  uVar3 = param_4;
  isp_printf(0,"ae it min is %d, min again is %d,min it short is %d, min again short is %d\n",
             param_1,param_2,param_3,param_4);
  if ((param_1 == 0) || (uVar1 = param_1, *_IspAeExp < param_1)) {
    isp_printf(1,"invaild min integration:min it set value is %d,max it is %d\n",param_1,*_IspAeExp,
               uVar2,uVar3);
    uVar1 = DAT_000d3ee4;
  }
  DAT_000d3ee4 = uVar1;
  if ((param_2 < 0x400) || (uVar1 = param_2, *DAT_000cfc78 < param_2)) {
    isp_printf(1,"invaild min Again:min ag set value is %d,max ag is %d\n",param_2,*DAT_000cfc78,
               uVar2,uVar3);
    uVar1 = _DAT_000d3edc;
  }
  _DAT_000d3edc = uVar1;
  uVar1 = _DAT_000d3eec;
  if (DAT_000b2634 == 1) {
    if ((param_3 == 0) || (uVar1 = param_3, *DAT_000cfc94 < param_3)) {
      isp_printf(1,"invaild short min integration:min it set value is %d,max it is %d\n",param_3,
                 *DAT_000cfc94,uVar2,uVar3);
      uVar1 = _DAT_000d3ef0;
    }
    _DAT_000d3ef0 = uVar1;
    if ((param_4 < 0x400) || (uVar1 = param_4, *DAT_000cfc98 < param_4)) {
      isp_printf(1,"invaild short min Again:min ag set value is %d,max ag is %d\n",param_4,
                 *DAT_000cfc98,uVar2,uVar3);
      uVar1 = _DAT_000d3eec;
    }
  }
  _DAT_000d3eec = uVar1;
  DAT_000b06ec = 0;
  return 0;
}



void Tiziano_ae0_fpga(int param_1,int param_2,int param_3,int param_4,
                     int param_5,int param_6,int *param_7,int param_8,
                     int param_9,int param_10)

{
  bool bVar1;
  unsigned int uVar2;
  int uVar3;
  int *piVar4;
  int iVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  int *piVar8;
  int iVar9;
  unsigned int uVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int param_11;
  int param_12;
  int param_13;
  int param_14;
  int param_16;
  int *param_17;
  char local_118 [56];
  int local_e0;
  unsigned int local_dc;
  unsigned int *local_d8;
  int *local_d4;
  int *local_d0;
  int *local_cc;
  char *local_c8;
  unsigned int local_8c;
  int *local_88;
  int local_84;
  int local_80;
  int local_7c;
  int local_78;
  int local_74;
  int local_68;
  int local_64;
  int local_60;
  char local_5c [4];
  int local_58;
  unsigned int local_54;
  int local_50;
  int local_4c;
  int local_48;
  int local_44;
  int local_40;
  int local_3c;
  unsigned int local_38;
  int local_34;
  int local_30;
  int local_2c;
  
  piVar8 = param_7;
  local_50 = param_17[2];
  iVar9 = *param_17;
  uVar7 = param_17[1];
  iVar12 = param_17[3];
  local_4c = param_17[4];
  local_e0 = param_17[5];
  uVar10 = param_17[6];
  local_54 = 0;
  iVar5 = *(int *)(param_16 + 0xc);
  local_60 = 0;
  local_48 = *(int *)(param_10 + 0xc);
  local_68 = 0;
  local_44 = *(int *)(param_10 + 0x4c);
  local_64 = 0;
  iVar13 = *(int *)(param_10 + 4);
  iVar11 = *(int *)(param_10 + 0x10);
  uVar6 = *(unsigned int *)(param_10 + 0x8c);
  if (iVar9 == 0) {
    local_dc = 1;
    local_e0 = 1;
  }
  else {
    local_dc = uVar10;
    if ((((iVar9 != 1) && (iVar5 != 2)) &&
        (local_dc = param_17[8], local_e0 = param_17[7], iVar5 != 1)) &&
       (local_dc = param_17[10], local_e0 = param_17[9], iVar5 != 0)) {
      local_e0 = 0;
      local_dc = 0;
    }
  }
  local_c8 = local_5c;
  local_cc = &local_58;
  local_d0 = &local_60;
  local_d4 = &local_68;
  local_d8 = &local_54;
  for (uVar2 = 0; uVar2 < 0x38; uVar2 = uVar2 + 1) {
    local_118[uVar2] = *(char *)((int)&param_5 + uVar2);
  }
  ae0_weight_mean2(param_1,param_2,param_3,param_4);
  if (DAT_000b06f0 == 1) {
    tisp_wdr_rx_ae0_infm(piVar8,param_8);
  }
  piVar4 = piVar8 + uVar7;
  local_84 = 0;
  while( true ) {
    uVar7 = uVar7 + 1;
    piVar4 = piVar4 + 1;
    if (0xff < uVar7) break;
    local_84 = local_84 + *piVar4;
  }
  iVar5 = 0;
  local_7c = 0;
  piVar4 = piVar8;
  while (bVar1 = iVar5 != iVar12, iVar5 = iVar5 + 1, bVar1) {
    local_7c = local_7c + *piVar4;
    piVar4 = piVar4 + 1;
  }
  uVar7 = 1;
  if ((uVar10 != 0) && (uVar7 = 0x20, uVar10 < 0x21)) {
    uVar7 = uVar10;
  }
  if (iVar9 == 1) {
    if (uVar6 < 0xff) {
      uVar6 = (uVar6 << 1) / 3;
    }
    piVar8 = piVar8 + uVar6;
    iVar12 = 0;
    iVar5 = (0x100 - uVar6) * 0x10000;
    uVar10 = uVar6;
    iVar9 = 0x20000;
    while (uVar10 < 0x100) {
      local_40 = iVar9;
      local_3c = iVar5;
      local_38 = uVar10;
      local_34 = local_84;
      local_30 = local_7c;
      local_2c = iVar12;
      uVar3 = (*(code *)(iVar9 + 0xe94))(0x10,(uVar10 - uVar6) * 0x10000,iVar5);
      uVar3 = fix_point_mult2_32(0x10,uVar3,uVar3);
      uVar10 = fix_point_mult2_32(0x10,(uVar7 - 1) * 0x10000,uVar3);
      uVar10 = fix_point_mult2_32(5,*piVar8 << 5,uVar10 >> 0xb);
      iVar12 = local_2c + (uVar10 >> 5);
      piVar8 = piVar8 + 1;
      local_84 = local_34;
      local_7c = local_30;
      iVar5 = local_3c;
      iVar9 = local_40;
      uVar10 = local_38 + 1;
    }
    uVar7 = local_48 * iVar13 * iVar11 * local_44;
    local_54 = ((iVar12 + uVar7) * local_54) / uVar7;
  }
  local_74 = local_58;
  local_78 = local_4c;
  local_80 = local_50;
  local_88 = &local_68;
  local_8c = local_54;
  for (uVar7 = 0; uVar7 < 0x40; uVar7 = uVar7 + 1) {
    *(char *)((int)&local_cc + uVar7) = (&stack0x000000a4)[uVar7];
  }
  for (uVar7 = 0; uVar7 < 0x4c; uVar7 = uVar7 + 1) {
    local_118[uVar7] = (&stack0x00000058)[uVar7];
  }
  ae0_tune2(param_11,param_12,param_13,param_14);
  return;
}



void tisp_set_ae0_ag(void)

{
  int iVar1;
  int uVar2;
  int uVar3;
  int uVar4;
  int iVar5;
  int iVar6;
  int param_6;
  int param_7;
  int *param_11;
  unsigned int *param_12;
  
  iVar1 = DAT_000d3e70;
  uVar4 = *param_11;
  iVar5 = *(int *)(param_7 + 8);
  if ((((IspAeFlag == 1) || (*(int *)(param_6 + 4) != *(int *)(param_7 + 4))) ||
      (*(int *)(param_6 + 8) != iVar5)) || (tisp_ae_ctrls != 0)) {
    iVar6 = *(int *)(param_7 + 4);
    if (tisp_ae_ctrls != 0) {
      iVar5 = fix_point_mult2_32(uVar4,DAT_000d3e74,DAT_000d3e7c);
      iVar6 = iVar1;
    }
    ag_new = tisp_set_sensor_analog_gain(iVar6);
    DAT_000d3e70 = ag_new;
    dg_new = tisp_set_sensor_digital_gain_short(iVar5);
    DAT_000d3e74 = dg_new;
    uVar2 = fix_point_mult2_32(uVar4,iVar6,iVar5);
    uVar3 = fix_point_mult2_32(uVar4,ag_new,dg_new);
    dg_new = fix_point_div_32(uVar4,uVar2,uVar3);
    if (*param_12 < dg_new) {
      dg_new = *param_12;
    }
    IspAeFlag = 0;
    DAT_000d3e7c = dg_new;
  }
  *(int *)(param_7 + 4) = ag_new;
  *(unsigned int *)(param_7 + 8) = dg_new;
  return;
}



void tisp_set_ae1_ag(void)

{
  int iVar1;
  int uVar2;
  int uVar3;
  int iVar4;
  int uVar5;
  int iVar6;
  int param_6;
  int param_7;
  int *param_11;
  unsigned int *param_12;
  
  iVar1 = DAT_000d3eb4;
  uVar5 = *param_11;
  iVar4 = *(int *)(param_7 + 0x14);
  if ((((DAT_000b06d4 == 1) || (*(int *)(param_6 + 0x10) != *(int *)(param_7 + 0x10))) ||
      (*(int *)(param_6 + 0x14) != iVar4)) || (DAT_000d3ecc != 0)) {
    iVar6 = *(int *)(param_7 + 0x10);
    if (DAT_000d3ecc != 0) {
      iVar4 = fix_point_mult2_32(uVar5,DAT_000d3ed0,DAT_000d3ed8);
      iVar6 = iVar1;
    }
    ag1_new = tisp_set_sensor_analog_gain_short(iVar6);
    dg1_new = 0x400;
    DAT_000d3ed0 = 0x400;
    DAT_000d3eb4 = ag1_new;
    uVar2 = fix_point_mult2_32(uVar5,iVar6,iVar4);
    uVar3 = fix_point_mult2_32(uVar5,ag1_new,dg1_new);
    dg1_new = fix_point_div_32(uVar5,uVar2,uVar3);
    if (*param_12 < dg1_new) {
      dg1_new = *param_12;
    }
    DAT_000b06d4 = 0;
    DAT_000d3ed8 = dg1_new;
  }
  *(int *)(param_7 + 0x10) = ag1_new;
  *(unsigned int *)(param_7 + 0x14) = dg1_new;
  return;
}



int tisp_ae1_expt(void)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  int uVar4;
  int iVar5;
  int uVar6;
  unsigned int uVar7;
  unsigned int *puVar8;
  unsigned int uVar9;
  int *piVar10;
  int iVar11;
  unsigned int uVar12;
  unsigned int *puVar13;
  unsigned int uVar14;
  int iVar15;
  int iVar16;
  unsigned int uVar17;
  unsigned int uVar18;
  int param_6;
  int *param_7;
  int *param_11;
  int *param_12;
  unsigned int *param_13;
  unsigned int *param_14;
  int *param_15;
  unsigned int *param_16;
  unsigned int *param_17;
  int *param_18;
  unsigned int *param_19;
  
  uVar1 = _AePointPos;
  uVar2 = fix_point_mult3_32(_AePointPos,*param_7 << (_AePointPos & 0x1f),param_7[1],param_7[2]);
  puVar8 = &ae1_ev_list;
  puVar13 = param_13;
  do {
    uVar9 = *puVar8;
    if (*param_11 == 1) {
      uVar9 = uVar9 * param_11[3] >> 7;
    }
    *puVar13 = uVar9;
    if (*puVar13 == 0) {
      *puVar13 = 1;
    }
    puVar13 = puVar13 + 1;
    puVar8 = puVar8 + 1;
  } while (param_13 + 10 != puVar13);
  if ((uint)(*param_12 << (uVar1 & 0x1f)) < uVar2) {
    if (uVar2 < (uint)(param_12[9] << (uVar1 & 0x1f))) {
      iVar11 = 0;
      piVar10 = param_12;
      do {
        if (((uint)(*piVar10 << (uVar1 & 0x1f)) <= uVar2) &&
           (uVar2 <= (uint)(piVar10[1] << (uVar1 & 0x1f)))) {
          iVar11 = iVar11 << 2;
          goto LAB_00061b40;
        }
        iVar11 = iVar11 + 1;
        piVar10 = piVar10 + 1;
      } while (iVar11 != 9);
      iVar11 = 0;
LAB_00061b40:
      uVar9 = *(unsigned int *)((int)param_13 + iVar11);
      uVar12 = *(unsigned int *)((int)param_13 + iVar11 + 4);
      uVar2 = uVar2 >> (uVar1 & 0x1f);
      puVar13 = (unsigned int *)((int)param_12 + iVar11 + 4);
      if (uVar12 < uVar9) {
        uVar14 = *(unsigned int *)((int)param_12 + iVar11);
        iVar11 = uVar14 - uVar2;
        if (uVar14 < uVar2) {
          iVar11 = uVar2 - uVar14;
        }
        uVar7 = *puVar13;
        uVar2 = uVar14 - uVar7;
        if (uVar14 <= uVar7) {
          uVar2 = uVar7 - uVar14;
        }
        uVar9 = uVar9 - (iVar11 * (uVar9 - uVar12)) / uVar2;
      }
      else {
        uVar14 = *(unsigned int *)((int)param_12 + iVar11);
        iVar11 = uVar14 - uVar2;
        if (uVar14 < uVar2) {
          iVar11 = uVar2 - uVar14;
        }
        uVar7 = *puVar13;
        uVar2 = uVar14 - uVar7;
        if (uVar14 <= uVar7) {
          uVar2 = uVar7 - uVar14;
        }
        uVar9 = (iVar11 * (uVar12 - uVar9)) / uVar2 + uVar9;
      }
    }
    else {
      uVar9 = param_13[9];
    }
  }
  else {
    uVar9 = *param_13;
  }
  uVar7 = *(unsigned int *)(param_6 + 0xc);
  uVar17 = *param_14;
  iVar11 = *(int *)(param_6 + 0x10);
  iVar16 = *param_15;
  uVar12 = *(unsigned int *)(param_6 + 0x14);
  uVar18 = *param_16;
  uVar2 = *param_17;
  iVar15 = *param_18;
  uVar14 = *param_19;
  uVar9 = uVar9 << (uVar1 & 0x1f);
  uVar3 = fix_point_mult3_32(uVar1,iVar11,uVar12,uVar7 << (uVar1 & 0x1f));
  if (((uVar9 != uVar3) || (DAT_000b06e8 != 0)) || (DAT_000b06ec == 0)) {
    DAT_000b06ec = 1;
    DAT_000b06e8 = 0;
    if (DAT_000d3eac == 0) {
      iVar11 = uVar2 << (uVar1 & 0x1f);
      uVar12 = fix_point_mult3_32(uVar1,iVar11,iVar15,uVar14);
      if (uVar9 <= uVar12) {
        param_7[3] = uVar2;
        goto LAB_00061f44;
      }
      uVar2 = fix_point_div_32(uVar1,uVar9,uVar12);
      uVar9 = fix_point_div_32(uVar1,uVar17 << (uVar1 & 0x1f),iVar11);
      uVar4 = fix_point_div_32(uVar1,iVar16,iVar15);
      iVar5 = fix_point_div_32(uVar1,uVar18,uVar14);
      iVar16 = 1 << (uVar1 & 0x1f);
      fix_point_div_32(uVar1,iVar16,uVar12);
      if (uVar9 < uVar2) {
        uVar12 = fix_point_mult2_32(uVar1,uVar9,uVar4);
        if (uVar2 <= uVar12) goto LAB_00061d88;
        uVar12 = fix_point_mult3_32(uVar1,uVar9,uVar4,iVar5);
        iVar16 = iVar5;
        if (uVar2 <= uVar12) {
          uVar6 = fix_point_mult2_32(uVar1,uVar9,uVar4);
          iVar16 = fix_point_div_32(uVar1,uVar2,uVar6);
        }
      }
      else {
        uVar9 = (uVar2 >> (uVar1 & 0x1f)) << (uVar1 & 0x1f);
LAB_00061d88:
        uVar4 = fix_point_div_32(uVar1,uVar2,uVar9);
      }
      uVar2 = fix_point_mult2_32(uVar1,uVar9,iVar11);
      iVar11 = fix_point_mult2_32(uVar1,uVar4,iVar15);
      uVar12 = fix_point_mult2_32(uVar1,iVar16,uVar14);
      uVar7 = uVar2 >> (uVar1 & 0x1f);
    }
    else if (DAT_000d3eac == 1) {
      if (uVar2 < DAT_000d3eb8) {
        uVar2 = DAT_000d3eb8;
        if (uVar17 <= DAT_000d3eb8) {
          uVar2 = uVar17;
        }
        iVar5 = uVar2 << (uVar1 & 0x1f);
      }
      else {
        iVar5 = uVar2 << (uVar1 & 0x1f);
      }
      DAT_000d3eb8 = uVar2;
      uVar3 = fix_point_mult3_32(uVar1,iVar5,iVar15,uVar14);
      uVar12 = uVar14;
      iVar11 = iVar15;
      uVar7 = uVar2;
      if (uVar3 < uVar9) {
        uVar2 = fix_point_div_32(uVar1,uVar9,iVar5);
        uVar3 = fix_point_mult2_32(uVar1,iVar16,uVar14);
        if (uVar3 < uVar2) {
          uVar4 = fix_point_mult2_32(uVar1,iVar5,iVar16);
          uVar12 = fix_point_div_32(uVar1,uVar9,uVar4);
          iVar11 = iVar16;
          if (uVar18 <= uVar12) {
            uVar12 = uVar18;
          }
        }
        else {
          uVar4 = fix_point_mult2_32(uVar1,iVar5,uVar14);
          iVar11 = fix_point_div_32(uVar1,uVar9,uVar4);
        }
      }
    }
    else {
      uVar12 = 0x400;
      iVar11 = 0x400;
      uVar7 = 1;
    }
  }
  param_7[3] = uVar7;
  uVar14 = uVar12;
  iVar15 = iVar11;
LAB_00061f44:
  param_7[4] = iVar15;
  param_7[5] = uVar14;
  return 0;
}



void tisp_ae_mean_update(unsigned int *param_1,unsigned int *param_2)

{
  bool bVar1;
  bool bVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int *piVar6;
  
  bVar2 = false;
  uVar4 = wmean_new;
  for (uVar3 = 0; uVar3 < (ushort)_ae_parameter._4_2_; uVar3 = uVar3 + 1) {
    piVar6 = (int *)(uVar3 * 0x3c + DAT_000d3e30);
    uVar5 = 0;
    while (bVar1 = uVar5 < (ushort)_ae_parameter._12_2_, uVar5 = uVar5 + 1, bVar1) {
      uVar4 = uVar4 + *piVar6;
      piVar6 = piVar6 + 1;
      bVar2 = true;
    }
  }
  if (bVar2) {
    wmean_new = uVar4;
  }
  wmean_new = (wmean_new / ((uint)(ushort)_ae_parameter._12_2_ * (uint)(ushort)_ae_parameter._4_2_)
              << 10) / DAT_000cfc64;
  *param_1 = wmean_new;
  *param_2 = DAT_000cfc64;
  return;
}



void ae1_weight_mean2(int param_1,int param_2,int param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  int *piVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int param_8;
  int param_10;
  
  iVar8 = *(int *)(param_10 + 0xc);
  iVar9 = *(int *)(param_10 + 4);
  piVar6 = (int *)(param_10 + 0x4c);
  iVar7 = 0;
  for (iVar5 = 0; iVar3 = 0, iVar5 != iVar9; iVar5 = iVar5 + 1) {
    for (iVar4 = 0; iVar1 = iVar7 + iVar3, iVar4 != iVar8; iVar4 = iVar4 + 1) {
      iVar2 = param_10 + iVar3;
      iVar3 = iVar3 + 4;
      *(unsigned int *)(param_8 + iVar1) =
           (uint)(*(int *)(param_1 + iVar1) + *(int *)(param_2 + iVar1) + *(int *)(param_3 + iVar1))
           / (uint)(*(int *)(iVar2 + 0x10) * *piVar6);
    }
    piVar6 = piVar6 + 1;
    iVar7 = iVar7 + iVar8 * 4;
  }
  return;
}



int
Tiziano_ae1_fpga(int param_1,int param_2,int param_3,int param_4,
                int param_5,int param_6,void *param_7,void *param_8)

{
  void *__src;
  unsigned int uVar1;
  char local_40 [52];
  
  for (uVar1 = 0; uVar1 < 0x38; uVar1 = uVar1 + 1) {
    local_40[uVar1] = *(char *)((int)&param_5 + uVar1);
  }
  ae1_weight_mean2(param_1,param_2,param_3,param_4);
  __src = param_8;
  memcpy(wdr_hist_Y1,param_7,0x400);
  memcpy(&wdr_block_mean1,__src,900);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ae0_ctrls_update(void)

{
  unsigned int uVar1;
  
  if ((uint)sensor_ctrl._44_4_ < DAT_000d3e88) {
    DAT_000d3e88 = *_IspAeExp;
  }
  else {
    *_IspAeExp = DAT_000d3e88;
  }
  uVar1 = tisp_math_exp2(sensor_ctrl._32_4_,0x10,10);
  if (uVar1 < DAT_000d3e80) {
    DAT_000d3e80 = *DAT_000cfc78;
  }
  else {
    *DAT_000cfc78 = DAT_000d3e80;
  }
  uVar1 = tisp_math_exp2(sensor_ctrl._36_4_,0x10,10);
  if (uVar1 < DAT_000d3e84) {
    DAT_000d3e84 = *DAT_000cfc7c;
  }
  else {
    *DAT_000cfc7c = DAT_000d3e84;
  }
  if (DAT_000d3e8c != *DAT_000cfc80) {
    *DAT_000cfc80 = DAT_000d3e8c;
  }
  if (DAT_000d3ee4 < (uint)sensor_ctrl._40_4_) {
    DAT_000d3ee4 = *DAT_000cfc84;
  }
  else {
    *DAT_000cfc84 = DAT_000d3ee4;
  }
  if (_DAT_000d3edc < 0x400) {
    _DAT_000d3edc = *DAT_000cfc88;
  }
  else {
    *DAT_000cfc88 = _DAT_000d3edc;
  }
  if (_DAT_000d3ee0 < 0x400) {
    _DAT_000d3ee0 = *DAT_000cfc8c;
  }
  else {
    *DAT_000cfc8c = _DAT_000d3ee0;
  }
  if (_DAT_000d3ee8 != *DAT_000cfc90) {
    *DAT_000cfc90 = _DAT_000d3ee8;
  }
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ae1_ctrls_update(void)

{
  unsigned int uVar1;
  
  if (DAT_000b06f0 == 1) {
    if ((uint)sensor_ctrl._84_4_ < _DAT_000d3ec0) {
      _DAT_000d3ec0 = *DAT_000cfc94;
    }
    else {
      *DAT_000cfc94 = _DAT_000d3ec0;
    }
    uVar1 = tisp_math_exp2(sensor_ctrl._88_4_,0x10,10);
    if (uVar1 < _DAT_000d3ebc) {
      _DAT_000d3ebc = *DAT_000cfc98;
    }
    else {
      *DAT_000cfc98 = _DAT_000d3ebc;
    }
    if (_DAT_000d3ec4 < 0x401) {
      *DAT_000cfc9c = _DAT_000d3ec4;
    }
    else {
      _DAT_000d3ec4 = *DAT_000cfc9c;
    }
    if (_DAT_000d3ec8 != *DAT_000cfca0) {
      *DAT_000cfca0 = _DAT_000d3ec8;
    }
    if (_DAT_000d3ef0 < (uint)sensor_ctrl._80_4_) {
      _DAT_000d3ef0 = *DAT_000cfca4;
    }
    else {
      *DAT_000cfca4 = _DAT_000d3ef0;
    }
    if (_DAT_000d3eec < 0x400) {
      _DAT_000d3eec = *DAT_000cfca8;
    }
    else {
      *DAT_000cfca8 = _DAT_000d3eec;
    }
    if (_DAT_000d3ef4 < 0x400) {
      _DAT_000d3ef4 = *DAT_000cfcac;
    }
    else {
      *DAT_000cfcac = _DAT_000d3ef4;
    }
    if (_DAT_000d3ef8 != *DAT_000cfcb0) {
      *DAT_000cfcb0 = _DAT_000d3ef8;
    }
    return 0;
  }
  return 0;
}



void tiziano_ae_dump(void)

{
  int uVar1;
  
  if (DumpNum_32866 == 0) {
    DumpNum_32866 = 1;
    isp_printf(1,"-----ae0 regs dump-----\n");
    uVar1 = system_reg_read(0xa004);
    isp_printf(1,"0x%x: 0x%xx\n",0xa004,uVar1);
    uVar1 = system_reg_read(0xa008);
    isp_printf(1,"0x%x: 0x%xx\n",0xa008,uVar1);
    uVar1 = system_reg_read(0xa00c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa00c,uVar1);
    uVar1 = system_reg_read(0xa010);
    isp_printf(1,"0x%x: 0x%xx\n",0xa010,uVar1);
    uVar1 = system_reg_read(0xa014);
    isp_printf(1,"0x%x: 0x%xx\n",0xa014,uVar1);
    uVar1 = system_reg_read(0xa018);
    isp_printf(1,"0x%x: 0x%xx\n",0xa018,uVar1);
    uVar1 = system_reg_read(0xa01c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa01c,uVar1);
    uVar1 = system_reg_read(0xa020);
    isp_printf(1,"0x%x: 0x%xx\n",0xa020,uVar1);
    uVar1 = system_reg_read(0xa024);
    isp_printf(1,"0x%x: 0x%xx\n",0xa024,uVar1);
    uVar1 = system_reg_read(41000);
    isp_printf(1,"0x%x: 0x%xx\n",41000,uVar1);
    uVar1 = system_reg_read(0xa02c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa02c,uVar1);
    uVar1 = system_reg_read(0xa030);
    isp_printf(1,"0x%x: 0x%xx\n",0xa030,uVar1);
    uVar1 = system_reg_read(0xa034);
    isp_printf(1,"0x%x: 0x%xx\n",0xa034,uVar1);
    uVar1 = system_reg_read(0xa038);
    isp_printf(1,"0x%x: 0x%xx\n",0xa038,uVar1);
    uVar1 = system_reg_read(0xa03c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa03c,uVar1);
    uVar1 = system_reg_read(0xa040);
    isp_printf(1,"0x%x: 0x%xx\n",0xa040,uVar1);
    uVar1 = system_reg_read(0xa044);
    isp_printf(1,"0x%x: 0x%xx\n",0xa044,uVar1);
    uVar1 = system_reg_read(0xa048);
    isp_printf(1,"0x%x: 0x%xx\n",0xa048,uVar1);
    uVar1 = system_reg_read(0xa04c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa04c,uVar1);
    uVar1 = system_reg_read(0xa050);
    isp_printf(1,"0x%x: 0x%xx\n",0xa050,uVar1);
    uVar1 = system_reg_read(0xa074);
    isp_printf(1,"0x%x: 0x%xx\n",0xa074,uVar1);
    uVar1 = system_reg_read(0xa078);
    isp_printf(1,"0x%x: 0x%xx\n",0xa078,uVar1);
    isp_printf(1,"-----ae1 regs dump-----\n");
    uVar1 = system_reg_read(0xa804);
    isp_printf(1,"0x%x: 0x%xx\n",0xa804,uVar1);
    uVar1 = system_reg_read(0xa808);
    isp_printf(1,"0x%x: 0x%xx\n",0xa808,uVar1);
    uVar1 = system_reg_read(0xa80c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa80c,uVar1);
    uVar1 = system_reg_read(0xa810);
    isp_printf(1,"0x%x: 0x%xx\n",0xa810,uVar1);
    uVar1 = system_reg_read(0xa814);
    isp_printf(1,"0x%x: 0x%xx\n",0xa814,uVar1);
    uVar1 = system_reg_read(0xa818);
    isp_printf(1,"0x%x: 0x%xx\n",0xa818,uVar1);
    uVar1 = system_reg_read(0xa81c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa81c,uVar1);
    uVar1 = system_reg_read(0xa820);
    isp_printf(1,"0x%x: 0x%xx\n",0xa820,uVar1);
    uVar1 = system_reg_read(0xa824);
    isp_printf(1,"0x%x: 0x%xx\n",0xa824,uVar1);
    uVar1 = system_reg_read(0xa828);
    isp_printf(1,"0x%x: 0x%xx\n",0xa828,uVar1);
    uVar1 = system_reg_read(0xa82c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa82c,uVar1);
    uVar1 = system_reg_read(0xa830);
    isp_printf(1,"0x%x: 0x%xx\n",0xa830,uVar1);
    uVar1 = system_reg_read(0xa834);
    isp_printf(1,"0x%x: 0x%xx\n",0xa834,uVar1);
    uVar1 = system_reg_read(0xa838);
    isp_printf(1,"0x%x: 0x%xx\n",0xa838,uVar1);
    uVar1 = system_reg_read(0xa83c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa83c,uVar1);
    uVar1 = system_reg_read(0xa840);
    isp_printf(1,"0x%x: 0x%xx\n",0xa840,uVar1);
    uVar1 = system_reg_read(0xa844);
    isp_printf(1,"0x%x: 0x%xx\n",0xa844,uVar1);
    uVar1 = system_reg_read(0xa848);
    isp_printf(1,"0x%x: 0x%xx\n",0xa848,uVar1);
    uVar1 = system_reg_read(0xa84c);
    isp_printf(1,"0x%x: 0x%xx\n",0xa84c,uVar1);
    uVar1 = system_reg_read(0xa850);
    isp_printf(1,"0x%x: 0x%xx\n",0xa850,uVar1);
    uVar1 = system_reg_read(0xa874);
    isp_printf(1,"0x%x: 0x%xx\n",0xa874,uVar1);
    uVar1 = system_reg_read(0xa878);
    isp_printf(1,"0x%x: 0x%xx\n",0xa878,uVar1);
    return;
  }
  return;
}



int tiziano_ae_params_refresh(void)

{
  char *puVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  
  memcpy(_ae_parameter,&DAT_00094480,0xa8);
  memcpy(&ae_exp_th,&DAT_00094528,0x50);
  memcpy(&_AePointPos,&DAT_00094578,8);
  memcpy(_exp_parameter,&DAT_00094580,0x2c);
  memcpy(ae_ev_step,&DAT_000945ac,0x14);
  memcpy(ae_stable_tol,&DAT_000945c0,0x10);
  memcpy(ae0_ev_list,&DAT_000945d0,0x28);
  memcpy(_lum_list,&DAT_000945f8,0x28);
  memcpy(&_at_list,&DAT_00094620,0x28);
  memcpy(&_deflicker_para,&DAT_00094648,0xc);
  memcpy(&_flicker_t,&DAT_00094654,0x18);
  memcpy(_scene_para,&DAT_0009466c,0x2c);
  memcpy(ae_scene_mode_th,&DAT_00094698,0x10);
  memcpy(_log2_lut,&DAT_000946a8,0x50);
  memcpy(_weight_lut,&DAT_000946f8,0x50);
  memcpy(_ae_zone_weight,&DAT_00094748,900);
  memcpy(_scene_roui_weight,&DAT_00094acc,900);
  memcpy(_scene_roi_weight,&DAT_00094e50,900);
  memcpy(&ae_comp_param,&DAT_0009523c,0x18);
  memcpy(ae_comp_ev_list,&DAT_00095254,0x28);
  memcpy(ae_comp_at_list,&DAT_0009527c,0x28);
  memcpy(ae_extra_at_list,&DAT_000952a4,0x28);
  if (DAT_000b06d8 == 0) {
    memcpy(&_ae_result,&DAT_000951d4,0x18);
    memcpy(&_ae_stat,&DAT_000951ec,0x14);
    memcpy(_ae_wm_q,&DAT_00095200,0x3c);
  }
  memcpy(&ae1_ev_list,&DAT_000952cc,0x28);
  memcpy(ae1_comp_ev_list,&DAT_000953e8,0x28);
  uVar3 = sensor_info / 2;
  DAT_000b06d8 = 0;
  uVar2 = 0;
  puVar1 = _ae_parameter;
  while( true ) {
    if ((uint)_ae_parameter._12_4_ <= uVar2) break;
    uVar2 = uVar2 + 1;
    *(unsigned int *)(puVar1 + 0x10) = uVar3 / (uint)_ae_parameter._12_4_;
    puVar1 = puVar1 + 4;
  }
  uVar3 = DAT_000b25dc / 2;
  uVar2 = 0;
  puVar1 = _ae_parameter;
  while( true ) {
    if ((uint)_ae_parameter._4_4_ <= uVar2) break;
    uVar2 = uVar2 + 1;
    *(unsigned int *)(puVar1 + 0x4c) = uVar3 / (uint)_ae_parameter._4_4_;
    puVar1 = puVar1 + 4;
  }
  memcpy(ae0_ev_list_wdr,&DAT_000952f4,0x28);
  memcpy(_lum_list_wdr,&DAT_0009531c,0x28);
  memcpy(_at_list_wdr,&DAT_00095344,0x28);
  memcpy(_scene_para_wdr,&DAT_0009536c,0x2c);
  memcpy(ae_scene_mode_th_wdr,&DAT_00095398,0x10);
  memcpy(ae_comp_param_wdr,&DAT_000953a8,0x18);
  memcpy(ae_extra_at_list_wdr,&DAT_000953c0,0x28);
  return 0;
}



int tiziano_ae_s_max_again(unsigned int param_1)

{
  int uVar1;
  
  if ((uint)(sensor_ctrl._32_4_ << 0xb) < param_1) {
    isp_printf(1,"%d not in range, max_again must between 0~%d\n",param_1);
    uVar1 = 0xffffffff;
  }
  else {
    DAT_000d3e80 = tisp_math_exp2(param_1,5,10);
    DAT_000b06ec = 0;
    uVar1 = 0;
  }
  return uVar1;
}



int tiziano_ae_s_max_isp_dgain(int param_1)

{
  DAT_000d3e8c = tisp_math_exp2(param_1,5,10);
  DAT_000b06ec = 0;
  return 0;
}



int
tisp_ae_s_at_list(int param_1,int param_2,int param_3,int param_4)

{
  int iVar1;
  int *puVar2;
  int *puVar3;
  int local_res0 [4];
  
  local_res0[0] = param_1;
  local_res0[1] = param_2;
  local_res0[2] = param_3;
  local_res0[3] = param_4;
  iVar1 = 0;
  do {
    puVar3 = (int *)((int)local_res0 + iVar1);
    puVar2 = (int *)((int)&_at_list + iVar1);
    iVar1 = iVar1 + 4;
    *puVar2 = *puVar3;
  } while (iVar1 != 0x28);
  DAT_000b06e0 = 1;
  DAT_000b06ec = 0;
  DAT_000b06e4 = 1;
  return 0;
}



int tisp_ae_g_at_list(int *param_1)

{
  int *puVar1;
  int *puVar2;
  int *puVar3;
  
  puVar1 = &_at_list;
  puVar2 = param_1;
  do {
    puVar3 = puVar2 + 1;
    *puVar2 = *puVar1;
    puVar1 = puVar1 + 1;
    puVar2 = puVar3;
  } while (puVar3 != param_1 + 10);
  return 0;
}



void tiziano_deflicker_expt
               (int param_1,unsigned int param_2,int param_3,int param_4,unsigned int *param_5,unsigned int *param_6)

{
  int uVar1;
  unsigned int uVar2;
  int uVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int *puVar6;
  
  _flicker_t = param_1;
  DAT_000b0408 = param_2;
  DAT_000b040c = param_3;
  DAT_000b0410 = param_4;
  uVar1 = fix_point_div_32(0x10,param_2 & 0xffff0000,param_2 << 0x10);
  uVar2 = fix_point_div_32(0x10,param_1 << 0x11,uVar1);
  uVar2 = uVar2 >> 0x10;
  if (uVar2 < 0x79) {
    if (uVar2 == 0) {
      uVar2 = 1;
    }
  }
  else {
    uVar2 = 0x78;
  }
  *param_6 = uVar2;
  puVar6 = param_5;
  for (uVar2 = 1; uVar5 = *param_6, uVar2 <= uVar5; uVar2 = uVar2 + 1) {
    uVar3 = fix_point_div_32(0x10,param_3 << 0x10,param_1 << 0x11);
    iVar4 = fix_point_mult3_32(0x10,uVar2 << 0x10,uVar1,uVar3);
    *puVar6 = iVar4 + 0x8000U >> 0x10;
    puVar6 = puVar6 + 1;
  }
  puVar6 = param_5 + uVar5;
  for (; uVar5 < 0x78; uVar5 = uVar5 + 1) {
    *puVar6 = param_5[*param_6 + 0x3fffffff];
    puVar6 = puVar6 + 1;
  }
  *param_6 = *param_6 - 1;
  DAT_000b06e8 = 1;
  return;
}



void tiziano_deflicker_expt_tune(void)

{
  tiziano_deflicker_expt();
  return;
}



void system_reg_write_ae(int param_1,int param_2,int param_3)

{
  int uVar1;
  
  if (param_1 == 1) {
    uVar1 = 0xa000;
  }
  else if (param_1 == 2) {
    uVar1 = 0xa800;
  }
  else {
    if (param_1 != 3) goto LAB_00063114;
    uVar1 = 0x1070;
  }
  system_reg_write(uVar1,1);
LAB_00063114:
  system_reg_write(param_2,param_3);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ae1_process_impl(void)

{
  bool bVar1;
  bool bVar2;
  int uVar3;
  unsigned int uVar4;
  int iVar5;
  unsigned int uVar6;
  int *puVar7;
  int *puVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  int *puVar12;
  int iVar13;
  int iVar14;
  int *puVar15;
  char local_c8 [144];
  int local_38;
  int local_34;
  int local_30;
  int local_2c;
  
  uVar4 = _AePointPos;
  local_30 = 0x4000400;
  local_2c = 0x4000400;
  local_38 = 1 << (_AePointPos & 0x1f);
  for (uVar6 = 0; uVar6 < 0x38; uVar6 = uVar6 + 1) {
    local_c8[uVar6] = (&DAT_000d3ddc)[uVar6];
  }
  local_34 = local_38;
  Tiziano_ae1_fpga(IspAe1WmeanParam,DAT_000d3dd0,DAT_000d3dd4,DAT_000d3dd8);
  for (uVar6 = 0; uVar6 < 0x40; uVar6 = uVar6 + 1) {
    local_c8[uVar6 + 0x4c] = (&IspAeExp)[uVar6];
  }
  for (uVar6 = 0; uVar6 < 0x4c; uVar6 = uVar6 + 1) {
    local_c8[uVar6] = (&DAT_000d3d80)[uVar6];
  }
  tisp_ae1_expt(IspAeTuneParam,DAT_000d3d74,DAT_000d3d78,DAT_000d3d7c);
  iVar5 = tisp_set_sensor_integration_time_short(DAT_000cfc68);
  if (iVar5 != 0) {
    isp_printf(1,"sorry,set integration time 1 failed!\n");
    return 0xffffffff;
  }
  for (uVar6 = 0; uVar6 < 0x40; uVar6 = uVar6 + 1) {
    local_c8[uVar6 + 0x4c] = (&IspAeExp)[uVar6];
  }
  for (uVar6 = 0; uVar6 < 0x4c; uVar6 = uVar6 + 1) {
    local_c8[uVar6] = (&DAT_000d3d80)[uVar6];
  }
  tisp_set_ae1_ag(IspAeTuneParam,DAT_000d3d74,DAT_000d3d78,DAT_000d3d7c);
  uVar3 = _exp_parameter._40_4_;
  iVar9 = _exp_parameter._40_4_ + 1;
  puVar8 = &ev1_cache + _exp_parameter._40_4_;
  EffectFrame = _exp_parameter._40_4_;
  EffectCount1 = _exp_parameter._40_4_;
  puVar7 = &ad1_cache + _exp_parameter._40_4_;
  bVar2 = false;
  iVar5 = iVar9;
  while (bVar1 = 0 < iVar5, iVar5 = iVar5 + -1, bVar1) {
    puVar8[1] = *puVar8;
    puVar8 = puVar8 + -1;
    puVar7[1] = *puVar7;
    puVar7 = puVar7 + -1;
    bVar2 = true;
  }
  if (iVar9 < 0) {
    iVar9 = 0;
  }
  if (bVar2) {
    EffectCount1 = uVar3 - iVar9;
  }
  ev1_cache = fix_point_mult3_32(uVar4,DAT_000cfc68 << (uVar4 & 0x1f),DAT_000cfc6c,_DAT_000cfc70);
  ad1_cache = fix_point_mult2_32(uVar4,DAT_000cfc6c,_DAT_000cfc70);
  iVar5 = EffectFrame;
  iVar10 = EffectFrame * 4;
  puVar12 = &ag1_cache + EffectFrame;
  puVar15 = &dg1_cache + EffectFrame;
  EffectCount1 = EffectFrame;
  bVar2 = false;
  puVar7 = puVar15;
  puVar8 = puVar12;
  iVar9 = EffectFrame;
  while( true ) {
    if (iVar9 < 1) break;
    iVar9 = iVar9 + -1;
    *puVar8 = puVar8[-1];
    *puVar7 = puVar7[-1];
    bVar2 = true;
    puVar7 = puVar7 + -1;
    puVar8 = puVar8 + -1;
  }
  iVar9 = iVar5;
  if (-1 < iVar5) {
    iVar9 = 0;
  }
  if (bVar2) {
    EffectCount1 = iVar9;
  }
  ag1_cache = DAT_000cfc6c;
  dg1_cache = _DAT_000cfc70;
  iVar13 = EffectCount1;
  if (DAT_000b06f8 == 1) {
    DAT_000b06f8 = 0;
    iVar14 = 0;
    for (iVar13 = iVar5 + 1; iVar14 = iVar14 + -4, 0 < iVar13; iVar13 = iVar13 + -1) {
      iVar11 = iVar14 + iVar10;
      *(int *)(iVar11 + 0xaf494) = ev1_cache;
      *(int *)(iVar11 + 0xaf46c) = ad1_cache;
    }
    EffectCount1 = iVar5;
    iVar13 = 0;
    bVar2 = false;
    for (iVar10 = iVar5; 0 < iVar10; iVar10 = iVar10 + -1) {
      *(int *)((int)puVar12 + iVar13) = ag1_cache;
      *(int *)((int)puVar15 + iVar13) = dg1_cache;
      iVar13 = iVar13 + -4;
      bVar2 = true;
    }
    iVar13 = iVar9;
    if (!bVar2) goto LAB_00063464;
  }
  EffectCount1 = iVar13;
LAB_00063464:
  JZ_Isp_Ae_Dg2reg(uVar4,&local_30,(&dg1_cache)[iVar5],&local_38);
  system_reg_write_ae(3,0x100c,local_30);
  system_reg_write_ae(3,0x1010,local_2c);
  return 0;
}



int tisp_ae1_process(void)

{
  tisp_ae1_ctrls_update();
  tisp_ae1_process_impl();
  return 0;
}



int tiziano_ae_set_hardware_param(int param_1,unsigned int *param_2,int param_3)

{
  unsigned int uVar1;
  int uVar2;
  int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  unsigned int uVar12;
  
  uVar10 = param_2[7] << 0x18 | param_2[6] << 0x10 | param_2[4] | param_2[5] << 8;
  uVar9 = param_2[0xb] << 0x18 | param_2[10] << 0x10 | param_2[8] | param_2[9] << 8;
  uVar8 = param_2[0xf] << 0x18 | param_2[0xe] << 0x10 | param_2[0xc] | param_2[0xd] << 8;
  uVar12 = param_2[0x12] << 0x10 | param_2[0x11] << 8 | param_2[0x10];
  uVar7 = param_2[0x16] << 0x18 | param_2[0x15] << 0x10 | param_2[0x13] | param_2[0x14] << 8;
  uVar6 = param_2[0x1a] << 0x18 | param_2[0x19] << 0x10 | param_2[0x17] | param_2[0x18] << 8;
  uVar5 = param_2[0x1e] << 0x18 | param_2[0x1d] << 0x10 | param_2[0x1b] | param_2[0x1c] << 8;
  uVar11 = param_2[0x21] << 0x10 | param_2[0x20] << 8 | param_2[0x1f];
  uVar1 = param_2[0x23];
  uVar4 = param_2[0x25] << 0x14 | param_2[0x24] << 0x10;
  if (uVar1 < 0xff) {
    uVar4 = uVar4 | param_2[0x22];
    uVar1 = (uVar1 << 1) / 3 << 8;
  }
  else {
    uVar1 = uVar1 << 8 | param_2[0x22];
  }
  if (param_1 == 0) {
    if (param_3 == 0) {
      system_reg_write(0xa004);
      system_reg_write(0xa008,uVar10);
      system_reg_write(0xa00c,uVar9);
      system_reg_write(0xa010,uVar8);
      system_reg_write(0xa014,uVar12);
      system_reg_write(0xa018,uVar7);
      system_reg_write(0xa01c,uVar6);
      system_reg_write(0xa020,uVar5);
      system_reg_write(0xa024,uVar11);
    }
    uVar3 = 41000;
    uVar2 = 1;
  }
  else {
    if (param_1 != 1) {
      return 0;
    }
    if (param_3 == 0) {
      system_reg_write(0xa804,param_2[3] << 0x1c | param_2[2] << 0x10 | *param_2 | param_2[1] << 0xc
                      );
      system_reg_write(0xa808,uVar10);
      system_reg_write(0xa80c,uVar9);
      system_reg_write(0xa810,uVar8);
      system_reg_write(0xa814,uVar12);
      system_reg_write(0xa818,uVar7);
      system_reg_write(0xa81c,uVar6);
      system_reg_write(0xa820,uVar5);
      system_reg_write(0xa824,uVar11);
    }
    uVar3 = 0xa828;
    uVar2 = 2;
  }
  system_reg_write_ae(uVar2,uVar3,uVar1 | uVar4);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tiziano_ae_para_addr(void)

{
  IspAe0WmeanParam = &IspAeStatic;
  DAT_000d3e18 = &DAT_000d0038;
  DAT_000d3e1c = &DAT_000d03bc;
  DAT_000d3e20 = &DAT_000d0740;
  _DAT_000d3e24 = &DAT_000d0ac4;
  DAT_000d3e28 = &DAT_000d0e48;
  DAT_000d3e2c = &DAT_000d11cc;
  DAT_000d3e30 = &DAT_000d2f60;
  DAT_000d3e34 = &DAT_000d32e4;
  DAT_000d3e38 = _ae_parameter;
  DAT_000d3e3c = _ae_zone_weight;
  DAT_000d3e40 = _exp_parameter;
  DAT_000d3e4c = _scene_roi_weight;
  DAT_000d3e50 = _log2_lut;
  DAT_000d3e54 = _weight_lut;
  DAT_000d3e58 = &_AePointPos;
  DAT_000d3e44 = &_ae_stat;
  DAT_000d3e48 = _scene_roui_weight;
  IspAeTuneParam = _exp_parameter;
  DAT_000d3d84 = &_ae_result;
  DAT_000d3d88 = &_ae_reg;
  DAT_000d3d90 = _ae_wm_q;
  DAT_000d3d94 = _deflick_lut;
  DAT_000d3d98 = &_deflicker_para;
  DAT_000d3d9c = ae_ev_step;
  DAT_000d3da8 = ae_stable_tol;
  DAT_000d3db0 = &DAT_000d15cc;
  DAT_000d3db4 = &_nodes_num;
  DAT_000d3dbc = ae_comp_ev_list;
  DAT_000d3d74 = _ae_parameter;
  DAT_000d3d8c = &_ae_stat;
  DAT_000d3dac = &_AePointPos;
  DAT_000d3dc0 = ae_comp_at_list;
  DAT_000d3dc8 = ae1_comp_ev_list;
  if (DAT_000b06f0 == 0) {
    DAT_000d3d78 = ae0_ev_list;
    DAT_000d3d7c = _lum_list;
    _DAT_000d3d80 = (char *)&_at_list;
    DAT_000d3da0 = _scene_para;
    DAT_000d3da4 = ae_scene_mode_th;
    DAT_000d3db8 = (char *)&ae_comp_param;
    DAT_000d3dc4 = ae_extra_at_list;
  }
  else {
    DAT_000d3d78 = ae0_ev_list_wdr;
    DAT_000d3d7c = _lum_list_wdr;
    _DAT_000d3d80 = _at_list_wdr;
    DAT_000d3da0 = _scene_para_wdr;
    DAT_000d3da4 = ae_scene_mode_th_wdr;
    DAT_000d3db8 = ae_comp_param_wdr;
    DAT_000d3dc4 = ae_extra_at_list_wdr;
  }
  IspAe1WmeanParam = &DAT_000d19cc;
  DAT_000d3dd0 = &DAT_000d1d50;
  DAT_000d3dd4 = &DAT_000d20d4;
  _DAT_000d3ddc = &DAT_000d2458;
  DAT_000d3de0 = &DAT_000d27dc;
  DAT_000d3de4 = &DAT_000d2b60;
  DAT_000d3de8 = &DAT_000d3668;
  DAT_000d3dec = &DAT_000d39ec;
  DAT_000d3df0 = _ae_parameter;
  DAT_000d3df4 = _ae_zone_weight;
  DAT_000d3df8 = _exp_parameter;
  DAT_000d3dfc = &_ae_stat;
  DAT_000d3e00 = _scene_roui_weight;
  DAT_000d3e04 = _scene_roi_weight;
  DAT_000d3e08 = _log2_lut;
  DAT_000d3e0c = _weight_lut;
  DAT_000d3e10 = &_AePointPos;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tiziano_ae_init_exp_th(void)

{
  int *puVar1;
  unsigned int *puVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  int uVar5;
  
  uVar4 = DAT_000b05dc;
  DAT_000cfc78 = &DAT_000b05dc;
  DAT_000cfc7c = &DAT_000b05e0;
  DAT_000cfc80 = &DAT_000b05e4;
  DAT_000cfc84 = &DAT_000b05e8;
  DAT_000cfc88 = &DAT_000b05ec;
  DAT_000cfc8c = &DAT_000b05f0;
  DAT_000cfc90 = &DAT_000b05f4;
  _IspAeExp = &ae_exp_th;
  if ((uint)sensor_ctrl._44_4_ < ae_exp_th) {
    ae_exp_th = sensor_ctrl._44_4_;
  }
  uVar3 = tisp_math_exp2(sensor_ctrl._32_4_,0x10,10);
  puVar1 = DAT_000cfc78;
  if (uVar3 < uVar4) {
    uVar5 = tisp_math_exp2(sensor_ctrl._32_4_,0x10,10);
    *puVar1 = uVar5;
  }
  uVar3 = *DAT_000cfc7c;
  uVar4 = tisp_math_exp2(sensor_ctrl._36_4_,0x10,10);
  puVar2 = DAT_000cfc7c;
  if (uVar4 < uVar3) {
    uVar4 = tisp_math_exp2(sensor_ctrl._36_4_,0x10,10);
    *puVar2 = uVar4;
  }
  if (*DAT_000cfc84 < (uint)sensor_ctrl._40_4_) {
    *DAT_000cfc84 = sensor_ctrl._40_4_;
  }
  if (*DAT_000cfc88 < 0x400) {
    *DAT_000cfc88 = 0x400;
  }
  if (*DAT_000cfc8c < 0x400) {
    *DAT_000cfc8c = 0x400;
  }
  uVar4 = DAT_000b05fc;
  DAT_000d3e88 = *_IspAeExp;
  DAT_000d3e80 = *DAT_000cfc78;
  DAT_000d3e84 = *DAT_000cfc7c;
  DAT_000d3e8c = *DAT_000cfc80;
  DAT_000d3ee4 = *DAT_000cfc84;
  _DAT_000d3edc = *DAT_000cfc88;
  _DAT_000d3ee0 = *DAT_000cfc8c;
  _DAT_000d3ee8 = *DAT_000cfc90;
  DAT_000cfc94 = &DAT_000b05f8;
  DAT_000cfc98 = &DAT_000b05fc;
  DAT_000cfc9c = &DAT_000b0600;
  DAT_000cfca0 = &DAT_000b0604;
  DAT_000cfca4 = &DAT_000b0608;
  DAT_000cfca8 = &DAT_000b060c;
  DAT_000cfcac = &DAT_000b0610;
  DAT_000cfcb0 = &DAT_000b0614;
  if (DAT_000b06f0 == 1) {
    if ((uint)sensor_ctrl._84_4_ < DAT_000b05f8) {
      DAT_000b05f8 = sensor_ctrl._84_4_;
    }
    uVar3 = tisp_math_exp2(sensor_ctrl._88_4_,0x10,10);
    puVar1 = DAT_000cfc98;
    if (uVar3 < uVar4) {
      uVar5 = tisp_math_exp2(sensor_ctrl._88_4_,0x10,10);
      *puVar1 = uVar5;
    }
    if (0x400 < *DAT_000cfc9c) {
      *DAT_000cfc9c = 0x400;
    }
    if (*DAT_000cfca4 < (uint)sensor_ctrl._80_4_) {
      *DAT_000cfca4 = sensor_ctrl._80_4_;
    }
    if (*DAT_000cfca8 < 0x400) {
      *DAT_000cfca8 = 0x400;
    }
    if (*DAT_000cfcac < 0x400) {
      *DAT_000cfcac = 0x400;
    }
  }
  _DAT_000d3ec0 = *DAT_000cfc94;
  _DAT_000d3ebc = *DAT_000cfc98;
  _DAT_000d3ec4 = *DAT_000cfc9c;
  _DAT_000d3ec8 = *DAT_000cfca0;
  _DAT_000d3ef0 = *DAT_000cfca4;
  _DAT_000d3eec = *DAT_000cfca8;
  _DAT_000d3ef4 = *DAT_000cfcac;
  _DAT_000d3ef8 = *DAT_000cfcb0;
  return;
}



int tisp_ae_wdr_en(int param_1)

{
  IspAeFlag = 1;
  DAT_000b06d4 = 1;
  DAT_000b06e0 = 1;
  DAT_000b06e4 = 1;
  DAT_000b06e8 = 1;
  DAT_000b06f4 = 1;
  DAT_000b06f8 = 1;
  DAT_000b06ec = 0;
  DAT_000b0410 = (uint)DAT_000b2614;
  DAT_000b040c = (uint)DAT_000b2616;
  DAT_000b0408 = DAT_000b2604;
  DAT_000b06f0 = param_1;
  ae_wdr_en = param_1;
  tiziano_deflicker_expt(_flicker_t);
  tiziano_ae_init_exp_th();
  tiziano_ae_para_addr();
  tiziano_ae_set_hardware_param(0,_ae_parameter,1);
  tiziano_ae_set_hardware_param(1,_ae_parameter,1);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_ae_init(int param_1,int param_2,int param_3)

{
  int iVar1;
  int uVar2;
  unsigned int uVar3;
  
  memset(&tisp_ae_hist,0,0x42c);
  _DAT_000d478c = 0xf;
  _DAT_000d4790 = 0xf;
  _DAT_000d477c = 0xd;
  _DAT_000d4780 = 0x40;
  _DAT_000d4784 = 0x90;
  _DAT_000d4788 = 0xc0;
  memcpy(tisp_ae_hist_last,&tisp_ae_hist,0x42c);
  memset(&tisp_ae_ctrls,0,0x98);
  memset(ae_ctrls,0,0x10);
  tiziano_ae_params_refresh();
  tiziano_ae_init_exp_th();
  tiziano_ae_para_addr();
  *DAT_000cfc84 = param_3;
  tiziano_ae_set_hardware_param(0,DAT_000d3e38,0);
  tiziano_ae_set_hardware_param(1,DAT_000d3df0,0);
  if (ta_custom_en != 1) goto LAB_000642b8;
  iVar1 = tisp_set_sensor_integration_time(_ae_result);
  if (iVar1 != 0) goto LAB_00064164;
  tisp_set_sensor_analog_gain(DAT_000af5b0);
  if (DAT_000b06f0 == 0) {
    system_reg_write_ae(3,0x1030,DAT_000af5b4 << 0x10 | DAT_000af5b4);
    uVar2 = 0x1034;
    uVar3 = DAT_000af5b4 << 0x10 | DAT_000af5b4;
LAB_00064210:
    system_reg_write_ae(3,uVar2,uVar3);
  }
  else if (DAT_000b06f0 == 1) {
    system_reg_write_ae(3,0x1000,DAT_000af5b4 << 0x10 | DAT_000af5b4);
    uVar2 = 0x1004;
    uVar3 = DAT_000af5b4 << 0x10 | DAT_000af5b4;
    goto LAB_00064210;
  }
  DAT_000d3e90 = fix_point_mult3_32(_AePointPos,_ae_result << (_AePointPos & 0x1f),DAT_000af5b0,
                                    DAT_000af5b4);
  if (DAT_000b06f0 == 1) {
    iVar1 = tisp_set_sensor_integration_time_short(DAT_000af5b8);
    if (iVar1 != 0) {
LAB_00064164:
      isp_printf(2,"sorry,set integration time 0 failed!\n");
      return 0xffffffff;
    }
    tisp_set_sensor_analog_gain_short(DAT_000af5bc);
    system_reg_write_ae(3,0x100c,DAT_000af5c0 << 0x10 | DAT_000af5c0);
    system_reg_write_ae(3,0x1010,DAT_000af5c0 << 0x10 | DAT_000af5c0);
  }
LAB_000642b8:
  system_irq_func_set(0x1b,ae0_interrupt_hist);
  system_irq_func_set(0x1a,ae0_interrupt_static);
  system_irq_func_set(0x1d,ae1_interrupt_hist);
  system_irq_func_set(0x1c,ae1_interrupt_static);
  DAT_000b040c = (uint)DAT_000b2616;
  DAT_000b0410 = (uint)DAT_000b2614;
  DAT_000b0408 = DAT_000b2604;
  tiziano_deflicker_expt(_flicker_t);
  tisp_event_set_cb(1,tisp_ae0_process);
  tisp_event_set_cb(6,tisp_ae1_process);
  private_spin_lock_init(0x10000);
  private_spin_lock_init(0x10000);
  ae_comp_default = DAT_000b04f8;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_ae_min_max_set(void)

{
  int param_6;
  int param_7;
  int param_8;
  int param_9;
  int param_11;
  int param_12;
  int param_13;
  int param_14;
  int param_15;
  int param_16;
  int param_17;
  int param_18;
  int param_19;
  int param_20;
  int param_21;
  int param_22;
  
  DAT_000d3e80 = param_6;
  DAT_000d3e84 = param_7;
  DAT_000d3e88 = param_8;
  DAT_000d3e8c = param_9;
  _DAT_000d3ebc = param_11;
  _DAT_000d3ec0 = param_12;
  _DAT_000d3ec4 = param_13;
  _DAT_000d3ec8 = param_14;
  _DAT_000d3edc = param_15;
  _DAT_000d3ee0 = param_16;
  DAT_000d3ee4 = param_17;
  _DAT_000d3ee8 = param_18;
  _DAT_000d3eec = param_19;
  _DAT_000d3ef0 = param_20;
  _DAT_000d3ef4 = param_21;
  _DAT_000d3ef8 = param_22;
  DAT_000b06ec = 0;
  return 0;
}



void tiziano_ae_s_ev_start(int param_1)

{
  ae_ev_init_strict = param_1;
  ae_ev_init_en = 1;
  return;
}



int tisp_ae_state_get(int param_1)

{
  *(int *)(param_1 + 4) = _ae_stat;
  *(bool *)param_1 = DAT_000af59c != 0;
  *(int *)(param_1 + 8) = DAT_000af5a0;
  return 0;
}



int tisp_ae_manual_get(void *param_1)

{
  memcpy(param_1,&tisp_ae_ctrls,0x98);
  return 0;
}



int tisp_ae_manual_set(int param_1,unsigned int param_2,unsigned int param_3,int param_4,unsigned int param_5)

{
  int param_11;
  int param_12;
  int param_13;
  int param_14;
  int param_15;
  unsigned int param_16;
  unsigned int param_17;
  int param_18;
  unsigned int param_19;
  int param_20;
  unsigned int param_21;
  int param_22;
  int param_23;
  
  tisp_ae_ctrls = param_1;
  if (param_1 == 0) {
    DAT_000d3ea0 = param_11;
    if (param_11 != 0) {
      DAT_000d3e78 = param_4;
      isp_printf(0,"it_manual is %d:it is %d\n");
    }
    DAT_000d3ea4 = param_12;
    if (param_12 != 0) {
      DAT_000d3e70 = 0x400;
      if (0x3ff < param_2) {
        DAT_000d3e70 = param_2;
      }
      isp_printf(0,"ag_manual is %d:ag is %d\n",param_12,param_2);
    }
    DAT_000d3ea8 = param_13;
    if (param_13 != 0) {
      DAT_000d3e7c = 0x400;
      if (0x3ff < param_5) {
        DAT_000d3e7c = param_5;
      }
      isp_printf(0,"dg_manual is %d:isp dg is %d\n",param_13,param_5);
    }
    DAT_000d3efc = param_22;
    if (param_22 != 0) {
      DAT_000d3e74 = 0x400;
      if (0x3ff < param_3) {
        DAT_000d3e74 = param_3;
      }
      isp_printf(0,"sdg_manual is %d:sensor dg is %d\n",param_22,param_3);
    }
  }
  else {
    DAT_000d3e70 = 0x400;
    if (0x3ff < param_2) {
      DAT_000d3e70 = param_2;
    }
    DAT_000d3e7c = 0x400;
    if (0x3ff < param_5) {
      DAT_000d3e7c = param_5;
    }
    DAT_000d3e74 = 0x400;
    if (0x3ff < param_3) {
      DAT_000d3e74 = param_3;
    }
    DAT_000d3e78 = param_4;
    isp_printf(0,"ae_manual is %d:it is %d,ag is %d,sensor dgain is %d,isp dgain is %d\n",param_1,
               param_4,param_2,param_3,param_5);
  }
  DAT_000d3ecc = param_18;
  if (param_18 == 0) {
    DAT_000d3eac = param_14;
    if (param_14 != 0) {
      DAT_000d3eb8 = 0x400;
      if (0x3ff < param_17) {
        DAT_000d3eb8 = param_17;
      }
      isp_printf(0,"short it_manual is %d:it is %d\n",param_14,param_17);
    }
    DAT_000d3eb0 = param_15;
    if (param_15 != 0) {
      DAT_000d3eb4 = 0x400;
      if (0x3ff < param_16) {
        DAT_000d3eb4 = param_16;
      }
      isp_printf(0,"short ag_manual is %d:ag is %d\n",param_15,param_16);
    }
    DAT_000d3ed4 = param_20;
    if (param_20 != 0) {
      DAT_000d3ed8 = 0x400;
      if (0x3ff < param_21) {
        DAT_000d3ed8 = param_21;
      }
      isp_printf(0,"short dg_manual is %d:isp dg is %d\n",param_20,param_21);
    }
    DAT_000d3f00 = param_23;
    if (param_23 != 0) {
      DAT_000d3ed0 = 0x400;
      if (0x3ff < param_19) {
        DAT_000d3ed0 = param_19;
      }
      isp_printf(0," short sdg_manual is %d:sensor dg is %d\n",param_23,param_19);
    }
  }
  else {
    DAT_000d3eb4 = 0x400;
    if (0x3ff < param_16) {
      DAT_000d3eb4 = param_16;
    }
    DAT_000d3ed8 = 0x400;
    if (0x3ff < param_21) {
      DAT_000d3ed8 = param_21;
    }
    DAT_000d3ed0 = 0x400;
    if (0x3ff < param_19) {
      DAT_000d3ed0 = param_19;
    }
    DAT_000d3eb8 = param_17;
    isp_printf(0,"short ae_manual is %d:it is %d,ag is %d,sensor dgain is %d,isp dgain is %d\n",
               param_18,param_17,param_16,param_19,param_21);
  }
  DAT_000b06ec = 0;
  return 0;
}



int tisp_ae_get_y_zone(void *param_1)

{
  int local_18 [3];
  
  local_18[0] = 0;
  __private_spin_lock_irqsave(0x10000,local_18);
  memcpy(param_1,&DAT_000d32e4,900);
  private_spin_unlock_irqrestore(0x10000,local_18[0]);
  return 0;
}



// WARNING: Removing unreachable block (ram,0x00063770)
// WARNING: Removing unreachable block (ram,0x00063810)
// WARNING: Removing unreachable block (ram,0x00063778)
// WARNING: Removing unreachable block (ram,0x000637f4)

int tisp_ae_s_comp(unsigned int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  
  ae_comp_x = param_1 & 0xff;
  ae_comp_param = 1;
  if (ae_comp_x < 0x81) {
    DAT_000b04f8 = (int)(ae_comp_x * ae_comp_default) / 0x80;
  }
  else {
    DAT_000b04f8 = (ae_comp_x * 300) / 0x7f + ae_comp_default + -0x12e;
  }
  DAT_000b06e0 = 1;
  DAT_000b06e4 = 1;
  tiziano_ae_set_hardware_param(0,_ae_parameter,1);
  uVar2 = _ae_parameter._148_4_ << 0x14 | _ae_parameter._144_4_ << 0x10;
  if ((uint)_ae_parameter._140_4_ < 0xff) {
    uVar2 = uVar2 | _ae_parameter._136_4_;
    uVar1 = (uint)(_ae_parameter._140_4_ << 1) / 3 << 8;
  }
  else {
    uVar1 = _ae_parameter._140_4_ << 8 | _ae_parameter._136_4_;
  }
  system_reg_write_ae(2,0xa828,uVar1 | uVar2);
  return 0;
}



int tiziano_ae_dn_params_refresh(void)

{
  IspAeFlag = 1;
  DAT_000b06d4 = 1;
  DAT_000b06d8 = 1;
  DAT_000b06e0 = 1;
  DAT_000b06e4 = 1;
  DAT_000b06e8 = 1;
  DAT_000b06f4 = 1;
  DAT_000b06f8 = 1;
  DAT_000b06ec = 0;
  tiziano_ae_params_refresh();
  DAT_000b0410 = (uint)DAT_000b2614;
  DAT_000b040c = (uint)DAT_000b2616;
  DAT_000b0408 = DAT_000b2604;
  tiziano_deflicker_expt(_flicker_t);
  tiziano_ae_init_exp_th();
  tiziano_ae_para_addr();
  tiziano_ae_set_hardware_param(0,_ae_parameter,1);
  tiziano_ae_set_hardware_param(1,_ae_parameter,1);
  ae_comp_default = DAT_000b04f8;
  tisp_ae_s_comp((char)ae_comp_x);
  return 0;
}



void tisp_ae_g_comp(char *param_1)

{
  *param_1 = (char)ae_comp_x;
  return;
}



void tisp_ae_g_luma(char *param_1)

{
  int *piVar1;
  int iVar2;
  unsigned int uVar3;
  int iVar4;
  
  piVar1 = &tisp_ae_hist;
  iVar2 = 0;
  uVar3 = 0;
  do {
    iVar4 = *piVar1;
    piVar1 = piVar1 + 1;
    iVar4 = iVar2 * iVar4;
    iVar2 = iVar2 + 1;
    uVar3 = iVar4 + uVar3;
  } while (iVar2 != 0x100);
  *param_1 = (char)(uVar3 / (uint)((DAT_000b25dc * sensor_info) / 4));
  return;
}



void tisp_ae_g_scene_luma(unsigned int *param_1)

{
  int uVar1;
  int iVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  int *piVar5;
  int *piVar6;
  int iVar7;
  char bVar8;
  int *piVar9;
  unsigned int uVar10;
  char local_20 [8];
  
  uVar3 = _AePointPos;
  uVar4 = ((uint)(_ae_parameter._152_4_ * tisp_ae_hist) >> 2) +
          ((uint)(DAT_000d4764 * _ae_parameter._156_4_) >> 2);
  uVar10 = (DAT_000b25dc * sensor_info) / 4;
  iVar7 = uVar10 - uVar4;
  if (uVar10 <= uVar4) {
    iVar7 = 1;
  }
  uVar1 = fix_point_div_32(_AePointPos,iVar7 << (_AePointPos & 0x1f),uVar10 << (_AePointPos & 0x1f))
  ;
  iVar2 = fix_point_mult2_32(uVar3,(&ev0_cache)[_exp_parameter._40_4_ + 1],uVar1);
  bVar8 = 1;
  iVar7 = 1;
  if (iVar2 != 0) {
    iVar7 = iVar2;
  }
  tisp_ae_g_luma(local_20);
  if (local_20[0] == 0) {
    local_20[0] = bVar8;
  }
  piVar9 = &scene_luma_old;
  piVar5 = piVar9;
  do {
    piVar6 = piVar5 + 1;
    *piVar5 = piVar5[1];
    piVar5 = piVar6;
  } while ((unsigned int *)piVar6 != &DAT_000af418);
  uVar3 = fix_point_div_32(uVar3,iVar7,(uint)local_20[0] << (uVar3 & 0x1f));
  DAT_000af418 = uVar3 >> 2;
  iVar7 = 0;
  scene_luma_wmean = 0;
  do {
    iVar2 = *piVar9;
    iVar7 = iVar7 + 1;
    piVar9 = piVar9 + 1;
    scene_luma_wmean = iVar7 * iVar2 + scene_luma_wmean;
  } while (iVar7 != 8);
  scene_luma_weight = 0x24;
  *param_1 = scene_luma_wmean / 0x24;
  return;
}



int tisp_ae0_process_impl(void)

{
  bool bVar1;
  bool bVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  int iVar5;
  int uVar6;
  int uVar7;
  int *puVar8;
  int iVar9;
  int *puVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int *puVar14;
  int *puVar15;
  int iVar16;
  char local_148 [216];
  char auStack_70 [8];
  int local_68;
  int local_60;
  int local_5c;
  int local_40;
  int local_3c;
  int local_38;
  int local_34;
  int *local_30;
  int local_2c;
  
  uVar3 = _AePointPos;
  local_38 = 0x4000400;
  local_34 = 0x4000400;
  local_40 = 1 << (_AePointPos & 0x1f);
  for (uVar4 = 0; uVar4 < 0x40; uVar4 = uVar4 + 1) {
    local_148[uVar4 + 0x94] = (&IspAeExp)[uVar4];
  }
  for (uVar4 = 0; uVar4 < 0x5c; uVar4 = uVar4 + 1) {
    local_148[uVar4 + 0x38] = *(char *)((int)&IspAeTuneParam + uVar4);
  }
  for (uVar4 = 0; uVar4 < 0x38; uVar4 = uVar4 + 1) {
    local_148[uVar4] = (&DAT_000d3e24)[uVar4];
  }
  local_3c = local_40;
  Tiziano_ae0_fpga(IspAe0WmeanParam,DAT_000d3e18,DAT_000d3e1c,DAT_000d3e20);
  if (ta_custom_en != 0) {
    return 0;
  }
  iVar5 = tisp_set_sensor_integration_time(_ae_reg);
  if (iVar5 != 0) {
    isp_printf(1,"sorry,set integration time 0 failed!\n");
    return 0xffffffff;
  }
  for (uVar4 = 0; uVar4 < 0x40; uVar4 = uVar4 + 1) {
    local_148[uVar4 + 0x4c] = (&IspAeExp)[uVar4];
  }
  for (uVar4 = 0; uVar4 < 0x4c; uVar4 = uVar4 + 1) {
    local_148[uVar4] = (&DAT_000d3d80)[uVar4];
  }
  tisp_set_ae0_ag(IspAeTuneParam,DAT_000d3d74,DAT_000d3d78,DAT_000d3d7c);
  uVar7 = _exp_parameter._40_4_;
  iVar12 = _exp_parameter._40_4_ + 1;
  puVar10 = &ev0_cache + _exp_parameter._40_4_;
  EffectFrame = _exp_parameter._40_4_;
  EffectCount0 = _exp_parameter._40_4_;
  puVar8 = &ad0_cache + _exp_parameter._40_4_;
  bVar2 = false;
  iVar5 = iVar12;
  while (bVar1 = 0 < iVar5, iVar5 = iVar5 + -1, bVar1) {
    puVar10[1] = *puVar10;
    puVar10 = puVar10 + -1;
    puVar8[1] = *puVar8;
    puVar8 = puVar8 + -1;
    bVar2 = true;
  }
  if (iVar12 < 0) {
    iVar12 = 0;
  }
  if (bVar2) {
    EffectCount0 = uVar7 - iVar12;
  }
  local_2c = 0xb0000;
  local_30 = (int *)0xb0000;
  uVar6 = fix_point_mult3_32(uVar3,_ae_reg << (uVar3 & 0x1f),DAT_000cfc60,DAT_000cfc64);
  uVar7 = DAT_000cfc64;
  *(int *)((int)local_30 + -0xadc) = uVar6;
  uVar7 = fix_point_mult2_32(uVar3,DAT_000cfc60,uVar7);
  *(int *)(local_2c + -0xb04) = uVar7;
  iVar5 = EffectFrame;
  iVar16 = EffectFrame * 4;
  puVar14 = &ag0_cache + EffectFrame;
  puVar15 = &dg0_cache + EffectFrame;
  EffectCount0 = EffectFrame;
  bVar2 = false;
  puVar8 = puVar15;
  puVar10 = puVar14;
  iVar12 = EffectFrame;
  while( true ) {
    if (iVar12 < 1) break;
    iVar12 = iVar12 + -1;
    *puVar10 = puVar10[-1];
    bVar2 = true;
    *puVar8 = puVar8[-1];
    puVar8 = puVar8 + -1;
    puVar10 = puVar10 + -1;
  }
  iVar12 = iVar5;
  if (-1 < iVar5) {
    iVar12 = 0;
  }
  if (bVar2) {
    EffectCount0 = iVar12;
  }
  ag0_cache = DAT_000cfc60;
  dg0_cache = DAT_000cfc64;
  iVar11 = EffectCount0;
  if (DAT_000b06f4 == 1) {
    DAT_000b06f4 = 0;
    iVar13 = 0;
    for (iVar11 = iVar5 + 1; iVar13 = iVar13 + -4, 0 < iVar11; iVar11 = iVar11 + -1) {
      iVar9 = iVar13 + iVar16;
      *(int *)(iVar9 + 0xaf52c) = *(int *)((int)local_30 + -0xadc);
      *(int *)(iVar9 + 0xaf504) = *(int *)(local_2c + -0xb04);
    }
    EffectCount0 = iVar5;
    iVar16 = 0;
    bVar2 = false;
    for (; 0 < iVar5; iVar5 = iVar5 + -1) {
      *(int *)((int)puVar14 + iVar16) = ag0_cache;
      *(int *)((int)puVar15 + iVar16) = dg0_cache;
      iVar16 = iVar16 + -4;
      bVar2 = true;
    }
    iVar11 = iVar12;
    if (bVar2) goto LAB_0006502c;
  }
  else {
LAB_0006502c:
    EffectCount0 = iVar11;
  }
  local_30 = &dg0_cache;
  memcpy(&_ae_result,&_ae_reg,0x18);
  JZ_Isp_Ae_Dg2reg(uVar3,&local_38,local_30[EffectFrame],&local_40);
  if (DAT_000b06f0 == 0) {
    system_reg_write_ae(3,0x1030,local_38);
    uVar7 = 0x1034;
  }
  else {
    if (DAT_000b06f0 != 1) goto LAB_0006515c;
    system_reg_write_ae(3,0x1000,local_38);
    uVar7 = 0x1004;
  }
  system_reg_write_ae(3,uVar7,local_34);
LAB_0006515c:
  tisp_ae_g_scene_luma(0xb06cc);
  local_68 = 7;
  local_60 = (&ev0_cache)[EffectFrame + 1];
  local_5c = 0;
  tisp_event_push(auStack_70);
  DAT_000d3e90 = local_60;
  total_gain_new = (&ad0_cache)[EffectFrame + 1] << 6;
  if ((total_gain_new != total_gain_old) || (tisp_ae_ctrls != 0)) {
    total_gain_old = total_gain_new;
    uVar7 = tisp_log2_fixed_to_fixed(total_gain_new,0x10,0x10);
    local_68 = 4;
    local_5c = 0;
    local_60 = uVar7;
    tisp_event_push(auStack_70);
    DAT_000d3e94 = uVar7;
  }
  again_new = (&ag0_cache)[EffectFrame] << 6;
  if ((again_new != again_old) || (tisp_ae_ctrls != 0)) {
    again_old = again_new;
    uVar7 = tisp_log2_fixed_to_fixed(again_new,0x10,0x10);
    local_68 = 5;
    local_5c = 0;
    local_60 = uVar7;
    tisp_event_push(auStack_70);
    DAT_000d3e98 = uVar7;
  }
  return 0;
}



int tisp_ae0_process(void)

{
  if (ta_custom_en == 0) {
    tisp_ae0_ctrls_update();
  }
  tisp_ae0_process_impl();
  if (ta_custom_en == 1) {
    private_complete(&ae_algo_comp);
  }
  return 0;
}



int tisp_ae_get_antiflicker_step(void *param_1,int *param_2)

{
  if (_deflicker_para == 1) {
    *param_2 = _nodes_num;
    memcpy(param_1,_deflick_lut,0x1e0);
    return 0;
  }
  return 0xffffffff;
}



int tisp_ae_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 1:
    __src = _ae_parameter;
    __n = 0xa8;
    goto LAB_000655bc;
  case 2:
    __src = (char *)&ae_exp_th;
    goto LAB_00065460;
  case 3:
    __src = (char *)&_AePointPos;
    __n = 8;
    goto LAB_000655bc;
  case 4:
    __src = _exp_parameter;
    goto LAB_00065444;
  case 5:
    __src = ae_ev_step;
    goto LAB_000654b0;
  case 6:
    __src = ae_stable_tol;
    goto LAB_0006553c;
  case 7:
    __src = ae0_ev_list;
    break;
  case 8:
    __src = _lum_list;
    break;
  case 9:
    __src = (char *)&_at_list;
    break;
  case 10:
    __src = (char *)&_deflicker_para;
    __n = 0xc;
    goto LAB_000655bc;
  case 0xb:
    __src = (char *)&_flicker_t;
    goto LAB_0006554c;
  case 0xc:
    __src = _scene_para;
    goto LAB_00065444;
  case 0xd:
    __src = ae_scene_mode_th;
    goto LAB_0006553c;
  case 0xe:
    __src = _log2_lut;
    goto LAB_00065460;
  case 0xf:
    __src = _weight_lut;
LAB_00065460:
    __n = 0x50;
    goto LAB_000655bc;
  case 0x10:
    __src = _ae_zone_weight;
    goto LAB_00065494;
  case 0x11:
    __src = _scene_roui_weight;
    goto LAB_00065494;
  case 0x12:
    __src = _scene_roi_weight;
LAB_00065494:
    __n = 900;
    goto LAB_000655bc;
  case 0x13:
    __src = (char *)&_ae_result;
    goto LAB_0006554c;
  case 0x14:
    __src = (char *)&_ae_stat;
LAB_000654b0:
    __n = 0x14;
    goto LAB_000655bc;
  case 0x15:
    __src = _ae_wm_q;
    __n = 0x3c;
    goto LAB_000655bc;
  case 0x16:
    __src = (char *)&ae_comp_param;
    goto LAB_0006554c;
  case 0x17:
    __src = ae_comp_ev_list;
    break;
  case 0x18:
    __src = ae_comp_at_list;
    break;
  case 0x19:
    __src = ae_extra_at_list;
    break;
  case 0x1a:
    __src = (char *)&ae1_ev_list;
    break;
  case 0x1b:
    __src = ae0_ev_list_wdr;
    break;
  case 0x1c:
    __src = _lum_list_wdr;
    break;
  case 0x1d:
    __src = _at_list_wdr;
    break;
  case 0x1e:
    __src = _scene_para_wdr;
LAB_00065444:
    __n = 0x2c;
    goto LAB_000655bc;
  case 0x1f:
    __src = ae_scene_mode_th_wdr;
LAB_0006553c:
    __n = 0x10;
    goto LAB_000655bc;
  case 0x20:
    __src = ae_comp_param_wdr;
LAB_0006554c:
    __n = 0x18;
    goto LAB_000655bc;
  case 0x21:
    __src = ae_extra_at_list_wdr;
    break;
  case 0x22:
    __src = ae1_comp_ev_list;
    break;
  default:
    isp_printf(2,"%s,%d: ae not support param id %d\n","tisp_ae_param_array_get",0xe95,param_1);
    return 0xffffffff;
  }
  __n = 0x28;
LAB_000655bc:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_ae_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  char *puVar2;
  
  switch(param_1) {
  case 1:
    memcpy(_ae_parameter,param_2,0xa8);
    uVar1 = 0xa8;
    break;
  case 2:
    puVar2 = (char *)&ae_exp_th;
    goto LAB_000657a0;
  case 3:
    memcpy(&_AePointPos,param_2,8);
    uVar1 = 8;
    break;
  case 4:
    puVar2 = _exp_parameter;
    goto LAB_0006576c;
  case 5:
    memcpy(ae_ev_step,param_2,0x14);
  case 0x14:
    uVar1 = 0x14;
    break;
  case 6:
    puVar2 = ae_stable_tol;
    goto LAB_00065888;
  case 7:
    puVar2 = ae0_ev_list;
    goto LAB_000658d0;
  case 8:
    puVar2 = _lum_list;
    goto LAB_000658d0;
  case 9:
    puVar2 = (char *)&_at_list;
    goto LAB_000658d0;
  case 10:
    memcpy(&_deflicker_para,param_2,0xc);
    uVar1 = 0xc;
    break;
  case 0xb:
    memcpy(&_flicker_t,param_2,0x18);
    tiziano_deflicker_expt
              (_flicker_t,DAT_000b0408,DAT_000b040c,DAT_000b0410,_deflick_lut,&_nodes_num);
    uVar1 = 0x18;
    break;
  case 0xc:
    puVar2 = _scene_para;
    goto LAB_0006576c;
  case 0xd:
    puVar2 = ae_scene_mode_th;
    goto LAB_00065888;
  case 0xe:
    puVar2 = _log2_lut;
    goto LAB_000657a0;
  case 0xf:
    puVar2 = _weight_lut;
LAB_000657a0:
    memcpy(puVar2,param_2,0x50);
    uVar1 = 0x50;
    break;
  case 0x10:
    puVar2 = _ae_zone_weight;
    goto LAB_000657f4;
  case 0x11:
    puVar2 = _scene_roui_weight;
    goto LAB_000657f4;
  case 0x12:
    puVar2 = _scene_roi_weight;
LAB_000657f4:
    memcpy(puVar2,param_2,900);
    uVar1 = 900;
    break;
  case 0x13:
    uVar1 = 0x18;
    break;
  case 0x15:
    uVar1 = 0x3c;
    break;
  case 0x16:
    puVar2 = (char *)&ae_comp_param;
    goto LAB_000658ac;
  case 0x17:
  case 0x18:
    goto switchD_00065624_caseD_17;
  case 0x19:
    puVar2 = ae_extra_at_list;
    goto LAB_000658d0;
  case 0x1a:
    puVar2 = (char *)&ae1_ev_list;
    goto LAB_000658d0;
  case 0x1b:
    puVar2 = ae0_ev_list_wdr;
    goto LAB_000658d0;
  case 0x1c:
    puVar2 = _lum_list_wdr;
    goto LAB_000658d0;
  case 0x1d:
    puVar2 = _at_list_wdr;
    goto LAB_000658d0;
  case 0x1e:
    puVar2 = _scene_para_wdr;
LAB_0006576c:
    memcpy(puVar2,param_2,0x2c);
    uVar1 = 0x2c;
    break;
  case 0x1f:
    puVar2 = ae_scene_mode_th_wdr;
LAB_00065888:
    memcpy(puVar2,param_2,0x10);
    uVar1 = 0x10;
    break;
  case 0x20:
    puVar2 = ae_comp_param_wdr;
LAB_000658ac:
    memcpy(puVar2,param_2,0x18);
    uVar1 = 0x18;
    break;
  case 0x21:
    puVar2 = ae_extra_at_list_wdr;
    goto LAB_000658d0;
  case 0x22:
    puVar2 = ae1_comp_ev_list;
LAB_000658d0:
    memcpy(puVar2,param_2,0x28);
switchD_00065624_caseD_17:
    uVar1 = 0x28;
    break;
  default:
    isp_printf(2,"%s,%d: ae not support param id %d\n","tisp_ae_param_array_set",0xf4c,param_1);
    return 0xffffffff;
  }
  *param_3 = uVar1;
  DAT_000b06e0 = 1;
  DAT_000b06e4 = 1;
  DAT_000b06ec = 0;
  tiziano_ae_set_hardware_param(0,_ae_parameter,1);
  tiziano_ae_set_hardware_param(1,_ae_parameter,1);
  return 0;
}



// WARNING: Removing unreachable block (ram,0x00063770)
// WARNING: Removing unreachable block (ram,0x00063810)
// WARNING: Removing unreachable block (ram,0x00063778)
// WARNING: Removing unreachable block (ram,0x000637f4)

int tisp_ae_trig(void)

{
  unsigned int uVar1;
  unsigned int uVar2;
  
  DAT_000b06e0 = 1;
  DAT_000b06e4 = 1;
  DAT_000b06e8 = 1;
  DAT_000b06ec = 0;
  tiziano_ae_set_hardware_param(0,_ae_parameter,1);
  uVar2 = _ae_parameter._148_4_ << 0x14 | _ae_parameter._144_4_ << 0x10;
  if ((uint)_ae_parameter._140_4_ < 0xff) {
    uVar2 = uVar2 | _ae_parameter._136_4_;
    uVar1 = (uint)(_ae_parameter._140_4_ << 1) / 3 << 8;
  }
  else {
    uVar1 = _ae_parameter._140_4_ << 8 | _ae_parameter._136_4_;
  }
  system_reg_write_ae(2,0xa828,uVar1 | uVar2);
  return 0;
}



void tisp_ae_deinit(void)

{
  if (ta_custom_en == 1) {
    ta_custom_en = 0;
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tisp_ae_algo_init(int param_1,int param_2)

{
  int uVar1;
  int iVar2;
  
  iVar2 = private_kmalloc(0x42c,0xd0);
  ta_custom_en = param_1;
  if (param_1 == 1) {
    *(int *)(param_2 + 8) = 0;
    *(int *)(param_2 + 0xc) = DAT_000d3e78;
    *(int *)(param_2 + 0x10) = DAT_000d3e70;
    uVar1 = DAT_000d3e7c;
    *(int *)(param_2 + 0x14) = 0x400;
    *(int *)(param_2 + 0x18) = uVar1;
    *(int *)(param_2 + 0x3c) = DAT_000d3eb8;
    uVar1 = DAT_000d3eb4;
    *(int *)(param_2 + 0x44) = 0x400;
    *(int *)(param_2 + 0x40) = uVar1;
    uVar1 = DAT_000d3ed8;
    *(int *)(param_2 + 0x34) = 0x400;
    *(int *)(param_2 + 0x48) = uVar1;
    uVar1 = DAT_000d3e80;
    *(int *)(param_2 + 100) = 0x400;
    *(int *)(param_2 + 0x30) = uVar1;
    *(int *)(param_2 + 0x2c) = DAT_000d3e88;
    *(int *)(param_2 + 0x38) = DAT_000d3e8c;
    *(int *)(param_2 + 0x60) = _DAT_000d3ebc;
    *(int *)(param_2 + 0x5c) = _DAT_000d3ec0;
    *(int *)(param_2 + 0x68) = _DAT_000d3ec8;
    uVar1 = _DAT_000d3edc;
    *(int *)(param_2 + 0x24) = 0x400;
    *(int *)(param_2 + 0x20) = uVar1;
    *(int *)(param_2 + 0x1c) = DAT_000d3ee4;
    *(int *)(param_2 + 0x28) = _DAT_000d3ee8;
    *(int *)(param_2 + 0x50) = _DAT_000d3eec;
    uVar1 = _DAT_000d3ef0;
    *(int *)(param_2 + 0x54) = 0x400;
    *(int *)(param_2 + 0x4c) = uVar1;
    *(int *)(param_2 + 0x58) = _DAT_000d3ef8;
    tisp_ae_get_hist_custome(iVar2);
    *(char *)(param_2 + 0x70) = (char)*(int *)(iVar2 + 0x414);
    *(char *)(param_2 + 0x71) = (char)*(int *)(iVar2 + 0x418);
    *(char *)(param_2 + 0x72) = (char)*(int *)(iVar2 + 0x41c);
    *(char *)(param_2 + 0x73) = (char)*(int *)(iVar2 + 0x420);
    *(short *)(param_2 + 0x74) = (short)*(int *)(iVar2 + 0x400);
    *(short *)(param_2 + 0x76) = (short)*(int *)(iVar2 + 0x404);
    *(short *)(param_2 + 0x78) = (short)*(int *)(iVar2 + 0x408);
    *(short *)(param_2 + 0x7a) = (short)*(int *)(iVar2 + 0x40c);
    *(short *)(param_2 + 0x7c) = (short)*(int *)(iVar2 + 0x410);
    *(char *)(param_2 + 0x7e) = (char)*(int *)(iVar2 + 0x424);
    *(char *)(param_2 + 0x7f) = (char)*(int *)(iVar2 + 0x428);
  }
  private_kfree(iVar2);
  return;
}



void tisp_ae_algo_handle(int param_1)

{
  int *piVar1;
  int iVar2;
  int uVar3;
  int uVar4;
  unsigned int uVar5;
  int uVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  code *pcVar9;
  int iVar10;
  unsigned int uVar11;
  unsigned int uVar12;
  int iVar13;
  char auStack_158 [10];
  char auStack_14e [16];
  short local_13e;
  short local_13c;
  char auStack_f8 [8];
  int local_f0;
  int local_e8;
  int local_e4;
  char auStack_c8 [8];
  int local_c0;
  int local_b8;
  int local_b4;
  char auStack_98 [8];
  int local_90;
  int local_88;
  int local_84;
  short local_68 [7];
  short local_5a;
  code *local_50;
  code *local_4c;
  code *local_48;
  code *local_44;
  code *local_40;
  code *local_3c;
  int local_38;
  code *local_34;
  code *local_30;
  code *local_2c;
  
  uVar6 = sensor_ctrl._136_4_;
  uVar4 = sensor_ctrl._120_4_;
  local_30 = *(code **)(param_1 + 0x10);
  local_4c = (code *)sensor_ctrl._100_4_;
  iVar10 = *(int *)(param_1 + 0x14);
  local_40 = (code *)sensor_ctrl._104_4_;
  iVar13 = *(int *)(param_1 + 0x24);
  local_44 = (code *)sensor_ctrl._116_4_;
  local_3c = (code *)sensor_ctrl._124_4_;
  local_34 = (code *)sensor_ctrl._140_4_;
  local_48 = *(code **)(param_1 + 0x1c);
  local_50 = *(code **)(param_1 + 0x20);
  local_38 = *(int *)(param_1 + 0x2c);
  iVar2 = (*(code *)sensor_ctrl._112_4_)(local_30,auStack_14e);
  if (local_30 != (code *)iVar2) {
    uVar3 = fix_point_mult2_32(10,iVar10,(int)local_30 << 10);
    iVar10 = fix_point_div_32(10,uVar3,iVar2 << 10);
  }
  (*(code *)uVar4)(local_13e,auStack_158);
  local_2c = tisp_log2_fixed_to_fixed;
  DAT_000d3e78 = iVar2;
  uVar4 = tisp_log2_fixed_to_fixed(iVar10 << 6,0x10,0x10);
  uVar4 = (*local_4c)(uVar4,local_68);
  local_30 = tisp_math_exp2;
  uVar5 = tisp_math_exp2(uVar4,0x10,0x10);
  uVar11 = uVar5 >> 6;
  (*(code *)uVar6)(local_68[0],local_68);
  DAT_000d3e74 = 0x400;
  uVar4 = fix_point_mult2_32(10,*(int *)(param_1 + 0x14),*(int *)(param_1 + 0x18));
  uVar6 = fix_point_mult2_32(10,uVar11,0x400);
  uVar4 = fix_point_div_32(10,uVar4,uVar6);
  uVar7 = fix_point_mult2_32(10,local_48,uVar4);
  local_48 = (code *)&DAT_000d0000;
  uVar8 = uVar7 << 0x10 | uVar7;
  local_4c = local_2c;
  local_2c = (code *)uVar8;
  if (ae_wdr_en == 0) {
    system_reg_write_ae(3,0x1030);
    uVar4 = 0x1034;
  }
  else {
    system_reg_write_ae(3,0x1000,uVar8);
    uVar4 = 0x1004;
  }
  system_reg_write_ae(3,uVar4,local_2c);
  local_2c = fix_point_mult3_32;
  DAT_000d3e7c = uVar7;
  uVar4 = fix_point_mult3_32(10,iVar2 << 10,uVar11,0x400);
  iVar2 = fix_point_mult2_32(10,uVar4,uVar7);
  iVar10 = (*local_2c)(10,uVar11,0x400,uVar7);
  piVar1 = (int *)(local_48 + 0x3f30);
  local_48 = local_2c;
  if (*piVar1 == 1) {
    pcVar9 = (code *)(*local_44)(local_50,auStack_14e);
    local_44 = (code *)((int)pcVar9 << 10);
    if (local_50 != pcVar9) {
      local_2c = pcVar9;
      uVar4 = fix_point_mult2_32(10,iVar13,(int)local_50 << 10);
      iVar13 = fix_point_div_32(10,uVar4,local_44);
      pcVar9 = local_2c;
    }
    local_50 = pcVar9;
    (*local_3c)(local_13c,auStack_158);
    DAT_000d3eb8 = local_50;
    uVar4 = (*local_4c)(iVar13 << 6,0x10,0x10);
    uVar4 = (*local_40)(uVar4,local_68);
    uVar7 = (*local_30)(uVar4,0x10,0x10);
    uVar7 = uVar7 >> 6;
    (*local_34)(local_5a,local_68);
    DAT_000d3ed0 = 0x400;
    uVar4 = fix_point_mult2_32(10,*(int *)(param_1 + 0x24),*(int *)(param_1 + 0x28));
    uVar6 = fix_point_mult2_32(10,uVar7,0x400);
    uVar4 = fix_point_div_32(10,uVar4,uVar6);
    uVar8 = fix_point_mult2_32(10,local_38,uVar4);
    uVar12 = uVar8 << 0x10 | uVar8;
    system_reg_write_ae(3,0x100c,uVar12);
    system_reg_write_ae(3,0x1010,uVar12);
    DAT_000d3ed8 = uVar8;
    uVar4 = (*local_48)(10,local_44,uVar7,0x400);
    fix_point_mult2_32(10,uVar4,uVar8);
    (*local_48)(10,uVar7,0x400,uVar8);
  }
  if (iVar2 != ta_custom_ev) {
    local_90 = 7;
    local_84 = 0;
    local_88 = iVar2;
    tisp_event_push(auStack_98);
    DAT_000d3e90 = local_88;
    ta_custom_ev = iVar2;
  }
  if (iVar10 != ta_custom_tgain) {
    uVar4 = (*local_4c)(iVar10 << 6,0x10,0x10);
    local_c0 = 4;
    local_b4 = 0;
    local_b8 = uVar4;
    tisp_event_push(auStack_c8);
    DAT_000d3e94 = uVar4;
    ta_custom_tgain = iVar10;
  }
  if (uVar11 != ta_custom_again) {
    uVar4 = (*local_4c)(uVar5 & 0xffffffc0,0x10,0x10);
    local_f0 = 5;
    local_e4 = 0;
    local_e8 = uVar4;
    tisp_event_push(auStack_f8);
    DAT_000d3e70 = uVar11;
    DAT_000d3e98 = uVar4;
    ta_custom_again = uVar11;
  }
  return;
}



void tisp_af_get_statistics(unsigned int *param_1,int param_2,int param_3)

{
  unsigned int *puVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  unsigned int *puVar5;
  int iVar6;
  
  iVar6 = 0;
  puVar5 = param_1;
  for (iVar4 = 0; iVar4 != param_2; iVar4 = iVar4 + 1) {
    puVar1 = puVar5;
    for (iVar3 = 0; iVar2 = iVar6 + iVar3, param_3 << 2 != iVar3; iVar3 = iVar3 + 4) {
      *(unsigned int *)((int)&af_array_fird0 + iVar2) = *puVar1 & 0x3fffff;
      *(unsigned int *)((int)&af_array_fird1 + iVar2) = (puVar1[1] & 0xfff) << 10 | *puVar1 >> 0x16;
      *(unsigned int *)((int)&af_array_iird0 + iVar2) = (puVar1[2] & 3) << 0x14 | puVar1[1] >> 0xc;
      *(unsigned int *)((int)&af_array_iird1 + iVar2) = (puVar1[2] & 0xfffffc) >> 2;
      *(unsigned int *)((int)&af_array_y_sum + iVar2) =
           (puVar1[3] & 0x7fff) << 8 | (uint)*(char *)((int)puVar1 + 0xb);
      *(unsigned int *)((int)&af_array_high_luma_cnt + iVar2) = (puVar1[3] & 0x3fff1000) >> 0xf;
      puVar1 = puVar1 + 4;
    }
    puVar5 = puVar5 + param_3 * 4;
    iVar6 = iVar6 + 0x3c;
  }
  frame_num = *(char *)((int)param_1 + 0x3f) & 0xc0 | (char)((param_1[0xb] >> 0x1e) << 4) |
              (char)(param_1[3] >> 0x1e) | (char)((param_1[7] >> 0x1e) << 2);
  return;
}



void Tiziano_af_fpga(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6,
                    int param_7,int param_8,int *param_9,int param_10,int *param_11)

{
  int *puVar1;
  int *puVar2;
  unsigned int uVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  unsigned int uVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  int iVar10;
  code *pcVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  unsigned int uVar15;
  unsigned int uVar16;
  int local_88 [2];
  int local_80;
  int local_7c;
  unsigned int local_78;
  int *local_74;
  int local_70;
  int local_6c;
  int local_68;
  int local_64;
  int local_60;
  char *local_5c;
  int local_58;
  int local_54;
  int local_50;
  int local_4c;
  int local_48;
  int local_44;
  int local_40;
  int local_3c;
  unsigned int local_38;
  int *local_34;
  int local_30;
  
  local_80 = *(int *)(param_1 + 4);
  local_7c = *(int *)(param_1 + 0xc);
  uVar9 = param_11[4];
  iVar6 = *param_11;
  iVar14 = param_11[1];
  local_74 = (int *)param_5;
  iVar13 = param_11[2];
  iVar12 = param_11[3];
  local_64 = 1 << (uVar9 & 0x1f);
  local_70 = param_8;
  local_68 = local_64 - iVar6;
  local_64 = local_64 - iVar14;
  local_60 = 0x20000;
  uVar3 = 0;
  uVar7 = 0;
  uVar8 = 0;
  local_5c = fv_value;
  local_78 = param_4;
  for (iVar5 = 0; iVar5 != local_80; iVar5 = iVar5 + 1) {
    local_6c = iVar5 * 0x3c;
    iVar4 = 0;
    while (iVar4 != local_7c) {
      local_50 = local_6c + iVar4 * 4;
      local_44 = *(int *)((int)local_74 + local_50);
      local_58 = *(int *)(param_2 + local_50);
      iVar10 = *(int *)(param_3 + local_50);
      pcVar11 = (code *)(local_60 + 0xe24);
      local_54 = iVar6;
      local_4c = param_3;
      local_48 = param_2;
      local_40 = iVar4;
      local_3c = iVar5;
      local_38 = uVar3;
      local_34 = param_9;
      local_30 = param_10;
      iVar5 = (*pcVar11)(uVar9,*(int *)(local_78 + local_50) << (uVar9 & 0x1f),iVar6);
      iVar6 = (*pcVar11)(uVar9,local_58 << (uVar9 & 0x1f),local_68);
      local_58 = (*pcVar11)(uVar9,local_44 << (uVar9 & 0x1f),iVar14);
      iVar4 = (*pcVar11)(uVar9,iVar10 << (uVar9 & 0x1f),local_64);
      uVar3 = local_58 + iVar4;
      local_58 = (*pcVar11)(uVar9,iVar5 + iVar6 << (uVar9 & 0x1f),iVar13);
      iVar4 = (*pcVar11)(uVar9,uVar3 << (uVar9 & 0x1f),iVar12);
      *(unsigned int *)(local_5c + local_50) = (uint)(local_58 + iVar4) >> (uVar9 & 0x1f);
      iVar4 = *(int *)(local_70 + local_50);
      uVar8 = ((uint)(iVar5 + iVar6) >> (uVar9 & 0x1f)) * iVar4 + uVar8;
      uVar7 = (uVar3 >> (uVar9 & 0x1f)) * iVar4 + uVar7;
      uVar3 = local_38 + iVar4;
      iVar5 = local_3c;
      param_9 = local_34;
      param_10 = local_30;
      iVar6 = local_54;
      param_2 = local_48;
      param_3 = local_4c;
      iVar4 = local_40 + 1;
    }
  }
  local_78 = uVar3;
  local_74 = param_9;
  local_70 = param_10;
  __private_spin_lock_irqsave(0x10000,local_88);
  memcpy(fv_value_last,fv_value,900);
  private_spin_unlock_irqrestore(0x10000,local_88[0]);
  uVar15 = uVar8 / local_78;
  uVar16 = uVar7 / local_78;
  iVar5 = fix_point_mult2_32(uVar9,uVar15 << (uVar9 & 0x1f),iVar13);
  iVar6 = fix_point_mult2_32(uVar9,uVar16 << (uVar9 & 0x1f),iVar12);
  uVar3 = (uint)(iVar5 + iVar6) >> (uVar9 & 0x1f);
  iVar5 = fix_point_mult2_32(uVar9,(uVar8 >> 3) << (uVar9 & 0x1f),iVar13);
  iVar6 = fix_point_mult2_32(uVar9,(uVar7 >> 3) << (uVar9 & 0x1f),iVar12);
  puVar1 = (int *)(local_70 + 4);
  do {
    puVar2 = puVar1 + 1;
    puVar1[-1] = *puVar1;
    puVar1 = puVar2;
  } while ((int *)(local_70 + 0x3c) != puVar2);
  *(unsigned int *)(local_70 + 0x38) = uVar3;
  local_80 = local_80 * local_7c;
  *local_74 = uVar15 * local_80;
  local_74[1] = uVar16 * local_80;
  local_74[2] = uVar3 * local_80;
  AFParam_Fv_Alt = (uint)(iVar5 + iVar6) >> (uVar9 & 0x1f);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_af_process_impl(void)

{
  unsigned int uVar1;
  char local_30 [44];
  
  IspAfStaticParam = &stAFParam_Zone;
  DAT_000d5cc0 = &af_array_fird0;
  DAT_000d5cc4 = &af_array_fird1;
  DAT_000d5cc8 = &af_array_iird0;
  _DAT_000d5ccc = &af_array_iird1;
  DAT_000d5cd0 = &af_array_y_sum;
  DAT_000d5cd4 = &af_array_high_luma_cnt;
  DAT_000d5cd8 = AFWeight_Param;
  DAT_000d5cdc = &AFParam_Fv;
  DAT_000d5ce0 = AFParam_FvWmean;
  DAT_000d5ce4 = &AFParam_Tilt;
  DAT_000d5ce8 = &AFParam_PointPos;
  for (uVar1 = 0; uVar1 < 0x28; uVar1 = uVar1 + 1) {
    local_30[uVar1] = (&DAT_000d5ccc)[uVar1];
  }
  Tiziano_af_fpga(&stAFParam_Zone,&af_array_fird0,&af_array_fird1,&af_array_iird0);
  return 0;
}



int af_interrupt_static(void)

{
  int iVar1;
  
  iVar1 = system_reg_read(0xb8bc);
  private_dma_cache_sync(0,iVar1 * 0x1000 + DAT_000b2750,0x1000,0);
  tisp_af_get_statistics(iVar1 * 0x1000 + DAT_000b2750,DAT_000b0c5c,DAT_000b0c64);
  tisp_af_process_impl();
  return 1;
}



int tiziano_af_params_refresh(void)

{
  memcpy(&stAFParam_Zone,&DAT_000a603c,0x90);
  memcpy(&stAFParam_ThresEnable,&DAT_000a60cc,0x34);
  memcpy(&stAFParam_FIR0_V,&DAT_000a6100,0x14);
  memcpy(&stAFParam_FIR0_Ldg,&DAT_000a6114,0x20);
  memcpy(&stAFParam_FIR0_Coring,&DAT_000a6134,0x10);
  memcpy(&stAFParam_FIR1_V,&DAT_000a6144,0x14);
  memcpy(&stAFParam_FIR1_Ldg,&DAT_000a6158,0x20);
  memcpy(&stAFParam_FIR1_Coring,&DAT_000a6178,0x10);
  memcpy(&stAFParam_IIR0_H,&DAT_000a6188,0x28);
  memcpy(&stAFParam_IIR0_Ldg,&DAT_000a61b0,0x20);
  memcpy(&stAFParam_IIR0_Coring,&DAT_000a61d0,0x10);
  memcpy(&stAFParam_IIR1_H,&DAT_000a61e0,0x28);
  memcpy(&stAFParam_IIR1_Ldg,&DAT_000a6208,0x20);
  memcpy(&stAFParam_IIR1_Coring,&DAT_000a6228,0x10);
  memcpy(&AFParam_PointPos,&DAT_000a6238,8);
  memcpy(&AFParam_Tilt,&DAT_000a6240,0x14);
  memcpy(AFParam_FvWmean,&DAT_000a6254,0x3c);
  memcpy(&AFParam_Fv,&DAT_000a6290,0xc);
  memcpy(AFWeight_Param,&DAT_000a629c,900);
  return 0;
}



void tiziano_af_dump(void)

{
  int uVar1;
  
  isp_printf(2,"-----af regs dump-----\n");
  uVar1 = system_reg_read(0xb804);
  isp_printf(2,"0x%x: 0x%xx\n",0xb804,uVar1);
  uVar1 = system_reg_read(0xb808);
  isp_printf(2,"0x%x: 0x%xx\n",0xb808,uVar1);
  uVar1 = system_reg_read(0xb80c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb80c,uVar1);
  uVar1 = system_reg_read(0xb810);
  isp_printf(2,"0x%x: 0x%xx\n",0xb810,uVar1);
  uVar1 = system_reg_read(0xb814);
  isp_printf(2,"0x%x: 0x%xx\n",0xb814,uVar1);
  uVar1 = system_reg_read(0xb818);
  isp_printf(2,"0x%x: 0x%xx\n",0xb818,uVar1);
  uVar1 = system_reg_read(0xb81c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb81c,uVar1);
  uVar1 = system_reg_read(0xb820);
  isp_printf(2,"0x%x: 0x%xx\n",0xb820,uVar1);
  uVar1 = system_reg_read(0xb824);
  isp_printf(2,"0x%x: 0x%xx\n",0xb824,uVar1);
  uVar1 = system_reg_read(0xb828);
  isp_printf(2,"0x%x: 0x%xx\n",0xb828,uVar1);
  uVar1 = system_reg_read(0xb82c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb82c,uVar1);
  uVar1 = system_reg_read(0xb830);
  isp_printf(2,"0x%x: 0x%xx\n",0xb830,uVar1);
  uVar1 = system_reg_read(0xb834);
  isp_printf(2,"0x%x: 0x%xx\n",0xb834,uVar1);
  uVar1 = system_reg_read(0xb838);
  isp_printf(2,"0x%x: 0x%xx\n",0xb838,uVar1);
  uVar1 = system_reg_read(0xb83c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb83c,uVar1);
  uVar1 = system_reg_read(0xb840);
  isp_printf(2,"0x%x: 0x%xx\n",0xb840,uVar1);
  uVar1 = system_reg_read(0xb844);
  isp_printf(2,"0x%x: 0x%xx\n",0xb844,uVar1);
  uVar1 = system_reg_read(0xb848);
  isp_printf(2,"0x%x: 0x%xx\n",0xb848,uVar1);
  uVar1 = system_reg_read(0xb84c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb84c,uVar1);
  uVar1 = system_reg_read(0xb850);
  isp_printf(2,"0x%x: 0x%xx\n",0xb850,uVar1);
  uVar1 = system_reg_read(0xb854);
  isp_printf(2,"0x%x: 0x%xx\n",0xb854,uVar1);
  uVar1 = system_reg_read(0xb858);
  isp_printf(2,"0x%x: 0x%xx\n",0xb858,uVar1);
  uVar1 = system_reg_read(0xb85c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb85c,uVar1);
  uVar1 = system_reg_read(0xb860);
  isp_printf(2,"0x%x: 0x%xx\n",0xb860,uVar1);
  uVar1 = system_reg_read(0xb864);
  isp_printf(2,"0x%x: 0x%xx\n",0xb864,uVar1);
  uVar1 = system_reg_read(0xb868);
  isp_printf(2,"0x%x: 0x%xx\n",0xb868,uVar1);
  uVar1 = system_reg_read(0xb86c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb86c,uVar1);
  uVar1 = system_reg_read(0xb870);
  isp_printf(2,"0x%x: 0x%xx\n",0xb870,uVar1);
  uVar1 = system_reg_read(0xb874);
  isp_printf(2,"0x%x: 0x%xx\n",0xb874,uVar1);
  uVar1 = system_reg_read(0xb878);
  isp_printf(2,"0x%x: 0x%xx\n",0xb878,uVar1);
  uVar1 = system_reg_read(0xb87c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb87c,uVar1);
  uVar1 = system_reg_read(0xb880);
  isp_printf(2,"0x%x: 0x%xx\n",0xb880,uVar1);
  uVar1 = system_reg_read(0xb884);
  isp_printf(2,"0x%x: 0x%xx\n",0xb884,uVar1);
  uVar1 = system_reg_read(0xb888);
  isp_printf(2,"0x%x: 0x%xx\n",0xb888,uVar1);
  uVar1 = system_reg_read(0xb88c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb88c,uVar1);
  uVar1 = system_reg_read(0xb890);
  isp_printf(2,"0x%x: 0x%xx\n",0xb890,uVar1);
  uVar1 = system_reg_read(0xb894);
  isp_printf(2,"0x%x: 0x%xx\n",0xb894,uVar1);
  uVar1 = system_reg_read(0xb898);
  isp_printf(2,"0x%x: 0x%xx\n",0xb898,uVar1);
  uVar1 = system_reg_read(0xb89c);
  isp_printf(2,"0x%x: 0x%xx\n",0xb89c,uVar1);
  uVar1 = system_reg_read(0xb8a0);
  isp_printf(2,"0x%x: 0x%xx\n",0xb8a0,uVar1);
  uVar1 = system_reg_read(0xb8a4);
  isp_printf(2,"0x%x: 0x%xx\n",0xb8a4,uVar1);
  return;
}



void system_reg_write_af(int param_1,int param_2,int param_3)

{
  if (param_1 == 1) {
    system_reg_write(0xb800,1);
  }
  system_reg_write(param_2,param_3);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_af_set_hardware_param(void)

{
  unsigned int uVar1;
  int *puVar2;
  
  DAT_000b0c68 = (DAT_000d5cec - 0xfU) / DAT_000b0c64;
  if ((DAT_000b0c68 & 1) != 0) {
    DAT_000b0c68 = DAT_000b0c68 - 1;
  }
  puVar2 = &stAFParam_Zone;
  for (uVar1 = 0; uVar1 < DAT_000b0c64; uVar1 = uVar1 + 1) {
    puVar2[4] = DAT_000b0c68;
    puVar2 = puVar2 + 1;
  }
  DAT_000b0ca4 = (DAT_000d5cf0 - 3U) / DAT_000b0c5c;
  if ((DAT_000b0ca4 & 1) != 0) {
    DAT_000b0ca4 = DAT_000b0ca4 - 1;
  }
  uVar1 = 0;
  puVar2 = &stAFParam_Zone;
  while( true ) {
    if (DAT_000b0c5c <= uVar1) break;
    uVar1 = uVar1 + 1;
    puVar2[0x13] = DAT_000b0ca4;
    puVar2 = puVar2 + 1;
  }
  if (af_first == 0) {
    af_first = 1;
    system_reg_write(0xb804,DAT_000b0c64 << 0x1c | DAT_000b0c60 << 0x10 | stAFParam_Zone |
                            DAT_000b0c5c << 0xc);
    system_reg_write(0xb808,DAT_000b0c74 << 0x18 | DAT_000b0c70 << 0x10 | DAT_000b0c68 |
                            DAT_000b0c6c << 8);
    system_reg_write(0xb80c,DAT_000b0c84 << 0x18 | DAT_000b0c80 << 0x10 | DAT_000b0c78 |
                            DAT_000b0c7c << 8);
    system_reg_write(0xb810,DAT_000b0c94 << 0x18 | DAT_000b0c90 << 0x10 | DAT_000b0c88 |
                            DAT_000b0c8c << 8);
    system_reg_write(0xb814,DAT_000b0ca0 << 0x10 | DAT_000b0c9c << 8 | DAT_000b0c98);
    system_reg_write(0xb818,DAT_000b0cb0 << 0x18 | DAT_000b0cac << 0x10 | DAT_000b0ca4 |
                            DAT_000b0ca8 << 8);
    system_reg_write(0xb81c,DAT_000b0cc0 << 0x18 | DAT_000b0cbc << 0x10 | DAT_000b0cb4 |
                            DAT_000b0cb8 << 8);
    system_reg_write(0xb820,DAT_000b0cd0 << 0x18 | DAT_000b0ccc << 0x10 | DAT_000b0cc4 |
                            DAT_000b0cc8 << 8);
    system_reg_write(0xb824,DAT_000b0cdc << 0x10 | DAT_000b0cd8 << 8 | DAT_000b0cd4);
  }
  system_reg_write_af(1,0xb828,DAT_000b0ce4 << 0x10 | DAT_000b0c34 << 8 | DAT_000b0ce0 |
                               DAT_000b0c30 << 7 | DAT_000b0c2c << 6 | DAT_000b0c28 << 5 |
                               stAFParam_ThresEnable << 4);
  system_reg_write(0xb82c,DAT_000b0c54 << 0x1c | DAT_000b0c50 << 0x18 | DAT_000b0c38 |
                          DAT_000b0c4c << 0x14 | DAT_000b0c48 << 0x10 | DAT_000b0c44 << 0xc |
                          DAT_000b0c40 << 8 | DAT_000b0c3c << 4);
  system_reg_write(0xb830,_DAT_000b0c14 << 0x10 | stAFParam_FIR0_V);
  system_reg_write(0xb834,DAT_000b0c1c << 0x10 | DAT_000b0c18);
  system_reg_write(0xb838,DAT_000b0c20);
  system_reg_write(0xb83c,_DAT_000b0bd0 << 0x10 | stAFParam_FIR1_V);
  system_reg_write(0xb840,DAT_000b0bd8 << 0x10 | DAT_000b0bd4);
  system_reg_write(0xb844,DAT_000b0bdc);
  system_reg_write(0xb848,_DAT_000b0b7c << 0x10 | stAFParam_IIR0_H);
  system_reg_write(0xb84c,DAT_000b0b84 << 0x10 | DAT_000b0b80);
  system_reg_write(0xb850,DAT_000b0b90 << 0x10 | DAT_000b0b88);
  system_reg_write(0xb854,DAT_000b0b98 << 0x10 | DAT_000b0b94);
  system_reg_write(0xb858,_DAT_000b0b24 << 0x10 | stAFParam_IIR1_H);
  system_reg_write(0xb85c,DAT_000b0b2c << 0x10 | DAT_000b0b28);
  system_reg_write(0xb860,DAT_000b0b38 << 0x10 | DAT_000b0b30);
  system_reg_write(0xb864,DAT_000b0b40 << 0x10 | DAT_000b0b3c);
  system_reg_write(0xb868,DAT_000b0bfc << 0x18 | DAT_000b0bf8 << 0x10 | stAFParam_FIR0_Ldg |
                          DAT_000b0bf4 << 8);
  system_reg_write(0xb86c,DAT_000b0c0c << 0x18 | DAT_000b0c08 << 0x10 | DAT_000b0c00 |
                          DAT_000b0c04 << 8);
  system_reg_write(0xb870,DAT_000b0bb8 << 0x18 | DAT_000b0bb4 << 0x10 | stAFParam_FIR1_Ldg |
                          DAT_000b0bb0 << 8);
  system_reg_write(0xb874,DAT_000b0bc8 << 0x18 | DAT_000b0bc4 << 0x10 | DAT_000b0bbc |
                          DAT_000b0bc0 << 8);
  system_reg_write(0xb878,DAT_000b0b60 << 0x18 | DAT_000b0b5c << 0x10 | stAFParam_IIR0_Ldg |
                          DAT_000b0b58 << 8);
  system_reg_write(0xb87c,DAT_000b0b70 << 0x18 | DAT_000b0b6c << 0x10 | DAT_000b0b64 |
                          DAT_000b0b68 << 8);
  system_reg_write(0xb880,DAT_000b0b08 << 0x18 | DAT_000b0b04 << 0x10 | stAFParam_IIR1_Ldg |
                          DAT_000b0b00 << 8);
  system_reg_write(0xb884,DAT_000b0b18 << 0x18 | DAT_000b0b14 << 0x10 | DAT_000b0b0c |
                          DAT_000b0b10 << 8);
  system_reg_write(0xb888,_DAT_000b0be4 << 0x10 | stAFParam_FIR0_Coring);
  system_reg_write(0xb88c,DAT_000b0bec << 0x10 | DAT_000b0be8);
  system_reg_write(0xb890,_DAT_000b0ba0 << 0x10 | stAFParam_FIR1_Coring);
  system_reg_write(0xb894,DAT_000b0ba8 << 0x10 | DAT_000b0ba4);
  system_reg_write(0xb898,_DAT_000b0b48 << 0x10 | stAFParam_IIR0_Coring);
  system_reg_write(0xb89c,DAT_000b0b50 << 0x10 | DAT_000b0b4c);
  system_reg_write(0xb8a0,_DAT_000b0af0 << 0x10 | stAFParam_IIR1_Coring);
  system_reg_write(0xb8a4,DAT_000b0af8 << 0x10 | DAT_000b0af4);
  return 0;
}



int tiziano_af_init(int param_1,int param_2)

{
  af_first = 0;
  tiziano_af_params_refresh();
  DAT_000d5cec = param_2;
  DAT_000d5cf0 = param_1;
  tiziano_af_set_hardware_param();
  system_irq_func_set(0x1f,af_interrupt_static);
  memset(af_attr,0,0x58);
  af_attr._18_2_ = (short)DAT_000b0ad8;
  af_attr._20_2_ = (short)DAT_000b0adc;
  af_attr._24_2_ = (short)AFParam_Tilt;
  af_attr._26_2_ = (short)DAT_000b0ad4;
  af_attr._22_2_ = (short)DAT_000b0c34;
  af_attr[29] = (char)stAFParam_Zone;
  af_attr[30] = (char)DAT_000b0c64;
  af_attr[17] = 0;
  af_attr[28] = (char)DAT_000b0c60;
  af_attr[31] = (char)DAT_000b0c5c;
  private_spin_lock_init(0x10000);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_af_get_metric(unsigned int *param_1)

{
  *param_1 = _DAT_000d5d00 >> (af_attr[17] & 0x1f);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_af_get_attr(unsigned int *param_1)

{
  int uVar1;
  char bVar2;
  
  *param_1 = _DAT_000d5d00 >> (af_attr[17] & 0x1f);
  param_1[1] = AFParam_Fv_Alt >> (af_attr[17] & 0x1f);
  param_1[2] = AFParam_Fv >> (af_attr[17] & 0x1f);
  param_1[3] = DAT_000d5cfc >> (af_attr[17] & 0x1f);
  *(char *)(param_1 + 4) = AF_Enable;
  bVar2 = af_attr[17];
  *(char *)((int)param_1 + 0x21) = (char)DAT_000b0c38;
  *(char *)((int)param_1 + 0x22) = (char)DAT_000b0c3c;
  *(char *)((int)param_1 + 0x23) = (char)DAT_000b0c40;
  uVar1 = DAT_000b0c44;
  *(char *)((int)param_1 + 0x11) = bVar2;
  *(char *)(param_1 + 9) = (char)uVar1;
  *(short *)((int)param_1 + 0x12) = (short)DAT_000b0ad8;
  *(short *)(param_1 + 5) = (short)DAT_000b0adc;
  *(short *)((int)param_1 + 0x16) = (short)DAT_000b0c34;
  *(short *)(param_1 + 6) = (short)AFParam_Tilt;
  *(short *)((int)param_1 + 0x1a) = (short)DAT_000b0ad4;
  *(char *)(param_1 + 7) = (char)DAT_000b0c60;
  *(char *)((int)param_1 + 0x1d) = (char)stAFParam_Zone;
  *(char *)((int)param_1 + 0x1e) = (char)DAT_000b0c64;
  *(char *)((int)param_1 + 0x1f) = (char)DAT_000b0c5c;
  *(char *)(param_1 + 8) = frame_num;
  *(char *)((int)param_1 + 0x26) = (char)stAFParam_FIR0_Ldg;
  *(char *)((int)param_1 + 0x27) = (char)DAT_000b0bf4;
  *(short *)(param_1 + 10) = (short)DAT_000b0bf8;
  *(char *)((int)param_1 + 0x2a) = (char)DAT_000b0bfc;
  *(char *)((int)param_1 + 0x2b) = (char)DAT_000b0c00;
  *(char *)(param_1 + 0xb) = (char)DAT_000b0c04;
  *(short *)((int)param_1 + 0x2e) = (short)DAT_000b0c08;
  *(char *)(param_1 + 0xc) = (char)DAT_000b0c0c;
  *(char *)((int)param_1 + 0x32) = (char)stAFParam_FIR1_Ldg;
  *(char *)((int)param_1 + 0x33) = (char)DAT_000b0bb0;
  *(short *)(param_1 + 0xd) = (short)DAT_000b0bb4;
  *(char *)((int)param_1 + 0x36) = (char)DAT_000b0bb8;
  *(char *)((int)param_1 + 0x37) = (char)DAT_000b0bbc;
  *(char *)(param_1 + 0xe) = (char)DAT_000b0bc0;
  *(short *)((int)param_1 + 0x3a) = (short)DAT_000b0bc4;
  *(char *)(param_1 + 0xf) = (char)DAT_000b0bc8;
  *(char *)((int)param_1 + 0x3e) = (char)stAFParam_IIR0_Ldg;
  *(char *)((int)param_1 + 0x3f) = (char)DAT_000b0b58;
  *(short *)(param_1 + 0x10) = (short)DAT_000b0b5c;
  *(char *)((int)param_1 + 0x42) = (char)DAT_000b0b60;
  *(char *)((int)param_1 + 0x43) = (char)DAT_000b0b64;
  *(char *)(param_1 + 0x11) = (char)DAT_000b0b68;
  uVar1 = DAT_000b0b70;
  *(short *)((int)param_1 + 0x46) = (short)DAT_000b0b6c;
  *(char *)(param_1 + 0x12) = (char)uVar1;
  *(char *)((int)param_1 + 0x4a) = (char)stAFParam_IIR1_Ldg;
  *(char *)((int)param_1 + 0x4b) = (char)DAT_000b0b00;
  *(short *)(param_1 + 0x13) = (short)DAT_000b0b04;
  *(char *)((int)param_1 + 0x4e) = (char)DAT_000b0b08;
  *(char *)((int)param_1 + 0x4f) = (char)DAT_000b0b0c;
  *(char *)(param_1 + 0x14) = (char)DAT_000b0b10;
  uVar1 = DAT_000b0b18;
  *(short *)((int)param_1 + 0x52) = (short)DAT_000b0b14;
  *(char *)(param_1 + 0x15) = (char)uVar1;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_af_set_attr_refresh(void)

{
  unsigned int uVar1;
  int *puVar2;
  
  AF_Enable = af_attr[16];
  DAT_000b0c38 = (uint)af_attr[33];
  DAT_000b0c3c = (uint)af_attr[34];
  DAT_000b0ad8 = (uint)(ushort)af_attr._18_2_;
  DAT_000b0c40 = (uint)af_attr[35];
  DAT_000b0c44 = (uint)af_attr[36];
  DAT_000b0adc = (uint)(ushort)af_attr._20_2_;
  DAT_000b0c34 = (uint)(ushort)af_attr._22_2_;
  AFParam_Tilt = (uint)(ushort)af_attr._24_2_;
  DAT_000b0ad4 = (uint)(ushort)af_attr._26_2_;
  DAT_000b0c60 = (uint)af_attr[28];
  stAFParam_Zone = (uint)af_attr[29];
  DAT_000b0c64 = (uint)af_attr[30];
  DAT_000b0c5c = (uint)af_attr[31];
  stAFParam_FIR0_Ldg = (uint)af_attr[38];
  DAT_000b0bf4 = (uint)af_attr[39];
  DAT_000b0bf8 = (uint)(ushort)af_attr._40_2_;
  DAT_000b0bfc = (uint)af_attr[42];
  DAT_000b0c00 = (uint)af_attr[43];
  DAT_000b0c04 = (uint)af_attr[44];
  DAT_000b0c08 = (uint)(ushort)af_attr._46_2_;
  DAT_000b0c0c = (uint)af_attr[48];
  stAFParam_FIR1_Ldg = (uint)af_attr[50];
  DAT_000b0bb0 = (uint)af_attr[51];
  DAT_000b0bb4 = (uint)(ushort)af_attr._52_2_;
  DAT_000b0bb8 = (uint)af_attr[54];
  DAT_000b0bbc = (uint)af_attr[55];
  DAT_000b0bc0 = (uint)af_attr[56];
  DAT_000b0bc4 = (uint)(ushort)af_attr._58_2_;
  DAT_000b0bc8 = (uint)af_attr[60];
  stAFParam_IIR0_Ldg = (uint)af_attr[62];
  DAT_000b0b58 = (uint)af_attr[63];
  DAT_000b0b5c = (uint)(ushort)af_attr._64_2_;
  DAT_000b0b60 = (uint)af_attr[66];
  DAT_000b0b64 = (uint)af_attr[67];
  DAT_000b0b68 = (uint)af_attr[68];
  DAT_000b0b6c = (uint)(ushort)af_attr._70_2_;
  DAT_000b0b70 = (uint)af_attr[72];
  stAFParam_IIR1_Ldg = (uint)af_attr[74];
  DAT_000b0b00 = (uint)af_attr[75];
  DAT_000b0b04 = (uint)(ushort)af_attr._76_2_;
  DAT_000b0b08 = (uint)af_attr[78];
  DAT_000b0b0c = (uint)af_attr[79];
  DAT_000b0b10 = (uint)af_attr[80];
  DAT_000b0b14 = (uint)(ushort)af_attr._82_2_;
  DAT_000b0b18 = (uint)af_attr[84];
  DAT_000b0c68 = (DAT_000d5cec - 0xfU) / DAT_000b0c64;
  if ((DAT_000b0c68 & 1) != 0) {
    DAT_000b0c68 = DAT_000b0c68 - 1;
  }
  puVar2 = &stAFParam_Zone;
  for (uVar1 = 0; uVar1 < DAT_000b0c64; uVar1 = uVar1 + 1) {
    puVar2[4] = DAT_000b0c68;
    puVar2 = puVar2 + 1;
  }
  DAT_000b0ca4 = (DAT_000d5cf0 - 3U) / DAT_000b0c5c;
  if ((DAT_000b0ca4 & 1) != 0) {
    DAT_000b0ca4 = DAT_000b0ca4 - 1;
  }
  puVar2 = &stAFParam_Zone;
  for (uVar1 = 0; uVar1 < DAT_000b0c5c; uVar1 = uVar1 + 1) {
    puVar2[0x13] = DAT_000b0ca4;
    puVar2 = puVar2 + 1;
  }
  if (af_first == 0) {
    af_first = 1;
    system_reg_write(0xb804,DAT_000b0c64 << 0x1c | DAT_000b0c60 << 0x10 | stAFParam_Zone |
                            DAT_000b0c5c << 0xc);
    system_reg_write(0xb808,DAT_000b0c74 << 0x18 | DAT_000b0c70 << 0x10 | DAT_000b0c68 |
                            DAT_000b0c6c << 8);
    system_reg_write(0xb80c,DAT_000b0c84 << 0x18 | DAT_000b0c80 << 0x10 | DAT_000b0c78 |
                            DAT_000b0c7c << 8);
    system_reg_write(0xb810,DAT_000b0c94 << 0x18 | DAT_000b0c90 << 0x10 | DAT_000b0c88 |
                            DAT_000b0c8c << 8);
    system_reg_write(0xb814,DAT_000b0ca0 << 0x10 | DAT_000b0c9c << 8 | DAT_000b0c98);
    system_reg_write(0xb818,DAT_000b0cb0 << 0x18 | DAT_000b0cac << 0x10 | DAT_000b0ca4 |
                            DAT_000b0ca8 << 8);
    system_reg_write(0xb81c,DAT_000b0cc0 << 0x18 | DAT_000b0cbc << 0x10 | DAT_000b0cb4 |
                            DAT_000b0cb8 << 8);
    system_reg_write(0xb820,DAT_000b0cd0 << 0x18 | DAT_000b0ccc << 0x10 | DAT_000b0cc4 |
                            DAT_000b0cc8 << 8);
    system_reg_write(0xb824,DAT_000b0cdc << 0x10 | DAT_000b0cd8 << 8 | DAT_000b0cd4);
  }
  system_reg_write_af(1,0xb828,DAT_000b0ce4 << 0x10 | DAT_000b0c34 << 8 | DAT_000b0ce0 |
                               DAT_000b0c30 << 7 | DAT_000b0c2c << 6 | DAT_000b0c28 << 5 |
                               stAFParam_ThresEnable << 4);
  system_reg_write(0xb82c,DAT_000b0c54 << 0x1c | DAT_000b0c50 << 0x18 | DAT_000b0c38 |
                          DAT_000b0c4c << 0x14 | DAT_000b0c48 << 0x10 | DAT_000b0c44 << 0xc |
                          DAT_000b0c40 << 8 | DAT_000b0c3c << 4);
  system_reg_write(0xb830,_DAT_000b0c14 << 0x10 | stAFParam_FIR0_V);
  system_reg_write(0xb834,DAT_000b0c1c << 0x10 | DAT_000b0c18);
  system_reg_write(0xb838,DAT_000b0c20);
  system_reg_write(0xb83c,_DAT_000b0bd0 << 0x10 | stAFParam_FIR1_V);
  system_reg_write(0xb840,DAT_000b0bd8 << 0x10 | DAT_000b0bd4);
  system_reg_write(0xb844,DAT_000b0bdc);
  system_reg_write(0xb848,_DAT_000b0b7c << 0x10 | stAFParam_IIR0_H);
  system_reg_write(0xb84c,DAT_000b0b84 << 0x10 | DAT_000b0b80);
  system_reg_write(0xb850,DAT_000b0b90 << 0x10 | DAT_000b0b88);
  system_reg_write(0xb854,DAT_000b0b98 << 0x10 | DAT_000b0b94);
  system_reg_write(0xb858,_DAT_000b0b24 << 0x10 | stAFParam_IIR1_H);
  system_reg_write(0xb85c,DAT_000b0b2c << 0x10 | DAT_000b0b28);
  system_reg_write(0xb860,DAT_000b0b38 << 0x10 | DAT_000b0b30);
  system_reg_write(0xb864,DAT_000b0b40 << 0x10 | DAT_000b0b3c);
  system_reg_write(0xb868,DAT_000b0bfc << 0x18 | DAT_000b0bf8 << 0x10 | stAFParam_FIR0_Ldg |
                          DAT_000b0bf4 << 8);
  system_reg_write(0xb86c,DAT_000b0c0c << 0x18 | DAT_000b0c08 << 0x10 | DAT_000b0c00 |
                          DAT_000b0c04 << 8);
  system_reg_write(0xb870,DAT_000b0bb8 << 0x18 | DAT_000b0bb4 << 0x10 | stAFParam_FIR1_Ldg |
                          DAT_000b0bb0 << 8);
  system_reg_write(0xb874,DAT_000b0bc8 << 0x18 | DAT_000b0bc4 << 0x10 | DAT_000b0bbc |
                          DAT_000b0bc0 << 8);
  system_reg_write(0xb878,DAT_000b0b60 << 0x18 | DAT_000b0b5c << 0x10 | stAFParam_IIR0_Ldg |
                          DAT_000b0b58 << 8);
  system_reg_write(0xb87c,DAT_000b0b70 << 0x18 | DAT_000b0b6c << 0x10 | DAT_000b0b64 |
                          DAT_000b0b68 << 8);
  system_reg_write(0xb880,DAT_000b0b08 << 0x18 | DAT_000b0b04 << 0x10 | stAFParam_IIR1_Ldg |
                          DAT_000b0b00 << 8);
  system_reg_write(0xb884,DAT_000b0b18 << 0x18 | DAT_000b0b14 << 0x10 | DAT_000b0b0c |
                          DAT_000b0b10 << 8);
  system_reg_write(0xb888,_DAT_000b0be4 << 0x10 | stAFParam_FIR0_Coring);
  system_reg_write(0xb88c,DAT_000b0bec << 0x10 | DAT_000b0be8);
  system_reg_write(0xb890,_DAT_000b0ba0 << 0x10 | stAFParam_FIR1_Coring);
  system_reg_write(0xb894,DAT_000b0ba8 << 0x10 | DAT_000b0ba4);
  system_reg_write(0xb898,_DAT_000b0b48 << 0x10 | stAFParam_IIR0_Coring);
  system_reg_write(0xb89c,DAT_000b0b50 << 0x10 | DAT_000b0b4c);
  system_reg_write(0xb8a0,_DAT_000b0af0 << 0x10 | stAFParam_IIR1_Coring);
  system_reg_write(0xb8a4,DAT_000b0af8 << 0x10 | DAT_000b0af4);
  return 0;
}



int
tisp_af_set_attr(int param_1,int param_2,int param_3,int param_4)

{
  int local_res0;
  int local_res4;
  int local_res8;
  int local_resc;
  
  af_first = 0;
  local_res0 = param_1;
  local_res4 = param_2;
  local_res8 = param_3;
  local_resc = param_4;
  memcpy(af_attr,&local_res0,0x58);
  tisp_af_set_attr_refresh();
  af_set_trig = 1;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_af_dn_params_refresh(void)

{
  unsigned int uVar1;
  int *puVar2;
  
  af_first = 0;
  tiziano_af_params_refresh();
  if (af_set_trig != '\0') {
    tisp_af_set_attr_refresh();
  }
  DAT_000b0c68 = (DAT_000d5cec - 0xfU) / DAT_000b0c64;
  if ((DAT_000b0c68 & 1) != 0) {
    DAT_000b0c68 = DAT_000b0c68 - 1;
  }
  puVar2 = &stAFParam_Zone;
  for (uVar1 = 0; uVar1 < DAT_000b0c64; uVar1 = uVar1 + 1) {
    puVar2[4] = DAT_000b0c68;
    puVar2 = puVar2 + 1;
  }
  DAT_000b0ca4 = (DAT_000d5cf0 - 3U) / DAT_000b0c5c;
  if ((DAT_000b0ca4 & 1) != 0) {
    DAT_000b0ca4 = DAT_000b0ca4 - 1;
  }
  puVar2 = &stAFParam_Zone;
  for (uVar1 = 0; uVar1 < DAT_000b0c5c; uVar1 = uVar1 + 1) {
    puVar2[0x13] = DAT_000b0ca4;
    puVar2 = puVar2 + 1;
  }
  if (af_first == 0) {
    af_first = 1;
    system_reg_write(0xb804,DAT_000b0c64 << 0x1c | DAT_000b0c60 << 0x10 | stAFParam_Zone |
                            DAT_000b0c5c << 0xc);
    system_reg_write(0xb808,DAT_000b0c74 << 0x18 | DAT_000b0c70 << 0x10 | DAT_000b0c68 |
                            DAT_000b0c6c << 8);
    system_reg_write(0xb80c,DAT_000b0c84 << 0x18 | DAT_000b0c80 << 0x10 | DAT_000b0c78 |
                            DAT_000b0c7c << 8);
    system_reg_write(0xb810,DAT_000b0c94 << 0x18 | DAT_000b0c90 << 0x10 | DAT_000b0c88 |
                            DAT_000b0c8c << 8);
    system_reg_write(0xb814,DAT_000b0ca0 << 0x10 | DAT_000b0c9c << 8 | DAT_000b0c98);
    system_reg_write(0xb818,DAT_000b0cb0 << 0x18 | DAT_000b0cac << 0x10 | DAT_000b0ca4 |
                            DAT_000b0ca8 << 8);
    system_reg_write(0xb81c,DAT_000b0cc0 << 0x18 | DAT_000b0cbc << 0x10 | DAT_000b0cb4 |
                            DAT_000b0cb8 << 8);
    system_reg_write(0xb820,DAT_000b0cd0 << 0x18 | DAT_000b0ccc << 0x10 | DAT_000b0cc4 |
                            DAT_000b0cc8 << 8);
    system_reg_write(0xb824,DAT_000b0cdc << 0x10 | DAT_000b0cd8 << 8 | DAT_000b0cd4);
  }
  system_reg_write_af(1,0xb828,DAT_000b0ce4 << 0x10 | DAT_000b0c34 << 8 | DAT_000b0ce0 |
                               DAT_000b0c30 << 7 | DAT_000b0c2c << 6 | DAT_000b0c28 << 5 |
                               stAFParam_ThresEnable << 4);
  system_reg_write(0xb82c,DAT_000b0c54 << 0x1c | DAT_000b0c50 << 0x18 | DAT_000b0c38 |
                          DAT_000b0c4c << 0x14 | DAT_000b0c48 << 0x10 | DAT_000b0c44 << 0xc |
                          DAT_000b0c40 << 8 | DAT_000b0c3c << 4);
  system_reg_write(0xb830,_DAT_000b0c14 << 0x10 | stAFParam_FIR0_V);
  system_reg_write(0xb834,DAT_000b0c1c << 0x10 | DAT_000b0c18);
  system_reg_write(0xb838,DAT_000b0c20);
  system_reg_write(0xb83c,_DAT_000b0bd0 << 0x10 | stAFParam_FIR1_V);
  system_reg_write(0xb840,DAT_000b0bd8 << 0x10 | DAT_000b0bd4);
  system_reg_write(0xb844,DAT_000b0bdc);
  system_reg_write(0xb848,_DAT_000b0b7c << 0x10 | stAFParam_IIR0_H);
  system_reg_write(0xb84c,DAT_000b0b84 << 0x10 | DAT_000b0b80);
  system_reg_write(0xb850,DAT_000b0b90 << 0x10 | DAT_000b0b88);
  system_reg_write(0xb854,DAT_000b0b98 << 0x10 | DAT_000b0b94);
  system_reg_write(0xb858,_DAT_000b0b24 << 0x10 | stAFParam_IIR1_H);
  system_reg_write(0xb85c,DAT_000b0b2c << 0x10 | DAT_000b0b28);
  system_reg_write(0xb860,DAT_000b0b38 << 0x10 | DAT_000b0b30);
  system_reg_write(0xb864,DAT_000b0b40 << 0x10 | DAT_000b0b3c);
  system_reg_write(0xb868,DAT_000b0bfc << 0x18 | DAT_000b0bf8 << 0x10 | stAFParam_FIR0_Ldg |
                          DAT_000b0bf4 << 8);
  system_reg_write(0xb86c,DAT_000b0c0c << 0x18 | DAT_000b0c08 << 0x10 | DAT_000b0c00 |
                          DAT_000b0c04 << 8);
  system_reg_write(0xb870,DAT_000b0bb8 << 0x18 | DAT_000b0bb4 << 0x10 | stAFParam_FIR1_Ldg |
                          DAT_000b0bb0 << 8);
  system_reg_write(0xb874,DAT_000b0bc8 << 0x18 | DAT_000b0bc4 << 0x10 | DAT_000b0bbc |
                          DAT_000b0bc0 << 8);
  system_reg_write(0xb878,DAT_000b0b60 << 0x18 | DAT_000b0b5c << 0x10 | stAFParam_IIR0_Ldg |
                          DAT_000b0b58 << 8);
  system_reg_write(0xb87c,DAT_000b0b70 << 0x18 | DAT_000b0b6c << 0x10 | DAT_000b0b64 |
                          DAT_000b0b68 << 8);
  system_reg_write(0xb880,DAT_000b0b08 << 0x18 | DAT_000b0b04 << 0x10 | stAFParam_IIR1_Ldg |
                          DAT_000b0b00 << 8);
  system_reg_write(0xb884,DAT_000b0b18 << 0x18 | DAT_000b0b14 << 0x10 | DAT_000b0b0c |
                          DAT_000b0b10 << 8);
  system_reg_write(0xb888,_DAT_000b0be4 << 0x10 | stAFParam_FIR0_Coring);
  system_reg_write(0xb88c,DAT_000b0bec << 0x10 | DAT_000b0be8);
  system_reg_write(0xb890,_DAT_000b0ba0 << 0x10 | stAFParam_FIR1_Coring);
  system_reg_write(0xb894,DAT_000b0ba8 << 0x10 | DAT_000b0ba4);
  system_reg_write(0xb898,_DAT_000b0b48 << 0x10 | stAFParam_IIR0_Coring);
  system_reg_write(0xb89c,DAT_000b0b50 << 0x10 | DAT_000b0b4c);
  system_reg_write(0xb8a0,_DAT_000b0af0 << 0x10 | stAFParam_IIR1_Coring);
  system_reg_write(0xb8a4,DAT_000b0af8 << 0x10 | DAT_000b0af4);
  return 0;
}



int tisp_af_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x3ad:
    __src = (char *)&stAFParam_Zone;
    __n = 0x90;
    break;
  case 0x3ae:
    __src = (char *)&stAFParam_ThresEnable;
    __n = 0x34;
    break;
  case 0x3af:
    __src = (char *)&stAFParam_FIR0_V;
    goto LAB_00067cd4;
  case 0x3b0:
    __src = (char *)&stAFParam_FIR0_Ldg;
    goto LAB_00067bdc;
  case 0x3b1:
    __src = (char *)&stAFParam_FIR0_Coring;
    goto LAB_00067bec;
  case 0x3b2:
    __src = (char *)&stAFParam_FIR1_V;
    goto LAB_00067cd4;
  case 0x3b3:
    __src = (char *)&stAFParam_FIR1_Ldg;
    goto LAB_00067bdc;
  case 0x3b4:
    __src = (char *)&stAFParam_FIR1_Coring;
    goto LAB_00067bec;
  case 0x3b5:
    __src = (char *)&stAFParam_IIR0_H;
    goto LAB_00067c20;
  case 0x3b6:
    __src = (char *)&stAFParam_IIR0_Ldg;
    goto LAB_00067bdc;
  case 0x3b7:
    __src = (char *)&stAFParam_IIR0_Coring;
    goto LAB_00067bec;
  case 0x3b8:
    __src = (char *)&stAFParam_IIR1_H;
LAB_00067c20:
    __n = 0x28;
    break;
  case 0x3b9:
    __src = (char *)&stAFParam_IIR1_Ldg;
LAB_00067bdc:
    __n = 0x20;
    break;
  case 0x3ba:
    __src = (char *)&stAFParam_IIR1_Coring;
LAB_00067bec:
    __n = 0x10;
    break;
  case 0x3bb:
    __src = (char *)&AFParam_PointPos;
    __n = 8;
    break;
  case 0x3bc:
    __src = (char *)&AFParam_Tilt;
LAB_00067cd4:
    __n = 0x14;
    break;
  case 0x3bd:
    __src = AFParam_FvWmean;
    __n = 0x3c;
    break;
  case 0x3be:
    __src = (char *)&AFParam_Fv;
    __n = 0xc;
    break;
  case 0x3bf:
    __src = AFWeight_Param;
    __n = 900;
    break;
  default:
    isp_printf(2,"%s,%d: af not support param id %d\n","tisp_af_param_array_get",0x31e,param_1);
    return 0xffffffff;
  }
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_af_param_array_set(int param_1,void *param_2,size_t *param_3)

{
  char *__dest;
  size_t __n;
  
  switch(param_1) {
  case 0x3ad:
    __dest = (char *)&stAFParam_Zone;
    __n = 0x90;
    break;
  case 0x3ae:
    __dest = (char *)&stAFParam_ThresEnable;
    __n = 0x34;
    break;
  case 0x3af:
    __dest = (char *)&stAFParam_FIR0_V;
    goto LAB_00067e74;
  case 0x3b0:
    __dest = (char *)&stAFParam_FIR0_Ldg;
    goto LAB_00067d7c;
  case 0x3b1:
    __dest = (char *)&stAFParam_FIR0_Coring;
    goto LAB_00067d8c;
  case 0x3b2:
    __dest = (char *)&stAFParam_FIR1_V;
    goto LAB_00067e74;
  case 0x3b3:
    __dest = (char *)&stAFParam_FIR1_Ldg;
    goto LAB_00067d7c;
  case 0x3b4:
    __dest = (char *)&stAFParam_FIR1_Coring;
    goto LAB_00067d8c;
  case 0x3b5:
    __dest = (char *)&stAFParam_IIR0_H;
    goto LAB_00067dc0;
  case 0x3b6:
    __dest = (char *)&stAFParam_IIR0_Ldg;
    goto LAB_00067d7c;
  case 0x3b7:
    __dest = (char *)&stAFParam_IIR0_Coring;
    goto LAB_00067d8c;
  case 0x3b8:
    __dest = (char *)&stAFParam_IIR1_H;
LAB_00067dc0:
    __n = 0x28;
    break;
  case 0x3b9:
    __dest = (char *)&stAFParam_IIR1_Ldg;
LAB_00067d7c:
    __n = 0x20;
    break;
  case 0x3ba:
    __dest = (char *)&stAFParam_IIR1_Coring;
LAB_00067d8c:
    __n = 0x10;
    break;
  case 0x3bb:
    __dest = (char *)&AFParam_PointPos;
    __n = 8;
    break;
  case 0x3bc:
    __dest = (char *)&AFParam_Tilt;
LAB_00067e74:
    __n = 0x14;
    break;
  case 0x3bd:
    __dest = AFParam_FvWmean;
    __n = 0x3c;
    break;
  case 0x3be:
    __dest = (char *)&AFParam_Fv;
    __n = 0xc;
    break;
  case 0x3bf:
    __dest = AFWeight_Param;
    __n = 900;
    break;
  default:
    isp_printf(2,"%s,%d: af not support param id %d\n","tisp_af_param_array_set",0x37b,param_1);
    return 0xffffffff;
  }
  memcpy(__dest,param_2,__n);
  *param_3 = __n;
  tiziano_af_set_hardware_param();
  return 0;
}



void tisp_af_get_zone(void *param_1)

{
  memcpy(param_1,fv_value_last,900);
  return;
}



int tisp_ydns_param_cfg(void)

{
  system_reg_write(0x7af0,ydns_mv_thres1_intp << 8 | ydns_mv_thres2_intp << 0x10 |
                          ydns_mv_thres0_intp);
  system_reg_write(0x7af4,ydns_fus_max_thres_intp << 8 | ydns_fus_level_intp << 0x10 |
                          ydns_fus_min_thres_intp);
  system_reg_write(0x7af8,ydns_fus_sewei_intp << 4 | ydns_fus_mswei_intp << 8 | ydns_fus_sswei_intp
                          | ydns_fus_mewei_intp << 0xc | ydns_fus_uvwei_intp << 0x10);
  system_reg_write(0x7afc,ydns_edge_div_intp << 4 | ydns_edge_thres_intp << 8 | ydns_edge_wei_intp |
                          ydns_edge_out_array << 0x10);
  return 0;
}



int tisp_ydns_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  ydns_mv_thres0_intp = tisp_simple_intp(iVar1,param_1,ydns_mv_thres0_array);
  ydns_mv_thres1_intp = tisp_simple_intp(iVar1,param_1,ydns_mv_thres1_array);
  ydns_mv_thres2_intp = tisp_simple_intp(iVar1,param_1,ydns_mv_thres2_array);
  ydns_fus_level_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_level_array);
  ydns_fus_min_thres_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_min_thres_array);
  ydns_fus_max_thres_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_max_thres_array);
  ydns_fus_sswei_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_sswei_array);
  ydns_fus_sewei_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_sewei_array);
  ydns_fus_mswei_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_mswei_array);
  ydns_fus_mewei_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_mewei_array);
  ydns_fus_uvwei_intp = tisp_simple_intp(iVar1,param_1,ydns_fus_uvwei_array);
  ydns_edge_wei_intp = tisp_simple_intp(iVar1,param_1,ydns_edge_wei_array);
  ydns_edge_div_intp = tisp_simple_intp(iVar1,param_1,ydns_edge_div_array);
  ydns_edge_thres_intp = tisp_simple_intp(iVar1,param_1,ydns_edge_thres_array);
  return 0;
}



int tisp_ydns_all_reg_refresh(void)

{
  tisp_ydns_intp();
  tisp_ydns_param_cfg();
  return 0;
}



int tisp_ydns_intp_reg_refresh(void)

{
  tisp_ydns_intp();
  tisp_ydns_param_cfg();
  return 0;
}



int tisp_ydns_par_refresh(unsigned int param_1)

{
  unsigned int uVar1;
  
  if (ydns_gain_old != 0xffffffff) {
    uVar1 = ydns_gain_old - param_1;
    if (ydns_gain_old <= param_1) {
      uVar1 = param_1 - ydns_gain_old;
    }
    if (uVar1 < 0x100) {
      return 0;
    }
  }
  ydns_gain_old = param_1;
  tisp_ydns_intp_reg_refresh();
  return 0;
}



int tisp_ydns_gain_update(int param_1)

{
  tisp_ydns_par_refresh(param_1,0x100);
  return 0;
}



int tiziano_ydns_params_refresh(void)

{
  memcpy(&ydns_edge_out_array,&DAT_000a6a00,4);
  memcpy(ydns_mv_thres0_array,&DAT_000a6a04,0x24);
  memcpy(ydns_mv_thres1_array,&DAT_000a6a28,0x24);
  memcpy(ydns_mv_thres2_array,&DAT_000a6a4c,0x24);
  memcpy(ydns_fus_level_array,&DAT_000a6a70,0x24);
  memcpy(ydns_fus_min_thres_array,&DAT_000a6a94,0x24);
  memcpy(ydns_fus_max_thres_array,&DAT_000a6ab8,0x24);
  memcpy(ydns_fus_sswei_array,&DAT_000a6adc,0x24);
  memcpy(ydns_fus_sewei_array,&DAT_000a6b00,0x24);
  memcpy(ydns_fus_mswei_array,&DAT_000a6b24,0x24);
  memcpy(ydns_fus_mewei_array,&DAT_000a6b48,0x24);
  memcpy(ydns_fus_uvwei_array,&DAT_000a6b6c,0x24);
  memcpy(ydns_edge_wei_array,&DAT_000a6b90,0x24);
  memcpy(ydns_edge_div_array,&DAT_000a6bb4,0x24);
  memcpy(ydns_edge_thres_array,&DAT_000a6bd8,0x24);
  return 0;
}



int tiziano_ydns_dn_params_refresh(void)

{
  ydns_gain_old = ydns_gain_old + 0x200;
  tiziano_ydns_params_refresh();
  tisp_ydns_intp_reg_refresh(ydns_gain_old);
  return 0;
}



int tiziano_ydns_init(void)

{
  ydns_gain_old = 0xffffffff;
  tiziano_ydns_params_refresh();
  tisp_ydns_par_refresh(0x10000,0x10000);
  return 0;
}



int tisp_ydns_refresh(int param_1)

{
  tisp_ydns_par_refresh(param_1,0x100);
  return 0;
}



int tisp_ydns_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x3e6:
    __src = (char *)&ydns_edge_out_array;
    __n = 4;
    goto LAB_00068620;
  case 999:
    __src = ydns_mv_thres0_array;
    break;
  case 1000:
    __src = ydns_mv_thres1_array;
    break;
  case 0x3e9:
    __src = ydns_mv_thres2_array;
    break;
  case 0x3ea:
    __src = ydns_fus_level_array;
    break;
  case 0x3eb:
    __src = ydns_fus_min_thres_array;
    break;
  case 0x3ec:
    __src = ydns_fus_max_thres_array;
    break;
  case 0x3ed:
    __src = ydns_fus_sswei_array;
    break;
  case 0x3ee:
    __src = ydns_fus_sewei_array;
    break;
  case 0x3ef:
    __src = ydns_fus_mswei_array;
    break;
  case 0x3f0:
    __src = ydns_fus_mewei_array;
    break;
  case 0x3f1:
    __src = ydns_fus_uvwei_array;
    break;
  case 0x3f2:
    __src = ydns_edge_wei_array;
    break;
  case 0x3f3:
    __src = ydns_edge_div_array;
    break;
  case 0x3f4:
    __src = ydns_edge_thres_array;
    break;
  default:
    isp_printf(2,"%s,%d: ydns not support param id %d\n","tisp_ydns_param_array_get",0x10a,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_00068620:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_ydns_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  char *__dest;
  
  switch(param_1) {
  case 0x3e6:
    memcpy(&ydns_edge_out_array,param_2,4);
    uVar1 = 4;
    goto LAB_000687dc;
  case 999:
    __dest = ydns_mv_thres0_array;
    break;
  case 1000:
    __dest = ydns_mv_thres1_array;
    break;
  case 0x3e9:
    __dest = ydns_mv_thres2_array;
    break;
  case 0x3ea:
    __dest = ydns_fus_level_array;
    break;
  case 0x3eb:
    __dest = ydns_fus_min_thres_array;
    break;
  case 0x3ec:
    __dest = ydns_fus_max_thres_array;
    break;
  case 0x3ed:
    __dest = ydns_fus_sswei_array;
    break;
  case 0x3ee:
    __dest = ydns_fus_sewei_array;
    break;
  case 0x3ef:
    __dest = ydns_fus_mswei_array;
    break;
  case 0x3f0:
    __dest = ydns_fus_mewei_array;
    break;
  case 0x3f1:
    __dest = ydns_fus_uvwei_array;
    break;
  case 0x3f2:
    __dest = ydns_edge_wei_array;
    break;
  case 0x3f3:
    __dest = ydns_edge_div_array;
    break;
  case 0x3f4:
    memcpy(ydns_edge_thres_array,param_2,0x24);
    tisp_ydns_intp_reg_refresh(ydns_gain_old + 0x200);
    uVar1 = 0x24;
    goto LAB_000687dc;
  default:
    isp_printf(2,"%s,%d: ydns not support param id %d\n","tisp_ydns_param_array_set",0x167,param_1);
    return 0xffffffff;
  }
  memcpy(__dest,param_2,0x24);
  uVar1 = 0x24;
LAB_000687dc:
  *param_3 = uVar1;
  return 0;
}



int tisp_rdns_intp(unsigned int param_1)

{
  int iVar1;
  
  iVar1 = (int)param_1 >> 0x10;
  param_1 = param_1 & 0xffff;
  rdns_oe_num_intp = tisp_simple_intp(iVar1,param_1,rdns_oe_num_array);
  rdns_gray_stren_intp = tisp_simple_intp(iVar1,param_1,rdns_gray_stren_array);
  rdns_gray_std_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_gray_std_thres_array);
  rdns_text_base_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_text_base_thres_array_now);
  rdns_filter_sat_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_filter_sat_thres_array);
  rdns_oe_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_oe_thres_array);
  rdns_flat_g_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_flat_g_thres_array);
  rdns_text_g_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_text_g_thres_array);
  rdns_flat_rb_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_flat_rb_thres_array);
  rdns_text_rb_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_text_rb_thres_array);
  rdns_mv_text_thres_intp = tisp_simple_intp(iVar1,param_1,rdns_mv_text_thres_array);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_awb_gain_par_cfg(void)

{
  system_reg_write(0x3000,_DAT_000d69a4 << 0x10 | rdns_awb_gain_par_cfg_array);
  system_reg_write(0x3004,DAT_000d69ac << 0x10 | DAT_000d69a8);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_opt_cfg(void)

{
  system_reg_write(0x3008,_DAT_000d696c << 2 | DAT_000d6970 << 4 | rdns_opt_cfg_array |
                          DAT_000d6974 << 6 | DAT_000d6978 << 8 | rdns_oe_num_intp << 0x10);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_slope_cfg(void)

{
  system_reg_write(0x300c,rdns_out_opt_array << 0x10 | rdns_gray_stren_intp);
  system_reg_write(0x3010,_DAT_000d6940 << 0x10 | rdns_slope_par_cfg_array);
  return 0;
}



int tisp_rdns_thres_par_cfg(void)

{
  system_reg_write(0x3014,rdns_gray_std_thres_intp);
  system_reg_write(0x3018,rdns_text_base_thres_intp);
  system_reg_write(0x301c,rdns_oe_thres_intp << 0x10 | rdns_filter_sat_thres_intp);
  system_reg_write(0x3020,rdns_text_g_thres_intp << 0x10 | rdns_flat_g_thres_intp);
  system_reg_write(0x3024,rdns_text_rb_thres_intp << 0x10 | rdns_flat_rb_thres_intp);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_gray_np_par_cfg(void)

{
  system_reg_write(0x3028,_DAT_000d67dc << 0x10 | rdns_gray_np_array);
  system_reg_write(0x302c,DAT_000d67e4 << 0x10 | DAT_000d67e0);
  system_reg_write(0x3030,DAT_000d67ec << 0x10 | DAT_000d67e8);
  system_reg_write(0x3034,DAT_000d67f4 << 0x10 | DAT_000d67f0);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_text_np_par_cfg(void)

{
  system_reg_write(0x3038,_DAT_000d679c << 0x10 | rdns_text_np_array);
  system_reg_write(0x303c,DAT_000d67a4 << 0x10 | DAT_000d67a0);
  system_reg_write(0x3040,DAT_000d67ac << 0x10 | DAT_000d67a8);
  system_reg_write(0x3044,DAT_000d67b4 << 0x10 | DAT_000d67b0);
  system_reg_write(0x3048,DAT_000d67bc << 0x10 | DAT_000d67b8);
  system_reg_write(0x304c,DAT_000d67c4 << 0x10 | DAT_000d67c0);
  system_reg_write(0x3050,DAT_000d67cc << 0x10 | DAT_000d67c8);
  system_reg_write(0x3054,DAT_000d67d4 << 0x10 | DAT_000d67d0);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_lum_np_par_cfg(void)

{
  system_reg_write(0x3058,_DAT_000d675c << 0x10 | rdns_lum_np_array);
  system_reg_write(0x305c,DAT_000d6764 << 0x10 | DAT_000d6760);
  system_reg_write(0x3060,DAT_000d676c << 0x10 | DAT_000d6768);
  system_reg_write(0x3064,DAT_000d6774 << 0x10 | DAT_000d6770);
  system_reg_write(0x3068,DAT_000d677c << 0x10 | DAT_000d6778);
  system_reg_write(0x306c,DAT_000d6784 << 0x10 | DAT_000d6780);
  system_reg_write(0x3070,DAT_000d678c << 0x10 | DAT_000d6788);
  system_reg_write(0x3074,DAT_000d6794 << 0x10 | DAT_000d6790);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_std_np_par_cfg(void)

{
  system_reg_write(0x3078,_DAT_000d671c << 0x10 | rdns_std_np_array);
  system_reg_write(0x307c,DAT_000d6724 << 0x10 | DAT_000d6720);
  system_reg_write(0x3080,DAT_000d672c << 0x10 | DAT_000d6728);
  system_reg_write(0x3084,DAT_000d6734 << 0x10 | DAT_000d6730);
  system_reg_write(0x3088,DAT_000d673c << 0x10 | DAT_000d6738);
  system_reg_write(0x308c,DAT_000d6744 << 0x10 | DAT_000d6740);
  system_reg_write(0x3090,DAT_000d674c << 0x10 | DAT_000d6748);
  system_reg_write(0x3094,DAT_000d6754 << 0x10 | DAT_000d6750);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_rdns_sl_par_cfg(void)

{
  system_reg_write(0x30a8,_DAT_000d66f0 << 6 | rdns_sl_par_cfg | rdns_mv_text_thres_intp << 0x10);
  return 0;
}



int tisp_rdns_awb_gain_updata(unsigned int param_1,unsigned int param_2)

{
  unsigned int uVar1;
  int iVar2;
  
  system_reg_write(0x3000,(param_2 >> 4) << 0x10 | param_1 >> 4);
  uVar1 = fix_point_div_32(6,1,param_1 >> 4);
  iVar2 = fix_point_div_32(6,1,param_2 >> 4);
  system_reg_write(0x3004,iVar2 << 0x10 | uVar1);
  *(int *)(*(int *)(ispcore_sd + 0xb8) + 0x30ac) = 1;
  return 0;
}



void tisp_rdns_wdr_en(int param_1)

{
  char *puVar1;
  
  rdns_wdr_en = param_1;
  if (param_1 == 0) {
    puVar1 = rdns_text_base_thres_array;
  }
  else {
    puVar1 = rdns_text_base_thres_wdr_array;
  }
  rdns_text_base_thres_array_now = puVar1;
  return;
}



int tisp_rdns_all_reg_refresh(void)

{
  tisp_rdns_intp();
  tisp_rdns_awb_gain_par_cfg();
  tisp_rdns_opt_cfg();
  tisp_rdns_slope_cfg();
  tisp_rdns_thres_par_cfg();
  tisp_rdns_gray_np_par_cfg();
  tisp_rdns_text_np_par_cfg();
  tisp_rdns_lum_np_par_cfg();
  tisp_rdns_std_np_par_cfg();
  tisp_rdns_sl_par_cfg();
  system_reg_write(0x30ac,1);
  return 0;
}



int tisp_rdns_intp_reg_refresh(void)

{
  tisp_rdns_intp();
  tisp_rdns_opt_cfg();
  tisp_rdns_slope_cfg();
  tisp_rdns_thres_par_cfg();
  tisp_rdns_sl_par_cfg();
  return 0;
}



int tisp_rdns_par_refresh(unsigned int param_1,int param_2,int param_3)

{
  code *pcVar1;
  unsigned int uVar2;
  
  if (rdns_gain_old == 0xffffffff) {
    pcVar1 = tisp_rdns_all_reg_refresh;
  }
  else {
    uVar2 = rdns_gain_old - param_1;
    if (rdns_gain_old <= param_1) {
      uVar2 = param_1 - rdns_gain_old;
    }
    if (uVar2 < 0x100) goto LAB_00069190;
    pcVar1 = tisp_rdns_intp_reg_refresh;
  }
  rdns_gain_old = param_1;
  (*pcVar1)();
LAB_00069190:
  if (param_3 == 1) {
    system_reg_write(0x30ac,1);
  }
  return 0;
}



int tisp_rdns_gain_update(int param_1)

{
  tisp_rdns_par_refresh(param_1,0x100,1);
  return 0;
}



int tiziano_rdns_params_refresh(void)

{
  memcpy(&rdns_out_opt_array,&DAT_000a7928,4);
  memcpy(&rdns_awb_gain_par_cfg_array,&DAT_000a792c,0x10);
  memcpy(rdns_oe_num_array,&DAT_000a793c,0x24);
  memcpy(&rdns_opt_cfg_array,&DAT_000a7960,0x14);
  memcpy(rdns_gray_stren_array,&DAT_000a7974,0x24);
  memcpy(&rdns_slope_par_cfg_array,&DAT_000a7998,8);
  memcpy(rdns_gray_std_thres_array,&DAT_000a79a0,0x24);
  memcpy(rdns_text_base_thres_array,&DAT_000a79c4,0x24);
  memcpy(rdns_filter_sat_thres_array,&DAT_000a79e8,0x24);
  memcpy(rdns_oe_thres_array,&DAT_000a7a0c,0x24);
  memcpy(rdns_flat_g_thres_array,&DAT_000a7a30,0x24);
  memcpy(rdns_text_g_thres_array,&DAT_000a7a54,0x24);
  memcpy(rdns_flat_rb_thres_array,&DAT_000a7a78,0x24);
  memcpy(rdns_text_rb_thres_array,&DAT_000a7a9c,0x24);
  memcpy(&rdns_gray_np_array,&DAT_000a7ac0,0x20);
  memcpy(&rdns_text_np_array,&DAT_000a7ae0,0x40);
  memcpy(&rdns_lum_np_array,&DAT_000a7b20,0x40);
  memcpy(&rdns_std_np_array,&DAT_000a7b60,0x40);
  memcpy(rdns_mv_text_thres_array,&DAT_000a7ba0,0x24);
  memcpy(rdns_text_base_thres_wdr_array,&DAT_000a7bc4,0x24);
  memcpy(&rdns_sl_par_cfg,&DAT_000a7be8,8);
  return 0;
}



int tiziano_rdns_init(void)

{
  char *puVar1;
  
  if (rdns_wdr_en == 0) {
    puVar1 = rdns_text_base_thres_array;
  }
  else {
    puVar1 = rdns_text_base_thres_wdr_array;
  }
  rdns_gain_old = 0xffffffff;
  rdns_text_base_thres_array_now = puVar1;
  tiziano_rdns_params_refresh();
  tisp_rdns_par_refresh(0x10000,0x10000,1);
  return 0;
}



int tisp_rdns_refresh(int param_1)

{
  tisp_rdns_par_refresh(param_1,0x100,1);
  return 0;
}



int tiziano_rdns_dn_params_refresh(void)

{
  tiziano_rdns_params_refresh();
  tisp_rdns_all_reg_refresh(rdns_gain_old);
  return 0;
}



int tisp_rdns_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x432:
    __src = (char *)&rdns_out_opt_array;
    __n = 4;
    goto LAB_0006966c;
  case 0x433:
    __src = (char *)&rdns_awb_gain_par_cfg_array;
    __n = 0x10;
    goto LAB_0006966c;
  case 0x434:
    __src = rdns_oe_num_array;
    break;
  case 0x435:
    __src = (char *)&rdns_opt_cfg_array;
    __n = 0x14;
    goto LAB_0006966c;
  case 0x436:
    __src = rdns_gray_stren_array;
    break;
  case 0x437:
    __src = (char *)&rdns_slope_par_cfg_array;
    goto LAB_00069618;
  case 0x438:
    __src = rdns_gray_std_thres_array;
    break;
  case 0x439:
    __src = rdns_text_base_thres_array;
    break;
  case 0x43a:
    __src = rdns_filter_sat_thres_array;
    break;
  case 0x43b:
    __src = rdns_oe_thres_array;
    break;
  case 0x43c:
    __src = rdns_flat_g_thres_array;
    break;
  case 0x43d:
    __src = rdns_text_g_thres_array;
    break;
  case 0x43e:
    __src = rdns_flat_rb_thres_array;
    break;
  case 0x43f:
    __src = rdns_text_rb_thres_array;
    break;
  case 0x440:
    __src = (char *)&rdns_gray_np_array;
    __n = 0x20;
    goto LAB_0006966c;
  case 0x441:
    __src = (char *)&rdns_text_np_array;
    goto LAB_000695f0;
  case 0x442:
    __src = (char *)&rdns_lum_np_array;
    goto LAB_000695f0;
  case 0x443:
    __src = (char *)&rdns_std_np_array;
LAB_000695f0:
    __n = 0x40;
    goto LAB_0006966c;
  case 0x444:
    __src = rdns_mv_text_thres_array;
    break;
  case 0x445:
    __src = rdns_text_base_thres_wdr_array;
    break;
  case 0x446:
    __src = (char *)&rdns_sl_par_cfg;
LAB_00069618:
    __n = 8;
    goto LAB_0006966c;
  default:
    isp_printf(2,"%s,%d: rnds not support param id %d\n","tisp_rdns_param_array_get",0x26a,param_1);
    return 0xffffffff;
  }
  __n = 0x24;
LAB_0006966c:
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_rdns_param_array_set(int param_1,void *param_2,int *param_3)

{
  int uVar1;
  char *__dest;
  int *puVar2;
  
  switch(param_1) {
  case 0x432:
    memcpy(&rdns_out_opt_array,param_2,4);
    uVar1 = 4;
    goto LAB_000698c0;
  case 0x433:
    memcpy(&rdns_awb_gain_par_cfg_array,param_2,0x10);
    uVar1 = 0x10;
    goto LAB_000698c0;
  case 0x434:
    __dest = rdns_oe_num_array;
    break;
  case 0x435:
    memcpy(&rdns_opt_cfg_array,param_2,0x14);
    uVar1 = 0x14;
    goto LAB_000698c0;
  case 0x436:
    __dest = rdns_gray_stren_array;
    break;
  case 0x437:
    puVar2 = &rdns_slope_par_cfg_array;
    goto LAB_00069874;
  case 0x438:
    __dest = rdns_gray_std_thres_array;
    break;
  case 0x439:
    __dest = rdns_text_base_thres_array;
    break;
  case 0x43a:
    __dest = rdns_filter_sat_thres_array;
    break;
  case 0x43b:
    __dest = rdns_oe_thres_array;
    break;
  case 0x43c:
    __dest = rdns_flat_g_thres_array;
    break;
  case 0x43d:
    __dest = rdns_text_g_thres_array;
    break;
  case 0x43e:
    __dest = rdns_flat_rb_thres_array;
    break;
  case 0x43f:
    __dest = rdns_text_rb_thres_array;
    break;
  case 0x440:
    memcpy(&rdns_gray_np_array,param_2,0x20);
    uVar1 = 0x20;
    goto LAB_000698c0;
  case 0x441:
    puVar2 = &rdns_text_np_array;
    goto LAB_0006982c;
  case 0x442:
    puVar2 = &rdns_lum_np_array;
    goto LAB_0006982c;
  case 0x443:
    puVar2 = &rdns_std_np_array;
LAB_0006982c:
    memcpy(puVar2,param_2,0x40);
    uVar1 = 0x40;
    goto LAB_000698c0;
  case 0x444:
    __dest = rdns_mv_text_thres_array;
    break;
  case 0x445:
    uVar1 = 0x24;
    goto LAB_000698c0;
  case 0x446:
    puVar2 = &rdns_sl_par_cfg;
LAB_00069874:
    memcpy(puVar2,param_2,8);
    uVar1 = 8;
    goto LAB_000698c0;
  default:
    isp_printf(2,"%s,%d: rdns not support param id %d\n","tisp_rdns_param_array_set",0x2e7,param_1);
    return 0xffffffff;
  }
  memcpy(__dest,param_2,0x24);
  uVar1 = 0x24;
LAB_000698c0:
  *param_3 = uVar1;
  tisp_rdns_all_reg_refresh(rdns_gain_old + 0x200);
  return 0;
}



int tiziano_wdr_fusion1_curve(void)

{
  bool bVar1;
  int iVar2;
  unsigned int *puVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int iVar6;
  int iVar7;
  unsigned int uVar8;
  int *piVar9;
  int iVar10;
  unsigned int uVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  unsigned int uVar15;
  unsigned int *puVar16;
  int iVar17;
  int iVar18;
  unsigned int uVar19;
  int iVar20;
  
  uVar19 = DAT_000d8ac0;
  if (param_wdr_gam_y_array == 1) {
    DAT_000b1cec = 3;
    puVar3 = &wdr_ev_list;
    iVar10 = 0;
    do {
      uVar15 = *puVar3;
      if (wdr_ev_old <= uVar15) {
        iVar12 = iVar10 * 3 + 1;
        if (iVar10 != 0) {
          uVar4 = (&wdr_ev_list)[iVar10 + -1];
          if (uVar15 != uVar4) {
            uVar8 = (&param_wdr_gam_y_array)[iVar12];
            uVar11 = (&param_wdr_gam_y_array)[iVar10 * 3 + -2];
            if (uVar8 < uVar11) {
              iVar10 = wdr_ev_old - uVar4;
              if (wdr_ev_old <= uVar4) {
                iVar10 = uVar4 - wdr_ev_old;
              }
              uVar5 = uVar15 - uVar4;
              if (uVar15 < uVar4) {
                uVar5 = uVar4 - uVar15;
              }
              iVar10 = uVar11 - (iVar10 * (uVar11 - uVar8)) / uVar5;
            }
            else {
              iVar10 = wdr_ev_old - uVar4;
              if (wdr_ev_old <= uVar4) {
                iVar10 = uVar4 - wdr_ev_old;
              }
              uVar5 = uVar15 - uVar4;
              if (uVar15 < uVar4) {
                uVar5 = uVar4 - uVar15;
              }
              iVar10 = (iVar10 * (uVar8 - uVar11)) / uVar5 + uVar11;
            }
            goto LAB_00069a14;
          }
        }
        iVar10 = (&param_wdr_gam_y_array)[iVar12];
        goto LAB_00069a14;
      }
      iVar10 = iVar10 + 1;
      puVar3 = puVar3 + 1;
    } while (iVar10 != 9);
    iVar12 = 0x19;
    iVar10 = DAT_000d8aa8;
LAB_00069a14:
    uVar15 = (&param_wdr_gam_y_array)[iVar12 + 1];
    iVar12 = (&param_wdr_gam_y_array)[iVar12 + 2];
    puVar3 = &param_fusion1_cure_y_array;
    iVar7 = 0;
    do {
      if (iVar7 < iVar10) {
        *puVar3 = uVar19;
      }
      else if (iVar10 == iVar7) {
        *puVar3 = uVar15;
      }
      else {
        *puVar3 = puVar3[-1] - (uVar15 - iVar12) / (0x20U - iVar10);
      }
      if (0x100 < *puVar3) {
        *puVar3 = 0x100;
      }
      iVar7 = iVar7 + 1;
      puVar3 = puVar3 + 1;
    } while (iVar7 != 0x21);
    return 0;
  }
  if (param_wdr_gam_y_array != 2) {
    return 0;
  }
  if (DAT_000b0e8c == 1) {
    return 0;
  }
  iVar10 = param_wdr_weightLUT20_array._28_4_;
  iVar12 = param_wdr_weightLUT20_array._8_4_;
  iVar7 = param_wdr_weightLUT20_array._4_4_;
  iVar13 = param_wdr_weightLUT20_array._20_4_;
  uVar19 = param_wdr_weightLUT20_array._16_4_;
  iVar14 = param_wdr_weightLUT20_array._12_4_;
  iVar17 = param_wdr_weightLUT20_array._24_4_;
  if (wdr_ev_old <= wdr_ev_list) goto LAB_0006ae0c;
  if (DAT_000b0e38 < wdr_ev_old) {
    if (wdr_ev_old <= DAT_000b0e3c) {
      iVar10 = wdr_ev_old - DAT_000b0e38;
      bVar1 = DAT_000b0e3c < DAT_000b0e38;
      if ((uint)param_wdr_weightLUT02_array._4_4_ < (uint)param_wdr_weightLUT20_array._36_4_) {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = -((uint)((param_wdr_weightLUT20_array._36_4_ - param_wdr_weightLUT02_array._4_4_) *
                         iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._4_4_ - param_wdr_weightLUT20_array._36_4_) *
                       iVar10) / uVar19;
      }
      iVar7 = param_wdr_weightLUT20_array._36_4_ + uVar19;
      if ((uint)param_wdr_weightLUT02_array._8_4_ < (uint)param_wdr_weightLUT20_array._40_4_) {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = -((uint)((param_wdr_weightLUT20_array._40_4_ - param_wdr_weightLUT02_array._8_4_) *
                         iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._8_4_ - param_wdr_weightLUT20_array._40_4_) *
                       iVar10) / uVar19;
      }
      iVar12 = uVar19 + param_wdr_weightLUT20_array._40_4_;
      if ((uint)param_wdr_weightLUT02_array._12_4_ < (uint)param_wdr_weightLUT20_array._44_4_) {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = -((uint)((param_wdr_weightLUT20_array._44_4_ - param_wdr_weightLUT02_array._12_4_)
                         * iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._12_4_ - param_wdr_weightLUT20_array._44_4_) *
                       iVar10) / uVar19;
      }
      iVar14 = uVar19 + param_wdr_weightLUT20_array._44_4_;
      if ((uint)param_wdr_weightLUT02_array._16_4_ < (uint)param_wdr_weightLUT20_array._48_4_) {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = -((uint)((param_wdr_weightLUT20_array._48_4_ - param_wdr_weightLUT02_array._16_4_)
                         * iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar19 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._16_4_ - param_wdr_weightLUT20_array._48_4_) *
                       iVar10) / uVar19;
      }
      uVar19 = uVar19 + param_wdr_weightLUT20_array._48_4_;
      if ((uint)param_wdr_weightLUT02_array._20_4_ < (uint)param_wdr_weightLUT20_array._52_4_) {
        uVar15 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar15 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar15 = -((uint)((param_wdr_weightLUT20_array._52_4_ - param_wdr_weightLUT02_array._20_4_)
                         * iVar10) / uVar15);
      }
      else {
        uVar15 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar15 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar15 = (uint)((param_wdr_weightLUT02_array._20_4_ - param_wdr_weightLUT20_array._52_4_) *
                       iVar10) / uVar15;
      }
      iVar13 = uVar15 + param_wdr_weightLUT20_array._52_4_;
      if ((uint)param_wdr_weightLUT02_array._24_4_ < (uint)param_wdr_weightLUT20_array._56_4_) {
        uVar15 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar15 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar15 = -((uint)((param_wdr_weightLUT20_array._56_4_ - param_wdr_weightLUT02_array._24_4_)
                         * iVar10) / uVar15);
      }
      else {
        uVar15 = DAT_000b0e38 - DAT_000b0e3c;
        if (!bVar1) {
          uVar15 = DAT_000b0e3c - DAT_000b0e38;
        }
        uVar15 = (uint)((param_wdr_weightLUT02_array._24_4_ - param_wdr_weightLUT20_array._56_4_) *
                       iVar10) / uVar15;
      }
      iVar17 = uVar15 + param_wdr_weightLUT20_array._56_4_;
      if ((uint)param_wdr_weightLUT02_array._28_4_ < (uint)param_wdr_weightLUT20_array._60_4_) {
        uVar8 = (param_wdr_weightLUT20_array._60_4_ - param_wdr_weightLUT02_array._28_4_) * iVar10;
        uVar15 = DAT_000b0e38 - DAT_000b0e3c;
        uVar4 = DAT_000b0e3c - DAT_000b0e38;
        iVar10 = param_wdr_weightLUT20_array._60_4_;
        goto LAB_00069fa0;
      }
      uVar15 = (param_wdr_weightLUT02_array._28_4_ - param_wdr_weightLUT20_array._60_4_) * iVar10;
      uVar8 = DAT_000b0e38 - DAT_000b0e3c;
      uVar4 = DAT_000b0e3c - DAT_000b0e38;
      iVar10 = param_wdr_weightLUT20_array._60_4_;
      goto LAB_00069fc0;
    }
    if (DAT_000b0e40 < wdr_ev_old) {
      if (DAT_000b0e44 < wdr_ev_old) {
        if (wdr_ev_old <= DAT_000b0e48) {
          iVar10 = wdr_ev_old - DAT_000b0e44;
          bVar1 = DAT_000b0e48 < DAT_000b0e44;
          if ((uint)param_wdr_weightLUT12_array._36_4_ < (uint)param_wdr_weightLUT12_array._4_4_) {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._4_4_ -
                              param_wdr_weightLUT12_array._36_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = (uint)((param_wdr_weightLUT12_array._36_4_ - param_wdr_weightLUT12_array._4_4_)
                           * iVar10) / uVar19;
          }
          iVar7 = param_wdr_weightLUT12_array._4_4_ + uVar19;
          if ((uint)param_wdr_weightLUT12_array._40_4_ < (uint)param_wdr_weightLUT12_array._8_4_) {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._8_4_ -
                              param_wdr_weightLUT12_array._40_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = (uint)((param_wdr_weightLUT12_array._40_4_ - param_wdr_weightLUT12_array._8_4_)
                           * iVar10) / uVar19;
          }
          iVar12 = uVar19 + param_wdr_weightLUT12_array._8_4_;
          if ((uint)param_wdr_weightLUT12_array._44_4_ < (uint)param_wdr_weightLUT12_array._12_4_) {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._12_4_ -
                              param_wdr_weightLUT12_array._44_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = (uint)((param_wdr_weightLUT12_array._44_4_ - param_wdr_weightLUT12_array._12_4_
                            ) * iVar10) / uVar19;
          }
          iVar14 = uVar19 + param_wdr_weightLUT12_array._12_4_;
          if ((uint)param_wdr_weightLUT12_array._48_4_ < (uint)param_wdr_weightLUT12_array._16_4_) {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._16_4_ -
                              param_wdr_weightLUT12_array._48_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar19 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar19 = (uint)((param_wdr_weightLUT12_array._48_4_ - param_wdr_weightLUT12_array._16_4_
                            ) * iVar10) / uVar19;
          }
          uVar19 = uVar19 + param_wdr_weightLUT12_array._16_4_;
          if ((uint)param_wdr_weightLUT12_array._52_4_ < (uint)param_wdr_weightLUT12_array._20_4_) {
            uVar15 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar15 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar15 = -((uint)((param_wdr_weightLUT12_array._20_4_ -
                              param_wdr_weightLUT12_array._52_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar15 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar15 = (uint)((param_wdr_weightLUT12_array._52_4_ - param_wdr_weightLUT12_array._20_4_
                            ) * iVar10) / uVar15;
          }
          iVar13 = uVar15 + param_wdr_weightLUT12_array._20_4_;
          if ((uint)param_wdr_weightLUT12_array._56_4_ < (uint)param_wdr_weightLUT12_array._24_4_) {
            uVar15 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar15 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar15 = -((uint)((param_wdr_weightLUT12_array._24_4_ -
                              param_wdr_weightLUT12_array._56_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e44 - DAT_000b0e48;
            if (!bVar1) {
              uVar15 = DAT_000b0e48 - DAT_000b0e44;
            }
            uVar15 = (uint)((param_wdr_weightLUT12_array._56_4_ - param_wdr_weightLUT12_array._24_4_
                            ) * iVar10) / uVar15;
          }
          iVar17 = uVar15 + param_wdr_weightLUT12_array._24_4_;
          if ((uint)param_wdr_weightLUT12_array._60_4_ < (uint)param_wdr_weightLUT12_array._28_4_) {
            uVar8 = (param_wdr_weightLUT12_array._28_4_ - param_wdr_weightLUT12_array._60_4_) *
                    iVar10;
            uVar15 = DAT_000b0e44 - DAT_000b0e48;
            uVar4 = DAT_000b0e48 - DAT_000b0e44;
            iVar10 = param_wdr_weightLUT12_array._28_4_;
            goto LAB_0006a6b4;
          }
          uVar15 = (param_wdr_weightLUT12_array._60_4_ - param_wdr_weightLUT12_array._28_4_) *
                   iVar10;
          uVar11 = DAT_000b0e44 - DAT_000b0e48;
          uVar4 = DAT_000b0e48 - DAT_000b0e44;
          iVar10 = param_wdr_weightLUT12_array._28_4_;
          goto LAB_0006a6d8;
        }
        if (wdr_ev_old <= DAT_000b0e4c) {
          bVar1 = DAT_000b0e4c < DAT_000b0e48;
          iVar10 = wdr_ev_old - DAT_000b0e48;
          if ((uint)param_wdr_weightLUT22_array._4_4_ < (uint)param_wdr_weightLUT12_array._36_4_) {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._36_4_ -
                              param_wdr_weightLUT22_array._4_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._4_4_ - param_wdr_weightLUT12_array._36_4_)
                           * iVar10) / uVar19;
          }
          iVar7 = param_wdr_weightLUT12_array._36_4_ + uVar19;
          if ((uint)param_wdr_weightLUT22_array._8_4_ < (uint)param_wdr_weightLUT12_array._40_4_) {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._40_4_ -
                              param_wdr_weightLUT22_array._8_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._8_4_ - param_wdr_weightLUT12_array._40_4_)
                           * iVar10) / uVar19;
          }
          iVar12 = uVar19 + param_wdr_weightLUT12_array._40_4_;
          if ((uint)param_wdr_weightLUT22_array._12_4_ < (uint)param_wdr_weightLUT12_array._44_4_) {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._44_4_ -
                              param_wdr_weightLUT22_array._12_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._12_4_ - param_wdr_weightLUT12_array._44_4_
                            ) * iVar10) / uVar19;
          }
          iVar14 = uVar19 + param_wdr_weightLUT12_array._44_4_;
          if ((uint)param_wdr_weightLUT22_array._16_4_ < (uint)param_wdr_weightLUT12_array._48_4_) {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = -((uint)((param_wdr_weightLUT12_array._48_4_ -
                              param_wdr_weightLUT22_array._16_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar19 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._16_4_ - param_wdr_weightLUT12_array._48_4_
                            ) * iVar10) / uVar19;
          }
          uVar19 = uVar19 + param_wdr_weightLUT12_array._48_4_;
          if ((uint)param_wdr_weightLUT22_array._20_4_ < (uint)param_wdr_weightLUT12_array._52_4_) {
            uVar15 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar15 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar15 = -((uint)((param_wdr_weightLUT12_array._52_4_ -
                              param_wdr_weightLUT22_array._20_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar15 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar15 = (uint)((param_wdr_weightLUT22_array._20_4_ - param_wdr_weightLUT12_array._52_4_
                            ) * iVar10) / uVar15;
          }
          iVar13 = uVar15 + param_wdr_weightLUT12_array._52_4_;
          if ((uint)param_wdr_weightLUT22_array._24_4_ < (uint)param_wdr_weightLUT12_array._56_4_) {
            uVar15 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar15 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar15 = -((uint)((param_wdr_weightLUT12_array._56_4_ -
                              param_wdr_weightLUT22_array._24_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e48 - DAT_000b0e4c;
            if (!bVar1) {
              uVar15 = DAT_000b0e4c - DAT_000b0e48;
            }
            uVar15 = (uint)((param_wdr_weightLUT22_array._24_4_ - param_wdr_weightLUT12_array._56_4_
                            ) * iVar10) / uVar15;
          }
          iVar17 = uVar15 + param_wdr_weightLUT12_array._56_4_;
          if ((uint)param_wdr_weightLUT12_array._60_4_ <= (uint)param_wdr_weightLUT22_array._28_4_)
          {
            uVar15 = (param_wdr_weightLUT22_array._28_4_ - param_wdr_weightLUT12_array._60_4_) *
                     iVar10;
            iVar10 = param_wdr_weightLUT12_array._60_4_;
            uVar4 = DAT_000b0e4c;
            uVar8 = DAT_000b0e48;
            goto LAB_0006a930;
          }
          uVar15 = DAT_000b0e48 - DAT_000b0e4c;
          if (!bVar1) {
            uVar15 = DAT_000b0e4c - DAT_000b0e48;
          }
          uVar8 = (param_wdr_weightLUT12_array._60_4_ - param_wdr_weightLUT22_array._28_4_) * iVar10
          ;
          iVar10 = param_wdr_weightLUT12_array._60_4_;
          goto LAB_0006a6bc;
        }
        if (DAT_000b0e50 < wdr_ev_old) {
          iVar10 = param_wdr_weightLUT21_array._28_4_;
          iVar12 = param_wdr_weightLUT21_array._8_4_;
          iVar7 = param_wdr_weightLUT21_array._4_4_;
          iVar13 = param_wdr_weightLUT21_array._20_4_;
          uVar19 = param_wdr_weightLUT21_array._16_4_;
          iVar14 = param_wdr_weightLUT21_array._12_4_;
          iVar17 = param_wdr_weightLUT21_array._24_4_;
          if (DAT_000b0e54 < wdr_ev_old) goto LAB_0006ae0c;
          iVar10 = wdr_ev_old - DAT_000b0e50;
          bVar1 = DAT_000b0e54 < DAT_000b0e50;
          if ((uint)param_wdr_weightLUT21_array._4_4_ < (uint)param_wdr_weightLUT22_array._36_4_) {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._36_4_ -
                              param_wdr_weightLUT21_array._4_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = (uint)((param_wdr_weightLUT21_array._4_4_ - param_wdr_weightLUT22_array._36_4_)
                           * iVar10) / uVar19;
          }
          iVar7 = param_wdr_weightLUT22_array._36_4_ + uVar19;
          if ((uint)param_wdr_weightLUT21_array._8_4_ < (uint)param_wdr_weightLUT22_array._40_4_) {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._40_4_ -
                              param_wdr_weightLUT21_array._8_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = (uint)((param_wdr_weightLUT21_array._8_4_ - param_wdr_weightLUT22_array._40_4_)
                           * iVar10) / uVar19;
          }
          iVar12 = uVar19 + param_wdr_weightLUT22_array._40_4_;
          if ((uint)param_wdr_weightLUT21_array._12_4_ < (uint)param_wdr_weightLUT22_array._44_4_) {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._44_4_ -
                              param_wdr_weightLUT21_array._12_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = (uint)((param_wdr_weightLUT21_array._12_4_ - param_wdr_weightLUT22_array._44_4_
                            ) * iVar10) / uVar19;
          }
          iVar14 = uVar19 + param_wdr_weightLUT22_array._44_4_;
          if ((uint)param_wdr_weightLUT21_array._16_4_ < (uint)param_wdr_weightLUT22_array._48_4_) {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._48_4_ -
                              param_wdr_weightLUT21_array._16_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar19 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar19 = (uint)((param_wdr_weightLUT21_array._16_4_ - param_wdr_weightLUT22_array._48_4_
                            ) * iVar10) / uVar19;
          }
          uVar19 = uVar19 + param_wdr_weightLUT22_array._48_4_;
          if ((uint)param_wdr_weightLUT21_array._20_4_ < (uint)param_wdr_weightLUT22_array._52_4_) {
            uVar15 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar15 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar15 = -((uint)((param_wdr_weightLUT22_array._52_4_ -
                              param_wdr_weightLUT21_array._20_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar15 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar15 = (uint)((param_wdr_weightLUT21_array._20_4_ - param_wdr_weightLUT22_array._52_4_
                            ) * iVar10) / uVar15;
          }
          iVar13 = uVar15 + param_wdr_weightLUT22_array._52_4_;
          if ((uint)param_wdr_weightLUT21_array._24_4_ < (uint)param_wdr_weightLUT22_array._56_4_) {
            uVar15 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar15 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar15 = -((uint)((param_wdr_weightLUT22_array._56_4_ -
                              param_wdr_weightLUT21_array._24_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e50 - DAT_000b0e54;
            if (!bVar1) {
              uVar15 = DAT_000b0e54 - DAT_000b0e50;
            }
            uVar15 = (uint)((param_wdr_weightLUT21_array._24_4_ - param_wdr_weightLUT22_array._56_4_
                            ) * iVar10) / uVar15;
          }
          iVar17 = uVar15 + param_wdr_weightLUT22_array._56_4_;
          if ((uint)param_wdr_weightLUT21_array._28_4_ < (uint)param_wdr_weightLUT22_array._60_4_) {
            uVar8 = (param_wdr_weightLUT22_array._60_4_ - param_wdr_weightLUT21_array._28_4_) *
                    iVar10;
            uVar15 = DAT_000b0e50 - DAT_000b0e54;
            uVar4 = DAT_000b0e54 - DAT_000b0e50;
            iVar10 = param_wdr_weightLUT22_array._60_4_;
            goto LAB_0006adc4;
          }
          uVar15 = (param_wdr_weightLUT21_array._28_4_ - param_wdr_weightLUT22_array._60_4_) *
                   iVar10;
          uVar8 = DAT_000b0e50 - DAT_000b0e54;
          uVar4 = DAT_000b0e54 - DAT_000b0e50;
          iVar10 = param_wdr_weightLUT22_array._60_4_;
        }
        else {
          iVar10 = wdr_ev_old - DAT_000b0e4c;
          bVar1 = DAT_000b0e50 < DAT_000b0e4c;
          if ((uint)param_wdr_weightLUT22_array._36_4_ < (uint)param_wdr_weightLUT22_array._4_4_) {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._4_4_ -
                              param_wdr_weightLUT22_array._36_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._36_4_ - param_wdr_weightLUT22_array._4_4_)
                           * iVar10) / uVar19;
          }
          iVar7 = param_wdr_weightLUT22_array._4_4_ + uVar19;
          if ((uint)param_wdr_weightLUT22_array._40_4_ < (uint)param_wdr_weightLUT22_array._8_4_) {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._8_4_ -
                              param_wdr_weightLUT22_array._40_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._40_4_ - param_wdr_weightLUT22_array._8_4_)
                           * iVar10) / uVar19;
          }
          iVar12 = uVar19 + param_wdr_weightLUT22_array._8_4_;
          if ((uint)param_wdr_weightLUT22_array._44_4_ < (uint)param_wdr_weightLUT22_array._12_4_) {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._12_4_ -
                              param_wdr_weightLUT22_array._44_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._44_4_ - param_wdr_weightLUT22_array._12_4_
                            ) * iVar10) / uVar19;
          }
          iVar14 = uVar19 + param_wdr_weightLUT22_array._12_4_;
          if ((uint)param_wdr_weightLUT22_array._48_4_ < (uint)param_wdr_weightLUT22_array._16_4_) {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = -((uint)((param_wdr_weightLUT22_array._16_4_ -
                              param_wdr_weightLUT22_array._48_4_) * iVar10) / uVar19);
          }
          else {
            uVar19 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar19 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar19 = (uint)((param_wdr_weightLUT22_array._48_4_ - param_wdr_weightLUT22_array._16_4_
                            ) * iVar10) / uVar19;
          }
          uVar19 = uVar19 + param_wdr_weightLUT22_array._16_4_;
          if ((uint)param_wdr_weightLUT22_array._52_4_ < (uint)param_wdr_weightLUT22_array._20_4_) {
            uVar15 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar15 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar15 = -((uint)((param_wdr_weightLUT22_array._20_4_ -
                              param_wdr_weightLUT22_array._52_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar15 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar15 = (uint)((param_wdr_weightLUT22_array._52_4_ - param_wdr_weightLUT22_array._20_4_
                            ) * iVar10) / uVar15;
          }
          iVar13 = uVar15 + param_wdr_weightLUT22_array._20_4_;
          if ((uint)param_wdr_weightLUT22_array._56_4_ < (uint)param_wdr_weightLUT22_array._24_4_) {
            uVar15 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar15 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar15 = -((uint)((param_wdr_weightLUT22_array._24_4_ -
                              param_wdr_weightLUT22_array._56_4_) * iVar10) / uVar15);
          }
          else {
            uVar15 = DAT_000b0e4c - DAT_000b0e50;
            if (!bVar1) {
              uVar15 = DAT_000b0e50 - DAT_000b0e4c;
            }
            uVar15 = (uint)((param_wdr_weightLUT22_array._56_4_ - param_wdr_weightLUT22_array._24_4_
                            ) * iVar10) / uVar15;
          }
          iVar17 = uVar15 + param_wdr_weightLUT22_array._24_4_;
          if ((uint)param_wdr_weightLUT22_array._60_4_ < (uint)param_wdr_weightLUT22_array._28_4_) {
            uVar8 = (param_wdr_weightLUT22_array._28_4_ - param_wdr_weightLUT22_array._60_4_) *
                    iVar10;
            uVar15 = DAT_000b0e4c - DAT_000b0e50;
            uVar4 = DAT_000b0e50 - DAT_000b0e4c;
            iVar10 = param_wdr_weightLUT22_array._28_4_;
LAB_0006adc4:
            if (!bVar1) {
              uVar15 = uVar4;
            }
            uVar8 = uVar8 / uVar15;
            goto LAB_0006a6c0;
          }
          uVar15 = (param_wdr_weightLUT22_array._60_4_ - param_wdr_weightLUT22_array._28_4_) *
                   iVar10;
          uVar8 = DAT_000b0e4c - DAT_000b0e50;
          uVar4 = DAT_000b0e50 - DAT_000b0e4c;
          iVar10 = param_wdr_weightLUT22_array._28_4_;
        }
        if (bVar1) {
          uVar4 = uVar8;
        }
      }
      else {
        iVar10 = wdr_ev_old - DAT_000b0e40;
        bVar1 = DAT_000b0e44 < DAT_000b0e40;
        if ((uint)param_wdr_weightLUT12_array._4_4_ < (uint)param_wdr_weightLUT02_array._36_4_) {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = -((uint)((param_wdr_weightLUT02_array._36_4_ - param_wdr_weightLUT12_array._4_4_)
                           * iVar10) / uVar19);
        }
        else {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = (uint)((param_wdr_weightLUT12_array._4_4_ - param_wdr_weightLUT02_array._36_4_) *
                         iVar10) / uVar19;
        }
        iVar7 = param_wdr_weightLUT02_array._36_4_ + uVar19;
        if ((uint)param_wdr_weightLUT12_array._8_4_ < (uint)param_wdr_weightLUT02_array._40_4_) {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = -((uint)((param_wdr_weightLUT02_array._40_4_ - param_wdr_weightLUT12_array._8_4_)
                           * iVar10) / uVar19);
        }
        else {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = (uint)((param_wdr_weightLUT12_array._8_4_ - param_wdr_weightLUT02_array._40_4_) *
                         iVar10) / uVar19;
        }
        iVar12 = uVar19 + param_wdr_weightLUT02_array._40_4_;
        if ((uint)param_wdr_weightLUT12_array._12_4_ < (uint)param_wdr_weightLUT02_array._44_4_) {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = -((uint)((param_wdr_weightLUT02_array._44_4_ - param_wdr_weightLUT12_array._12_4_
                            ) * iVar10) / uVar19);
        }
        else {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = (uint)((param_wdr_weightLUT12_array._12_4_ - param_wdr_weightLUT02_array._44_4_)
                         * iVar10) / uVar19;
        }
        iVar14 = uVar19 + param_wdr_weightLUT02_array._44_4_;
        if ((uint)param_wdr_weightLUT12_array._16_4_ < (uint)param_wdr_weightLUT02_array._48_4_) {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = -((uint)((param_wdr_weightLUT02_array._48_4_ - param_wdr_weightLUT12_array._16_4_
                            ) * iVar10) / uVar19);
        }
        else {
          uVar19 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar19 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar19 = (uint)((param_wdr_weightLUT12_array._16_4_ - param_wdr_weightLUT02_array._48_4_)
                         * iVar10) / uVar19;
        }
        uVar19 = uVar19 + param_wdr_weightLUT02_array._48_4_;
        if ((uint)param_wdr_weightLUT12_array._20_4_ < (uint)param_wdr_weightLUT02_array._52_4_) {
          uVar15 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar15 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar15 = -((uint)((param_wdr_weightLUT02_array._52_4_ - param_wdr_weightLUT12_array._20_4_
                            ) * iVar10) / uVar15);
        }
        else {
          uVar15 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar15 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar15 = (uint)((param_wdr_weightLUT12_array._20_4_ - param_wdr_weightLUT02_array._52_4_)
                         * iVar10) / uVar15;
        }
        iVar13 = uVar15 + param_wdr_weightLUT02_array._52_4_;
        if ((uint)param_wdr_weightLUT12_array._24_4_ < (uint)param_wdr_weightLUT02_array._56_4_) {
          uVar15 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar15 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar15 = -((uint)((param_wdr_weightLUT02_array._56_4_ - param_wdr_weightLUT12_array._24_4_
                            ) * iVar10) / uVar15);
        }
        else {
          uVar15 = DAT_000b0e40 - DAT_000b0e44;
          if (!bVar1) {
            uVar15 = DAT_000b0e44 - DAT_000b0e40;
          }
          uVar15 = (uint)((param_wdr_weightLUT12_array._24_4_ - param_wdr_weightLUT02_array._56_4_)
                         * iVar10) / uVar15;
        }
        iVar17 = uVar15 + param_wdr_weightLUT02_array._56_4_;
        if ((uint)param_wdr_weightLUT12_array._28_4_ < (uint)param_wdr_weightLUT02_array._60_4_) {
          uVar8 = (param_wdr_weightLUT02_array._60_4_ - param_wdr_weightLUT12_array._28_4_) * iVar10
          ;
          uVar15 = DAT_000b0e40 - DAT_000b0e44;
          uVar4 = DAT_000b0e44 - DAT_000b0e40;
          iVar10 = param_wdr_weightLUT02_array._60_4_;
LAB_0006a6b4:
          if (!bVar1) {
            uVar15 = uVar4;
          }
LAB_0006a6bc:
          uVar8 = uVar8 / uVar15;
LAB_0006a6c0:
          iVar10 = iVar10 - uVar8;
          goto LAB_0006ae0c;
        }
        uVar15 = (param_wdr_weightLUT12_array._28_4_ - param_wdr_weightLUT02_array._60_4_) * iVar10;
        iVar10 = param_wdr_weightLUT02_array._60_4_;
        uVar4 = DAT_000b0e44;
        uVar8 = DAT_000b0e40;
LAB_0006a930:
        uVar11 = uVar8 - uVar4;
        uVar4 = uVar4 - uVar8;
LAB_0006a6d8:
        if (bVar1) {
          uVar4 = uVar11;
        }
      }
      uVar15 = uVar15 / uVar4;
    }
    else {
      iVar10 = wdr_ev_old - DAT_000b0e3c;
      bVar1 = DAT_000b0e3c <= DAT_000b0e40;
      if ((uint)param_wdr_weightLUT02_array._36_4_ < (uint)param_wdr_weightLUT02_array._4_4_) {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = -((uint)((param_wdr_weightLUT02_array._4_4_ - param_wdr_weightLUT02_array._36_4_) *
                         iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._36_4_ - param_wdr_weightLUT02_array._4_4_) *
                       iVar10) / uVar19;
      }
      iVar7 = param_wdr_weightLUT02_array._4_4_ + uVar19;
      if ((uint)param_wdr_weightLUT02_array._40_4_ < (uint)param_wdr_weightLUT02_array._8_4_) {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = -((uint)((param_wdr_weightLUT02_array._8_4_ - param_wdr_weightLUT02_array._40_4_) *
                         iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._40_4_ - param_wdr_weightLUT02_array._8_4_) *
                       iVar10) / uVar19;
      }
      iVar12 = uVar19 + param_wdr_weightLUT02_array._8_4_;
      if ((uint)param_wdr_weightLUT02_array._44_4_ < (uint)param_wdr_weightLUT02_array._12_4_) {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = -((uint)((param_wdr_weightLUT02_array._12_4_ - param_wdr_weightLUT02_array._44_4_)
                         * iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._44_4_ - param_wdr_weightLUT02_array._12_4_) *
                       iVar10) / uVar19;
      }
      iVar14 = uVar19 + param_wdr_weightLUT02_array._12_4_;
      if ((uint)param_wdr_weightLUT02_array._48_4_ < (uint)param_wdr_weightLUT02_array._16_4_) {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = -((uint)((param_wdr_weightLUT02_array._16_4_ - param_wdr_weightLUT02_array._48_4_)
                         * iVar10) / uVar19);
      }
      else {
        uVar19 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar19 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._48_4_ - param_wdr_weightLUT02_array._16_4_) *
                       iVar10) / uVar19;
      }
      uVar19 = uVar19 + param_wdr_weightLUT02_array._16_4_;
      if ((uint)param_wdr_weightLUT02_array._52_4_ < (uint)param_wdr_weightLUT02_array._20_4_) {
        uVar15 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar15 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar15 = -((uint)((param_wdr_weightLUT02_array._20_4_ - param_wdr_weightLUT02_array._52_4_)
                         * iVar10) / uVar15);
      }
      else {
        uVar15 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar15 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar15 = (uint)((param_wdr_weightLUT02_array._52_4_ - param_wdr_weightLUT02_array._20_4_) *
                       iVar10) / uVar15;
      }
      iVar13 = uVar15 + param_wdr_weightLUT02_array._20_4_;
      if ((uint)param_wdr_weightLUT02_array._56_4_ < (uint)param_wdr_weightLUT02_array._24_4_) {
        uVar15 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar15 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar15 = -((uint)((param_wdr_weightLUT02_array._24_4_ - param_wdr_weightLUT02_array._56_4_)
                         * iVar10) / uVar15);
      }
      else {
        uVar15 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar15 = DAT_000b0e40 - DAT_000b0e3c;
        }
        uVar15 = (uint)((param_wdr_weightLUT02_array._56_4_ - param_wdr_weightLUT02_array._24_4_) *
                       iVar10) / uVar15;
      }
      iVar17 = uVar15 + param_wdr_weightLUT02_array._24_4_;
      if ((uint)param_wdr_weightLUT02_array._60_4_ < (uint)param_wdr_weightLUT02_array._28_4_) {
        uVar15 = DAT_000b0e3c - DAT_000b0e40;
        if (bVar1) {
          uVar15 = DAT_000b0e40 - DAT_000b0e3c;
        }
        iVar10 = param_wdr_weightLUT02_array._28_4_ -
                 (uint)((param_wdr_weightLUT02_array._28_4_ - param_wdr_weightLUT02_array._60_4_) *
                       iVar10) / uVar15;
        goto LAB_0006ae0c;
      }
      uVar15 = DAT_000b0e40 - DAT_000b0e3c;
      if (!bVar1) {
        uVar15 = DAT_000b0e3c - DAT_000b0e40;
      }
      uVar15 = (uint)((param_wdr_weightLUT02_array._60_4_ - param_wdr_weightLUT02_array._28_4_) *
                     iVar10) / uVar15;
      iVar10 = param_wdr_weightLUT02_array._28_4_;
    }
  }
  else {
    iVar10 = wdr_ev_old - wdr_ev_list;
    bVar1 = DAT_000b0e38 < wdr_ev_list;
    if ((uint)param_wdr_weightLUT20_array._36_4_ < (uint)param_wdr_weightLUT20_array._4_4_) {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = -((uint)((param_wdr_weightLUT20_array._4_4_ - param_wdr_weightLUT20_array._36_4_) *
                       iVar10) / uVar19);
    }
    else {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = (uint)((param_wdr_weightLUT20_array._36_4_ - param_wdr_weightLUT20_array._4_4_) *
                     iVar10) / uVar19;
    }
    iVar7 = param_wdr_weightLUT20_array._4_4_ + uVar19;
    if ((uint)param_wdr_weightLUT20_array._40_4_ < (uint)param_wdr_weightLUT20_array._8_4_) {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = -((uint)((param_wdr_weightLUT20_array._8_4_ - param_wdr_weightLUT20_array._40_4_) *
                       iVar10) / uVar19);
    }
    else {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = (uint)((param_wdr_weightLUT20_array._40_4_ - param_wdr_weightLUT20_array._8_4_) *
                     iVar10) / uVar19;
    }
    iVar12 = uVar19 + param_wdr_weightLUT20_array._8_4_;
    if ((uint)param_wdr_weightLUT20_array._44_4_ < (uint)param_wdr_weightLUT20_array._12_4_) {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = -((uint)((param_wdr_weightLUT20_array._12_4_ - param_wdr_weightLUT20_array._44_4_) *
                       iVar10) / uVar19);
    }
    else {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = (uint)((param_wdr_weightLUT20_array._44_4_ - param_wdr_weightLUT20_array._12_4_) *
                     iVar10) / uVar19;
    }
    iVar14 = uVar19 + param_wdr_weightLUT20_array._12_4_;
    if ((uint)param_wdr_weightLUT20_array._48_4_ < (uint)param_wdr_weightLUT20_array._16_4_) {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = -((uint)((param_wdr_weightLUT20_array._16_4_ - param_wdr_weightLUT20_array._48_4_) *
                       iVar10) / uVar19);
    }
    else {
      uVar19 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar19 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar19 = (uint)((param_wdr_weightLUT20_array._48_4_ - param_wdr_weightLUT20_array._16_4_) *
                     iVar10) / uVar19;
    }
    uVar19 = uVar19 + param_wdr_weightLUT20_array._16_4_;
    if ((uint)param_wdr_weightLUT20_array._52_4_ < (uint)param_wdr_weightLUT20_array._20_4_) {
      uVar15 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar15 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar15 = -((uint)((param_wdr_weightLUT20_array._20_4_ - param_wdr_weightLUT20_array._52_4_) *
                       iVar10) / uVar15);
    }
    else {
      uVar15 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar15 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar15 = (uint)((param_wdr_weightLUT20_array._52_4_ - param_wdr_weightLUT20_array._20_4_) *
                     iVar10) / uVar15;
    }
    iVar13 = uVar15 + param_wdr_weightLUT20_array._20_4_;
    if ((uint)param_wdr_weightLUT20_array._56_4_ < (uint)param_wdr_weightLUT20_array._24_4_) {
      uVar15 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar15 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar15 = -((uint)((param_wdr_weightLUT20_array._24_4_ - param_wdr_weightLUT20_array._56_4_) *
                       iVar10) / uVar15);
    }
    else {
      uVar15 = wdr_ev_list - DAT_000b0e38;
      if (!bVar1) {
        uVar15 = DAT_000b0e38 - wdr_ev_list;
      }
      uVar15 = (uint)((param_wdr_weightLUT20_array._56_4_ - param_wdr_weightLUT20_array._24_4_) *
                     iVar10) / uVar15;
    }
    iVar17 = uVar15 + param_wdr_weightLUT20_array._24_4_;
    if ((uint)param_wdr_weightLUT20_array._60_4_ < (uint)param_wdr_weightLUT20_array._28_4_) {
      uVar15 = wdr_ev_list - DAT_000b0e38;
      uVar8 = (param_wdr_weightLUT20_array._28_4_ - param_wdr_weightLUT20_array._60_4_) * iVar10;
      uVar4 = DAT_000b0e38 - wdr_ev_list;
      iVar10 = param_wdr_weightLUT20_array._28_4_;
LAB_00069fa0:
      if (!bVar1) {
        uVar15 = uVar4;
      }
      iVar10 = iVar10 - uVar8 / uVar15;
      goto LAB_0006ae0c;
    }
    uVar8 = wdr_ev_list - DAT_000b0e38;
    uVar15 = (param_wdr_weightLUT20_array._60_4_ - param_wdr_weightLUT20_array._28_4_) * iVar10;
    uVar4 = DAT_000b0e38 - wdr_ev_list;
    iVar10 = param_wdr_weightLUT20_array._28_4_;
LAB_00069fc0:
    if (bVar1) {
      uVar4 = uVar8;
    }
    uVar15 = uVar15 / uVar4;
  }
  iVar10 = uVar15 + iVar10;
LAB_0006ae0c:
  puVar16 = &param_fusion1_cure_y_array;
  iVar2 = 0;
  puVar3 = puVar16;
  while (bVar1 = iVar2 <= iVar7, iVar2 = iVar2 + 1, bVar1) {
    *puVar3 = uVar19;
    puVar3 = puVar3 + 1;
  }
  iVar18 = iVar12 - iVar7;
  iVar2 = iVar13 - uVar19;
  iVar20 = iVar2 / iVar18;
  piVar9 = (int *)(&param_fusion1_cure_y_array + iVar7);
  uVar15 = iVar2 - iVar18 * iVar20;
  uVar19 = (int)uVar15 >> 0x1f;
  for (iVar7 = 0; iVar7 < iVar18; iVar7 = iVar7 + 1) {
    iVar6 = *piVar9;
    if (iVar7 < (int)((uVar19 ^ uVar15) - uVar19)) {
      if (iVar20 < 0) {
        iVar6 = iVar20 + -1 + iVar6;
        goto LAB_0006aec8;
      }
      if (iVar20 != 0) {
        iVar6 = iVar6 + iVar20 + 1;
        goto LAB_0006aec8;
      }
      if (0 < iVar2) {
        iVar6 = iVar6 + 1;
        goto LAB_0006aec8;
      }
      if (iVar2 != 0) {
        iVar6 = iVar6 + -1;
        goto LAB_0006aec8;
      }
      piVar9[1] = iVar6;
    }
    else {
      iVar6 = iVar6 + iVar20;
LAB_0006aec8:
      piVar9[1] = iVar6;
    }
    piVar9 = piVar9 + 1;
  }
  iVar7 = iVar14 - iVar12;
  iVar13 = iVar17 - iVar13;
  iVar2 = iVar13 / iVar7;
  piVar9 = (int *)(&param_fusion1_cure_y_array + iVar12);
  uVar19 = iVar13 - iVar7 * iVar2;
  uVar15 = (int)uVar19 >> 0x1f;
  for (iVar12 = 0; iVar12 < iVar7; iVar12 = iVar12 + 1) {
    iVar18 = *piVar9;
    if (iVar12 < (int)((uVar15 ^ uVar19) - uVar15)) {
      if (iVar2 < 0) {
        iVar18 = iVar2 + -1 + iVar18;
        goto LAB_0006af68;
      }
      if (iVar2 != 0) {
        iVar18 = iVar18 + iVar2 + 1;
        goto LAB_0006af68;
      }
      if (0 < iVar13) {
        iVar18 = iVar18 + 1;
        goto LAB_0006af68;
      }
      if (iVar13 != 0) {
        iVar18 = iVar18 + -1;
        goto LAB_0006af68;
      }
      piVar9[1] = iVar18;
    }
    else {
      iVar18 = iVar18 + iVar2;
LAB_0006af68:
      piVar9[1] = iVar18;
    }
    piVar9 = piVar9 + 1;
  }
  iVar12 = 0x20 - iVar14;
  iVar10 = iVar10 - iVar17;
  iVar13 = iVar10 / iVar12;
  piVar9 = (int *)(&param_fusion1_cure_y_array + iVar14);
  iVar7 = 0;
  uVar19 = iVar10 - iVar12 * iVar13;
  uVar15 = (int)uVar19 >> 0x1f;
  do {
    uVar4 = param_fusion1_cure_y_array;
    if (iVar12 <= iVar7) {
      while( true ) {
        if (0x100 < uVar4) {
          *puVar16 = 0x100;
        }
        puVar16 = puVar16 + 1;
        if (puVar16 == &param_wdr_w_point_weight_pow_array) break;
        uVar4 = *puVar16;
      }
      return 0;
    }
    iVar14 = *piVar9;
    if (iVar7 < (int)((uVar15 ^ uVar19) - uVar15)) {
      if (iVar13 < 0) {
        iVar14 = iVar13 + -1 + iVar14;
        goto LAB_0006b00c;
      }
      if (iVar13 != 0) {
        iVar14 = iVar13 + 1 + iVar14;
        goto LAB_0006b00c;
      }
      if (0 < iVar10) {
        iVar14 = iVar14 + 1;
        goto LAB_0006b00c;
      }
      if (iVar10 != 0) {
        iVar14 = iVar14 + -1;
        goto LAB_0006b00c;
      }
      piVar9[1] = iVar14;
    }
    else {
      iVar14 = iVar14 + iVar13;
LAB_0006b00c:
      piVar9[1] = iVar14;
    }
    iVar7 = iVar7 + 1;
    piVar9 = piVar9 + 1;
  } while( true );
}



int tiziano_wdr_fusion1_curve_block_mean1(void)

{
  bool bVar1;
  unsigned int uVar2;
  int iVar3;
  unsigned int *puVar4;
  int iVar5;
  int iVar6;
  unsigned int uVar7;
  int iVar8;
  int *piVar9;
  int iVar10;
  int iVar11;
  int iVar12;
  unsigned int *puVar13;
  int iVar14;
  int iVar15;
  unsigned int uVar16;
  unsigned int uVar17;
  unsigned int uVar18;
  unsigned int uVar19;
  unsigned int uVar20;
  unsigned int uVar21;
  int iVar22;
  
  iVar6 = param_wdr_weightLUT20_array._28_4_;
  iVar8 = param_wdr_weightLUT20_array._8_4_;
  iVar10 = param_wdr_weightLUT20_array._4_4_;
  iVar11 = param_wdr_weightLUT20_array._20_4_;
  uVar20 = param_wdr_weightLUT20_array._16_4_;
  iVar12 = param_wdr_weightLUT20_array._12_4_;
  iVar14 = param_wdr_weightLUT20_array._24_4_;
  if (wdr_block_mean1_end_old <= param_centre5x5_w_distance_array) goto LAB_0006c3ac;
  if (DAT_000d874c < wdr_block_mean1_end_old) {
    if (wdr_block_mean1_end_old <= DAT_000d8750) {
      iVar6 = wdr_block_mean1_end_old - DAT_000d874c;
      bVar1 = DAT_000d8750 < DAT_000d874c;
      if ((uint)param_wdr_weightLUT02_array._4_4_ < (uint)param_wdr_weightLUT20_array._36_4_) {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = -((uint)((param_wdr_weightLUT20_array._36_4_ - param_wdr_weightLUT02_array._4_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = (uint)((param_wdr_weightLUT02_array._4_4_ - param_wdr_weightLUT20_array._36_4_) *
                       iVar6) / uVar20;
      }
      iVar10 = param_wdr_weightLUT20_array._36_4_ + uVar20;
      if ((uint)param_wdr_weightLUT02_array._8_4_ < (uint)param_wdr_weightLUT20_array._40_4_) {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = -((uint)((param_wdr_weightLUT20_array._40_4_ - param_wdr_weightLUT02_array._8_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = (uint)((param_wdr_weightLUT02_array._8_4_ - param_wdr_weightLUT20_array._40_4_) *
                       iVar6) / uVar20;
      }
      iVar8 = uVar20 + param_wdr_weightLUT20_array._40_4_;
      if ((uint)param_wdr_weightLUT02_array._12_4_ < (uint)param_wdr_weightLUT20_array._44_4_) {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = -((uint)((param_wdr_weightLUT20_array._44_4_ - param_wdr_weightLUT02_array._12_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = (uint)((param_wdr_weightLUT02_array._12_4_ - param_wdr_weightLUT20_array._44_4_) *
                       iVar6) / uVar20;
      }
      iVar12 = uVar20 + param_wdr_weightLUT20_array._44_4_;
      if ((uint)param_wdr_weightLUT02_array._16_4_ < (uint)param_wdr_weightLUT20_array._48_4_) {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = -((uint)((param_wdr_weightLUT20_array._48_4_ - param_wdr_weightLUT02_array._16_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar20 = DAT_000d8750 - DAT_000d874c;
        }
        uVar20 = (uint)((param_wdr_weightLUT02_array._16_4_ - param_wdr_weightLUT20_array._48_4_) *
                       iVar6) / uVar20;
      }
      uVar20 = uVar20 + param_wdr_weightLUT20_array._48_4_;
      if ((uint)param_wdr_weightLUT02_array._20_4_ < (uint)param_wdr_weightLUT20_array._52_4_) {
        uVar21 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar21 = DAT_000d8750 - DAT_000d874c;
        }
        uVar21 = -((uint)((param_wdr_weightLUT20_array._52_4_ - param_wdr_weightLUT02_array._20_4_)
                         * iVar6) / uVar21);
      }
      else {
        uVar21 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar21 = DAT_000d8750 - DAT_000d874c;
        }
        uVar21 = (uint)((param_wdr_weightLUT02_array._20_4_ - param_wdr_weightLUT20_array._52_4_) *
                       iVar6) / uVar21;
      }
      iVar11 = uVar21 + param_wdr_weightLUT20_array._52_4_;
      if ((uint)param_wdr_weightLUT02_array._24_4_ < (uint)param_wdr_weightLUT20_array._56_4_) {
        uVar21 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar21 = DAT_000d8750 - DAT_000d874c;
        }
        uVar21 = -((uint)((param_wdr_weightLUT20_array._56_4_ - param_wdr_weightLUT02_array._24_4_)
                         * iVar6) / uVar21);
      }
      else {
        uVar21 = DAT_000d874c - DAT_000d8750;
        if (!bVar1) {
          uVar21 = DAT_000d8750 - DAT_000d874c;
        }
        uVar21 = (uint)((param_wdr_weightLUT02_array._24_4_ - param_wdr_weightLUT20_array._56_4_) *
                       iVar6) / uVar21;
      }
      iVar14 = uVar21 + param_wdr_weightLUT20_array._56_4_;
      if ((uint)param_wdr_weightLUT02_array._28_4_ < (uint)param_wdr_weightLUT20_array._60_4_) {
        uVar7 = (param_wdr_weightLUT20_array._60_4_ - param_wdr_weightLUT02_array._28_4_) * iVar6;
        uVar21 = DAT_000d874c - DAT_000d8750;
        uVar16 = DAT_000d8750 - DAT_000d874c;
        iVar6 = param_wdr_weightLUT20_array._60_4_;
        goto LAB_0006b524;
      }
      uVar7 = (param_wdr_weightLUT02_array._28_4_ - param_wdr_weightLUT20_array._60_4_) * iVar6;
      uVar16 = DAT_000d874c - DAT_000d8750;
      uVar21 = DAT_000d8750 - DAT_000d874c;
      iVar6 = param_wdr_weightLUT20_array._60_4_;
      goto LAB_0006b544;
    }
    if (wdr_block_mean1_end_old <= DAT_000d8754) {
      iVar6 = wdr_block_mean1_end_old - DAT_000d8750;
      bVar1 = DAT_000d8750 <= DAT_000d8754;
      if ((uint)param_wdr_weightLUT02_array._36_4_ < (uint)param_wdr_weightLUT02_array._4_4_) {
        uVar20 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar20 = DAT_000d8754 - DAT_000d8750;
        }
        uVar21 = -((uint)((param_wdr_weightLUT02_array._4_4_ - param_wdr_weightLUT02_array._36_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar21 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar21 = DAT_000d8754 - DAT_000d8750;
        }
        uVar21 = (uint)((param_wdr_weightLUT02_array._36_4_ - param_wdr_weightLUT02_array._4_4_) *
                       iVar6) / uVar21;
      }
      if ((uint)param_wdr_weightLUT02_array._40_4_ < (uint)param_wdr_weightLUT02_array._8_4_) {
        uVar20 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar20 = DAT_000d8754 - DAT_000d8750;
        }
        uVar16 = -((uint)((param_wdr_weightLUT02_array._8_4_ - param_wdr_weightLUT02_array._40_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar16 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar16 = DAT_000d8754 - DAT_000d8750;
        }
        uVar16 = (uint)((param_wdr_weightLUT02_array._40_4_ - param_wdr_weightLUT02_array._8_4_) *
                       iVar6) / uVar16;
      }
      if ((uint)param_wdr_weightLUT02_array._44_4_ < (uint)param_wdr_weightLUT02_array._12_4_) {
        uVar20 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar20 = DAT_000d8754 - DAT_000d8750;
        }
        uVar7 = -((uint)((param_wdr_weightLUT02_array._12_4_ - param_wdr_weightLUT02_array._44_4_) *
                        iVar6) / uVar20);
      }
      else {
        uVar7 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar7 = DAT_000d8754 - DAT_000d8750;
        }
        uVar7 = (uint)((param_wdr_weightLUT02_array._44_4_ - param_wdr_weightLUT02_array._12_4_) *
                      iVar6) / uVar7;
      }
      if ((uint)param_wdr_weightLUT02_array._48_4_ < (uint)param_wdr_weightLUT02_array._16_4_) {
        uVar20 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar20 = DAT_000d8754 - DAT_000d8750;
        }
        uVar17 = -((uint)((param_wdr_weightLUT02_array._16_4_ - param_wdr_weightLUT02_array._48_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar17 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar17 = DAT_000d8754 - DAT_000d8750;
        }
        uVar17 = (uint)((param_wdr_weightLUT02_array._48_4_ - param_wdr_weightLUT02_array._16_4_) *
                       iVar6) / uVar17;
      }
      if ((uint)param_wdr_weightLUT02_array._52_4_ < (uint)param_wdr_weightLUT02_array._20_4_) {
        uVar20 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar20 = DAT_000d8754 - DAT_000d8750;
        }
        uVar18 = -((uint)((param_wdr_weightLUT02_array._20_4_ - param_wdr_weightLUT02_array._52_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar18 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar18 = DAT_000d8754 - DAT_000d8750;
        }
        uVar18 = (uint)((param_wdr_weightLUT02_array._52_4_ - param_wdr_weightLUT02_array._20_4_) *
                       iVar6) / uVar18;
      }
      if ((uint)param_wdr_weightLUT02_array._56_4_ < (uint)param_wdr_weightLUT02_array._24_4_) {
        uVar20 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar20 = DAT_000d8754 - DAT_000d8750;
        }
        uVar19 = -((uint)((param_wdr_weightLUT02_array._24_4_ - param_wdr_weightLUT02_array._56_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar19 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar19 = DAT_000d8754 - DAT_000d8750;
        }
        uVar19 = (uint)((param_wdr_weightLUT02_array._56_4_ - param_wdr_weightLUT02_array._24_4_) *
                       iVar6) / uVar19;
      }
      iVar8 = uVar16 + param_wdr_weightLUT02_array._8_4_;
      iVar10 = param_wdr_weightLUT02_array._4_4_ + uVar21;
      iVar11 = uVar18 + param_wdr_weightLUT02_array._20_4_;
      uVar20 = uVar17 + param_wdr_weightLUT02_array._16_4_;
      iVar12 = uVar7 + param_wdr_weightLUT02_array._12_4_;
      iVar14 = uVar19 + param_wdr_weightLUT02_array._24_4_;
      if ((uint)param_wdr_weightLUT02_array._60_4_ < (uint)param_wdr_weightLUT02_array._28_4_) {
        uVar2 = DAT_000d8750 - DAT_000d8754;
        if (bVar1) {
          uVar2 = DAT_000d8754 - DAT_000d8750;
        }
        iVar6 = param_wdr_weightLUT02_array._28_4_ -
                (uint)((param_wdr_weightLUT02_array._28_4_ - param_wdr_weightLUT02_array._60_4_) *
                      iVar6) / uVar2;
      }
      else {
        uVar2 = DAT_000d8754 - DAT_000d8750;
        if (!bVar1) {
          uVar2 = DAT_000d8750 - DAT_000d8754;
        }
        iVar6 = (uint)((param_wdr_weightLUT02_array._60_4_ - param_wdr_weightLUT02_array._28_4_) *
                      iVar6) / uVar2 + param_wdr_weightLUT02_array._28_4_;
      }
      goto LAB_0006c3ac;
    }
    if (DAT_000d8758 < wdr_block_mean1_end_old) {
      if (wdr_block_mean1_end_old <= DAT_000d875c) {
        iVar6 = wdr_block_mean1_end_old - DAT_000d8758;
        bVar1 = DAT_000d875c < DAT_000d8758;
        if ((uint)param_wdr_weightLUT12_array._36_4_ < (uint)param_wdr_weightLUT12_array._4_4_) {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._4_4_ - param_wdr_weightLUT12_array._36_4_)
                           * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = (uint)((param_wdr_weightLUT12_array._36_4_ - param_wdr_weightLUT12_array._4_4_) *
                         iVar6) / uVar20;
        }
        iVar10 = param_wdr_weightLUT12_array._4_4_ + uVar20;
        if ((uint)param_wdr_weightLUT12_array._40_4_ < (uint)param_wdr_weightLUT12_array._8_4_) {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._8_4_ - param_wdr_weightLUT12_array._40_4_)
                           * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = (uint)((param_wdr_weightLUT12_array._40_4_ - param_wdr_weightLUT12_array._8_4_) *
                         iVar6) / uVar20;
        }
        iVar8 = uVar20 + param_wdr_weightLUT12_array._8_4_;
        if ((uint)param_wdr_weightLUT12_array._44_4_ < (uint)param_wdr_weightLUT12_array._12_4_) {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._12_4_ - param_wdr_weightLUT12_array._44_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = (uint)((param_wdr_weightLUT12_array._44_4_ - param_wdr_weightLUT12_array._12_4_)
                         * iVar6) / uVar20;
        }
        iVar12 = uVar20 + param_wdr_weightLUT12_array._12_4_;
        if ((uint)param_wdr_weightLUT12_array._48_4_ < (uint)param_wdr_weightLUT12_array._16_4_) {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._16_4_ - param_wdr_weightLUT12_array._48_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar20 = DAT_000d875c - DAT_000d8758;
          }
          uVar20 = (uint)((param_wdr_weightLUT12_array._48_4_ - param_wdr_weightLUT12_array._16_4_)
                         * iVar6) / uVar20;
        }
        uVar20 = uVar20 + param_wdr_weightLUT12_array._16_4_;
        if ((uint)param_wdr_weightLUT12_array._52_4_ < (uint)param_wdr_weightLUT12_array._20_4_) {
          uVar21 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar21 = DAT_000d875c - DAT_000d8758;
          }
          uVar21 = -((uint)((param_wdr_weightLUT12_array._20_4_ - param_wdr_weightLUT12_array._52_4_
                            ) * iVar6) / uVar21);
        }
        else {
          uVar21 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar21 = DAT_000d875c - DAT_000d8758;
          }
          uVar21 = (uint)((param_wdr_weightLUT12_array._52_4_ - param_wdr_weightLUT12_array._20_4_)
                         * iVar6) / uVar21;
        }
        iVar11 = uVar21 + param_wdr_weightLUT12_array._20_4_;
        if ((uint)param_wdr_weightLUT12_array._56_4_ < (uint)param_wdr_weightLUT12_array._24_4_) {
          uVar21 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar21 = DAT_000d875c - DAT_000d8758;
          }
          uVar21 = -((uint)((param_wdr_weightLUT12_array._24_4_ - param_wdr_weightLUT12_array._56_4_
                            ) * iVar6) / uVar21);
        }
        else {
          uVar21 = DAT_000d8758 - DAT_000d875c;
          if (!bVar1) {
            uVar21 = DAT_000d875c - DAT_000d8758;
          }
          uVar21 = (uint)((param_wdr_weightLUT12_array._56_4_ - param_wdr_weightLUT12_array._24_4_)
                         * iVar6) / uVar21;
        }
        iVar14 = uVar21 + param_wdr_weightLUT12_array._24_4_;
        if ((uint)param_wdr_weightLUT12_array._60_4_ < (uint)param_wdr_weightLUT12_array._28_4_) {
          uVar7 = (param_wdr_weightLUT12_array._28_4_ - param_wdr_weightLUT12_array._60_4_) * iVar6;
          uVar21 = DAT_000d8758 - DAT_000d875c;
          uVar16 = DAT_000d875c - DAT_000d8758;
          iVar6 = param_wdr_weightLUT12_array._28_4_;
          goto LAB_0006bc40;
        }
        uVar7 = (param_wdr_weightLUT12_array._60_4_ - param_wdr_weightLUT12_array._28_4_) * iVar6;
        uVar17 = DAT_000d8758 - DAT_000d875c;
        uVar21 = DAT_000d875c - DAT_000d8758;
        iVar6 = param_wdr_weightLUT12_array._28_4_;
        goto LAB_0006bc60;
      }
      if (wdr_block_mean1_end_old <= DAT_000d8760) {
        bVar1 = DAT_000d8760 < DAT_000d875c;
        iVar6 = wdr_block_mean1_end_old - DAT_000d875c;
        if ((uint)param_wdr_weightLUT22_array._4_4_ < (uint)param_wdr_weightLUT12_array._36_4_) {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._36_4_ - param_wdr_weightLUT22_array._4_4_)
                           * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = (uint)((param_wdr_weightLUT22_array._4_4_ - param_wdr_weightLUT12_array._36_4_) *
                         iVar6) / uVar20;
        }
        iVar10 = param_wdr_weightLUT12_array._36_4_ + uVar20;
        if ((uint)param_wdr_weightLUT22_array._8_4_ < (uint)param_wdr_weightLUT12_array._40_4_) {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._40_4_ - param_wdr_weightLUT22_array._8_4_)
                           * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = (uint)((param_wdr_weightLUT22_array._8_4_ - param_wdr_weightLUT12_array._40_4_) *
                         iVar6) / uVar20;
        }
        iVar8 = uVar20 + param_wdr_weightLUT12_array._40_4_;
        if ((uint)param_wdr_weightLUT22_array._12_4_ < (uint)param_wdr_weightLUT12_array._44_4_) {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._44_4_ - param_wdr_weightLUT22_array._12_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = (uint)((param_wdr_weightLUT22_array._12_4_ - param_wdr_weightLUT12_array._44_4_)
                         * iVar6) / uVar20;
        }
        iVar12 = uVar20 + param_wdr_weightLUT12_array._44_4_;
        if ((uint)param_wdr_weightLUT22_array._16_4_ < (uint)param_wdr_weightLUT12_array._48_4_) {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = -((uint)((param_wdr_weightLUT12_array._48_4_ - param_wdr_weightLUT22_array._16_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar20 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar20 = DAT_000d8760 - DAT_000d875c;
          }
          uVar20 = (uint)((param_wdr_weightLUT22_array._16_4_ - param_wdr_weightLUT12_array._48_4_)
                         * iVar6) / uVar20;
        }
        uVar20 = uVar20 + param_wdr_weightLUT12_array._48_4_;
        if ((uint)param_wdr_weightLUT22_array._20_4_ < (uint)param_wdr_weightLUT12_array._52_4_) {
          uVar21 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar21 = DAT_000d8760 - DAT_000d875c;
          }
          uVar21 = -((uint)((param_wdr_weightLUT12_array._52_4_ - param_wdr_weightLUT22_array._20_4_
                            ) * iVar6) / uVar21);
        }
        else {
          uVar21 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar21 = DAT_000d8760 - DAT_000d875c;
          }
          uVar21 = (uint)((param_wdr_weightLUT22_array._20_4_ - param_wdr_weightLUT12_array._52_4_)
                         * iVar6) / uVar21;
        }
        iVar11 = uVar21 + param_wdr_weightLUT12_array._52_4_;
        if ((uint)param_wdr_weightLUT22_array._24_4_ < (uint)param_wdr_weightLUT12_array._56_4_) {
          uVar21 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar21 = DAT_000d8760 - DAT_000d875c;
          }
          uVar21 = -((uint)((param_wdr_weightLUT12_array._56_4_ - param_wdr_weightLUT22_array._24_4_
                            ) * iVar6) / uVar21);
        }
        else {
          uVar21 = DAT_000d875c - DAT_000d8760;
          if (!bVar1) {
            uVar21 = DAT_000d8760 - DAT_000d875c;
          }
          uVar21 = (uint)((param_wdr_weightLUT22_array._24_4_ - param_wdr_weightLUT12_array._56_4_)
                         * iVar6) / uVar21;
        }
        iVar14 = uVar21 + param_wdr_weightLUT12_array._56_4_;
        if ((uint)param_wdr_weightLUT12_array._60_4_ <= (uint)param_wdr_weightLUT22_array._28_4_) {
          uVar7 = (param_wdr_weightLUT22_array._28_4_ - param_wdr_weightLUT12_array._60_4_) * iVar6;
          uVar21 = DAT_000d8760;
          uVar16 = DAT_000d875c;
          iVar6 = param_wdr_weightLUT12_array._60_4_;
          goto LAB_0006beb4;
        }
        uVar21 = DAT_000d875c - DAT_000d8760;
        if (!bVar1) {
          uVar21 = DAT_000d8760 - DAT_000d875c;
        }
        uVar7 = (param_wdr_weightLUT12_array._60_4_ - param_wdr_weightLUT22_array._28_4_) * iVar6;
        iVar6 = param_wdr_weightLUT12_array._60_4_;
        goto LAB_0006bc44;
      }
      if (wdr_block_mean1_end_old <= DAT_000d8764) {
        iVar6 = wdr_block_mean1_end_old - DAT_000d8760;
        bVar1 = DAT_000d8760 <= DAT_000d8764;
        if ((uint)param_wdr_weightLUT22_array._36_4_ < (uint)param_wdr_weightLUT22_array._4_4_) {
          uVar20 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar20 = DAT_000d8764 - DAT_000d8760;
          }
          uVar21 = -((uint)((param_wdr_weightLUT22_array._4_4_ - param_wdr_weightLUT22_array._36_4_)
                           * iVar6) / uVar20);
        }
        else {
          uVar21 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar21 = DAT_000d8764 - DAT_000d8760;
          }
          uVar21 = (uint)((param_wdr_weightLUT22_array._36_4_ - param_wdr_weightLUT22_array._4_4_) *
                         iVar6) / uVar21;
        }
        if ((uint)param_wdr_weightLUT22_array._40_4_ < (uint)param_wdr_weightLUT22_array._8_4_) {
          uVar20 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar20 = DAT_000d8764 - DAT_000d8760;
          }
          uVar16 = -((uint)((param_wdr_weightLUT22_array._8_4_ - param_wdr_weightLUT22_array._40_4_)
                           * iVar6) / uVar20);
        }
        else {
          uVar16 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar16 = DAT_000d8764 - DAT_000d8760;
          }
          uVar16 = (uint)((param_wdr_weightLUT22_array._40_4_ - param_wdr_weightLUT22_array._8_4_) *
                         iVar6) / uVar16;
        }
        if ((uint)param_wdr_weightLUT22_array._44_4_ < (uint)param_wdr_weightLUT22_array._12_4_) {
          uVar20 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar20 = DAT_000d8764 - DAT_000d8760;
          }
          uVar7 = -((uint)((param_wdr_weightLUT22_array._12_4_ - param_wdr_weightLUT22_array._44_4_)
                          * iVar6) / uVar20);
        }
        else {
          uVar7 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar7 = DAT_000d8764 - DAT_000d8760;
          }
          uVar7 = (uint)((param_wdr_weightLUT22_array._44_4_ - param_wdr_weightLUT22_array._12_4_) *
                        iVar6) / uVar7;
        }
        if ((uint)param_wdr_weightLUT22_array._48_4_ < (uint)param_wdr_weightLUT22_array._16_4_) {
          uVar20 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar20 = DAT_000d8764 - DAT_000d8760;
          }
          uVar17 = -((uint)((param_wdr_weightLUT22_array._16_4_ - param_wdr_weightLUT22_array._48_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar17 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar17 = DAT_000d8764 - DAT_000d8760;
          }
          uVar17 = (uint)((param_wdr_weightLUT22_array._48_4_ - param_wdr_weightLUT22_array._16_4_)
                         * iVar6) / uVar17;
        }
        if ((uint)param_wdr_weightLUT22_array._52_4_ < (uint)param_wdr_weightLUT22_array._20_4_) {
          uVar20 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar20 = DAT_000d8764 - DAT_000d8760;
          }
          uVar18 = -((uint)((param_wdr_weightLUT22_array._20_4_ - param_wdr_weightLUT22_array._52_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar18 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar18 = DAT_000d8764 - DAT_000d8760;
          }
          uVar18 = (uint)((param_wdr_weightLUT22_array._52_4_ - param_wdr_weightLUT22_array._20_4_)
                         * iVar6) / uVar18;
        }
        if ((uint)param_wdr_weightLUT22_array._56_4_ < (uint)param_wdr_weightLUT22_array._24_4_) {
          uVar20 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar20 = DAT_000d8764 - DAT_000d8760;
          }
          uVar19 = -((uint)((param_wdr_weightLUT22_array._24_4_ - param_wdr_weightLUT22_array._56_4_
                            ) * iVar6) / uVar20);
        }
        else {
          uVar19 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar19 = DAT_000d8764 - DAT_000d8760;
          }
          uVar19 = (uint)((param_wdr_weightLUT22_array._56_4_ - param_wdr_weightLUT22_array._24_4_)
                         * iVar6) / uVar19;
        }
        iVar8 = uVar16 + param_wdr_weightLUT22_array._8_4_;
        iVar10 = param_wdr_weightLUT22_array._4_4_ + uVar21;
        iVar11 = uVar18 + param_wdr_weightLUT22_array._20_4_;
        uVar20 = uVar17 + param_wdr_weightLUT22_array._16_4_;
        iVar12 = uVar7 + param_wdr_weightLUT22_array._12_4_;
        iVar14 = uVar19 + param_wdr_weightLUT22_array._24_4_;
        if ((uint)param_wdr_weightLUT22_array._60_4_ < (uint)param_wdr_weightLUT22_array._28_4_) {
          uVar2 = DAT_000d8760 - DAT_000d8764;
          if (bVar1) {
            uVar2 = DAT_000d8764 - DAT_000d8760;
          }
          iVar6 = param_wdr_weightLUT22_array._28_4_ -
                  (uint)((param_wdr_weightLUT22_array._28_4_ - param_wdr_weightLUT22_array._60_4_) *
                        iVar6) / uVar2;
        }
        else {
          uVar2 = DAT_000d8764 - DAT_000d8760;
          if (!bVar1) {
            uVar2 = DAT_000d8760 - DAT_000d8764;
          }
          iVar6 = (uint)((param_wdr_weightLUT22_array._60_4_ - param_wdr_weightLUT22_array._28_4_) *
                        iVar6) / uVar2 + param_wdr_weightLUT22_array._28_4_;
        }
        goto LAB_0006c3ac;
      }
      iVar6 = param_wdr_weightLUT21_array._28_4_;
      iVar8 = param_wdr_weightLUT21_array._8_4_;
      iVar10 = param_wdr_weightLUT21_array._4_4_;
      iVar11 = param_wdr_weightLUT21_array._20_4_;
      uVar20 = param_wdr_weightLUT21_array._16_4_;
      iVar12 = param_wdr_weightLUT21_array._12_4_;
      iVar14 = param_wdr_weightLUT21_array._24_4_;
      if (DAT_000d8768 < wdr_block_mean1_end_old) goto LAB_0006c3ac;
      iVar6 = wdr_block_mean1_end_old - DAT_000d8764;
      bVar1 = DAT_000d8764 <= DAT_000d8768;
      if ((uint)param_wdr_weightLUT21_array._4_4_ < (uint)param_wdr_weightLUT22_array._36_4_) {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = -((uint)((param_wdr_weightLUT22_array._36_4_ - param_wdr_weightLUT21_array._4_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = (uint)((param_wdr_weightLUT21_array._4_4_ - param_wdr_weightLUT22_array._36_4_) *
                       iVar6) / uVar20;
      }
      iVar10 = param_wdr_weightLUT22_array._36_4_ + uVar20;
      if ((uint)param_wdr_weightLUT21_array._8_4_ < (uint)param_wdr_weightLUT22_array._40_4_) {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = -((uint)((param_wdr_weightLUT22_array._40_4_ - param_wdr_weightLUT21_array._8_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = (uint)((param_wdr_weightLUT21_array._8_4_ - param_wdr_weightLUT22_array._40_4_) *
                       iVar6) / uVar20;
      }
      iVar8 = uVar20 + param_wdr_weightLUT22_array._40_4_;
      if ((uint)param_wdr_weightLUT21_array._12_4_ < (uint)param_wdr_weightLUT22_array._44_4_) {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = -((uint)((param_wdr_weightLUT22_array._44_4_ - param_wdr_weightLUT21_array._12_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = (uint)((param_wdr_weightLUT21_array._12_4_ - param_wdr_weightLUT22_array._44_4_) *
                       iVar6) / uVar20;
      }
      iVar12 = uVar20 + param_wdr_weightLUT22_array._44_4_;
      if ((uint)param_wdr_weightLUT21_array._16_4_ < (uint)param_wdr_weightLUT22_array._48_4_) {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = -((uint)((param_wdr_weightLUT22_array._48_4_ - param_wdr_weightLUT21_array._16_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar20 = DAT_000d8768 - DAT_000d8764;
        }
        uVar20 = (uint)((param_wdr_weightLUT21_array._16_4_ - param_wdr_weightLUT22_array._48_4_) *
                       iVar6) / uVar20;
      }
      uVar20 = uVar20 + param_wdr_weightLUT22_array._48_4_;
      if ((uint)param_wdr_weightLUT21_array._20_4_ < (uint)param_wdr_weightLUT22_array._52_4_) {
        uVar21 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar21 = DAT_000d8768 - DAT_000d8764;
        }
        uVar21 = -((uint)((param_wdr_weightLUT22_array._52_4_ - param_wdr_weightLUT21_array._20_4_)
                         * iVar6) / uVar21);
      }
      else {
        uVar21 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar21 = DAT_000d8768 - DAT_000d8764;
        }
        uVar21 = (uint)((param_wdr_weightLUT21_array._20_4_ - param_wdr_weightLUT22_array._52_4_) *
                       iVar6) / uVar21;
      }
      iVar11 = uVar21 + param_wdr_weightLUT22_array._52_4_;
      if ((uint)param_wdr_weightLUT21_array._24_4_ < (uint)param_wdr_weightLUT22_array._56_4_) {
        uVar21 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar21 = DAT_000d8768 - DAT_000d8764;
        }
        uVar21 = -((uint)((param_wdr_weightLUT22_array._56_4_ - param_wdr_weightLUT21_array._24_4_)
                         * iVar6) / uVar21);
      }
      else {
        uVar21 = DAT_000d8764 - DAT_000d8768;
        if (bVar1) {
          uVar21 = DAT_000d8768 - DAT_000d8764;
        }
        uVar21 = (uint)((param_wdr_weightLUT21_array._24_4_ - param_wdr_weightLUT22_array._56_4_) *
                       iVar6) / uVar21;
      }
      iVar14 = uVar21 + param_wdr_weightLUT22_array._56_4_;
      if ((uint)param_wdr_weightLUT21_array._28_4_ < (uint)param_wdr_weightLUT22_array._60_4_) {
        uVar7 = (param_wdr_weightLUT22_array._60_4_ - param_wdr_weightLUT21_array._28_4_) * iVar6;
        uVar21 = DAT_000d8764 - DAT_000d8768;
        iVar6 = param_wdr_weightLUT22_array._60_4_;
        if (bVar1) {
          uVar21 = DAT_000d8768 - DAT_000d8764;
        }
        goto LAB_0006bc44;
      }
      uVar7 = (param_wdr_weightLUT21_array._28_4_ - param_wdr_weightLUT22_array._60_4_) * iVar6;
      uVar21 = DAT_000d8768 - DAT_000d8764;
      iVar6 = param_wdr_weightLUT22_array._60_4_;
      if (!bVar1) {
        uVar21 = DAT_000d8764 - DAT_000d8768;
      }
    }
    else {
      iVar6 = wdr_block_mean1_end_old - DAT_000d8754;
      bVar1 = DAT_000d8758 < DAT_000d8754;
      if ((uint)param_wdr_weightLUT12_array._4_4_ < (uint)param_wdr_weightLUT02_array._36_4_) {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = -((uint)((param_wdr_weightLUT02_array._36_4_ - param_wdr_weightLUT12_array._4_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = (uint)((param_wdr_weightLUT12_array._4_4_ - param_wdr_weightLUT02_array._36_4_) *
                       iVar6) / uVar20;
      }
      iVar10 = param_wdr_weightLUT02_array._36_4_ + uVar20;
      if ((uint)param_wdr_weightLUT12_array._8_4_ < (uint)param_wdr_weightLUT02_array._40_4_) {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = -((uint)((param_wdr_weightLUT02_array._40_4_ - param_wdr_weightLUT12_array._8_4_) *
                         iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = (uint)((param_wdr_weightLUT12_array._8_4_ - param_wdr_weightLUT02_array._40_4_) *
                       iVar6) / uVar20;
      }
      iVar8 = uVar20 + param_wdr_weightLUT02_array._40_4_;
      if ((uint)param_wdr_weightLUT12_array._12_4_ < (uint)param_wdr_weightLUT02_array._44_4_) {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = -((uint)((param_wdr_weightLUT02_array._44_4_ - param_wdr_weightLUT12_array._12_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = (uint)((param_wdr_weightLUT12_array._12_4_ - param_wdr_weightLUT02_array._44_4_) *
                       iVar6) / uVar20;
      }
      iVar12 = uVar20 + param_wdr_weightLUT02_array._44_4_;
      if ((uint)param_wdr_weightLUT12_array._16_4_ < (uint)param_wdr_weightLUT02_array._48_4_) {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = -((uint)((param_wdr_weightLUT02_array._48_4_ - param_wdr_weightLUT12_array._16_4_)
                         * iVar6) / uVar20);
      }
      else {
        uVar20 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar20 = DAT_000d8758 - DAT_000d8754;
        }
        uVar20 = (uint)((param_wdr_weightLUT12_array._16_4_ - param_wdr_weightLUT02_array._48_4_) *
                       iVar6) / uVar20;
      }
      uVar20 = uVar20 + param_wdr_weightLUT02_array._48_4_;
      if ((uint)param_wdr_weightLUT12_array._20_4_ < (uint)param_wdr_weightLUT02_array._52_4_) {
        uVar21 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar21 = DAT_000d8758 - DAT_000d8754;
        }
        uVar21 = -((uint)((param_wdr_weightLUT02_array._52_4_ - param_wdr_weightLUT12_array._20_4_)
                         * iVar6) / uVar21);
      }
      else {
        uVar21 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar21 = DAT_000d8758 - DAT_000d8754;
        }
        uVar21 = (uint)((param_wdr_weightLUT12_array._20_4_ - param_wdr_weightLUT02_array._52_4_) *
                       iVar6) / uVar21;
      }
      iVar11 = uVar21 + param_wdr_weightLUT02_array._52_4_;
      if ((uint)param_wdr_weightLUT12_array._24_4_ < (uint)param_wdr_weightLUT02_array._56_4_) {
        uVar21 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar21 = DAT_000d8758 - DAT_000d8754;
        }
        uVar21 = -((uint)((param_wdr_weightLUT02_array._56_4_ - param_wdr_weightLUT12_array._24_4_)
                         * iVar6) / uVar21);
      }
      else {
        uVar21 = DAT_000d8754 - DAT_000d8758;
        if (!bVar1) {
          uVar21 = DAT_000d8758 - DAT_000d8754;
        }
        uVar21 = (uint)((param_wdr_weightLUT12_array._24_4_ - param_wdr_weightLUT02_array._56_4_) *
                       iVar6) / uVar21;
      }
      iVar14 = uVar21 + param_wdr_weightLUT02_array._56_4_;
      if ((uint)param_wdr_weightLUT12_array._28_4_ < (uint)param_wdr_weightLUT02_array._60_4_) {
        uVar7 = (param_wdr_weightLUT02_array._60_4_ - param_wdr_weightLUT12_array._28_4_) * iVar6;
        uVar21 = DAT_000d8754 - DAT_000d8758;
        uVar16 = DAT_000d8758 - DAT_000d8754;
        iVar6 = param_wdr_weightLUT02_array._60_4_;
LAB_0006bc40:
        if (!bVar1) {
          uVar21 = uVar16;
        }
LAB_0006bc44:
        iVar6 = iVar6 - uVar7 / uVar21;
        goto LAB_0006c3ac;
      }
      uVar7 = (param_wdr_weightLUT12_array._28_4_ - param_wdr_weightLUT02_array._60_4_) * iVar6;
      uVar21 = DAT_000d8758;
      uVar16 = DAT_000d8754;
      iVar6 = param_wdr_weightLUT02_array._60_4_;
LAB_0006beb4:
      uVar17 = uVar16 - uVar21;
      uVar21 = uVar21 - uVar16;
LAB_0006bc60:
      if (bVar1) {
        uVar21 = uVar17;
      }
    }
    uVar7 = uVar7 / uVar21;
  }
  else {
    iVar6 = wdr_block_mean1_end_old - param_centre5x5_w_distance_array;
    bVar1 = DAT_000d874c < param_centre5x5_w_distance_array;
    if ((uint)param_wdr_weightLUT20_array._36_4_ < (uint)param_wdr_weightLUT20_array._4_4_) {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = -((uint)((param_wdr_weightLUT20_array._4_4_ - param_wdr_weightLUT20_array._36_4_) *
                       iVar6) / uVar20);
    }
    else {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = (uint)((param_wdr_weightLUT20_array._36_4_ - param_wdr_weightLUT20_array._4_4_) *
                     iVar6) / uVar20;
    }
    iVar10 = param_wdr_weightLUT20_array._4_4_ + uVar20;
    if ((uint)param_wdr_weightLUT20_array._40_4_ < (uint)param_wdr_weightLUT20_array._8_4_) {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = -((uint)((param_wdr_weightLUT20_array._8_4_ - param_wdr_weightLUT20_array._40_4_) *
                       iVar6) / uVar20);
    }
    else {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = (uint)((param_wdr_weightLUT20_array._40_4_ - param_wdr_weightLUT20_array._8_4_) *
                     iVar6) / uVar20;
    }
    iVar8 = uVar20 + param_wdr_weightLUT20_array._8_4_;
    if ((uint)param_wdr_weightLUT20_array._44_4_ < (uint)param_wdr_weightLUT20_array._12_4_) {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = -((uint)((param_wdr_weightLUT20_array._12_4_ - param_wdr_weightLUT20_array._44_4_) *
                       iVar6) / uVar20);
    }
    else {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = (uint)((param_wdr_weightLUT20_array._44_4_ - param_wdr_weightLUT20_array._12_4_) *
                     iVar6) / uVar20;
    }
    iVar12 = uVar20 + param_wdr_weightLUT20_array._12_4_;
    if ((uint)param_wdr_weightLUT20_array._48_4_ < (uint)param_wdr_weightLUT20_array._16_4_) {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = -((uint)((param_wdr_weightLUT20_array._16_4_ - param_wdr_weightLUT20_array._48_4_) *
                       iVar6) / uVar20);
    }
    else {
      uVar20 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar20 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar20 = (uint)((param_wdr_weightLUT20_array._48_4_ - param_wdr_weightLUT20_array._16_4_) *
                     iVar6) / uVar20;
    }
    uVar20 = uVar20 + param_wdr_weightLUT20_array._16_4_;
    if ((uint)param_wdr_weightLUT20_array._52_4_ < (uint)param_wdr_weightLUT20_array._20_4_) {
      uVar21 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar21 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar21 = -((uint)((param_wdr_weightLUT20_array._20_4_ - param_wdr_weightLUT20_array._52_4_) *
                       iVar6) / uVar21);
    }
    else {
      uVar21 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar21 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar21 = (uint)((param_wdr_weightLUT20_array._52_4_ - param_wdr_weightLUT20_array._20_4_) *
                     iVar6) / uVar21;
    }
    iVar11 = uVar21 + param_wdr_weightLUT20_array._20_4_;
    if ((uint)param_wdr_weightLUT20_array._56_4_ < (uint)param_wdr_weightLUT20_array._24_4_) {
      uVar21 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar21 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar21 = -((uint)((param_wdr_weightLUT20_array._24_4_ - param_wdr_weightLUT20_array._56_4_) *
                       iVar6) / uVar21);
    }
    else {
      uVar21 = param_centre5x5_w_distance_array - DAT_000d874c;
      if (!bVar1) {
        uVar21 = DAT_000d874c - param_centre5x5_w_distance_array;
      }
      uVar21 = (uint)((param_wdr_weightLUT20_array._56_4_ - param_wdr_weightLUT20_array._24_4_) *
                     iVar6) / uVar21;
    }
    iVar14 = uVar21 + param_wdr_weightLUT20_array._24_4_;
    if ((uint)param_wdr_weightLUT20_array._60_4_ < (uint)param_wdr_weightLUT20_array._28_4_) {
      uVar21 = param_centre5x5_w_distance_array - DAT_000d874c;
      uVar7 = (param_wdr_weightLUT20_array._28_4_ - param_wdr_weightLUT20_array._60_4_) * iVar6;
      uVar16 = DAT_000d874c - param_centre5x5_w_distance_array;
      iVar6 = param_wdr_weightLUT20_array._28_4_;
LAB_0006b524:
      if (!bVar1) {
        uVar21 = uVar16;
      }
      iVar6 = iVar6 - uVar7 / uVar21;
      goto LAB_0006c3ac;
    }
    uVar16 = param_centre5x5_w_distance_array - DAT_000d874c;
    uVar7 = (param_wdr_weightLUT20_array._60_4_ - param_wdr_weightLUT20_array._28_4_) * iVar6;
    uVar21 = DAT_000d874c - param_centre5x5_w_distance_array;
    iVar6 = param_wdr_weightLUT20_array._28_4_;
LAB_0006b544:
    if (bVar1) {
      uVar21 = uVar16;
    }
    uVar7 = uVar7 / uVar21;
  }
  iVar6 = uVar7 + iVar6;
LAB_0006c3ac:
  puVar13 = &param_fusion1_cure_y_array;
  iVar3 = 0;
  puVar4 = puVar13;
  while (bVar1 = iVar3 <= iVar10, iVar3 = iVar3 + 1, bVar1) {
    *puVar4 = uVar20;
    puVar4 = puVar4 + 1;
  }
  iVar15 = iVar8 - iVar10;
  iVar3 = iVar11 - uVar20;
  iVar22 = iVar3 / iVar15;
  piVar9 = (int *)(&param_fusion1_cure_y_array + iVar10);
  uVar21 = iVar3 - iVar15 * iVar22;
  uVar20 = (int)uVar21 >> 0x1f;
  for (iVar10 = 0; iVar10 < iVar15; iVar10 = iVar10 + 1) {
    iVar5 = *piVar9;
    if (iVar10 < (int)((uVar20 ^ uVar21) - uVar20)) {
      if (iVar22 < 0) {
        iVar5 = iVar22 + -1 + iVar5;
        goto LAB_0006c468;
      }
      if (iVar22 != 0) {
        iVar5 = iVar5 + iVar22 + 1;
        goto LAB_0006c468;
      }
      if (0 < iVar3) {
        iVar5 = iVar5 + 1;
        goto LAB_0006c468;
      }
      if (iVar3 != 0) {
        iVar5 = iVar5 + -1;
        goto LAB_0006c468;
      }
      piVar9[1] = iVar5;
    }
    else {
      iVar5 = iVar5 + iVar22;
LAB_0006c468:
      piVar9[1] = iVar5;
    }
    piVar9 = piVar9 + 1;
  }
  iVar10 = iVar12 - iVar8;
  iVar11 = iVar14 - iVar11;
  iVar3 = iVar11 / iVar10;
  piVar9 = (int *)(&param_fusion1_cure_y_array + iVar8);
  uVar20 = iVar11 - iVar10 * iVar3;
  uVar21 = (int)uVar20 >> 0x1f;
  for (iVar8 = 0; iVar8 < iVar10; iVar8 = iVar8 + 1) {
    iVar15 = *piVar9;
    if (iVar8 < (int)((uVar21 ^ uVar20) - uVar21)) {
      if (iVar3 < 0) {
        iVar15 = iVar3 + -1 + iVar15;
        goto LAB_0006c508;
      }
      if (iVar3 != 0) {
        iVar15 = iVar15 + iVar3 + 1;
        goto LAB_0006c508;
      }
      if (0 < iVar11) {
        iVar15 = iVar15 + 1;
        goto LAB_0006c508;
      }
      if (iVar11 != 0) {
        iVar15 = iVar15 + -1;
        goto LAB_0006c508;
      }
      piVar9[1] = iVar15;
    }
    else {
      iVar15 = iVar15 + iVar3;
LAB_0006c508:
      piVar9[1] = iVar15;
    }
    piVar9 = piVar9 + 1;
  }
  iVar8 = 0x20 - iVar12;
  iVar6 = iVar6 - iVar14;
  iVar11 = iVar6 / iVar8;
  piVar9 = (int *)(&param_fusion1_cure_y_array + iVar12);
  iVar10 = 0;
  uVar20 = iVar6 - iVar8 * iVar11;
  uVar21 = (int)uVar20 >> 0x1f;
  do {
    uVar16 = param_fusion1_cure_y_array;
    if (iVar8 <= iVar10) {
      while( true ) {
        if (0x100 < uVar16) {
          *puVar13 = 0x100;
        }
        puVar13 = puVar13 + 1;
        if (puVar13 == &param_wdr_w_point_weight_pow_array) break;
        uVar16 = *puVar13;
      }
      return 0;
    }
    iVar12 = *piVar9;
    if (iVar10 < (int)((uVar21 ^ uVar20) - uVar21)) {
      if (iVar11 < 0) {
        iVar12 = iVar11 + -1 + iVar12;
        goto LAB_0006c5ac;
      }
      if (iVar11 != 0) {
        iVar12 = iVar11 + 1 + iVar12;
        goto LAB_0006c5ac;
      }
      if (0 < iVar6) {
        iVar12 = iVar12 + 1;
        goto LAB_0006c5ac;
      }
      if (iVar6 != 0) {
        iVar12 = iVar12 + -1;
        goto LAB_0006c5ac;
      }
      piVar9[1] = iVar12;
    }
    else {
      iVar12 = iVar12 + iVar11;
LAB_0006c5ac:
      piVar9[1] = iVar12;
    }
    iVar10 = iVar10 + 1;
    piVar9 = piVar9 + 1;
  } while( true );
}



int tisp_wdr_rx_ae0_infm(void *param_1,void *param_2)

{
  memcpy(wdr_hist_Y0,param_1,4);
  memcpy(&wdr_block_mean0,param_2,4);
  return 0;
}



int tisp_wdr_rx_ae1_infm(void *param_1,void *param_2)

{
  memcpy(wdr_hist_Y1,param_1,0x400);
  memcpy(&wdr_block_mean1,param_2,900);
  return 0;
}



int tisp_wdr_rx_ae0_dms(int *param_1,int *param_2,int *param_3,int param_4)

{
  int *piVar1;
  bool bVar2;
  int iVar3;
  int iVar4;
  int *piVar5;
  int *piVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  int iVar11;
  
  iVar3 = *(int *)(param_4 + 4);
  iVar10 = *(int *)(param_4 + 0xc);
  piVar6 = (int *)(param_4 + 0x10);
  iVar11 = 0;
  piVar5 = &wdr_block_mean0;
  while (bVar2 = iVar11 < iVar3 * iVar10, iVar11 = iVar11 + 1, bVar2) {
    iVar7 = *param_2;
    iVar4 = *param_1;
    piVar1 = piVar6 + 0xf;
    iVar8 = *param_3;
    iVar9 = *piVar6;
    param_1 = param_1 + 1;
    param_2 = param_2 + 1;
    param_3 = param_3 + 1;
    piVar6 = piVar6 + 1;
    *piVar5 = (iVar4 + iVar7 + iVar8) / (iVar9 * *piVar1);
    piVar5 = piVar5 + 1;
  }
  return 0;
}



int tisp_wdr_rx_ae1_dms(void)

{
  return 0;
}



int tisp_wdr_expTime_updata(void)

{
  param_ratioPara_software_in_array = DAT_000d3eb8 * DAT_000d3eb4 + 0x200U >> 10;
  DAT_000b17c8 = DAT_000d3e78 * DAT_000d3e70 + 0x200U >> 10;
  return 0;
}



int tisp_wdr_ev_update(unsigned int param_1,int param_2)

{
  wdr_ev_now = param_2 << 0x16 | param_1 >> 10;
  wdr_ev_changed = 1;
  if (wdr_ev_old < wdr_ev_now) {
    wdr_ev_changed_deghost = wdr_ev_now - wdr_ev_old;
  }
  else {
    wdr_ev_changed_deghost = wdr_ev_old - wdr_ev_now;
  }
  wdr_ev_old = wdr_ev_now;
  return 0;
}



int tisp_wdr_ev_calculate(void)

{
  bool bVar1;
  bool bVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  int iVar5;
  unsigned int *puVar6;
  int iVar7;
  int iVar8;
  unsigned int uVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  
  time_short = DAT_000d3eb8;
  uVar3 = 0;
  if (((DAT_000d3eb8 <= (uint)param_xy_pix_low_software_in_array._80_4_) &&
      (uVar3 = wdr_weight_in_list_deghost,
      (uint)param_xy_pix_low_software_in_array._84_4_ < DAT_000d3eb8)) &&
     (uVar3 = 0, wdr_weight_in_list_deghost != 0)) {
    uVar3 = param_xy_pix_low_software_in_array._80_4_ - param_xy_pix_low_software_in_array._84_4_;
    if ((uint)param_xy_pix_low_software_in_array._80_4_ <
        (uint)param_xy_pix_low_software_in_array._84_4_) {
      uVar3 = param_xy_pix_low_software_in_array._84_4_ - param_xy_pix_low_software_in_array._80_4_;
    }
    uVar3 = wdr_weight_in_list_deghost -
            ((DAT_000d3eb8 - param_xy_pix_low_software_in_array._84_4_) * wdr_weight_in_list_deghost
            ) / uVar3;
  }
  DAT_000b18d8 = uVar3;
  if (param_xy_pix_low_software_in_array._64_4_ == 1) {
    puVar6 = &wdr_ev_list_deghost;
    DAT_000b18d8 = wdr_weight_in_list_deghost;
    if ((wdr_ev_list_deghost < wdr_ev_now) &&
       (DAT_000b18d8 = DAT_000b0d58, wdr_ev_now <= DAT_000b0d7c)) {
      iVar5 = 0;
      do {
        uVar4 = *puVar6;
        iVar7 = iVar5 + 1;
        if ((uVar4 < wdr_ev_now) && (wdr_ev_now <= puVar6[1])) {
          uVar9 = puVar6[1] - uVar4;
          DAT_000b18d8 = (((&wdr_weight_in_list_deghost)[iVar7] -
                          (&wdr_weight_in_list_deghost)[iVar5]) * (wdr_ev_now - uVar4) +
                         (&wdr_weight_in_list_deghost)[iVar5] * uVar9 + (uVar9 >> 1)) / uVar9;
          goto LAB_0006c91c;
        }
        puVar6 = puVar6 + 1;
        iVar5 = iVar7;
      } while (iVar7 != 8);
      DAT_000b18d8 = 0;
    }
LAB_0006c91c:
    if (uVar3 <= DAT_000b18d8) {
      DAT_000b18d8 = uVar3;
    }
  }
  if (param_xy_pix_low_software_in_array._68_4_ == 1) {
    if (wdr_ev_changed == 0) {
      wdr_ev_changed_deghost = 0;
    }
    uVar3 = 0;
    if ((wdr_ev_changed_deghost < (uint)param_xy_pix_low_software_in_array._72_4_) &&
       (uVar3 = 0x20, (uint)param_xy_pix_low_software_in_array._76_4_ <= wdr_ev_changed_deghost)) {
      uVar3 = ((param_xy_pix_low_software_in_array._72_4_ - wdr_ev_changed_deghost) * 0x20 +
              ((uint)(param_xy_pix_low_software_in_array._72_4_ -
                     param_xy_pix_low_software_in_array._76_4_) >> 1)) /
              (uint)(param_xy_pix_low_software_in_array._72_4_ -
                    param_xy_pix_low_software_in_array._76_4_);
    }
    if (uVar3 < DAT_000b18d8) {
      DAT_000b18d8 = uVar3;
    }
  }
  if (wdr_ev_changed == 1) {
    wdr_ev_changed = 0;
    puVar6 = &wdr_ev_list;
    iVar5 = 0;
    do {
      uVar3 = *puVar6;
      if (wdr_ev_old <= uVar3) {
        if (iVar5 == 0) {
          wdr_ev_out_list = wdr_detail_w_in0_list;
          DAT_000d6df4 = wdr_detail_w_in1_list;
          DAT_000d6df8 = wdr_detail_w_in2_list;
          DAT_000d6dfc = wdr_detail_w_in3_list;
          DAT_000d6e00 = wdr_detail_w_in4_list;
          DAT_000d6e04 = wdr_weight_b_in_list;
          DAT_000d6e08 = wdr_weight_p_in_list;
        }
        else {
          iVar7 = iVar5 + -1;
          uVar4 = (&wdr_ev_list)[iVar7];
          if (uVar3 == uVar4) {
            wdr_ev_out_list = (&wdr_detail_w_in0_list)[iVar5];
            DAT_000d6df4 = (&wdr_detail_w_in1_list)[iVar5];
            DAT_000d6df8 = (&wdr_detail_w_in2_list)[iVar5];
            DAT_000d6dfc = (&wdr_detail_w_in3_list)[iVar5];
            DAT_000d6e00 = (&wdr_detail_w_in4_list)[iVar5];
            DAT_000d6e04 = (&wdr_weight_b_in_list)[iVar5];
            DAT_000d6e08 = (&wdr_weight_p_in_list)[iVar5];
          }
          else {
            uVar9 = (&wdr_detail_w_in0_list)[iVar7];
            uVar10 = (&wdr_detail_w_in0_list)[iVar5];
            bVar1 = wdr_ev_old <= uVar4;
            bVar2 = uVar4 <= uVar3;
            if (uVar10 < uVar9) {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar8 * (uVar9 - uVar10)) / uVar11);
            }
            else {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = (iVar8 * (uVar10 - uVar9)) / uVar11;
            }
            wdr_ev_out_list = uVar9 + uVar11;
            uVar10 = (&wdr_detail_w_in1_list)[iVar7];
            uVar9 = (&wdr_detail_w_in1_list)[iVar5];
            if (uVar9 < uVar10) {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar8 * (uVar10 - uVar9)) / uVar11);
            }
            else {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = (iVar8 * (uVar9 - uVar10)) / uVar11;
            }
            DAT_000d6df4 = uVar10 + uVar11;
            uVar10 = (&wdr_detail_w_in2_list)[iVar7];
            uVar9 = (&wdr_detail_w_in2_list)[iVar5];
            if (uVar9 < uVar10) {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar8 * (uVar10 - uVar9)) / uVar11);
            }
            else {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = (iVar8 * (uVar9 - uVar10)) / uVar11;
            }
            DAT_000d6df8 = uVar10 + uVar11;
            uVar10 = (&wdr_detail_w_in3_list)[iVar7];
            uVar9 = (&wdr_detail_w_in3_list)[iVar5];
            if (uVar9 < uVar10) {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar8 * (uVar10 - uVar9)) / uVar11);
            }
            else {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = (iVar8 * (uVar9 - uVar10)) / uVar11;
            }
            DAT_000d6dfc = uVar10 + uVar11;
            uVar10 = (&wdr_detail_w_in4_list)[iVar7];
            uVar9 = (&wdr_detail_w_in4_list)[iVar5];
            if (uVar9 < uVar10) {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar8 * (uVar10 - uVar9)) / uVar11);
            }
            else {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = (iVar8 * (uVar9 - uVar10)) / uVar11;
            }
            DAT_000d6e00 = uVar10 + uVar11;
            uVar10 = (&wdr_weight_b_in_list)[iVar7];
            uVar9 = (&wdr_weight_b_in_list)[iVar5];
            if (uVar9 < uVar10) {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar8 * (uVar10 - uVar9)) / uVar11);
            }
            else {
              iVar8 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar8 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = (iVar8 * (uVar9 - uVar10)) / uVar11;
            }
            DAT_000d6e04 = uVar10 + uVar11;
            uVar10 = (&wdr_weight_p_in_list)[iVar7];
            uVar9 = (&wdr_weight_p_in_list)[iVar5];
            if (uVar9 < uVar10) {
              iVar5 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar5 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar4 - uVar3;
              if (bVar2) {
                uVar11 = uVar3 - uVar4;
              }
              uVar11 = -((iVar5 * (uVar10 - uVar9)) / uVar11);
            }
            else {
              iVar5 = wdr_ev_old - uVar4;
              if (bVar1) {
                iVar5 = uVar4 - wdr_ev_old;
              }
              uVar11 = uVar3 - uVar4;
              if (!bVar2) {
                uVar11 = uVar4 - uVar3;
              }
              uVar11 = (iVar5 * (uVar9 - uVar10)) / uVar11;
            }
            DAT_000d6e08 = uVar10 + uVar11;
          }
        }
        goto LAB_0006ce7c;
      }
      iVar5 = iVar5 + 1;
      puVar6 = puVar6 + 1;
    } while (iVar5 != 9);
    wdr_ev_out_list = DAT_000d6e50;
    DAT_000d6df4 = DAT_000d6e2c;
    DAT_000d6df8 = DAT_000b0de8;
    DAT_000d6dfc = DAT_000b0dc4;
    DAT_000d6e00 = DAT_000b0da0;
    DAT_000d6e04 = DAT_000b0e30;
    DAT_000d6e08 = DAT_000b0e0c;
LAB_0006ce7c:
    tiziano_wdr_fusion1_curve();
  }
  param_wdr_detail_th_w_array = wdr_ev_out_list;
  DAT_000b1c20 = DAT_000d6df4;
  DAT_000b1c24 = DAT_000d6df8;
  DAT_000b1c28 = DAT_000d6dfc;
  DAT_000b1c2c = DAT_000d6e00;
  wdr_s2l_ratio = DAT_000d6e04;
  wdr_para_array4 = 0x1ffe;
  wdr_para_array5 = DAT_000d6e08;
  if (DAT_000d6e08 < 0x401) {
    wdr_para_array5 = 0x401;
  }
  wdr_para_init_div4 = 0x801;
  wdr_para_init_div5 = (wdr_para_array5 / 2 + 0x1000000) / wdr_para_array5;
  if (0x1fff < wdr_para_init_div5) {
    wdr_para_init_div5 = 0x1fff;
  }
  DAT_000b1cfc = wdr_para_array5;
  DAT_000b1d00 = 0x801;
  DAT_000b1cf8 = 0x1ffe;
  DAT_000b1d04 = wdr_para_init_div5;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void tiziano_wdr_get_data(unsigned int *param_1)

{
  int iVar1;
  unsigned int *puVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int iVar6;
  unsigned int uVar7;
  
  iVar6 = 0;
  puVar2 = param_1;
  do {
    uVar5 = *puVar2;
    iVar1 = iVar6 >> 2;
    uVar4 = puVar2[1];
    uVar7 = puVar2[2];
    uVar3 = puVar2[3];
    (&wdr_hist_R0)[iVar1] = uVar5 & 0x1fffff;
    (&wdr_hist_G0)[iVar1] = (uVar4 & 0x3ff) << 0xb | uVar5 >> 0x15;
    (&wdr_hist_B0)[iVar1] = uVar4 >> 10 & 0x1fffff;
    (&wdr_hist_R1)[iVar1] = uVar7 & 0x1fffff;
    iVar6 = iVar6 + 4;
    (&wdr_hist_G1)[iVar1] = (uVar3 & 0x3ff) << 0xb | uVar7 >> 0x15;
    (&wdr_hist_B1)[iVar1] = uVar3 >> 10 & 0x1fffff;
    puVar2 = puVar2 + 4;
  } while (iVar6 != 0x400);
  wdr_hist_y0_num = param_1[0x400] & 0x1fffff;
  DAT_000d86c0 = (param_1[0x401] & 0x3ff) << 0xb | param_1[0x400] >> 0x15;
  DAT_000d86c4 = param_1[0x401] >> 10 & 0x1fffff;
  wdr_hist_y1_num = param_1[0x402] & 0x1fffff;
  DAT_000d86b8 = param_1[0x403] >> 10 & 0x1fffff;
  DAT_000d86b4 = (param_1[0x403] & 0x3ff) << 0xb | param_1[0x402] >> 0x15;
  _DAT_000d86a4 = param_1[0x405] & 1;
  wdr_point_y_sum = param_1[0x404];
  DAT_000d86a8 = param_1[0x406];
  DAT_000d86ac = param_1[0x407] & 1;
  return;
}



int tiziano_wdr_interrupt_static(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  short *puVar6;
  short *puVar7;
  int iVar8;
  char auStack_58 [8];
  int local_50;
  
  iVar1 = system_reg_read(0x2680);
  iVar8 = 0;
  do {
    if (iVar1 == iVar8 + DAT_000b2760) {
      iVar2 = iVar8 + DAT_000b275c;
      iVar3 = iVar2;
      iVar5 = iVar2;
      do {
        iVar4 = 0;
        do {
          puVar6 = (short *)(iVar3 + iVar4);
          puVar7 = (short *)(iVar5 + iVar4);
          iVar4 = iVar4 + 2;
          *puVar7 = *puVar6;
        } while (iVar4 != 0x204);
        iVar3 = iVar3 + 0x400;
        iVar5 = iVar5 + 0x204;
      } while (iVar2 + 0x2000 != iVar3);
      private_dma_cache_sync(0,iVar2,0x2000,0);
      tiziano_wdr_get_data(iVar2);
    }
    iVar8 = iVar8 + 0x2000;
  } while (iVar8 != 0x8000);
  local_50 = 0xb;
  tisp_event_push(auStack_58);
  return 1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_wdr_algorithm(void)

{
  bool bVar1;
  bool bVar2;
  bool bVar3;
  int *puVar4;
  unsigned int uVar5;
  unsigned int *puVar6;
  unsigned int uVar7;
  unsigned int *puVar8;
  unsigned int uVar9;
  int *piVar10;
  unsigned int *puVar11;
  unsigned int uVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  unsigned int uVar17;
  char local_80 [104];
  
  tisp_wdr_expTime_updata();
  tisp_wdr_ev_calculate();
  uVar12 = _DAT_000b1514;
  uVar9 = _DAT_000b14ac;
  puVar6 = &param_multiValueHigh_software_in_array;
  puVar8 = &param_multiValueLow_software_in_array;
  iVar14 = wdr_ev_now - wdr_ev_list_deghost;
  iVar15 = _DAT_000b1514 - _DAT_000b14ac;
  iVar16 = _DAT_000b14ac - _DAT_000b1514;
  uVar5 = wdr_ev_list_deghost - DAT_000b0d6c;
  if (wdr_ev_list_deghost <= DAT_000b0d6c) {
    uVar5 = DAT_000b0d6c - wdr_ev_list_deghost;
  }
  puVar11 = &wdr_thrAll_software_out;
  bVar1 = wdr_ev_list_deghost < wdr_ev_now;
  iVar13 = 0;
  bVar2 = wdr_ev_now < DAT_000b0d6c;
  bVar3 = _DAT_000b14ac < _DAT_000b1514;
  do {
    if (iVar13 == 0x1a) {
      if (bVar1) {
        if (bVar2) {
          if (bVar3) {
            uVar17 = -((uint)(iVar15 * iVar14) / uVar5);
          }
          else {
            uVar17 = (uint)(iVar16 * iVar14) / uVar5;
          }
          DAT_000b0f88 = uVar17 + uVar12;
        }
        else {
          DAT_000b0f88 = uVar9;
        }
      }
      else {
        DAT_000b0f88 = uVar12;
      }
    }
    else {
      if (bVar1) {
        if (bVar2) {
          uVar17 = *puVar8;
          uVar7 = *puVar6;
          if (uVar7 < uVar17) {
            uVar17 = uVar17 - ((uVar17 - uVar7) * iVar14) / uVar5;
          }
          else {
            uVar17 = ((uVar7 - uVar17) * iVar14) / uVar5 + uVar17;
          }
        }
        else {
          uVar17 = *puVar6;
        }
      }
      else {
        uVar17 = *puVar8;
      }
      *puVar11 = uVar17;
    }
    iVar13 = iVar13 + 1;
    puVar8 = puVar8 + 1;
    puVar11 = puVar11 + 1;
    puVar6 = puVar6 + 1;
  } while (iVar13 != 0x1b);
  param_xy_pix_low_software_in_array._56_4_ = DAT_000b18d8;
  TizianoWdrFpgaStructMe = param_computerModle_software_in_array;
  DAT_000d8c68 = param_xy_pix_low_software_in_array;
  DAT_000d8c6c = param_motionThrPara_software_in_array;
  DAT_000d8c70 = param_d_thr_normal_software_in_array;
  DAT_000d8c74 = param_d_thr_normal1_software_in_array;
  DAT_000d8c78 = param_d_thr_normal2_software_in_array;
  DAT_000d8c7c = param_d_thr_normal_min_software_in_array;
  DAT_000d8c80 = param_d_thr_2_software_in_array;
  DAT_000d8c8c = &wdr_hist_R0;
  DAT_000d8c90 = &wdr_hist_G0;
  DAT_000d8c94 = &wdr_hist_B0;
  DAT_000d8c98 = &wdr_hist_R1;
  DAT_000d8c9c = &wdr_hist_G1;
  DAT_000d8ca0 = &wdr_hist_B1;
  DAT_000d8ca4 = &wdr_mapR_software_out;
  DAT_000d8ca8 = &wdr_mapB_software_out;
  DAT_000d8cac = &wdr_mapG_software_out;
  DAT_000d8cb0 = &param_wdr_thrLable_array;
  DAT_000d8c5c = param_x_thr_software_in_array;
  DAT_000d8cb4 = &wdr_thrLableN_software_out;
  DAT_000d8c54 = param_deviationPara_software_in_array;
  _DAT_000d8c60 = param_y_thr_software_in_array;
  DAT_000d8cbc = &wdr_thrRangeK_software_out;
  DAT_000d8c84 = &param_multiValueLow_software_in_array;
  DAT_000d8c64 = param_thrPara_software_in_array;
  DAT_000d8cc0 = param_wdr_detial_para_software_in_array;
  DAT_000d8c58 = &param_ratioPara_software_in_array;
  DAT_000d8c88 = &param_multiValueHigh_software_in_array;
  DAT_000d8cb8 = &wdr_thrAll_software_out;
  DAT_000d8cc4 = &wdr_detial_para_software_out;
  for (uVar9 = 0; uVar9 < 0x68; uVar9 = uVar9 + 1) {
    local_80[uVar9] = (&DAT_000d8c60)[uVar9];
  }
  Tiziano_wdr_fpga(param_computerModle_software_in_array,param_deviationPara_software_in_array,
                   &param_ratioPara_software_in_array,param_x_thr_software_in_array);
  if (param_wdr_tool_control_array == 1) {
    DAT_000b18d8 = 0;
  }
  DAT_000b0e80 = (uint)(DAT_000b17c8 << 0xc) / (param_ratioPara_software_in_array + 1U);
  wdr_exp_ratio_def = DAT_000b0e80;
  if (DAT_000b0e88 == 1) {
    wdr_exp_ratio_def = wdr_s2l_ratio;
  }
  DAT_000b0e84 = wdr_exp_ratio_def;
  wdr_detial_para_software_out = 0;
  DAT_000b0e9c = 0;
  DAT_000b0ea8 = 0;
  DAT_000b0e94 = 0;
  DAT_000b0ea0 = 0;
  DAT_000b0eac = 0;
  DAT_000b0e98 = wdr_exp_ratio_def;
  if (DAT_000b0e78 == 1) {
    DAT_000b0e98 = wdr_exp_ratio_def - DAT_000b0e7c;
  }
  iVar14 = 0;
  piVar10 = (int *)&wdr_block_mean1_max;
  DAT_000b0ea4 = DAT_000b0e98;
  DAT_000b0eb0 = DAT_000b0e98;
  do {
    puVar4 = (int *)((int)&wdr_block_mean1_max + iVar14);
    iVar14 = iVar14 + 4;
    *puVar4 = 0;
    uVar17 = _DAT_000d8ce8;
    uVar5 = _DAT_000d8ce4;
    uVar12 = _DAT_000d8ce0;
    uVar9 = DAT_000d8cdc;
  } while (iVar14 != 0x20);
  puVar6 = &wdr_block_mean1;
  iVar14 = 0;
  do {
    uVar7 = *puVar6;
    if (wdr_block_mean1_max < uVar7) {
      iVar15 = 0;
      do {
        iVar16 = iVar15 + 4;
        *(int *)((int)&DAT_000d69d0 + iVar15) =
             *(int *)((int)&wdr_block_mean1 + iVar15);
        iVar15 = iVar16;
        wdr_block_mean1_max = uVar7;
      } while (iVar16 != 0x1c);
    }
    else if (DAT_000d69d0 < uVar7) {
      iVar15 = 0;
      do {
        iVar16 = iVar15 + 4;
        *(int *)((int)&DAT_000d69d4 + iVar15) = *(int *)((int)&DAT_000d8cd4 + iVar15);
        iVar15 = iVar16;
        DAT_000d69d0 = uVar7;
      } while (iVar16 != 0x18);
    }
    else if (DAT_000d69d4 < uVar7) {
      iVar15 = 0;
      do {
        iVar16 = iVar15 + 4;
        *(int *)((int)&DAT_000d69d8 + iVar15) = *(int *)((int)&DAT_000d8cd8 + iVar15);
        iVar15 = iVar16;
        DAT_000d69d4 = uVar7;
      } while (iVar16 != 0x14);
    }
    else if (DAT_000d69d8 < uVar7) {
      DAT_000d69dc = uVar9;
      DAT_000d69e0 = uVar12;
      DAT_000d69e4 = uVar5;
      DAT_000d69e8 = uVar17;
      DAT_000d69d8 = uVar7;
    }
    else if (DAT_000d69dc < uVar7) {
      DAT_000d69e0 = uVar12;
      DAT_000d69e4 = uVar5;
      DAT_000d69e8 = uVar17;
      DAT_000d69dc = uVar7;
    }
    else if (DAT_000d69e0 < uVar7) {
      DAT_000d69e4 = uVar5;
      DAT_000d69e8 = uVar17;
      DAT_000d69e0 = uVar7;
    }
    else if (DAT_000d69e4 < uVar7) {
      DAT_000d69e8 = uVar17;
      DAT_000d69e4 = uVar7;
    }
    else if (DAT_000d69e8 < uVar7) {
      DAT_000d69e8 = uVar7;
    }
    iVar15 = iVar14 + 4;
    puVar6 = (unsigned int *)((int)&DAT_000d8cd4 + iVar14);
    iVar14 = iVar15;
  } while (iVar15 != 900);
  if ((uint)param_wdr_weightLUT21_array._124_4_ < 4) {
    param_wdr_weightLUT21_array._124_4_ = 4;
  }
  else if (8 < (uint)param_wdr_weightLUT21_array._124_4_) {
    param_wdr_weightLUT21_array._124_4_ = 8;
  }
  bVar1 = false;
  uVar12 = 0;
  for (uVar9 = 0; uVar9 != param_wdr_weightLUT21_array._124_4_; uVar9 = uVar9 + 1) {
    uVar12 = uVar12 + *piVar10;
    piVar10 = piVar10 + 1;
    bVar1 = true;
  }
  uVar5 = 0;
  if (bVar1) {
    uVar5 = uVar12;
  }
  wdr_block_mean1_end = uVar5 / uVar9;
  wdr_block_mean1_th = wdr_block_mean1_end - wdr_block_mean1_end_old;
  uVar9 = wdr_block_mean1_end;
  if ((int)wdr_block_mean1_th < 1) {
    if (((wdr_block_mean1_th == 0) || (param_wdr_weightLUT21_array._112_4_ != 1)) ||
       (wdr_block_mean1_th = -wdr_block_mean1_th,
       wdr_block_mean1_th <= (uint)param_wdr_weightLUT21_array._116_4_)) goto LAB_0006d878;
    iVar14 = -param_wdr_weightLUT21_array._116_4_;
  }
  else if ((param_wdr_weightLUT21_array._112_4_ != 1) ||
          (iVar14 = param_wdr_weightLUT21_array._116_4_,
          wdr_block_mean1_th <= (uint)param_wdr_weightLUT21_array._116_4_)) goto LAB_0006d878;
  uVar9 = wdr_block_mean1_end_old + iVar14;
LAB_0006d878:
  wdr_block_mean1_end_old = uVar9;
  DAT_000d8abc = wdr_block_mean1_end;
  if ((param_wdr_gam_y_array == 2) && (DAT_000b0e8c == 1)) {
    tiziano_wdr_fusion1_curve_block_mean1();
  }
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_wdr_soft_para_out(void)

{
  system_reg_write(0x2604,(wdr_para_array5 & 0x1fff) << 0x10 | wdr_para_array4 & 0x1fff);
  system_reg_write(0x2608,(wdr_para_init_div5 & 0x3fff) << 0x10 | wdr_para_init_div4 & 0x3fff);
  system_reg_write(0x24e8,(DAT_000b1c20 & 0x7f) << 0x10 | param_wdr_detail_th_w_array & 0x7f);
  system_reg_write(0x24ec,(DAT_000b1c28 & 0x7f) << 0x10 | DAT_000b1c24 & 0x7f);
  system_reg_write(0x24f0,DAT_000b1c2c & 0x7f);
  system_reg_write(0x24a4,(DAT_000b1c3c & 0x1ff) << 0x10 | param_fusion1_cure_y_array & 0x1ff);
  system_reg_write(0x24a8,(DAT_000b1c44 & 0x1ff) << 0x10 | DAT_000b1c40 & 0x1ff);
  system_reg_write(0x24ac,(DAT_000b1c4c & 0x1ff) << 0x10 | DAT_000b1c48 & 0x1ff);
  system_reg_write(0x24b0,(DAT_000b1c54 & 0x1ff) << 0x10 | DAT_000b1c50 & 0x1ff);
  system_reg_write(0x24b4,(DAT_000b1c5c & 0x1ff) << 0x10 | DAT_000b1c58 & 0x1ff);
  system_reg_write(0x24b8,(DAT_000b1c64 & 0x1ff) << 0x10 | DAT_000b1c60 & 0x1ff);
  system_reg_write(0x24bc,(DAT_000b1c6c & 0x1ff) << 0x10 | DAT_000b1c68 & 0x1ff);
  system_reg_write(0x24c0,(DAT_000b1c74 & 0x1ff) << 0x10 | DAT_000b1c70 & 0x1ff);
  system_reg_write(0x24c4,(DAT_000b1c7c & 0x1ff) << 0x10 | DAT_000b1c78 & 0x1ff);
  system_reg_write(0x24c8,(DAT_000b1c84 & 0x1ff) << 0x10 | DAT_000b1c80 & 0x1ff);
  system_reg_write(0x24cc,(DAT_000b1c8c & 0x1ff) << 0x10 | DAT_000b1c88 & 0x1ff);
  system_reg_write(0x24d0,(DAT_000b1c94 & 0x1ff) << 0x10 | DAT_000b1c90 & 0x1ff);
  system_reg_write(0x24d4,(DAT_000b1c9c & 0x1ff) << 0x10 | DAT_000b1c98 & 0x1ff);
  system_reg_write(0x24d8,(DAT_000b1ca4 & 0x1ff) << 0x10 | DAT_000b1ca0 & 0x1ff);
  system_reg_write(0x24dc,(DAT_000b1cac & 0x1ff) << 0x10 | DAT_000b1ca8 & 0x1ff);
  system_reg_write(0x24e0,(DAT_000b1cb4 & 0x1ff) << 0x10 | DAT_000b1cb0 & 0x1ff);
  system_reg_write(0x24e4,DAT_000b1cb8 & 0x1ff);
  system_reg_write(0x2040,(_DAT_000b18b0 & 0x1f) << 8 | (_DAT_000b18b4 & 0xf) << 0x10 |
                          (uint)DAT_000b18ac | (DAT_000b18d8 & 0x3f) << 0x18);
  system_reg_write(0x2050,(_DAT_000b0ff8 & 0xfff) << 0x10 | wdr_mapR_software_out & 0xfff);
  system_reg_write(0x2054,(DAT_000b1000 & 0xfff) << 0x10 | DAT_000b0ffc & 0xfff);
  system_reg_write(0x2058,(DAT_000b1008 & 0xfff) << 0x10 | DAT_000b1004 & 0xfff);
  system_reg_write(0x205c,(DAT_000b1010 & 0xfff) << 0x10 | DAT_000b100c & 0xfff);
  system_reg_write(0x2060,(DAT_000b1018 & 0xfff) << 0x10 | DAT_000b1014 & 0xfff);
  system_reg_write(0x2064,(DAT_000b1020 & 0xfff) << 0x10 | DAT_000b101c & 0xfff);
  system_reg_write(0x2068,(DAT_000b1028 & 0xfff) << 0x10 | DAT_000b1024 & 0xfff);
  system_reg_write(0x206c,(DAT_000b1030 & 0xfff) << 0x10 | DAT_000b102c & 0xfff);
  system_reg_write(0x2070,(DAT_000b1038 & 0xfff) << 0x10 | DAT_000b1034 & 0xfff);
  system_reg_write(0x2074,(DAT_000b1040 & 0xfff) << 0x10 | DAT_000b103c & 0xfff);
  system_reg_write(0x2078,(DAT_000b1048 & 0xfff) << 0x10 | DAT_000b1044 & 0xfff);
  system_reg_write(0x207c,(DAT_000b1050 & 0xfff) << 0x10 | DAT_000b104c & 0xfff);
  system_reg_write(0x2080,(DAT_000b1058 & 0xfff) << 0x10 | DAT_000b1054 & 0xfff);
  system_reg_write(0x2084,(DAT_000b1060 & 0xfff) << 0x10 | DAT_000b105c & 0xfff);
  system_reg_write(0x2088,(DAT_000b1068 & 0xfff) << 0x10 | DAT_000b1064 & 0xfff);
  system_reg_write(0x208c,(DAT_000b1070 & 0xfff) << 0x10 | DAT_000b106c & 0xfff);
  system_reg_write(0x2090,(DAT_000b1078 & 0xfff) << 0x10 | DAT_000b1074 & 0xfff);
  system_reg_write(0x2094,(DAT_000b1080 & 0xfff) << 0x10 | DAT_000b107c & 0xfff);
  system_reg_write(0x2098,(DAT_000b1088 & 0xfff) << 0x10 | DAT_000b1084 & 0xfff);
  system_reg_write(0x209c,(DAT_000b1090 & 0xfff) << 0x10 | DAT_000b108c & 0xfff);
  system_reg_write(0x20a0,(DAT_000b1098 & 0xfff) << 0x10 | DAT_000b1094 & 0xfff);
  system_reg_write(0x20a4,(DAT_000b10a0 & 0xfff) << 0x10 | DAT_000b109c & 0xfff);
  system_reg_write(0x20a8,(DAT_000b10a8 & 0xfff) << 0x10 | DAT_000b10a4 & 0xfff);
  system_reg_write(0x20ac,(DAT_000b10b0 & 0xfff) << 0x10 | DAT_000b10ac & 0xfff);
  system_reg_write(0x20b0,(DAT_000b10b8 & 0xfff) << 0x10 | DAT_000b10b4 & 0xfff);
  system_reg_write(0x20b4,(DAT_000b10c0 & 0xfff) << 0x10 | DAT_000b10bc & 0xfff);
  system_reg_write(0x20b8,(DAT_000b10c8 & 0xfff) << 0x10 | DAT_000b10c4 & 0xfff);
  system_reg_write(0x20bc,(DAT_000b10d0 & 0xfff) << 0x10 | DAT_000b10cc & 0xfff);
  system_reg_write(0x20c0,(DAT_000b10d8 & 0xfff) << 0x10 | DAT_000b10d4 & 0xfff);
  system_reg_write(0x20c4,(DAT_000b10e0 & 0xfff) << 0x10 | DAT_000b10dc & 0xfff);
  system_reg_write(0x20c8,(DAT_000b10e8 & 0xfff) << 0x10 | DAT_000b10e4 & 0xfff);
  system_reg_write(0x20cc,(DAT_000b10f0 & 0xfff) << 0x10 | DAT_000b10ec & 0xfff);
  system_reg_write(0x20d0,(DAT_000b10f8 & 0xfff) << 0x10 | DAT_000b10f4 & 0xfff);
  system_reg_write(0x20d4,(DAT_000b1100 & 0xfff) << 0x10 | DAT_000b10fc & 0xfff);
  system_reg_write(0x20d8,(DAT_000b1108 & 0xfff) << 0x10 | DAT_000b1104 & 0xfff);
  system_reg_write(0x20dc,(DAT_000b1110 & 0xfff) << 0x10 | DAT_000b110c & 0xfff);
  system_reg_write(0x20e0,(DAT_000b1118 & 0xfff) << 0x10 | DAT_000b1114 & 0xfff);
  system_reg_write(0x20e4,(DAT_000b1120 & 0xfff) << 0x10 | DAT_000b111c & 0xfff);
  system_reg_write(0x20e8,(DAT_000b1128 & 0xfff) << 0x10 | DAT_000b1124 & 0xfff);
  system_reg_write(0x20ec,(DAT_000b1130 & 0xfff) << 0x10 | DAT_000b112c & 0xfff);
  system_reg_write(0x20f0,DAT_000b1134 & 0xfff);
  system_reg_write(0x20f4,(_DAT_000b113c & 0xfff) << 0x10 | wdr_mapG_software_out & 0xfff);
  system_reg_write(0x20f8,(DAT_000b1144 & 0xfff) << 0x10 | DAT_000b1140 & 0xfff);
  system_reg_write(0x20fc,(DAT_000b114c & 0xfff) << 0x10 | DAT_000b1148 & 0xfff);
  system_reg_write(0x2100,(DAT_000b1154 & 0xfff) << 0x10 | DAT_000b1150 & 0xfff);
  system_reg_write(0x2104,(DAT_000b115c & 0xfff) << 0x10 | DAT_000b1158 & 0xfff);
  system_reg_write(0x2108,(DAT_000b1164 & 0xfff) << 0x10 | DAT_000b1160 & 0xfff);
  system_reg_write(0x210c,(DAT_000b116c & 0xfff) << 0x10 | DAT_000b1168 & 0xfff);
  system_reg_write(0x2110,(DAT_000b1174 & 0xfff) << 0x10 | DAT_000b1170 & 0xfff);
  system_reg_write(0x2114,(DAT_000b117c & 0xfff) << 0x10 | DAT_000b1178 & 0xfff);
  system_reg_write(0x2118,(DAT_000b1184 & 0xfff) << 0x10 | DAT_000b1180 & 0xfff);
  system_reg_write(0x211c,(DAT_000b118c & 0xfff) << 0x10 | DAT_000b1188 & 0xfff);
  system_reg_write(0x2120,(DAT_000b1194 & 0xfff) << 0x10 | DAT_000b1190 & 0xfff);
  system_reg_write(0x2124,(DAT_000b119c & 0xfff) << 0x10 | DAT_000b1198 & 0xfff);
  system_reg_write(0x2128,(DAT_000b11a4 & 0xfff) << 0x10 | DAT_000b11a0 & 0xfff);
  system_reg_write(0x212c,(DAT_000b11ac & 0xfff) << 0x10 | DAT_000b11a8 & 0xfff);
  system_reg_write(0x2130,(DAT_000b11b4 & 0xfff) << 0x10 | DAT_000b11b0 & 0xfff);
  system_reg_write(0x2134,(DAT_000b11bc & 0xfff) << 0x10 | DAT_000b11b8 & 0xfff);
  system_reg_write(0x2138,(DAT_000b11c4 & 0xfff) << 0x10 | DAT_000b11c0 & 0xfff);
  system_reg_write(0x213c,(DAT_000b11cc & 0xfff) << 0x10 | DAT_000b11c8 & 0xfff);
  system_reg_write(0x2140,(DAT_000b11d4 & 0xfff) << 0x10 | DAT_000b11d0 & 0xfff);
  system_reg_write(0x2144,(DAT_000b11dc & 0xfff) << 0x10 | DAT_000b11d8 & 0xfff);
  system_reg_write(0x2148,(DAT_000b11e4 & 0xfff) << 0x10 | DAT_000b11e0 & 0xfff);
  system_reg_write(0x214c,(DAT_000b11ec & 0xfff) << 0x10 | DAT_000b11e8 & 0xfff);
  system_reg_write(0x2150,(DAT_000b11f4 & 0xfff) << 0x10 | DAT_000b11f0 & 0xfff);
  system_reg_write(0x2154,(DAT_000b11fc & 0xfff) << 0x10 | DAT_000b11f8 & 0xfff);
  system_reg_write(0x2158,(DAT_000b1204 & 0xfff) << 0x10 | DAT_000b1200 & 0xfff);
  system_reg_write(0x215c,(DAT_000b120c & 0xfff) << 0x10 | DAT_000b1208 & 0xfff);
  system_reg_write(0x2160,(DAT_000b1214 & 0xfff) << 0x10 | DAT_000b1210 & 0xfff);
  system_reg_write(0x2164,(DAT_000b121c & 0xfff) << 0x10 | DAT_000b1218 & 0xfff);
  system_reg_write(0x2168,(DAT_000b1224 & 0xfff) << 0x10 | DAT_000b1220 & 0xfff);
  system_reg_write(0x216c,(DAT_000b122c & 0xfff) << 0x10 | DAT_000b1228 & 0xfff);
  system_reg_write(0x2170,(DAT_000b1234 & 0xfff) << 0x10 | DAT_000b1230 & 0xfff);
  system_reg_write(0x2174,(DAT_000b123c & 0xfff) << 0x10 | DAT_000b1238 & 0xfff);
  system_reg_write(0x2178,(DAT_000b1244 & 0xfff) << 0x10 | DAT_000b1240 & 0xfff);
  system_reg_write(0x217c,(DAT_000b124c & 0xfff) << 0x10 | DAT_000b1248 & 0xfff);
  system_reg_write(0x2180,(DAT_000b1254 & 0xfff) << 0x10 | DAT_000b1250 & 0xfff);
  system_reg_write(0x2184,(DAT_000b125c & 0xfff) << 0x10 | DAT_000b1258 & 0xfff);
  system_reg_write(0x2188,(DAT_000b1264 & 0xfff) << 0x10 | DAT_000b1260 & 0xfff);
  system_reg_write(0x218c,(DAT_000b126c & 0xfff) << 0x10 | DAT_000b1268 & 0xfff);
  system_reg_write(0x2190,(DAT_000b1274 & 0xfff) << 0x10 | DAT_000b1270 & 0xfff);
  system_reg_write(0x2194,DAT_000b1278 & 0xfff);
  system_reg_write(0x2198,(_DAT_000b1280 & 0xfff) << 0x10 | wdr_mapB_software_out & 0xfff);
  system_reg_write(0x219c,(DAT_000b1288 & 0xfff) << 0x10 | DAT_000b1284 & 0xfff);
  system_reg_write(0x21a0,(DAT_000b1290 & 0xfff) << 0x10 | DAT_000b128c & 0xfff);
  system_reg_write(0x21a4,(DAT_000b1298 & 0xfff) << 0x10 | DAT_000b1294 & 0xfff);
  system_reg_write(0x21a8,(DAT_000b12a0 & 0xfff) << 0x10 | DAT_000b129c & 0xfff);
  system_reg_write(0x21ac,(DAT_000b12a8 & 0xfff) << 0x10 | DAT_000b12a4 & 0xfff);
  system_reg_write(0x21b0,(DAT_000b12b0 & 0xfff) << 0x10 | DAT_000b12ac & 0xfff);
  system_reg_write(0x21b4,(DAT_000b12b8 & 0xfff) << 0x10 | DAT_000b12b4 & 0xfff);
  system_reg_write(0x21b8,(DAT_000b12c0 & 0xfff) << 0x10 | DAT_000b12bc & 0xfff);
  system_reg_write(0x21bc,(DAT_000b12c8 & 0xfff) << 0x10 | DAT_000b12c4 & 0xfff);
  system_reg_write(0x21c0,(DAT_000b12d0 & 0xfff) << 0x10 | DAT_000b12cc & 0xfff);
  system_reg_write(0x21c4,(DAT_000b12d8 & 0xfff) << 0x10 | DAT_000b12d4 & 0xfff);
  system_reg_write(0x21c8,(DAT_000b12e0 & 0xfff) << 0x10 | DAT_000b12dc & 0xfff);
  system_reg_write(0x21cc,(DAT_000b12e8 & 0xfff) << 0x10 | DAT_000b12e4 & 0xfff);
  system_reg_write(0x21d0,(DAT_000b12f0 & 0xfff) << 0x10 | DAT_000b12ec & 0xfff);
  system_reg_write(0x21d4,(DAT_000b12f8 & 0xfff) << 0x10 | DAT_000b12f4 & 0xfff);
  system_reg_write(0x21d8,(DAT_000b1300 & 0xfff) << 0x10 | DAT_000b12fc & 0xfff);
  system_reg_write(0x21dc,(DAT_000b1308 & 0xfff) << 0x10 | DAT_000b1304 & 0xfff);
  system_reg_write(0x21e0,(DAT_000b1310 & 0xfff) << 0x10 | DAT_000b130c & 0xfff);
  system_reg_write(0x21e4,(DAT_000b1318 & 0xfff) << 0x10 | DAT_000b1314 & 0xfff);
  system_reg_write(0x21e8,(DAT_000b1320 & 0xfff) << 0x10 | DAT_000b131c & 0xfff);
  system_reg_write(0x21ec,(DAT_000b1328 & 0xfff) << 0x10 | DAT_000b1324 & 0xfff);
  system_reg_write(0x21f0,(DAT_000b1330 & 0xfff) << 0x10 | DAT_000b132c & 0xfff);
  system_reg_write(0x21f4,(DAT_000b1338 & 0xfff) << 0x10 | DAT_000b1334 & 0xfff);
  system_reg_write(0x21f8,(DAT_000b1340 & 0xfff) << 0x10 | DAT_000b133c & 0xfff);
  system_reg_write(0x21fc,(DAT_000b1348 & 0xfff) << 0x10 | DAT_000b1344 & 0xfff);
  system_reg_write(0x2200,(DAT_000b1350 & 0xfff) << 0x10 | DAT_000b134c & 0xfff);
  system_reg_write(0x2204,(DAT_000b1358 & 0xfff) << 0x10 | DAT_000b1354 & 0xfff);
  system_reg_write(0x2208,(DAT_000b1360 & 0xfff) << 0x10 | DAT_000b135c & 0xfff);
  system_reg_write(0x220c,(DAT_000b1368 & 0xfff) << 0x10 | DAT_000b1364 & 0xfff);
  system_reg_write(0x2210,(DAT_000b1370 & 0xfff) << 0x10 | DAT_000b136c & 0xfff);
  system_reg_write(0x2214,(DAT_000b1378 & 0xfff) << 0x10 | DAT_000b1374 & 0xfff);
  system_reg_write(0x2218,(DAT_000b1380 & 0xfff) << 0x10 | DAT_000b137c & 0xfff);
  system_reg_write(0x221c,(DAT_000b1388 & 0xfff) << 0x10 | DAT_000b1384 & 0xfff);
  system_reg_write(0x2220,(DAT_000b1390 & 0xfff) << 0x10 | DAT_000b138c & 0xfff);
  system_reg_write(0x2224,(DAT_000b1398 & 0xfff) << 0x10 | DAT_000b1394 & 0xfff);
  system_reg_write(0x2228,(DAT_000b13a0 & 0xfff) << 0x10 | DAT_000b139c & 0xfff);
  system_reg_write(0x222c,(DAT_000b13a8 & 0xfff) << 0x10 | DAT_000b13a4 & 0xfff);
  system_reg_write(0x2230,(DAT_000b13b0 & 0xfff) << 0x10 | DAT_000b13ac & 0xfff);
  system_reg_write(0x2234,(DAT_000b13b8 & 0xfff) << 0x10 | DAT_000b13b4 & 0xfff);
  system_reg_write(0x2238,DAT_000b13bc & 0xfff);
  system_reg_write(0x2274,(_DAT_000b0f90 & 0xf) << 0x10 | wdr_thrLableN_software_out & 0xf);
  system_reg_write(0x2278,(DAT_000b0f98 & 0xf) << 0x10 | DAT_000b0f94 & 0xf);
  system_reg_write(0x227c,(DAT_000b0fa0 & 0xf) << 0x10 | DAT_000b0f9c & 0xf);
  system_reg_write(0x2280,(DAT_000b0fa8 & 0xf) << 0x10 | DAT_000b0fa4 & 0xf);
  system_reg_write(0x2284,(DAT_000b0fb0 & 0xf) << 0x10 | DAT_000b0fac & 0xf);
  system_reg_write(0x2288,(DAT_000b0fb8 & 0xf) << 0x10 | DAT_000b0fb4 & 0xf);
  system_reg_write(0x228c,(DAT_000b0fc0 & 0xf) << 0x10 | DAT_000b0fbc & 0xf);
  system_reg_write(0x2290,(DAT_000b0fc8 & 0xf) << 0x10 | DAT_000b0fc4 & 0xf);
  system_reg_write(0x2294,(DAT_000b0fd0 & 0xf) << 0x10 | DAT_000b0fcc & 0xf);
  system_reg_write(0x2298,(DAT_000b0fd8 & 0xf) << 0x10 | DAT_000b0fd4 & 0xf);
  system_reg_write(0x229c,(DAT_000b0fe0 & 0xf) << 0x10 | DAT_000b0fdc & 0xf);
  system_reg_write(0x22a0,(DAT_000b0fe8 & 0xf) << 0x10 | DAT_000b0fe4 & 0xf);
  system_reg_write(0x22a4,(DAT_000b0ff0 & 0xf) << 0x10 | DAT_000b0fec & 0xf);
  system_reg_write(0x22a8,(_DAT_000b0f24 & 0x7ff) << 0x10 | wdr_thrAll_software_out & 0x7ff);
  system_reg_write(0x22ac,(DAT_000b0f2c & 0x7ff) << 0x10 | DAT_000b0f28 & 0x7ff);
  system_reg_write(0x22b0,(DAT_000b0f34 & 0x7ff) << 0x10 | DAT_000b0f30 & 0x7ff);
  system_reg_write(0x22b4,(DAT_000b0f3c & 0x7ff) << 0x10 | DAT_000b0f38 & 0x7ff);
  system_reg_write(0x22b8,(DAT_000b0f44 & 0x7ff) << 0x10 | DAT_000b0f40 & 0x7ff);
  system_reg_write(0x22bc,(DAT_000b0f4c & 0x7ff) << 0x10 | DAT_000b0f48 & 0x7ff);
  system_reg_write(0x22c0,(DAT_000b0f54 & 0x7ff) << 0x10 | DAT_000b0f50 & 0x7ff);
  system_reg_write(0x22c4,(DAT_000b0f5c & 0x7ff) << 0x10 | DAT_000b0f58 & 0x7ff);
  system_reg_write(0x22c8,(DAT_000b0f64 & 0x7ff) << 0x10 | DAT_000b0f60 & 0x7ff);
  system_reg_write(0x22cc,(DAT_000b0f6c & 0x7ff) << 0x10 | DAT_000b0f68 & 0x7ff);
  system_reg_write(0x22d0,(DAT_000b0f74 & 0x7ff) << 0x10 | DAT_000b0f70 & 0x7ff);
  system_reg_write(0x22d4,(DAT_000b0f7c & 0x7ff) << 0x10 | DAT_000b0f78 & 0x7ff);
  system_reg_write(0x22d8,(DAT_000b0f84 & 0x7ff) << 0x10 | DAT_000b0f80 & 0x7ff);
  system_reg_write(0x22dc,DAT_000b0f88 & 0x7ff);
  system_reg_write(0x22e0,wdr_thrRangeK_software_out & 0x1ffff);
  system_reg_write(0x22e4,DAT_000b0eb8 & 0x1ffff);
  system_reg_write(0x22e8,DAT_000b0ebc & 0x1ffff);
  system_reg_write(0x22ec,DAT_000b0ec0 & 0x1ffff);
  system_reg_write(0x22f0,DAT_000b0ec4 & 0x1ffff);
  system_reg_write(0x22f4,DAT_000b0ec8 & 0x1ffff);
  system_reg_write(0x22f8,DAT_000b0ecc & 0x1ffff);
  system_reg_write(0x22fc,DAT_000b0ed0 & 0x1ffff);
  system_reg_write(0x2300,DAT_000b0ed4 & 0x1ffff);
  system_reg_write(0x2304,DAT_000b0ed8 & 0x1ffff);
  system_reg_write(0x2308,DAT_000b0edc & 0x1ffff);
  system_reg_write(0x230c,DAT_000b0ee0 & 0x1ffff);
  system_reg_write(0x2310,DAT_000b0ee4 & 0x1ffff);
  system_reg_write(0x2314,DAT_000b0ee8 & 0x1ffff);
  system_reg_write(0x2318,DAT_000b0eec & 0x1ffff);
  system_reg_write(0x231c,DAT_000b0ef0 & 0x1ffff);
  system_reg_write(0x2320,DAT_000b0ef4 & 0x1ffff);
  system_reg_write(0x2324,DAT_000b0ef8 & 0x1ffff);
  system_reg_write(9000,DAT_000b0efc & 0x1ffff);
  system_reg_write(0x232c,DAT_000b0f00 & 0x1ffff);
  system_reg_write(0x2330,DAT_000b0f04 & 0x1ffff);
  system_reg_write(0x2334,DAT_000b0f08 & 0x1ffff);
  system_reg_write(0x2338,DAT_000b0f0c & 0x1ffff);
  system_reg_write(0x233c,DAT_000b0f10 & 0x1ffff);
  system_reg_write(0x2340,DAT_000b0f14 & 0x1ffff);
  system_reg_write(0x2344,DAT_000b0f18 & 0x1ffff);
  system_reg_write(0x2348,DAT_000b0f1c & 0x1ffff);
  system_reg_write(0x2614,(DAT_000b0e94 & 0xfff) << 0x10 | wdr_detial_para_software_out & 0xfff);
  system_reg_write(0x2618,(DAT_000b0ea0 & 0xfff) << 0x10 | DAT_000b0e9c & 0xfff);
  system_reg_write(0x261c,(DAT_000b0eac & 0xfff) << 0x10 | DAT_000b0ea8 & 0xfff);
  system_reg_write(0x2620,DAT_000b0e98 & 0x7ffff);
  system_reg_write(0x2624,DAT_000b0ea4 & 0x7ffff);
  system_reg_write(0x2628,DAT_000b0eb0 & 0x7ffff);
  return 0;
}



int tisp_wdr_process(void)

{
  tiziano_wdr_algorithm();
  tiziano_wdr_soft_para_out();
  wdr_count = wdr_count + 1;
  if (wdr_count == 0x1e) {
    wdr_count = 0;
  }
  return 0;
}



int tiziano_wdr_5x5_param_distance(int param_1,int param_2,int param_3,int param_4,int param_5)

{
  int iVar1;
  int *piVar2;
  
  if (param_3 < param_1) {
    param_3 = param_1 - param_3;
  }
  else {
    param_3 = param_3 - param_1;
  }
  if (param_4 < param_2) {
    param_2 = param_2 - param_4;
  }
  else {
    param_2 = param_4 - param_2;
  }
  piVar2 = (int *)(param_5 + 0x78);
  iVar1 = 0x1e;
  do {
    if ((param_2 / 4) * (param_2 / 4) + (param_3 / 4) * (param_3 / 4) <= *piVar2) {
      return iVar1 + 1;
    }
    iVar1 = iVar1 + -1;
    piVar2 = piVar2 + -1;
  } while (iVar1 != -1);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_wdr_5x5_param(void)

{
  longlong lVar1;
  int iVar2;
  int *piVar3;
  int iVar4;
  int *piVar5;
  int iVar6;
  int *piVar7;
  unsigned int uVar8;
  int iVar9;
  int *piVar10;
  unsigned int *puVar11;
  int iVar12;
  int *piVar13;
  int *puVar14;
  code *pcVar15;
  int iVar16;
  int iVar17;
  int iVar18;
  int iVar19;
  int iVar20;
  unsigned int uVar21;
  int local_c0 [32];
  char8 local_40;
  int *local_38;
  int local_34;
  int local_30;
  
  memcpy(local_c0,&DAT_0007d610,0x7c);
  iVar2 = 0;
  do {
    *(int *)((int)&wdr_lut7_counter + iVar2) = 0;
    *(int *)((int)&wdr_lut8_counter + iVar2) = 0;
    *(int *)((int)&wdr_lut12_counter + iVar2) = 0;
    *(int *)((int)&wdr_lut1_value_sum + iVar2) = 0;
    *(int *)((int)&wdr_lut2_value_sum + iVar2) = 0;
    *(int *)((int)&wdr_lut3_value_sum + iVar2) = 0;
    *(int *)((int)&wdr_lut6_value_sum + iVar2) = 0;
    puVar14 = (int *)((int)&wdr_lut11_value_sum + iVar2);
    iVar2 = iVar2 + 4;
    *puVar14 = 0;
    local_38 = &wdr_lut7_counter;
  } while (iVar2 != 0x80);
  uVar21 = (height_wdr_def + 5U) / 10;
  uVar8 = width_wdr_def + 8U >> 4;
  iVar19 = (int)(uVar8 + 1) >> 1;
  iVar18 = uVar8 + iVar19;
  iVar2 = 0;
  puVar14 = &param_centre5x5_w_distance_array_def;
  iVar6 = uVar21 * 2;
  local_34 = uVar21 * 3;
  local_30 = uVar8 * 3;
  local_40 = (ulonglong)_DAT_000b0e60 * (ulonglong)_DAT_000b0e60;
  iVar17 = (int)(uVar21 + 1) >> 1;
  iVar20 = uVar21 + iVar17;
  iVar4 = uVar21 + iVar20;
  iVar9 = uVar8 + iVar18;
  do {
    piVar3 = (int *)((int)local_c0 + iVar2);
    puVar11 = (unsigned int *)((int)&param_centre5x5_w_distance_array_def + iVar2);
    iVar2 = iVar2 + 4;
    lVar1 = local_40 * *piVar3 + 0x8000;
    *puVar11 = (int)((ulonglong)lVar1 >> 0x20) * 0x10000 | (uint)lVar1 >> 0x10;
  } while (iVar2 != 0x7c);
  iVar2 = 0x70000;
  for (; iVar12 = uVar8 * 2, iVar6 <= local_34; iVar6 = iVar6 + 1) {
    for (; pcVar15 = (code *)(iVar2 + -0xe98), iVar12 <= local_30; iVar12 = iVar12 + 1) {
      local_40 = CONCAT44(local_40._4_4_,iVar2);
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar20,iVar18,puVar14);
      iVar16 = iVar2 * 4;
      local_38[iVar2] = local_38[iVar2] + 1;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar17,iVar19,puVar14);
      *(int *)((int)&wdr_lut1_value_sum + iVar16) =
           *(int *)((int)&wdr_lut1_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar20,iVar19,puVar14);
      *(int *)((int)&wdr_lut2_value_sum + iVar16) =
           *(int *)((int)&wdr_lut2_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar17,iVar18,puVar14);
      *(int *)((int)&wdr_lut6_value_sum + iVar16) =
           *(int *)((int)&wdr_lut6_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar4,iVar18,puVar14);
      iVar16 = iVar2 * 4;
      (&wdr_lut8_counter)[iVar2] = (&wdr_lut8_counter)[iVar2] + 1;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar4,iVar19,puVar14);
      *(int *)((int)&wdr_lut3_value_sum + iVar16) =
           *(int *)((int)&wdr_lut3_value_sum + iVar16) + iVar2;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar20,iVar9,puVar14);
      iVar16 = iVar2 * 4;
      (&wdr_lut12_counter)[iVar2] = (&wdr_lut12_counter)[iVar2] + 1;
      iVar2 = (*pcVar15)(iVar6,iVar12,iVar17,iVar9,puVar14);
      *(int *)((int)&wdr_lut11_value_sum + iVar16) =
           *(int *)((int)&wdr_lut11_value_sum + iVar16) + iVar2;
      iVar2 = (int)local_40;
    }
  }
  piVar13 = &param_wdr_weightLUT20_array_def;
  piVar10 = &param_wdr_weightLUT02_array_def;
  piVar7 = &param_wdr_weightLUT22_array_def;
  piVar5 = &param_wdr_weightLUT12_array_def;
  piVar3 = &param_wdr_weightLUT21_array_def;
  iVar2 = 0;
  uVar8 = 0;
  do {
    uVar21 = *(unsigned int *)((int)local_38 + iVar2);
    if ((uVar21 | uVar8) == 0) {
      param_wdr_weightLUT22_array_def = 0;
      param_wdr_weightLUT12_array_def = 0;
      param_wdr_weightLUT21_array_def = 0;
    }
    else if (uVar21 == 0) {
      *piVar7 = piVar7[-1];
      *piVar5 = piVar5[-1];
      *piVar3 = piVar3[-1];
    }
    else {
      iVar4 = (int)uVar21 / 2;
      *piVar7 = (iVar4 + *(int *)((int)&wdr_lut1_value_sum + iVar2)) / (int)uVar21;
      *piVar5 = (iVar4 + *(int *)((int)&wdr_lut2_value_sum + iVar2)) / (int)uVar21;
      *piVar3 = (iVar4 + *(int *)((int)&wdr_lut6_value_sum + iVar2)) / (int)uVar21;
    }
    uVar21 = *(unsigned int *)((int)&wdr_lut8_counter + iVar2);
    if ((uVar21 | uVar8) == 0) {
      param_wdr_weightLUT02_array_def = 0;
    }
    else {
      if (uVar21 == 0) {
        iVar4 = piVar10[-1];
      }
      else {
        iVar4 = ((int)uVar21 / 2 + *(int *)((int)&wdr_lut3_value_sum + iVar2)) / (int)uVar21;
      }
      *piVar10 = iVar4;
    }
    uVar21 = *(unsigned int *)((int)&wdr_lut12_counter + iVar2);
    if ((uVar21 | uVar8) == 0) {
      param_wdr_weightLUT20_array_def = 0;
    }
    else {
      if (uVar21 == 0) {
        iVar4 = piVar13[-1];
      }
      else {
        iVar4 = ((int)uVar21 / 2 + *(int *)((int)&wdr_lut11_value_sum + iVar2)) / (int)uVar21;
      }
      *piVar13 = iVar4;
    }
    uVar8 = uVar8 + 1;
    iVar2 = iVar2 + 4;
    piVar13 = piVar13 + 1;
    piVar10 = piVar10 + 1;
    piVar7 = piVar7 + 1;
    piVar5 = piVar5 + 1;
    piVar3 = piVar3 + 1;
  } while (uVar8 != 0x20);
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_wdr_params_init(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int *puVar4;
  int *puVar5;
  int *piVar6;
  
  if (param_wdr_tool_control_array == 1) {
    param_wdr_gam_y_array = 0;
    DAT_000b1cec = 3;
    DAT_000b1c30 = 0;
    iVar1 = 0;
    do {
      puVar4 = (int *)((int)&param_fusion1_cure_y_array + iVar1);
      iVar1 = iVar1 + 4;
      *puVar4 = 0x100;
    } while (iVar1 != 0x84);
    DAT_000b18d8 = 0;
  }
  else {
    if (param_wdr_tool_control_array == 2) {
      param_wdr_gam_y_array = 0;
      DAT_000b1cec = param_wdr_tool_control_array;
      DAT_000b1c30 = 0;
      iVar1 = 0;
      do {
        puVar4 = (int *)((int)&param_fusion1_cure_y_array + iVar1);
        iVar1 = iVar1 + 4;
        *puVar4 = 0x100;
      } while (iVar1 != 0x84);
      goto LAB_0006f8f0;
    }
    if (param_wdr_tool_control_array == 3) {
      param_wdr_gam_y_array = 0;
      DAT_000b1cec = param_wdr_tool_control_array;
      DAT_000b1c30 = 0;
      iVar1 = 0;
      do {
        puVar4 = (int *)((int)&param_fusion1_cure_y_array + iVar1);
        iVar1 = iVar1 + 4;
        *puVar4 = 0x100;
      } while (iVar1 != 0x84);
      goto LAB_0006f8f0;
    }
    if (param_wdr_tool_control_array != 8) {
      if (param_wdr_tool_control_array == 9) {
        param_wdr_gam_y_array = 0;
        DAT_000b1cec = 0;
        DAT_000b1c30 = 0;
        iVar1 = 0;
        do {
          puVar5 = (int *)((int)&fusion1_cure_y_tmp + iVar1);
          puVar4 = (int *)((int)&param_fusion1_cure_y_array + iVar1);
          iVar1 = iVar1 + 4;
          *puVar4 = *puVar5;
        } while (iVar1 != 0x84);
      }
      goto LAB_0006f8f0;
    }
    param_wdr_gam_y_array = 0;
    DAT_000b1cec = 0;
    DAT_000b1c30 = 1;
    memcpy(&param_fusion1_cure_y_array,&fusion1_cure_y_tmp,0x84);
  }
  param_xy_pix_low_software_in_array._48_4_ = 0;
  param_xy_pix_low_software_in_array._52_4_ = 0;
  param_xy_pix_low_software_in_array._64_4_ = 0;
  param_xy_pix_low_software_in_array._68_4_ = 0;
LAB_0006f8f0:
  if (DAT_000b0e68 == 1) {
    iVar2 = DAT_000b0e70 - DAT_000b0e6c;
    iVar3 = 0;
    iVar1 = DAT_000b0e6c;
    do {
      piVar6 = (int *)((int)&param_fusion1_cure_y_array + iVar3);
      iVar3 = iVar3 + 4;
      *piVar6 = iVar1;
      iVar1 = iVar1 + iVar2 / 0x21;
    } while (iVar3 != 0x84);
  }
  else if (DAT_000b0e68 == 9) {
    iVar1 = 0;
    do {
      puVar5 = (int *)((int)&fusion1_cure_y_tmp + iVar1);
      puVar4 = (int *)((int)&param_fusion1_cure_y_array + iVar1);
      iVar1 = iVar1 + 4;
      *puVar4 = *puVar5;
    } while (iVar1 != 0x84);
  }
  piVar6 = (int *)&param_wdr_gam_y_array_def;
  if (DAT_000b0e74 == 0) {
    iVar1 = 0;
    do {
      puVar5 = (int *)((int)&wdr_gam_y33_array + iVar1);
      puVar4 = (int *)((int)&param_wdr_gam_y_array_def + iVar1);
      iVar1 = iVar1 + 4;
      *puVar4 = *puVar5;
    } while (iVar1 != 0x84);
  }
  else if (DAT_000b0e74 == 1) {
    iVar1 = 0;
    do {
      *piVar6 = iVar1;
      iVar1 = iVar1 + 0x80;
      piVar6 = piVar6 + 1;
    } while (iVar1 != 0x1000);
    DAT_000b1bd8 = 0xfff;
  }
  system_reg_write(0x2030,(DAT_000b18c0 & 0xfff) << 0x10 | DAT_000b18bc & 0xfff);
  system_reg_write(0x2034,(uint)DAT_000b18c8 << 0x10 | _DAT_000b18c4 & 0xfff);
  system_reg_write(0x2038,(_DAT_000b18d0 & 0x3ff) << 0x10 | _DAT_000b18cc & 0x1ff);
  system_reg_write(0x203c,(_DAT_000b18b8 & 0x3f) << 8 | param_wdr_degost_para_array & 0x3f);
  system_reg_write(0x236c,DAT_000b18d4);
  system_reg_write(0x223c,(_DAT_000b1808 & 0xfff) << 0x10 | param_wdr_thrLable_array & 0xfff);
  system_reg_write(0x2240,(DAT_000b1810 & 0xfff) << 0x10 | DAT_000b180c & 0xfff);
  system_reg_write(0x2244,(DAT_000b1818 & 0xfff) << 0x10 | DAT_000b1814 & 0xfff);
  system_reg_write(0x2248,(DAT_000b1820 & 0xfff) << 0x10 | DAT_000b181c & 0xfff);
  system_reg_write(0x224c,(DAT_000b1828 & 0xfff) << 0x10 | DAT_000b1824 & 0xfff);
  system_reg_write(0x2250,(DAT_000b1830 & 0xfff) << 0x10 | DAT_000b182c & 0xfff);
  system_reg_write(0x2254,(DAT_000b1838 & 0xfff) << 0x10 | DAT_000b1834 & 0xfff);
  system_reg_write(0x2258,(DAT_000b1840 & 0xfff) << 0x10 | DAT_000b183c & 0xfff);
  system_reg_write(0x225c,(DAT_000b1848 & 0xfff) << 0x10 | DAT_000b1844 & 0xfff);
  system_reg_write(0x2260,(DAT_000b1850 & 0xfff) << 0x10 | DAT_000b184c & 0xfff);
  system_reg_write(0x2264,(DAT_000b1858 & 0xfff) << 0x10 | DAT_000b1854 & 0xfff);
  system_reg_write(0x2268,(DAT_000b1860 & 0xfff) << 0x10 | DAT_000b185c & 0xfff);
  system_reg_write(0x226c,(DAT_000b1868 & 0xfff) << 0x10 | DAT_000b1864 & 0xfff);
  system_reg_write(0x2270,DAT_000b186c & 0xfff);
  system_reg_write(0x234c,(uint)DAT_000b1898 << 0x10 | (uint)param_wdr_darkLable_array);
  system_reg_write(0x2350,(uint)DAT_000b18a0 << 0x10 | (uint)DAT_000b189c);
  system_reg_write(0x2354,DAT_000b18a4);
  system_reg_write(0x2358,(_DAT_000b1888 & 7) << 0x10 | param_wdr_darkLableN_array & 7);
  system_reg_write(0x235c,(DAT_000b1890 & 7) << 0x10 | DAT_000b188c & 7);
  system_reg_write(0x2360,(_DAT_000b1874 & 0x1f) << 0x10 | param_wdr_darkWeight_array & 0x1f);
  system_reg_write(0x2364,(DAT_000b187c & 0x1f) << 0x10 | DAT_000b1878 & 0x1f);
  system_reg_write(0x2368,DAT_000b1880 & 0x1f);
  system_reg_write(0x244c,(DAT_000b1b5c & 0xfff) << 0x10 | param_wdr_gam_y_array_def & 0xfff);
  system_reg_write(0x2450,(DAT_000b1b64 & 0xfff) << 0x10 | DAT_000b1b60 & 0xfff);
  system_reg_write(0x2454,(DAT_000b1b6c & 0xfff) << 0x10 | DAT_000b1b68 & 0xfff);
  system_reg_write(0x2458,(DAT_000b1b74 & 0xfff) << 0x10 | DAT_000b1b70 & 0xfff);
  system_reg_write(0x245c,(DAT_000b1b7c & 0xfff) << 0x10 | DAT_000b1b78 & 0xfff);
  system_reg_write(0x2460,(DAT_000b1b84 & 0xfff) << 0x10 | DAT_000b1b80 & 0xfff);
  system_reg_write(0x2464,(DAT_000b1b8c & 0xfff) << 0x10 | DAT_000b1b88 & 0xfff);
  system_reg_write(0x2468,(DAT_000b1b94 & 0xfff) << 0x10 | DAT_000b1b90 & 0xfff);
  system_reg_write(0x246c,(DAT_000b1b9c & 0xfff) << 0x10 | DAT_000b1b98 & 0xfff);
  system_reg_write(0x2470,(DAT_000b1ba4 & 0xfff) << 0x10 | DAT_000b1ba0 & 0xfff);
  system_reg_write(0x2474,(DAT_000b1bac & 0xfff) << 0x10 | DAT_000b1ba8 & 0xfff);
  system_reg_write(0x2478,(DAT_000b1bb4 & 0xfff) << 0x10 | DAT_000b1bb0 & 0xfff);
  system_reg_write(0x247c,(DAT_000b1bbc & 0xfff) << 0x10 | DAT_000b1bb8 & 0xfff);
  system_reg_write(0x2480,(DAT_000b1bc4 & 0xfff) << 0x10 | DAT_000b1bc0 & 0xfff);
  system_reg_write(0x2484,(DAT_000b1bcc & 0xfff) << 0x10 | DAT_000b1bc8 & 0xfff);
  system_reg_write(0x2488,(DAT_000b1bd4 & 0xfff) << 0x10 | DAT_000b1bd0 & 0xfff);
  system_reg_write(0x248c,DAT_000b1bd8 & 0xfff);
  system_reg_write(0x2490,(DAT_000b1cdc & 0x1fff) << 0x10 |
                          param_wdr_w_point_weight_x_array & 0x1fff);
  system_reg_write(0x2494,(DAT_000b1ce4 & 0x1fff) << 0x10 | DAT_000b1ce0 & 0x1fff);
  system_reg_write(0x2498,(_DAT_000b1ccc & 0x7fff) << 0x10 |
                          param_wdr_w_point_weight_y_array & 0x7fff);
  system_reg_write(0x249c,(DAT_000b1cd4 & 0x7fff) << 0x10 | DAT_000b1cd0 & 0x7fff);
  system_reg_write(0x24a0,(_DAT_000b1cc0 & 0xf) << 8 | (_DAT_000b1cc4 & 0xf) << 0x10 |
                          param_wdr_w_point_weight_pow_array & 0xf);
  system_reg_write(0x24f4,(uint)param_wdr_contrast_t_y_mux_array | DAT_000b1c0c << 0x10);
  system_reg_write(0x24f8,(uint)DAT_000b1c10 | DAT_000b1c14 << 0x10);
  system_reg_write(0x24fc,DAT_000b1c18);
  system_reg_write(0x2630,(_DAT_000b1bfc & 0xfff) << 0x10 | param_wdr_ct_cl_para_array & 0xfff);
  system_reg_write(0x2634,(DAT_000b1c04 & 0xfff) << 0x10 | DAT_000b1c00 & 0xfff);
  system_reg_write(0x2600,(DAT_000b1cec & 3) << 4 | (_DAT_000b1cf4 & 1) << 8 |
                          param_wdr_para_array & 1 | (DAT_000b1d08 & 1) << 0xc |
                          (DAT_000b1cf0 & 0xfff) << 0x10);
  system_reg_write(0x260c,DAT_000b1d0c & 0xfff);
  system_reg_write(0x2610,DAT_000b1c30 & 1 | DAT_000b1c34 << 0x10);
  system_reg_write(0x2650,(param_wdr_stat_para_array._8_4_ & 0xfff) << 0x10 |
                          param_wdr_stat_para_array._4_4_ & 0xfff);
  system_reg_write(0x2654,param_wdr_stat_para_array._12_4_ & 0xfff);
  system_reg_write(0x2658,(param_wdr_stat_para_array._20_4_ & 0xfff) << 0x10 |
                          param_wdr_stat_para_array._16_4_ & 0xfff);
  system_reg_write(0x265c,param_wdr_stat_para_array._24_4_ & 0xfff);
  system_reg_write(0x2684,(_DAT_000d6e58 & 0x1fff) << 4 | param_wdr_dbg_out_array & 0x1fff);
  return 0;
}



int tiziano_wdr_gamma_refresh(void)

{
  int uVar1;
  ushort *puVar2;
  int *piVar3;
  int iVar4;
  int *puVar5;
  unsigned int *puVar6;
  int *puVar7;
  int local_10 [2];
  
  local_10[0] = 0;
  tisp_gamma_param_array_get(0x3d,&wdr_gam_y129_array,local_10);
  if (local_10[0] == 0x102) {
    puVar2 = &wdr_gam_y129_array;
    iVar4 = 0;
    do {
      puVar6 = (unsigned int *)((int)&wdr_gam_y33_array + iVar4);
      iVar4 = iVar4 + 4;
      *puVar6 = (uint)*puVar2;
      puVar2 = puVar2 + 4;
    } while (iVar4 != 0x84);
    if (DAT_000b0e74 == 0) {
      iVar4 = 0;
      do {
        puVar7 = (int *)((int)&wdr_gam_y33_array + iVar4);
        puVar5 = (int *)((int)&param_wdr_gam_y_array_def + iVar4);
        iVar4 = iVar4 + 4;
        *puVar5 = *puVar7;
      } while (iVar4 != 0x84);
      uVar1 = 0;
    }
    else if (DAT_000b0e74 == 1) {
      piVar3 = &param_wdr_gam_y_array_def;
      iVar4 = 0;
      do {
        *piVar3 = iVar4;
        iVar4 = iVar4 + 0x80;
        piVar3 = piVar3 + 1;
      } while (iVar4 != 0x1000);
      DAT_000b1bd8 = 0xfff;
      uVar1 = 0;
    }
    else {
      uVar1 = 0;
    }
  }
  else {
    isp_printf(2,"get gamma error!!!");
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tiziano_wdr_params_refresh(void)

{
  bool bVar1;
  int *puVar2;
  int *puVar3;
  int iVar4;
  int local_40 [14];
  
  memcpy(&param_wdr_para_array,&DAT_000a6d04,0x28);
  memcpy(&param_wdr_gam_y_array,&DAT_000a6fac,0x84);
  memcpy(&param_wdr_w_point_weight_x_array,&DAT_000a7030,0x10);
  memcpy(&param_wdr_w_point_weight_y_array,&DAT_000a7040,0x10);
  memcpy(&param_wdr_w_point_weight_pow_array,&DAT_000a7050,0xc);
  memcpy(&param_fusion1_cure_y_array,&DAT_000a705c,0x84);
  memcpy(&param_wdr_detail_th_w_array,&DAT_000a70e0,0x1c);
  memcpy(&param_wdr_contrast_t_y_mux_array,&DAT_000a70fc,0x14);
  memcpy(&param_wdr_ct_cl_para_array,&DAT_000a7110,0x10);
  memcpy(param_wdr_stat_para_array,&DAT_000a719c,0x1c);
  memcpy(&param_wdr_degost_para_array,&DAT_000a71b8,0x34);
  memcpy(&param_wdr_darkLable_array,&DAT_000a71ec,0x14);
  memcpy(&param_wdr_darkLableN_array,&DAT_000a7200,0x10);
  memcpy(&param_wdr_darkWeight_array,&DAT_000a7210,0x14);
  memcpy(&param_wdr_thrLable_array,&DAT_000a7224,0x6c);
  memcpy(param_computerModle_software_in_array,&DAT_000a7290,0x10);
  memcpy(param_deviationPara_software_in_array,&DAT_000a72a0,0x14);
  memcpy(&param_ratioPara_software_in_array,&DAT_000a72b4,0x1c);
  memcpy(param_x_thr_software_in_array,&DAT_000a72d0,0x10);
  memcpy(param_y_thr_software_in_array,&DAT_000a72e0,0x10);
  memcpy(param_thrPara_software_in_array,&DAT_000a72f0,0x50);
  memcpy(param_xy_pix_low_software_in_array,&DAT_000a7340,0x58);
  memcpy(param_motionThrPara_software_in_array,&DAT_000a7398,0x44);
  memcpy(param_d_thr_normal_software_in_array,&DAT_000a73dc,0x68);
  memcpy(param_d_thr_normal1_software_in_array,&DAT_000a7444,0x68);
  memcpy(param_d_thr_normal2_software_in_array,&DAT_000a74ac,0x68);
  memcpy(param_d_thr_normal_min_software_in_array,&DAT_000a7514,0x68);
  memcpy(&param_multiValueLow_software_in_array,&DAT_000a757c,0x68);
  memcpy(&param_multiValueHigh_software_in_array,&DAT_000a75e4,0x68);
  memcpy(param_d_thr_2_software_in_array,&DAT_000a764c,0x68);
  memcpy(param_wdr_detial_para_software_in_array,&DAT_000a76b4,0x20);
  memcpy(&wdr_thrAll_software_out,&DAT_000a76d4,0x6c);
  memcpy(&param_wdr_dbg_out_array,&DAT_000a7740,8);
  memcpy(&wdr_ev_list,&DAT_000a7748,0x24);
  memcpy(&wdr_weight_b_in_list,&DAT_000a776c,0x24);
  memcpy(&wdr_weight_p_in_list,&DAT_000a7790,0x24);
  memcpy(&wdr_ev_list_deghost,&DAT_000a77b4,0x24);
  memcpy(&wdr_weight_in_list_deghost,&DAT_000a77d8,0x24);
  memcpy(&wdr_detail_w_in0_list,&DAT_000a77fc,0x24);
  memcpy(&wdr_detail_w_in1_list,&DAT_000a7820,0x24);
  memcpy(&wdr_detail_w_in2_list,&DAT_000a7844,0x24);
  memcpy(&wdr_detail_w_in3_list,&DAT_000a7868,0x24);
  memcpy(&wdr_detail_w_in4_list,&DAT_000a788c,0x24);
  memcpy(param_wdr_priv_array,&DAT_000a78b0,0x40);
  memcpy(local_40,&DAT_000a78f0,0x38);
  puVar2 = local_40;
  puVar3 = &param_wdr_tool_control_array;
  iVar4 = 0;
  do {
    bVar1 = iVar4 != 2;
    iVar4 = iVar4 + 1;
    if (bVar1) {
      *puVar3 = *puVar2;
    }
    puVar2 = puVar2 + 1;
    puVar3 = puVar3 + 1;
  } while (iVar4 != 0xe);
  memcpy(param_wdr_weightLUT20_array,&DAT_000a6d2c,0x80);
  memcpy(param_wdr_weightLUT02_array,&DAT_000a6dac,0x80);
  memcpy(param_wdr_weightLUT12_array,&DAT_000a6e2c,0x80);
  memcpy(param_wdr_weightLUT22_array,&DAT_000a6eac,0x80);
  memcpy(param_wdr_weightLUT21_array,&DAT_000a6f2c,0x80);
  memcpy(&param_centre5x5_w_distance_array,&DAT_000a7120,0x7c);
  tiziano_wdr_gamma_refresh();
  return 0;
}



int tiziano_wdr_dn_params_refresh(void)

{
  tiziano_wdr_params_refresh();
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tiziano_wdr_init(unsigned int param_1,unsigned int param_2)

{
  int iVar1;
  int iVar2;
  int iVar3;
  unsigned int uVar4;
  int *piVar5;
  unsigned int uVar6;
  int iVar7;
  unsigned int uVar8;
  unsigned int uVar9;
  int local_b0 [10];
  unsigned int local_88;
  unsigned int local_84;
  unsigned int local_80;
  unsigned int local_7c;
  unsigned int local_78;
  unsigned int local_74;
  unsigned int local_70;
  unsigned int local_6c;
  unsigned int local_68;
  unsigned int local_64;
  unsigned int local_60;
  unsigned int local_5c;
  unsigned int local_58;
  unsigned int local_54;
  unsigned int local_50;
  unsigned int local_4c;
  unsigned int local_48;
  unsigned int local_44;
  unsigned int local_40;
  unsigned int local_3c;
  unsigned int local_38;
  unsigned int local_34;
  unsigned int local_30;
  unsigned int local_2c;
  
  memcpy(local_b0,&DAT_0007d68c,0x28);
  uVar9 = (param_2 + 5) / 10;
  uVar8 = param_1 + 8 >> 4;
  iVar7 = 0;
  uVar9 = uVar9 - (uVar9 & 1);
  local_40 = uVar9 * 4;
  local_88 = uVar9 * 5;
  local_84 = uVar9 * 6;
  local_80 = uVar9 * 7;
  local_7c = uVar9 * 8;
  local_78 = uVar9 * 9;
  uVar8 = uVar8 - (uVar8 & 1);
  local_3c = uVar8 * 2;
  local_74 = uVar8 * 3;
  local_70 = uVar8 * 4;
  local_6c = uVar8 * 5;
  local_68 = uVar8 * 6;
  local_64 = uVar8 * 7;
  local_60 = uVar8 * 8;
  local_5c = uVar8 * 9;
  local_58 = uVar8 * 10;
  local_54 = uVar8 * 0xb;
  local_50 = uVar8 * 0xc;
  local_4c = uVar8 * 0xd;
  local_48 = uVar8 * 0xe;
  local_44 = uVar8 * 0xf;
  iVar2 = param_2 + uVar9 * -9;
  iVar1 = param_1 + uVar8 * -0xf;
  piVar5 = local_b0;
  do {
    if ((uVar8 * uVar9 >> 2) + 1 < (uint)(*piVar5 << 8)) {
      iVar7 = iVar7 + 0x12;
      iVar3 = *piVar5 << 0x12;
      goto LAB_000709b4;
    }
    iVar7 = iVar7 + 1;
    piVar5 = piVar5 + 1;
  } while (iVar7 != 10);
  iVar3 = 0;
  iVar7 = 0;
LAB_000709b4:
  uVar6 = uVar8 * uVar9 + 2;
  local_38 = ((uVar6 >> 3) + iVar3) / (uVar6 >> 2);
  uVar6 = uVar8 * iVar2 + 2;
  local_34 = ((uVar6 >> 3) + iVar3) / (uVar6 >> 2);
  uVar6 = uVar9 * iVar1 + 2;
  local_30 = ((uVar6 >> 3) + iVar3) / (uVar6 >> 2);
  uVar6 = iVar2 * iVar1 + 2;
  local_2c = ((uVar6 >> 3) + iVar3) / (uVar6 >> 2);
  height_wdr_def = param_2;
  width_wdr_def = param_1;
  tiziano_wdr_params_refresh();
  uVar4 = uVar8 + 1 >> 1;
  uVar6 = uVar9 + 1 >> 1;
  if (uVar4 < uVar6) {
    iVar1 = (uVar8 + 1 & 0xfffffffe) + uVar4;
  }
  else {
    iVar1 = (uVar9 + 1 & 0xfffffffe) + uVar6;
  }
  _DAT_000b0e60 = iVar1 + 1U >> 1;
  tiziano_wdr_5x5_param();
  system_reg_write(0x23ac,(_DAT_000b1adc & 0x1f) << 8 | (_DAT_000b1ae0 & 0x1f) << 0x10 |
                          param_wdr_weightLUT20_array_def & 0x1f | (DAT_000b1ae4 & 0x1f) << 0x18);
  system_reg_write(0x23b0,(DAT_000b1aec & 0x1f) << 8 | (DAT_000b1af0 & 0x1f) << 0x10 |
                          DAT_000b1ae8 & 0x1f | (DAT_000b1af4 & 0x1f) << 0x18);
  system_reg_write(0x23b4,(DAT_000b1afc & 0x1f) << 8 | (DAT_000b1b00 & 0x1f) << 0x10 |
                          DAT_000b1af8 & 0x1f | (DAT_000b1b04 & 0x1f) << 0x18);
  system_reg_write(0x23b8,(DAT_000b1b0c & 0x1f) << 8 | (DAT_000b1b10 & 0x1f) << 0x10 |
                          DAT_000b1b08 & 0x1f | (DAT_000b1b14 & 0x1f) << 0x18);
  system_reg_write(0x23bc,(DAT_000b1b1c & 0x1f) << 8 | (DAT_000b1b20 & 0x1f) << 0x10 |
                          DAT_000b1b18 & 0x1f | (DAT_000b1b24 & 0x1f) << 0x18);
  system_reg_write(0x23c0,(DAT_000b1b2c & 0x1f) << 8 | (DAT_000b1b30 & 0x1f) << 0x10 |
                          DAT_000b1b28 & 0x1f | (DAT_000b1b34 & 0x1f) << 0x18);
  system_reg_write(0x23c4,(DAT_000b1b3c & 0x1f) << 8 | (DAT_000b1b40 & 0x1f) << 0x10 |
                          DAT_000b1b38 & 0x1f | (DAT_000b1b44 & 0x1f) << 0x18);
  system_reg_write(0x23c8,(DAT_000b1b4c & 0x1f) << 8 | (DAT_000b1b50 & 0x1f) << 0x10 |
                          DAT_000b1b48 & 0x1f | (DAT_000b1b54 & 0x1f) << 0x18);
  system_reg_write(0x23cc,(_DAT_000b1a5c & 0x1f) << 8 | (_DAT_000b1a60 & 0x1f) << 0x10 |
                          param_wdr_weightLUT02_array_def & 0x1f | (DAT_000b1a64 & 0x1f) << 0x18);
  system_reg_write(0x23d0,(DAT_000b1a6c & 0x1f) << 8 | (DAT_000b1a70 & 0x1f) << 0x10 |
                          DAT_000b1a68 & 0x1f | (DAT_000b1a74 & 0x1f) << 0x18);
  system_reg_write(0x23d4,(DAT_000b1a7c & 0x1f) << 8 | (DAT_000b1a80 & 0x1f) << 0x10 |
                          DAT_000b1a78 & 0x1f | (DAT_000b1a84 & 0x1f) << 0x18);
  system_reg_write(0x23d8,(DAT_000b1a8c & 0x1f) << 8 | (DAT_000b1a90 & 0x1f) << 0x10 |
                          DAT_000b1a88 & 0x1f | (DAT_000b1a94 & 0x1f) << 0x18);
  system_reg_write(0x23dc,(DAT_000b1a9c & 0x1f) << 8 | (DAT_000b1aa0 & 0x1f) << 0x10 |
                          DAT_000b1a98 & 0x1f | (DAT_000b1aa4 & 0x1f) << 0x18);
  system_reg_write(0x23e0,(DAT_000b1aac & 0x1f) << 8 | (DAT_000b1ab0 & 0x1f) << 0x10 |
                          DAT_000b1aa8 & 0x1f | (DAT_000b1ab4 & 0x1f) << 0x18);
  system_reg_write(0x23e4,(DAT_000b1abc & 0x1f) << 8 | (DAT_000b1ac0 & 0x1f) << 0x10 |
                          DAT_000b1ab8 & 0x1f | (DAT_000b1ac4 & 0x1f) << 0x18);
  system_reg_write(0x23e8,(DAT_000b1acc & 0x1f) << 8 | (DAT_000b1ad0 & 0x1f) << 0x10 |
                          DAT_000b1ac8 & 0x1f | (DAT_000b1ad4 & 0x1f) << 0x18);
  system_reg_write(0x23ec,(_DAT_000b19dc & 0x1f) << 8 | (_DAT_000b19e0 & 0x1f) << 0x10 |
                          param_wdr_weightLUT12_array_def & 0x1f | (DAT_000b19e4 & 0x1f) << 0x18);
  system_reg_write(0x23f0,(DAT_000b19ec & 0x1f) << 8 | (DAT_000b19f0 & 0x1f) << 0x10 |
                          DAT_000b19e8 & 0x1f | (DAT_000b19f4 & 0x1f) << 0x18);
  system_reg_write(0x23f4,(DAT_000b19fc & 0x1f) << 8 | (DAT_000b1a00 & 0x1f) << 0x10 |
                          DAT_000b19f8 & 0x1f | (DAT_000b1a04 & 0x1f) << 0x18);
  system_reg_write(0x23f8,(DAT_000b1a0c & 0x1f) << 8 | (DAT_000b1a10 & 0x1f) << 0x10 |
                          DAT_000b1a08 & 0x1f | (DAT_000b1a14 & 0x1f) << 0x18);
  system_reg_write(0x23fc,(DAT_000b1a1c & 0x1f) << 8 | (DAT_000b1a20 & 0x1f) << 0x10 |
                          DAT_000b1a18 & 0x1f | (DAT_000b1a24 & 0x1f) << 0x18);
  system_reg_write(0x2400,(DAT_000b1a2c & 0x1f) << 8 | (DAT_000b1a30 & 0x1f) << 0x10 |
                          DAT_000b1a28 & 0x1f | (DAT_000b1a34 & 0x1f) << 0x18);
  system_reg_write(0x2404,(DAT_000b1a3c & 0x1f) << 8 | (DAT_000b1a40 & 0x1f) << 0x10 |
                          DAT_000b1a38 & 0x1f | (DAT_000b1a44 & 0x1f) << 0x18);
  system_reg_write(0x2408,(DAT_000b1a4c & 0x1f) << 8 | (DAT_000b1a50 & 0x1f) << 0x10 |
                          DAT_000b1a48 & 0x1f | (DAT_000b1a54 & 0x1f) << 0x18);
  system_reg_write(0x240c,(_DAT_000d86cc & 0x1f) << 8 | (_DAT_000d86d0 & 0x1f) << 0x10 |
                          param_wdr_weightLUT22_array_def & 0x1f | (DAT_000d86d4 & 0x1f) << 0x18);
  system_reg_write(0x2410,(DAT_000d86dc & 0x1f) << 8 | (DAT_000d86e0 & 0x1f) << 0x10 |
                          DAT_000d86d8 & 0x1f | (DAT_000d86e4 & 0x1f) << 0x18);
  system_reg_write(0x2414,(DAT_000d86ec & 0x1f) << 8 | (DAT_000d86f0 & 0x1f) << 0x10 |
                          DAT_000d86e8 & 0x1f | (DAT_000d86f4 & 0x1f) << 0x18);
  system_reg_write(0x2418,(DAT_000d86fc & 0x1f) << 8 | (DAT_000d8700 & 0x1f) << 0x10 |
                          DAT_000d86f8 & 0x1f | (DAT_000d8704 & 0x1f) << 0x18);
  system_reg_write(0x241c,(DAT_000d870c & 0x1f) << 8 | (DAT_000d8710 & 0x1f) << 0x10 |
                          DAT_000d8708 & 0x1f | (DAT_000d8714 & 0x1f) << 0x18);
  system_reg_write(0x2420,(DAT_000d871c & 0x1f) << 8 | (DAT_000d8720 & 0x1f) << 0x10 |
                          DAT_000d8718 & 0x1f | (DAT_000d8724 & 0x1f) << 0x18);
  system_reg_write(0x2424,(DAT_000d872c & 0x1f) << 8 | (DAT_000d8730 & 0x1f) << 0x10 |
                          DAT_000d8728 & 0x1f | (DAT_000d8734 & 0x1f) << 0x18);
  system_reg_write(0x2428,(DAT_000d873c & 0x1f) << 8 | (DAT_000d8740 & 0x1f) << 0x10 |
                          DAT_000d8738 & 0x1f | (DAT_000d8744 & 0x1f) << 0x18);
  system_reg_write(0x242c,(_DAT_000b195c & 0x1f) << 8 | (_DAT_000b1960 & 0x1f) << 0x10 |
                          param_wdr_weightLUT21_array_def & 0x1f | (DAT_000b1964 & 0x1f) << 0x18);
  system_reg_write(0x2430,(DAT_000b196c & 0x1f) << 8 | (DAT_000b1970 & 0x1f) << 0x10 |
                          DAT_000b1968 & 0x1f | (DAT_000b1974 & 0x1f) << 0x18);
  system_reg_write(0x2434,(DAT_000b197c & 0x1f) << 8 | (DAT_000b1980 & 0x1f) << 0x10 |
                          DAT_000b1978 & 0x1f | (DAT_000b1984 & 0x1f) << 0x18);
  system_reg_write(0x2438,(DAT_000b198c & 0x1f) << 8 | (DAT_000b1990 & 0x1f) << 0x10 |
                          DAT_000b1988 & 0x1f | (DAT_000b1994 & 0x1f) << 0x18);
  system_reg_write(0x243c,(DAT_000b199c & 0x1f) << 8 | (DAT_000b19a0 & 0x1f) << 0x10 |
                          DAT_000b1998 & 0x1f | (DAT_000b19a4 & 0x1f) << 0x18);
  system_reg_write(0x2440,(DAT_000b19ac & 0x1f) << 8 | (DAT_000b19b0 & 0x1f) << 0x10 |
                          DAT_000b19a8 & 0x1f | (DAT_000b19b4 & 0x1f) << 0x18);
  system_reg_write(0x2444,(DAT_000b19bc & 0x1f) << 8 | (DAT_000b19c0 & 0x1f) << 0x10 |
                          DAT_000b19b8 & 0x1f | (DAT_000b19c4 & 0x1f) << 0x18);
  system_reg_write(0x2448,(DAT_000b19cc & 0x1f) << 8 | (DAT_000b19d0 & 0x1f) << 0x10 |
                          DAT_000b19c8 & 0x1f | (DAT_000b19d4 & 0x1f) << 0x18);
  system_reg_write(0x2500,(uint)(ushort)param_centre5x5_w_distance_array_def | DAT_000b18e0 << 0x10)
  ;
  system_reg_write(0x2504,(uint)DAT_000b18e4 | DAT_000b18e8 << 0x10);
  system_reg_write(0x2508,(uint)DAT_000b18ec | DAT_000b18f0 << 0x10);
  system_reg_write(0x250c,(uint)DAT_000b18f4 | DAT_000b18f8 << 0x10);
  system_reg_write(0x2510,(uint)DAT_000b18fc | DAT_000b1900 << 0x10);
  system_reg_write(0x2514,(uint)DAT_000b1904 | DAT_000b1908 << 0x10);
  system_reg_write(0x2518,(uint)DAT_000b190c | DAT_000b1910 << 0x10);
  system_reg_write(0x251c,(uint)DAT_000b1914 | DAT_000b1918 << 0x10);
  system_reg_write(0x2520,(uint)DAT_000b191c | DAT_000b1920 << 0x10);
  system_reg_write(0x2524,(uint)DAT_000b1924 | DAT_000b1928 << 0x10);
  system_reg_write(0x2528,(uint)DAT_000b192c | DAT_000b1930 << 0x10);
  system_reg_write(0x252c,(uint)DAT_000b1934 | DAT_000b1938 << 0x10);
  system_reg_write(0x2530,(uint)DAT_000b193c | DAT_000b1940 << 0x10);
  system_reg_write(0x2534,(uint)DAT_000b1944 | DAT_000b1948 << 0x10);
  system_reg_write(0x2538,(uint)DAT_000b194c | DAT_000b1950 << 0x10);
  system_reg_write(0x253c,(short)DAT_000b1954);
  tiziano_wdr_params_init();
  tiziano_wdr_soft_para_out();
  system_reg_write(0x2370,(uVar9 & 0xfff) << 0x10);
  system_reg_write(0x2374,(uVar9 * 3 & 0xfff) << 0x10 | uVar9 * 2 & 0xfff);
  system_reg_write(0x2378,(local_88 & 0xfff) << 0x10 | local_40 & 0xfff);
  system_reg_write(0x237c,(local_80 & 0xfff) << 0x10 | local_84 & 0xfff);
  system_reg_write(0x2380,(local_78 & 0xfff) << 0x10 | local_7c & 0xfff);
  system_reg_write(0x2384,param_2 & 0xfff);
  system_reg_write(0x2388,(uVar8 & 0xfff) << 0x10);
  system_reg_write(0x238c,(local_74 & 0xfff) << 0x10 | local_3c & 0xfff);
  system_reg_write(0x2390,(local_6c & 0xfff) << 0x10 | local_70 & 0xfff);
  system_reg_write(0x2394,(local_64 & 0xfff) << 0x10 | local_68 & 0xfff);
  system_reg_write(0x2398,(local_5c & 0xfff) << 0x10 | local_60 & 0xfff);
  system_reg_write(0x239c,(local_54 & 0xfff) << 0x10 | local_58 & 0xfff);
  system_reg_write(0x23a0,(local_4c & 0xfff) << 0x10 | local_50 & 0xfff);
  system_reg_write(0x23a4,(local_44 & 0xfff) << 0x10 | local_48 & 0xfff);
  system_reg_write(0x23a8,param_1 & 0xfff);
  system_reg_write(0x2640,(local_34 & 0xfff) << 0x10 | local_38 & 0xfff);
  system_reg_write(0x2644,(local_2c & 0xfff) << 0x10 | local_30 & 0xfff);
  system_reg_write(0x2648,iVar7);
  system_irq_func_set(0xb,tiziano_wdr_interrupt_static);
  tisp_event_set_cb(0xb,tisp_wdr_process);
  return 0;
}



int tisp_wdr_param_array_get(int param_1,void *param_2,size_t *param_3)

{
  char *__src;
  size_t __n;
  
  switch(param_1) {
  case 0x3ff:
    __src = (char *)&param_wdr_para_array;
    __n = 0x28;
    break;
  case 0x400:
    __src = param_wdr_weightLUT20_array;
    goto LAB_00071ba4;
  case 0x401:
    __src = param_wdr_weightLUT02_array;
    goto LAB_00071ba4;
  case 0x402:
    __src = param_wdr_weightLUT12_array;
    goto LAB_00071ba4;
  case 0x403:
    __src = param_wdr_weightLUT22_array;
    goto LAB_00071ba4;
  case 0x404:
    __src = param_wdr_weightLUT21_array;
LAB_00071ba4:
    __n = 0x80;
    break;
  case 0x405:
    __src = (char *)&param_wdr_gam_y_array;
    goto LAB_0007193c;
  case 0x406:
    __src = (char *)&param_wdr_w_point_weight_x_array;
    goto LAB_0007191c;
  case 0x407:
    __src = (char *)&param_wdr_w_point_weight_y_array;
    goto LAB_0007191c;
  case 0x408:
    __src = (char *)&param_wdr_w_point_weight_pow_array;
    __n = 0xc;
    break;
  case 0x409:
    __src = (char *)&param_fusion1_cure_y_array;
LAB_0007193c:
    __n = 0x84;
    break;
  case 0x40a:
    __src = (char *)&param_wdr_detail_th_w_array;
    goto LAB_00071980;
  case 0x40b:
    __src = (char *)&param_wdr_contrast_t_y_mux_array;
    goto LAB_000719a0;
  case 0x40c:
    __src = (char *)&param_wdr_ct_cl_para_array;
    goto LAB_0007191c;
  case 0x40d:
    __src = (char *)&param_centre5x5_w_distance_array;
    __n = 0x7c;
    break;
  case 0x40e:
    __src = param_wdr_stat_para_array;
    goto LAB_00071980;
  case 0x40f:
    __src = (char *)&param_wdr_degost_para_array;
    __n = 0x34;
    break;
  case 0x410:
    __src = &param_wdr_darkLable_array;
    goto LAB_000719a0;
  case 0x411:
    __src = (char *)&param_wdr_darkLableN_array;
    goto LAB_0007191c;
  case 0x412:
    __src = (char *)&param_wdr_darkWeight_array;
    goto LAB_000719a0;
  case 0x413:
    __src = (char *)&param_wdr_thrLable_array;
    goto LAB_00071aa8;
  case 0x414:
    __src = param_computerModle_software_in_array;
    goto LAB_0007191c;
  case 0x415:
    __src = param_deviationPara_software_in_array;
LAB_000719a0:
    __n = 0x14;
    break;
  case 0x416:
    __src = (char *)&param_ratioPara_software_in_array;
LAB_00071980:
    __n = 0x1c;
    break;
  case 0x417:
    __src = param_x_thr_software_in_array;
    goto LAB_0007191c;
  case 0x418:
    __src = param_y_thr_software_in_array;
LAB_0007191c:
    __n = 0x10;
    break;
  case 0x419:
    __src = param_thrPara_software_in_array;
    __n = 0x50;
    break;
  case 0x41a:
    __src = param_xy_pix_low_software_in_array;
    __n = 0x58;
    break;
  case 0x41b:
    __src = param_motionThrPara_software_in_array;
    __n = 0x44;
    break;
  case 0x41c:
    __src = param_d_thr_normal_software_in_array;
    goto LAB_00071a88;
  case 0x41d:
    __src = param_d_thr_normal1_software_in_array;
    goto LAB_00071a88;
  case 0x41e:
    __src = param_d_thr_normal2_software_in_array;
    goto LAB_00071a88;
  case 0x41f:
    __src = param_d_thr_normal_min_software_in_array;
    goto LAB_00071a88;
  case 0x420:
    __src = (char *)&param_multiValueLow_software_in_array;
    goto LAB_00071a88;
  case 0x421:
    __src = (char *)&param_multiValueHigh_software_in_array;
    goto LAB_00071a88;
  case 0x422:
    __src = param_d_thr_2_software_in_array;
LAB_00071a88:
    __n = 0x68;
    break;
  case 0x423:
    __src = param_wdr_detial_para_software_in_array;
    __n = 0x20;
    break;
  case 0x424:
    __src = (char *)&wdr_thrAll_software_out;
LAB_00071aa8:
    __n = 0x6c;
    break;
  case 0x425:
    __src = (char *)&param_wdr_dbg_out_array;
    __n = 8;
    break;
  case 0x426:
    __src = (char *)&wdr_ev_list;
    goto LAB_00071b34;
  case 0x427:
    __src = (char *)&wdr_weight_b_in_list;
    goto LAB_00071b34;
  case 0x428:
    __src = (char *)&wdr_weight_p_in_list;
    goto LAB_00071b34;
  case 0x429:
    __src = (char *)&wdr_ev_list_deghost;
    goto LAB_00071b34;
  case 0x42a:
    __src = (char *)&wdr_weight_in_list_deghost;
    goto LAB_00071b34;
  case 0x42b:
    __src = (char *)&wdr_detail_w_in0_list;
    goto LAB_00071b34;
  case 0x42c:
    __src = (char *)&wdr_detail_w_in1_list;
    goto LAB_00071b34;
  case 0x42d:
    __src = (char *)&wdr_detail_w_in2_list;
    goto LAB_00071b34;
  case 0x42e:
    __src = (char *)&wdr_detail_w_in3_list;
    goto LAB_00071b34;
  case 0x42f:
    __src = (char *)&wdr_detail_w_in4_list;
LAB_00071b34:
    __n = 0x24;
    break;
  case 0x430:
    __src = param_wdr_priv_array;
    __n = 0x40;
    break;
  case 0x431:
    __src = (char *)&param_wdr_tool_control_array;
    __n = 0x38;
    break;
  default:
    isp_printf(2,"%s, %d: gib not support param id %d\n","tisp_wdr_param_array_get",3000,param_1);
    return 0xffffffff;
  }
  memcpy(param_2,__src,__n);
  *param_3 = __n;
  return 0;
}



int tisp_wdr_param_array_set(int param_1,int *param_2,int *param_3)

{
  bool bVar1;
  int *puVar2;
  int uVar3;
  int iVar4;
  char *puVar5;
  
  switch(param_1) {
  case 0x3ff:
    memcpy(&param_wdr_para_array,param_2,0x28);
    uVar3 = 0x28;
    break;
  case 0x400:
    puVar5 = param_wdr_weightLUT20_array;
    goto LAB_00071c48;
  case 0x401:
    puVar5 = param_wdr_weightLUT02_array;
    goto LAB_00071c48;
  case 0x402:
    puVar5 = param_wdr_weightLUT12_array;
    goto LAB_00071c48;
  case 0x403:
    puVar5 = param_wdr_weightLUT22_array;
    goto LAB_00071c48;
  case 0x404:
    puVar5 = param_wdr_weightLUT21_array;
LAB_00071c48:
    memcpy(puVar5,param_2,0x80);
    uVar3 = 0x80;
    break;
  case 0x405:
    puVar2 = &param_wdr_gam_y_array;
    goto LAB_00071d00;
  case 0x406:
    puVar5 = (char *)&param_wdr_w_point_weight_x_array;
    goto LAB_00071cbc;
  case 0x407:
    puVar5 = (char *)&param_wdr_w_point_weight_y_array;
    goto LAB_00071cbc;
  case 0x408:
    memcpy(&param_wdr_w_point_weight_pow_array,param_2,0xc);
    uVar3 = 0xc;
    break;
  case 0x409:
    puVar2 = &param_fusion1_cure_y_array;
LAB_00071d00:
    memcpy(puVar2,param_2,0x84);
    uVar3 = 0x84;
    break;
  case 0x40a:
    puVar5 = (char *)&param_wdr_detail_th_w_array;
    goto LAB_00071d74;
  case 0x40b:
    puVar5 = (char *)&param_wdr_contrast_t_y_mux_array;
    goto LAB_00071db8;
  case 0x40c:
    puVar5 = (char *)&param_wdr_ct_cl_para_array;
    goto LAB_00071cbc;
  case 0x40d:
    memcpy(&param_centre5x5_w_distance_array,param_2,0x7c);
    uVar3 = 0x7c;
    break;
  case 0x40e:
    puVar5 = param_wdr_stat_para_array;
    goto LAB_00071d74;
  case 0x40f:
    memcpy(&param_wdr_degost_para_array,param_2,0x34);
    uVar3 = 0x34;
    break;
  case 0x410:
    puVar5 = &param_wdr_darkLable_array;
    goto LAB_00071db8;
  case 0x411:
    puVar5 = (char *)&param_wdr_darkLableN_array;
    goto LAB_00071cbc;
  case 0x412:
    puVar5 = (char *)&param_wdr_darkWeight_array;
    goto LAB_00071db8;
  case 0x413:
    puVar2 = &param_wdr_thrLable_array;
    goto LAB_00071f60;
  case 0x414:
    puVar5 = param_computerModle_software_in_array;
    goto LAB_00071cbc;
  case 0x415:
    puVar5 = param_deviationPara_software_in_array;
LAB_00071db8:
    memcpy(puVar5,param_2,0x14);
    uVar3 = 0x14;
    break;
  case 0x416:
    puVar5 = (char *)&param_ratioPara_software_in_array;
LAB_00071d74:
    memcpy(puVar5,param_2,0x1c);
    uVar3 = 0x1c;
    break;
  case 0x417:
    puVar5 = param_x_thr_software_in_array;
    goto LAB_00071cbc;
  case 0x418:
    puVar5 = param_y_thr_software_in_array;
LAB_00071cbc:
    memcpy(puVar5,param_2,0x10);
    uVar3 = 0x10;
    break;
  case 0x419:
    memcpy(param_thrPara_software_in_array,param_2,0x50);
    uVar3 = 0x50;
    break;
  case 0x41a:
    memcpy(param_xy_pix_low_software_in_array,param_2,0x58);
    uVar3 = 0x58;
    break;
  case 0x41b:
    memcpy(param_motionThrPara_software_in_array,param_2,0x44);
    uVar3 = 0x44;
    break;
  case 0x41c:
    puVar5 = param_d_thr_normal_software_in_array;
    goto LAB_00071f1c;
  case 0x41d:
    puVar5 = param_d_thr_normal1_software_in_array;
    goto LAB_00071f1c;
  case 0x41e:
    puVar5 = param_d_thr_normal2_software_in_array;
    goto LAB_00071f1c;
  case 0x41f:
    puVar5 = param_d_thr_normal_min_software_in_array;
    goto LAB_00071f1c;
  case 0x420:
    puVar5 = (char *)&param_multiValueLow_software_in_array;
    goto LAB_00071f1c;
  case 0x421:
    puVar5 = (char *)&param_multiValueHigh_software_in_array;
    goto LAB_00071f1c;
  case 0x422:
    puVar5 = param_d_thr_2_software_in_array;
LAB_00071f1c:
    memcpy(puVar5,param_2,0x68);
    uVar3 = 0x68;
    break;
  case 0x423:
    memcpy(param_wdr_detial_para_software_in_array,param_2,0x20);
    uVar3 = 0x20;
    break;
  case 0x424:
    puVar2 = &wdr_thrAll_software_out;
LAB_00071f60:
    memcpy(puVar2,param_2,0x6c);
    uVar3 = 0x6c;
    break;
  case 0x425:
    memcpy(&param_wdr_dbg_out_array,param_2,8);
    uVar3 = 8;
    break;
  case 0x426:
    puVar2 = &wdr_ev_list;
    goto LAB_00072034;
  case 0x427:
    puVar2 = &wdr_weight_b_in_list;
    goto LAB_00072034;
  case 0x428:
    puVar2 = &wdr_weight_p_in_list;
    goto LAB_00072034;
  case 0x429:
    puVar2 = &wdr_ev_list_deghost;
    goto LAB_00072034;
  case 0x42a:
    puVar2 = &wdr_weight_in_list_deghost;
    goto LAB_00072034;
  case 0x42b:
    puVar2 = &wdr_detail_w_in0_list;
    goto LAB_00072034;
  case 0x42c:
    puVar2 = &wdr_detail_w_in1_list;
    goto LAB_00072034;
  case 0x42d:
    puVar2 = &wdr_detail_w_in2_list;
    goto LAB_00072034;
  case 0x42e:
    puVar2 = &wdr_detail_w_in3_list;
    goto LAB_00072034;
  case 0x42f:
    puVar2 = &wdr_detail_w_in4_list;
LAB_00072034:
    memcpy(puVar2,param_2,0x24);
    uVar3 = 0x24;
    break;
  case 0x430:
    memcpy(param_wdr_priv_array,param_2,0x40);
    uVar3 = 0x40;
    break;
  case 0x431:
    puVar2 = &param_wdr_tool_control_array;
    iVar4 = 0;
    do {
      bVar1 = iVar4 != 2;
      iVar4 = iVar4 + 1;
      if (bVar1) {
        *puVar2 = *param_2;
      }
      param_2 = param_2 + 1;
      puVar2 = puVar2 + 1;
    } while (iVar4 != 0xe);
    tiziano_wdr_params_init();
    wdr_ev_changed = 1;
    uVar3 = 0x38;
    break;
  default:
    isp_printf(2,"%s, %d: wdr not support param id %d\n","tisp_wdr_param_array_set",0xcd0,param_1);
    return 0xffffffff;
  }
  *param_3 = uVar3;
  return 0;
}



int system_yvu_or_yuv(int param_1,int param_2,unsigned int param_3)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  
  uVar1 = param_3 >> 8 & 0xff;
  uVar2 = param_3 >> 0x10 & 0xff;
  uVar3 = (param_3 & 0xff) << 0x10;
  if (param_1 == 0) {
    uVar2 = uVar3 | uVar2 << 8 | uVar1;
  }
  else {
    uVar2 = uVar3 | uVar1 << 8 | uVar2;
  }
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + param_2) = uVar2;
  return 0;
}



int tisp_day_or_night_s_ctrl(int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  int iVar4;
  unsigned int uVar5;
  
  if (param_1 == 0) {
    memcpy(&DAT_00094400,tparams_day,0x137f0);
    day_night = 0;
  }
  else if (param_1 == 1) {
    memcpy(&DAT_00094400,tparams_night,0x137f0);
    day_night = 1;
  }
  else {
    isp_printf(2,"%s:%d:can not support this mode!!!","tisp_day_or_night_s_ctrl",0x40);
  }
  uVar2 = system_reg_read(0xc);
  uVar3 = 0;
  do {
    uVar5 = uVar3 & 0x1f;
    iVar4 = uVar3 * 4;
    uVar1 = uVar3 & 0x1f;
    uVar3 = uVar3 + 1;
    uVar2 = (*(int *)(&DAT_00094400 + iVar4) << uVar1) + (~(1 << uVar5) & uVar2);
  } while (uVar3 != 0x20);
  if (DAT_000b2634 == 1) {
    uVar3 = 0xa1fffff6;
    uVar5 = 0x880002;
  }
  else {
    uVar3 = 0xb577fffd;
    uVar5 = 0x34000009;
  }
  uVar5 = uVar2 & uVar3 | uVar5;
  isp_printf(0,"%s:%d::top bypass is 0x%x\n","tisp_day_or_night_s_ctrl",0x51,uVar5);
  system_reg_write(0xc,uVar5);
  tiziano_defog_dn_params_refresh();
  tiziano_ae_dn_params_refresh();
  tiziano_awb_dn_params_refresh();
  tiziano_dmsc_dn_params_refresh();
  tiziano_sharpen_dn_params_refresh();
  tiziano_mdns_dn_params_refresh();
  tiziano_sdns_dn_params_refresh();
  tiziano_gib_dn_params_refresh();
  tiziano_lsc_dn_params_refresh();
  tiziano_ccm_dn_params_refresh();
  tiziano_clm_dn_params_refresh();
  tiziano_gamma_dn_params_refresh();
  tiziano_adr_dn_params_refresh();
  tiziano_dpc_dn_params_refresh();
  tiziano_af_dn_params_refresh();
  tiziano_bcsh_dn_params_refresh();
  tiziano_rdns_dn_params_refresh();
  tiziano_ydns_dn_params_refresh();
  cust_mode = 0;
  tispPollValue = 1;
  DAT_000b24d2 = (char)param_1;
  __wake_up(&dumpQueue,1,1,0);
  return 0;
}



int tisp_cust_mode_s_ctrl(int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  int iVar4;
  void *pvVar5;
  unsigned int uVar6;
  
  if (tparams_cust == (void *)0x0) {
    return 0xffffffff;
  }
  if (param_1 == 1) {
    memcpy(&DAT_00094400,tparams_cust,0x137f0);
    uVar2 = day_night & 0xfffffffd;
    day_night = 3;
    if (uVar2 == 0) {
      day_night = 2;
    }
    cust_mode = 1;
    goto LAB_0007256c;
  }
  if (param_1 != 0) goto LAB_0007256c;
  pvVar5 = tparams_night;
  if (day_night == 1) {
LAB_00072524:
    memcpy(&DAT_00094400,pvVar5,0x137f0);
  }
  else {
    pvVar5 = tparams_day;
    if ((int)day_night < 2) {
      if (day_night == 0) goto LAB_00072524;
    }
    else if ((day_night == 2) || (pvVar5 = tparams_night, day_night == 3)) goto LAB_00072524;
    isp_printf(2,"%s:%d:can not support this mode!!!","tisp_cust_mode_s_ctrl",0x90);
  }
  cust_mode = 0;
LAB_0007256c:
  uVar2 = system_reg_read(0xc);
  uVar3 = 0;
  do {
    uVar6 = uVar3 & 0x1f;
    iVar4 = uVar3 * 4;
    uVar1 = uVar3 & 0x1f;
    uVar3 = uVar3 + 1;
    uVar2 = (*(int *)(&DAT_00094400 + iVar4) << uVar1) + (~(1 << uVar6) & uVar2);
  } while (uVar3 != 0x20);
  if (DAT_000b2634 == 1) {
    uVar3 = 0xa1fffff6;
    uVar6 = 0x880002;
  }
  else {
    uVar3 = 0xb577fffd;
    uVar6 = 0x34000009;
  }
  uVar6 = uVar2 & uVar3 | uVar6;
  isp_printf(0,"%s:%d::top bypass is 0x%x\n","tisp_cust_mode_s_ctrl",0xa9,uVar6);
  system_reg_write(0xc,uVar6);
  tiziano_defog_dn_params_refresh();
  tiziano_ae_dn_params_refresh();
  tiziano_awb_dn_params_refresh();
  tiziano_dmsc_dn_params_refresh();
  tiziano_sharpen_dn_params_refresh();
  tiziano_mdns_dn_params_refresh();
  tiziano_sdns_dn_params_refresh();
  tiziano_gib_dn_params_refresh();
  tiziano_lsc_dn_params_refresh();
  tiziano_ccm_dn_params_refresh();
  tiziano_clm_dn_params_refresh();
  tiziano_gamma_dn_params_refresh();
  tiziano_adr_dn_params_refresh();
  tiziano_dpc_dn_params_refresh();
  tiziano_af_dn_params_refresh();
  tiziano_bcsh_dn_params_refresh();
  tiziano_rdns_dn_params_refresh();
  tiziano_ydns_dn_params_refresh();
  return 0;
}



int tisp_cust_mode_g_ctrl(void)

{
  int uVar1;
  
  uVar1 = 0xffffffff;
  if (tparams_cust != 0) {
    uVar1 = cust_mode;
  }
  return uVar1;
}



int tisp_day_or_night_g_ctrl(void)

{
  int uVar1;
  
  uVar1 = 0;
  if (((day_night & 0xfffffffd) != 0) && (uVar1 = 0xffffffff, (day_night & 0xfffffffd) == 1)) {
    uVar1 = 1;
  }
  return uVar1;
}



int tisp_mirror_enable(int param_1)

{
  if (msca_dmaout_arb == 0xffffffff) {
    msca_dmaout_arb = 0;
  }
  if (param_1 == 0) {
    msca_dmaout_arb = msca_dmaout_arb & 0xfffffc7f;
  }
  else {
    msca_dmaout_arb = msca_dmaout_arb | 0x380;
  }
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9818) = msca_dmaout_arb;
  return 0;
}



int tisp_hv_flip_enable(unsigned int param_1)

{
  unsigned int uVar1;
  
  if (msca_dmaout_arb == 0xffffffff) {
    msca_dmaout_arb = 0;
  }
  if ((param_1 & 1) == 0) {
    uVar1 = msca_dmaout_arb & 0xfffffc7f;
  }
  else {
    uVar1 = msca_dmaout_arb | 0x380;
  }
  if ((param_1 & 2) == 0) {
    msca_dmaout_arb = uVar1 & 0xffffff8f;
  }
  else {
    msca_dmaout_arb = uVar1 | 0x70;
  }
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9818) = msca_dmaout_arb;
  return 0;
}



void tisp_hv_flip_get(char *param_1)

{
  unsigned int uVar1;
  char bVar2;
  
  uVar1 = system_reg_read(0x9818);
  bVar2 = (uVar1 & 0x380) != 0;
  if ((uVar1 & 0x70) != 0) {
    bVar2 = bVar2 | 2;
  }
  *param_1 = bVar2;
  return;
}



int tisp_flip_enable(int param_1)

{
  if (msca_dmaout_arb == 0xffffffff) {
    msca_dmaout_arb = 0;
  }
  if (param_1 == 0) {
    msca_dmaout_arb = msca_dmaout_arb & 0xffffff8f;
  }
  else {
    msca_dmaout_arb = msca_dmaout_arb | 0x70;
  }
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9818) = msca_dmaout_arb;
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_set_fps(unsigned int param_1)

{
  int iVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  
  iVar1 = (*(code *)sensor_ctrl._164_4_)
                    (((int)param_1 >> 0x10) / (int)(param_1 & 0xffff) & 0xff,sensor_ctrl);
  if (iVar1 < 0) {
    isp_printf(2,"fps get wrong!\n");
    iVar1 = -1;
  }
  else {
    DAT_000b2608 = (short)sensor_ctrl._40_4_;
    DAT_000b260c = (short)sensor_ctrl._44_4_;
    DAT_000d3e88 = sensor_ctrl._44_4_;
    _DAT_000d3ec0 = sensor_ctrl._84_4_;
    DAT_000b260e = (short)sensor_ctrl._52_4_;
    uVar4 = (uint)(ushort)sensor_ctrl._2_2_;
    uVar5 = (uint)(ushort)sensor_ctrl._4_2_;
    DAT_000b2622 = (short)sensor_ctrl._80_4_;
    uVar3 = sensor_ctrl._80_4_ & 0xffff;
    DAT_000b2614 = sensor_ctrl._2_2_;
    DAT_000b2624 = (short)sensor_ctrl._84_4_;
    uVar2 = sensor_ctrl._84_4_ & 0xffff;
    DAT_000b2616 = sensor_ctrl._4_2_;
    DAT_000b2604 = iVar1;
    DAT_000b260a = DAT_000b2608;
    DAT_000b2618 = DAT_000b260c;
    isp_printf(0,
               "[%s,%d] sensor info: it min %d, it max %d,total width %d,total height %d, it max short %d,it min short %d\n"
               ,"tisp_set_fps",0x126,sensor_ctrl._40_4_ & 0xffff,sensor_ctrl._44_4_ & 0xffff,uVar4,
               uVar5,uVar2,uVar3);
    iVar1 = flicker_hz;
    if (flicker_hz != 0) {
      tiziano_deflicker_expt_tune(flicker_hz,DAT_000b2604,DAT_000b2616,DAT_000b2614);
      isp_printf(0,"####%d,%d,%d,%d\n",flicker_hz,DAT_000b2604,DAT_000b2616,DAT_000b2614,uVar4,uVar5
                 ,uVar2,uVar3);
      iVar1 = 0;
    }
  }
  return iVar1;
}



void tisp_set_brightness(char param_1)

{
  tisp_bcsh_brightness(param_1);
  return;
}



// WARNING: Removing unreachable block (ram,0x00063770)
// WARNING: Removing unreachable block (ram,0x00063810)
// WARNING: Removing unreachable block (ram,0x00063778)
// WARNING: Removing unreachable block (ram,0x000637f4)

int tisp_set_ae_comp(unsigned int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  
  ae_comp_x = param_1 & 0xff;
  ae_comp_param = 1;
  if (ae_comp_x < 0x81) {
    DAT_000b04f8 = (int)(ae_comp_x * ae_comp_default) / 0x80;
  }
  else {
    DAT_000b04f8 = (ae_comp_x * 300) / 0x7f + ae_comp_default + -0x12e;
  }
  DAT_000b06e0 = 1;
  DAT_000b06e4 = 1;
  tiziano_ae_set_hardware_param(0,_ae_parameter,1);
  uVar2 = _ae_parameter._148_4_ << 0x14 | _ae_parameter._144_4_ << 0x10;
  if ((uint)_ae_parameter._140_4_ < 0xff) {
    uVar2 = uVar2 | _ae_parameter._136_4_;
    uVar1 = (uint)(_ae_parameter._140_4_ << 1) / 3 << 8;
  }
  else {
    uVar1 = _ae_parameter._140_4_ << 8 | _ae_parameter._136_4_;
  }
  system_reg_write_ae(2,0xa828,uVar1 | uVar2);
  return 0;
}



void tisp_get_ae_comp(void)

{
  tisp_ae_g_comp();
  return;
}



void tisp_get_ae_luma(void)

{
  tisp_ae_g_luma();
  return;
}



void tisp_set_sharpness(char param_1)

{
  tisp_dmsc_sharpness_set(param_1);
  return;
}



void tisp_set_saturation(char param_1)

{
  tisp_bcsh_saturation(param_1);
  isp_printf(0,"%s:%d::saturation is %d\n","tisp_set_saturation",0x152,param_1);
  return;
}



void tisp_set_contrast(char param_1)

{
  tisp_bcsh_contrast(param_1);
  isp_printf(0,"%s:%d::contrast is %d\n","tisp_set_contrast",0x158,param_1);
  return;
}



void tisp_set_bcsh_hue(char param_1)

{
  tisp_bcsh_s_hue(param_1);
  isp_printf(0,"%s:%d::hue is %d\n","tisp_set_bcsh_hue",0x15e,param_1);
  return;
}



void tisp_get_brightness(void)

{
  tisp_bcsh_g_brightness();
  return;
}



void tisp_get_sharpness(void)

{
  tisp_dmsc_sharpness_get();
  return;
}



void tisp_get_saturation(void)

{
  tisp_bcsh_g_saturation();
  return;
}



void tisp_get_contrast(void)

{
  tisp_bcsh_g_contrast();
  return;
}



void tisp_get_bcsh_hue(void)

{
  tisp_bcsh_g_hue();
  return;
}



int tisp_top_sel(void)

{
  unsigned int uVar1;
  
  uVar1 = system_reg_read(0xc);
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0xc) = uVar1 | 0x80000000;
  return 0;
}



int tisp_top_read(void)

{
  return *(int *)(*(int *)(ispcore_sd + 0xb8) + 0xc);
}



int tisp_g_ncuinfo(int param_1)

{
  if (param_1 == 0) {
    isp_printf(2,"The ncu info addr is NULL!!!\n");
    return 0xffffffff;
  }
  return 0;
}



int tisp_s_antiflick(int param_1)

{
  int local_50;
  int local_4c;
  unsigned int local_48;
  unsigned int local_44;
  int local_38 [3];
  size_t local_2c;
  size_t local_28 [2];
  
  local_28[0] = 0xc;
  local_2c = 0x18;
  if (param_1 != 0) {
    flicker_hz = param_1;
  }
  memcpy(local_38,&DAT_00094648,0xc);
  memcpy(&local_50,&DAT_00094654,local_2c);
  if ((param_1 == 0x32) || (param_1 == 0x3c)) {
    local_38[0] = 1;
  }
  else {
    if (param_1 != 0) {
      isp_printf(2,"%s,%d,Cant support this hz(%d)!!!\n","tisp_s_antiflick",0x1b4,param_1);
      return 0xffffffff;
    }
    local_38[0] = 0;
  }
  tiziano_deflicker_expt_tune(flicker_hz,DAT_000b2604,DAT_000b2616,DAT_000b2614);
  local_50 = flicker_hz;
  local_4c = DAT_000b2604;
  local_48 = (uint)DAT_000b2616;
  local_44 = (uint)DAT_000b2614;
  memcpy(&DAT_00094648,local_38,local_28[0]);
  tisp_ae_param_array_set(10,local_38,local_28);
  memcpy(&DAT_00094654,&local_50,local_2c);
  tisp_ae_param_array_set(0xb,&local_50,&local_2c);
  memcpy((void *)(tparams_day + 0x248),local_38,local_28[0]);
  memcpy((void *)(tparams_night + 0x248),local_38,local_28[0]);
  memcpy((void *)(tparams_day + 0x254),&local_50,local_2c);
  memcpy((void *)(tparams_night + 0x254),&local_50,local_2c);
  tisp_ae_trig();
  isp_printf(0,"%s:%d::deflicker_lt is %d,%d,%d,%d\n","tisp_s_antiflick",0x1cb,local_50,local_4c,
             local_48,local_44);
  return 0;
}



int tisp_s_Hilightdepress(int param_1)

{
  int local_40 [5];
  int local_2c;
  int local_28;
  size_t local_14;
  
  local_14 = 0x2c;
  memcpy(local_40,&DAT_0009466c,0x2c);
  local_28 = param_1 + 1;
  local_40[0] = 1;
  local_2c = 1;
  memcpy(&DAT_0009466c,local_40,local_14);
  tisp_ae_param_array_set(0xc,local_40,&local_14);
  tisp_ae_trig();
  return 0;
}



int tisp_g_Hilightdepress(int *param_1)

{
  int uVar1;
  int local_38 [6];
  int local_20;
  int local_c;
  
  local_c = 0;
  tisp_ae_param_array_get(0xc,local_38,&local_c);
  if (local_c == 0x2c) {
    if ((local_38[0] == 0) || (local_20 == 1)) {
      *param_1 = 0;
    }
    else {
      *param_1 = local_20 + -1;
    }
    uVar1 = 0;
  }
  else {
    isp_printf(2,"%s,%d:::Get Hilight depress failed!!!\n","tisp_g_Hilightdepress",0x1ef);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_s_BacklightComp(int param_1)

{
  int local_40 [5];
  int local_2c;
  int local_28;
  size_t local_14;
  
  local_14 = 0x2c;
  memcpy(local_40,&DAT_0009466c,0x2c);
  local_2c = param_1 + 1;
  local_40[0] = 1;
  local_28 = 1;
  memcpy(&DAT_0009466c,local_40,local_14);
  tisp_ae_param_array_set(0xc,local_40,&local_14);
  tisp_ae_trig();
  return 0;
}



int tisp_g_BacklightComp(int *param_1)

{
  int uVar1;
  int local_38 [5];
  int local_24;
  int local_c;
  
  local_c = 0;
  tisp_ae_param_array_get(0xc,local_38,&local_c);
  if (local_c == 0x2c) {
    if ((local_38[0] == 0) || (local_24 == 1)) {
      *param_1 = 0;
    }
    else {
      *param_1 = local_24 + -1;
    }
    uVar1 = 0;
  }
  else {
    isp_printf(2,"%s,%d:::Get Backlight Compensation failed!!!\n","tisp_g_BacklightComp",0x21b);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_s_Gamma(void *param_1)

{
  size_t local_18 [3];
  
  local_18[0] = 0x102;
  memcpy(&DAT_00096c44,param_1,0x102);
  tisp_gamma_param_array_set(0x3c,param_1,local_18);
  memcpy((void *)(tparams_day + 0x2844),param_1,local_18[0]);
  memcpy((void *)(tparams_night + 0x2844),param_1,local_18[0]);
  return 0;
}



int tisp_g_Gamma(int param_1)

{
  int uVar1;
  int local_10 [3];
  
  local_10[0] = 0;
  tisp_gamma_param_array_get(0x3c,param_1,local_10);
  uVar1 = 0;
  if (local_10[0] != 0x102) {
    isp_printf(2,"%s,%d:::Get Gamma failed!!!\n","tisp_g_Gamma",0x23f);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_s_aeroi_weight(int *param_1)

{
  int *piVar1;
  int *piVar2;
  int iVar3;
  int local_3a0 [225];
  size_t local_1c [2];
  
  local_1c[0] = 900;
  piVar1 = param_1;
  piVar2 = local_3a0;
  do {
    iVar3 = *piVar1;
    piVar1 = piVar1 + 1;
    *piVar2 = 8 - iVar3;
    piVar2 = piVar2 + 1;
  } while (piVar1 != param_1 + 0xe1);
  memcpy(&DAT_00094e50,param_1,900);
  memcpy(&DAT_00094acc,local_3a0,local_1c[0]);
  memcpy((void *)(tparams_day + 0xa50),param_1,local_1c[0]);
  memcpy((void *)(tparams_day + 0x6cc),local_3a0,local_1c[0]);
  memcpy((void *)(tparams_night + 0xa50),param_1,local_1c[0]);
  memcpy((void *)(tparams_night + 0x6cc),local_3a0,local_1c[0]);
  tisp_ae_param_array_set(0x12,param_1,local_1c);
  tisp_ae_param_array_set(0x11,local_3a0,local_1c);
  tisp_ae_trig();
  return 0;
}



int tisp_g_aeroi_weight(int param_1)

{
  int uVar1;
  int local_10 [3];
  
  local_10[0] = 0;
  tisp_ae_param_array_get(0x12,param_1,local_10);
  uVar1 = 0;
  if (local_10[0] != 900) {
    isp_printf(2,"%s,%d:::Get ae_roi failed!!!\n","tisp_g_aeroi_weight",0x266);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_s_aezone_weight(void *param_1)

{
  size_t local_18 [3];
  
  local_18[0] = 900;
  memcpy(&DAT_00094748,param_1,900);
  memcpy((void *)(tparams_day + 0x348),param_1,local_18[0]);
  memcpy((void *)(tparams_night + 0x348),param_1,local_18[0]);
  tisp_ae_param_array_set(0x10,param_1,local_18);
  tisp_ae_trig();
  return 0;
}



int tisp_g_aezone_weight(int param_1)

{
  int uVar1;
  int local_10 [3];
  
  local_10[0] = 0;
  tisp_ae_param_array_get(0x10,param_1,local_10);
  uVar1 = 0;
  if (local_10[0] != 900) {
    isp_printf(2,"%s,%d:::Get ae_zone_weight failed!!!\n","tisp_g_aezone_weight",0x284);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_s_af_weight(void *param_1)

{
  size_t local_18 [2];
  
  local_18[0] = 900;
  memcpy(&DAT_000a629c,param_1,900);
  memcpy((void *)(tparams_day + 0x11e9c),param_1,local_18[0]);
  memcpy((void *)(tparams_night + 0x11e9c),param_1,local_18[0]);
  tisp_af_param_array_set(0x3bf,param_1,local_18);
  return 0;
}



int tisp_g_af_weight(int param_1)

{
  int uVar1;
  int local_10 [3];
  
  local_10[0] = 0;
  tisp_af_param_array_get(0x3bf,param_1,local_10);
  uVar1 = 0;
  if (local_10[0] != 900) {
    isp_printf(2,"%s,%d:::Get af_weight failed!!!\n","tisp_g_af_weight",0x29f);
    uVar1 = 0xffffffff;
  }
  return uVar1;
}



int tisp_g_ev_attr(int *param_1)

{
  int iVar1;
  int uVar2;
  int uVar3;
  unsigned int uVar4;
  
  *param_1 = DAT_000d3e78;
  param_1[1] = DAT_000d3e90 >> 10;
  uVar2 = tisp_log2_fixed_to_fixed(DAT_000d3e90,10,0x10);
  param_1[3] = uVar2;
  uVar3 = fix_point_div_64(0);
  uVar2 = DAT_000d3e70;
  param_1[2] = uVar3;
  uVar2 = tisp_log2_fixed_to_fixed(uVar2,10,5);
  param_1[4] = uVar2;
  uVar2 = tisp_log2_fixed_to_fixed(DAT_000d3e7c,10,5);
  param_1[5] = uVar2;
  uVar2 = DAT_000d3e7c;
  param_1[6] = (uint)DAT_000d3e94._2_2_;
  uVar4 = fix_point_mult2_32(10,DAT_000d3e70,uVar2);
  iVar1 = DAT_000d3e80;
  param_1[7] = uVar4 >> 2;
  uVar2 = tisp_log2_fixed_to_fixed(iVar1 + 4,10,5);
  param_1[8] = uVar2;
  uVar3 = tisp_log2_fixed_to_fixed(DAT_000d3e8c + 4,10,5);
  uVar2 = DAT_000d3e74;
  param_1[9] = uVar3;
  uVar3 = tisp_log2_fixed_to_fixed(uVar2,10,5);
  uVar2 = DAT_000d3e84;
  param_1[10] = uVar3;
  uVar2 = tisp_log2_fixed_to_fixed(uVar2,10,5);
  param_1[0xb] = uVar2;
  uVar4 = DAT_000b2604;
  *(short *)(param_1 + 0x1b) = (short)DAT_000d3ee4;
  *(short *)((int)param_1 + 0x6e) = (short)DAT_000d3e88;
  *(short *)(param_1 + 0x1f) =
       (short)((((uVar4 & 0xffff) * 1000000) / (uVar4 >> 0x10)) / (uint)DAT_000b2616);
  param_1[0xc] = DAT_000d3ea0;
  return 0;
}



int tisp_g_wb_attr(void)

{
  tisp_g_wb_mode();
  return 0;
}



int tisp_s_wb_attr(void)

{
  tisp_s_wb_mode();
  return 0;
}



int tisp_g_wb_zone(void)

{
  tisp_awb_get_zone();
  return 0;
}



int tisp_g_wb_ct(void)

{
  tisp_awb_get_ct();
  return 0;
}



int tisp_s_wb_ct(void)

{
  tisp_awb_set_ct();
  return 0;
}



int
tisp_s_awb_cluster(int param_1,int param_2,int param_3,int param_4)

{
  unsigned int uVar1;
  char local_20 [28];
  
  for (uVar1 = 0; uVar1 < 0x18; uVar1 = uVar1 + 1) {
    local_20[uVar1] = (&stack0x00000010)[uVar1];
  }
  tisp_awb_set_cluster_awb_params(param_1,param_2,param_3,param_4);
  return 0;
}



int tisp_g_awb_cluster(void)

{
  tisp_awb_get_cluster_awb_params();
  return 0;
}



int tisp_s_awb_ct_trend(void)

{
  tisp_awb_set_ct_trend();
  return 0;
}



int tisp_g_awb_ct_trend(void)

{
  tisp_awb_get_ct_trend();
  return 0;
}



int tisp_g_ccm_attr(int param_1)

{
  unsigned int uVar1;
  char uStack_38;
  char local_37;
  
  uVar1 = system_reg_read(0xc);
  if ((uVar1 & 0x10000) == 0) {
    if ((uVar1 & 0x200) == 0) {
      tisp_ccm_get_attr(param_1);
      tisp_bcsh_get_attr(&uStack_38);
      if (local_37 == '\x01') {
        *(char *)(param_1 + 1) = 1;
      }
    }
    else {
      tisp_bcsh_get_attr();
    }
  }
  else {
    tisp_ccm_get_attr(param_1);
  }
  return 0;
}



int tisp_s_ccm_attr(char *param_1)

{
  unsigned int uVar1;
  char uStack_60;
  char local_5f;
  char auStack_5c [36];
  char auStack_38 [40];
  
  memcpy(auStack_38,&DAT_0007d890,0x24);
  uVar1 = system_reg_read(0xc);
  if ((uVar1 & 0x10000) == 0) {
    if ((uVar1 & 0x200) == 0) {
      memcpy(&uStack_60,param_1,0x28);
      memcpy(auStack_5c,auStack_38,0x24);
      if (param_1[1] != '\0') {
        local_5f = 1;
        param_1[1] = 0;
      }
      tisp_ccm_set_attr(param_1);
      param_1 = &uStack_60;
    }
    tisp_bcsh_set_attr(param_1);
  }
  else {
    tisp_ccm_set_attr(param_1);
  }
  return 0;
}



int tisp_g_ae_hist(void)

{
  tisp_ae_get_hist_custome();
  return 0;
}



int
tisp_s_ae_hist(int param_1,int param_2,int param_3,int param_4)

{
  unsigned int uVar1;
  char local_428 [1060];
  
  for (uVar1 = 0; uVar1 < 0x41c; uVar1 = uVar1 + 1) {
    local_428[uVar1] = (&stack0x00000010)[uVar1];
  }
  tisp_ae_set_hist_custome(param_1,param_2,param_3,param_4);
  return 0;
}



int
tisp_s_ae_at_list(int param_1,int param_2,int param_3,int param_4)

{
  unsigned int uVar1;
  char local_20 [28];
  
  for (uVar1 = 0; uVar1 < 0x18; uVar1 = uVar1 + 1) {
    local_20[uVar1] = (&stack0x00000010)[uVar1];
  }
  tisp_ae_s_at_list(param_1,param_2,param_3,param_4);
  return 0;
}



int tisp_g_ae_at_list(void)

{
  tisp_ae_g_at_list();
  return 0;
}



int tisp_s_3dns_ratio(void)

{
  tisp_s_mdns_ratio();
  return 0;
}



int tisp_s_2dns_ratio(void)

{
  tisp_s_sdns_ratio();
  return 0;
}



int tisp_s_ae_attr(int param_1)

{
  unsigned int uVar1;
  int param_11;
  char local_128 [136];
  int local_a0;
  int local_9c;
  int local_98;
  int local_94;
  char local_90 [36];
  int local_6c;
  
  memset(&local_a0,0,0x98);
  memcpy(&local_a0,&tisp_ae_ctrls,0x98);
  local_6c = param_11;
  for (uVar1 = 0; uVar1 < 0x88; uVar1 = uVar1 + 1) {
    local_128[uVar1] = local_90[uVar1];
  }
  local_94 = param_1;
  tisp_ae_manual_set(local_a0,local_9c,local_98,param_1);
  return 0;
}



int tisp_g_ae_attr(int *param_1)

{
  char auStack_a0 [12];
  int local_94;
  int local_6c;
  
  tisp_ae_manual_get(auStack_a0);
  *param_1 = local_94;
  param_1[0xc] = local_6c;
  return 0;
}



int tisp_g_ae_min(int *param_1)

{
  int local_18;
  int local_14;
  
  tisp_ae_g_min(&local_18);
  *param_1 = local_18;
  param_1[1] = local_14;
  return 0;
}



int tisp_s_ae_min(void)

{
  int iVar1;
  
  iVar1 = tisp_ae_s_min();
  return iVar1 >> 0x1f;
}



int tisp_g_ae_zone(void)

{
  tisp_ae_get_y_zone();
  return 0;
}



int tisp_g_af_zone(void)

{
  tisp_af_get_zone();
  return 0;
}



int tisp_g_af_metric(void)

{
  tisp_af_get_metric();
  return 0;
}



int tisp_g_af_attr(void)

{
  tisp_af_get_attr();
  return 0;
}



int
tisp_s_af_attr(int param_1,int param_2,int param_3,int param_4)

{
  unsigned int uVar1;
  char local_50 [76];
  
  for (uVar1 = 0; uVar1 < 0x48; uVar1 = uVar1 + 1) {
    local_50[uVar1] = (&stack0x00000010)[uVar1];
  }
  tisp_af_set_attr(param_1,param_2,param_3,param_4);
  return 0;
}



void tisp_s_wb_frz(char param_1)

{
  tisp_awb_set_frz(param_1);
  return;
}



void tisp_g_wb_frz(void)

{
  tisp_awb_get_frz();
  return;
}



void tisp_s_module_control(unsigned int param_1)

{
  unsigned int uVar1;
  int local_18;
  unsigned int local_14 [2];
  
  uVar1 = system_reg_read(0xc);
  local_18 = 0;
  local_14[0] = (uint)(-1 < (int)param_1);
  tisp_mdns_param_array_set(0x180,local_14,&local_18);
  system_reg_write(0xc,param_1 & 0x7ffff | uVar1 & 0xfff80000);
  return;
}



void tisp_g_module_control(unsigned int *param_1)

{
  unsigned int uVar1;
  char auStack_18 [4];
  int local_14 [2];
  
  uVar1 = system_reg_read(0xc);
  tisp_mdns_param_array_get(0x180,local_14,auStack_18);
  uVar1 = uVar1 & 0x7ffff;
  if (local_14[0] == 0) {
    uVar1 = uVar1 | 0x80000000;
  }
  *param_1 = uVar1;
  return;
}



void tisp_s_autozoom_control
               (int param_1,int param_2,int param_3,int param_4,
               int param_5,int param_6,int param_7,int param_8,
               int param_9)

{
  int uVar1;
  int *puVar2;
  char *pcVar3;
  code *UNRECOVERED_JUMPTABLE;
  
  if (param_1 == 0) {
    if (((uint)msca_ch_en & 1) == 0) goto LAB_00074150;
    puVar2 = &ds0_attr;
    ds0_attr = param_2;
  }
  else if (param_1 == 1) {
    if (((uint)msca_ch_en & 2) == 0) {
LAB_00074150:
      uVar1 = 2;
      pcVar3 = "Chan0 is not Enable!!!\n";
      UNRECOVERED_JUMPTABLE = isp_printf;
      goto LAB_00074158;
    }
    puVar2 = &ds1_attr;
    ds1_attr = param_2;
  }
  else {
    if (param_1 != 2) {
      return;
    }
    if (((uint)msca_ch_en & 4) == 0) goto LAB_00074150;
    puVar2 = &ds2_attr;
    ds2_attr = param_2;
  }
  puVar2[1] = param_3;
  puVar2[2] = param_4;
  puVar2[3] = param_5;
  puVar2[4] = param_6;
  puVar2[5] = param_7;
  puVar2[6] = param_8;
  puVar2[7] = param_9;
  tisp_channel_attr_set();
  pcVar3 = (char *)((uint)msca_ch_en | 0xf0000);
  uVar1 = 0x9804;
  UNRECOVERED_JUMPTABLE = system_reg_write;
  msca_ch_en = pcVar3;
LAB_00074158:
                    // WARNING: Could not recover jumptable at 0x00074160. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)(uVar1,pcVar3);
  return;
}



void tisp_g_autozoom_control(void)

{
  return;
}



int tisp_s_scaler_level_control(unsigned int param_1,int param_2,unsigned int param_3)

{
  unsigned int uVar1;
  unsigned int uVar2;
  unsigned int uVar3;
  unsigned int uVar4;
  unsigned int uVar5;
  int uVar6;
  unsigned int uVar7;
  int iVar8;
  int iVar9;
  int iVar10;
  
  uVar7 = param_1 & 0xff;
  iVar8 = (uVar7 + 0x98) * 0x100;
  iVar10 = iVar8 + 0x1c0;
  if (msca_ch_en == 0xffffffff) {
    msca_ch_en = 0;
  }
  param_3 = param_3 & 0xff;
  iVar9 = iVar8 + 0x1c4;
  uVar2 = system_reg_read(iVar10);
  uVar3 = system_reg_read(iVar10);
  uVar4 = system_reg_read(iVar9);
  uVar5 = system_reg_read(iVar9);
  if ((1 << (param_1 & 0x1f) & msca_ch_en) == 0) {
    uVar6 = isp_printf(2,"Chan%d is not Enable!!!\n",uVar7);
    return uVar6;
  }
  if (param_2 == 0) {
    msca_ch_en = ~(1 << (uVar7 + 8 & 0x1f) | 1 << (uVar7 + 0xb & 0x1f)) & msca_ch_en;
    uVar5 = 0;
    uVar4 = 0;
    uVar3 = 0x200;
    uVar2 = 0;
  }
  else {
    uVar2 = (uVar2 & 0x3ff800) >> 0xb;
    uVar3 = uVar3 & 0x7ff;
    uVar4 = (uVar4 & 0x3ff800) >> 0xb;
    uVar5 = uVar5 & 0x7ff;
    if (param_2 == 1) {
      uVar1 = param_3 * 3;
      if (uVar1 < 0x81) {
        uVar2 = param_3 * -3 + 0x80;
        uVar4 = uVar1 + 0x80;
        uVar5 = uVar2;
        uVar3 = uVar4;
      }
      else if (uVar1 - 0x81 < 0x100) {
        uVar3 = uVar1 + 0x80;
        uVar4 = param_3 * -3 + 0x180;
        uVar5 = 0;
        uVar2 = 0;
      }
      else {
        isp_printf(1,"scaler level should not above 128\n");
      }
      msca_ch_en = 1 << (uVar7 + 8 & 0x1f) | 1 << (uVar7 + 0xb & 0x1f) | msca_ch_en;
    }
    else {
      isp_printf(2,"method %d not support yet\n",param_2);
    }
  }
  uVar3 = uVar2 << 0xb | uVar3;
  uVar5 = uVar4 << 0xb | uVar5;
  system_reg_write(iVar10,uVar3);
  system_reg_write(iVar9,uVar5);
  system_reg_write(iVar8 + 0x1c8,uVar3);
  system_reg_write(iVar8 + 0x1cc,uVar5);
  msca_ch_en = msca_ch_en | 0xf0000;
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9804) = msca_ch_en;
  return 0;
}



int tisp_s_fcrop_control(char param_1,unsigned int param_2,int param_3,int param_4,unsigned int param_5)

{
  if (msca_ch_en == 0xffffffff) {
    msca_ch_en = 0;
  }
  if (param_1 == '\0') {
    isp_printf(2,"FCrop do not enable!!!\n");
  }
  else {
    DAT_000b25c4 = 1;
    DAT_000b25d4 = param_5;
    DAT_000b25c8 = param_3;
    DAT_000b25cc = param_2;
    DAT_000b25d0 = param_4;
    system_reg_write(0x9860,param_3 << 0x10 | param_2);
    system_reg_write(0x9864,param_4 << 0x10 | param_5);
    if ((msca_ch_en & 1) != 0) {
      system_reg_write(0x9904,(uint)(param_4 << 9) / DAT_000b25a8 << 0x10 |
                              (param_5 << 9) / DAT_000b25ac & 0xffff);
    }
    if ((msca_ch_en & 2) != 0) {
      system_reg_write(0x9a04,(uint)(param_4 << 9) / DAT_000b2574 << 0x10 |
                              (param_5 << 9) / DAT_000b2578 & 0xffff);
    }
    if ((msca_ch_en & 4) != 0) {
      system_reg_write(0x9b04,(uint)(param_4 << 9) / DAT_000b2540 << 0x10 |
                              (param_5 << 9) / DAT_000b2544 & 0xffff);
    }
  }
  msca_ch_en = msca_ch_en | 0xf0000;
  *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9804) = msca_ch_en;
  return 0;
}



void tisp_g_fcrop_control(char *param_1)

{
  int uVar1;
  int uVar2;
  
  if (DAT_000b25c4 == 1) {
    *param_1 = 1;
    *(int *)(param_1 + 4) = DAT_000b25cc;
    *(int *)(param_1 + 8) = DAT_000b25c8;
    *(int *)(param_1 + 0xc) = DAT_000b25d0;
    uVar2 = DAT_000b25d4;
  }
  else {
    *param_1 = 0;
    uVar1 = tispinfo;
    *(int *)(param_1 + 4) = 0;
    uVar2 = DAT_000b26f4;
    *(int *)(param_1 + 8) = 0;
    *(int *)(param_1 + 0xc) = uVar1;
  }
  *(int *)(param_1 + 0x10) = uVar2;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int tisp_s_wdr_en(int param_1)

{
  unsigned int uVar1;
  int uVar2;
  
  uVar1 = system_reg_read(0x24);
  system_reg_write(0x24,uVar1 | 1);
  do {
    uVar1 = system_reg_read(0x28);
  } while ((uVar1 & 1) == 0);
  uVar1 = system_reg_read(0x20);
  system_reg_write(0x20,uVar1 | 4);
  system_reg_write(0x20,uVar1 & 0xfffffffb);
  uVar1 = system_reg_read(0xc);
  isp_printf(0,"%s:%d::wdr en is %d,top is 0x%x\n","tisp_s_wdr_en",0x4bf,param_1,uVar1);
  if (param_1 != 1) {
    uVar1 = _DAT_0009441c * 0x80 + (uVar1 & 0xb577ff7d | 0x34000009);
    uVar2 = 0x1c;
  }
  else {
    uVar1 = uVar1 & 0xa1ffdf76 | 0x880002;
    isp_printf(0,"%s:%d::wdr en is %d,top is 0x%x\n","tisp_s_wdr_en",0x4c5,1,uVar1);
    uVar2 = 0x10;
  }
  DAT_000b2634 = (uint)(param_1 == 1);
  system_reg_write(0x804,uVar2);
  system_reg_write(0xc,uVar1);
  tisp_dpc_wdr_en(param_1);
  tisp_lsc_wdr_en(param_1);
  tisp_gamma_wdr_en(param_1);
  tisp_sharpen_wdr_en(param_1);
  tisp_ccm_wdr_en(param_1);
  tisp_bcsh_wdr_en(param_1);
  tisp_rdns_wdr_en(param_1);
  tisp_adr_wdr_en(param_1);
  tisp_defog_wdr_en(param_1);
  tisp_mdns_wdr_en(param_1);
  tisp_dmsc_wdr_en(param_1);
  tisp_ae_wdr_en(param_1);
  tisp_sdns_wdr_en(param_1);
  tiziano_clm_init();
  tiziano_ydns_init();
  system_reg_write(0x800,1);
  isp_printf(0,"%s:%d::wdr en is %d,top is 0x%x\n","tisp_s_wdr_en",0x4f4,param_1,uVar1);
  return 0;
}



int tisp_s_wdr_init_en(int param_1)

{
  int iVar1;
  int local_58 [14];
  int local_20 [2];
  
  local_20[0] = 0;
  if (param_1 == 1) {
    tisp_wdr_param_array_get(0x431);
    local_58[0] = 0;
    tisp_wdr_param_array_set(0x431,local_58,local_20);
    iVar1 = tparams_night;
    *(int *)(tparams_day + 0x134f0) = 0;
    *(int *)(iVar1 + 0x134f0) = 0;
  }
  else {
    tisp_wdr_param_array_get(0x431,local_58,local_20);
    local_58[0] = 2;
    tisp_wdr_param_array_set(0x431,local_58,local_20);
    iVar1 = tparams_night;
    *(int *)(tparams_day + 0x134f0) = 2;
    *(int *)(iVar1 + 0x134f0) = 2;
  }
  tisp_ae_wdr_en(param_1);
  tisp_dpc_wdr_en(param_1);
  tisp_lsc_wdr_en(param_1);
  tisp_gamma_wdr_en(param_1);
  tisp_sharpen_wdr_en(param_1);
  tisp_ccm_wdr_en(param_1);
  tisp_bcsh_wdr_en(param_1);
  tisp_rdns_wdr_en(param_1);
  tisp_adr_wdr_en(param_1);
  tisp_defog_wdr_en(param_1);
  tisp_mdns_wdr_en(param_1);
  tisp_dmsc_wdr_en(param_1);
  tisp_sdns_wdr_en(param_1);
  return 0;
}



int tisp_g_wdr_en(int *param_1)

{
  *param_1 = DAT_000b2634;
  return 0;
}



void tisp_s_max_again(void)

{
  tiziano_ae_s_max_again();
  return;
}



void tisp_s_max_isp_dgain(void)

{
  tiziano_ae_s_max_isp_dgain();
  return;
}



int tisp_g_dpc_strength(void)

{
  tisp_g_dpc_str_internal();
  return 0;
}



int tisp_s_dpc_strength(void)

{
  tisp_s_dpc_str_internal();
  return 0;
}



int tisp_g_drc_strength(void)

{
  tisp_g_adr_str_internal();
  return 0;
}



int tisp_s_drc_strength(void)

{
  tisp_s_adr_str_internal();
  return 0;
}



void tisp_mscaler_mask_change(int param_1)

{
  char cVar1;
  char *pcVar2;
  unsigned int uVar3;
  short *psVar4;
  int iVar5;
  short sVar6;
  short sVar7;
  short sVar8;
  short *psVar9;
  int iVar10;
  int iVar11;
  short sVar12;
  short sVar13;
  short sVar14;
  
  isp_printf(1,"################# %s, %d, change=%d\n","tisp_mscaler_mask_change",0x55a,param_1);
  uVar3 = ds0_attr << 1 | DAT_000b25b0;
  if (uVar3 == 2) {
    sVar6 = (short)DAT_000b25ac;
    sVar12 = (short)DAT_000b25a8;
  }
  else {
    if ((int)uVar3 < 3) {
      if (-1 < (int)uVar3) {
LAB_00074c18:
        sVar6 = (short)DAT_000b25c0;
        sVar12 = (short)DAT_000b25bc;
        goto LAB_00074c30;
      }
    }
    else if (uVar3 == 3) goto LAB_00074c18;
    sVar12 = 0;
    sVar6 = 0;
  }
LAB_00074c30:
  uVar3 = ds1_attr << 1 | DAT_000b257c;
  if (uVar3 == 2) {
    sVar7 = (short)DAT_000b2578;
    sVar13 = (short)DAT_000b2574;
  }
  else {
    if ((int)uVar3 < 3) {
      if (-1 < (int)uVar3) {
LAB_00074c7c:
        sVar7 = (short)DAT_000b258c;
        sVar13 = (short)DAT_000b2588;
        goto LAB_00074c94;
      }
    }
    else if (uVar3 == 3) goto LAB_00074c7c;
    sVar13 = 0;
    sVar7 = 0;
  }
LAB_00074c94:
  uVar3 = ds2_attr << 1 | DAT_000b2548;
  if (uVar3 == 2) {
    sVar8 = (short)DAT_000b2544;
    sVar14 = (short)DAT_000b2540;
    goto LAB_00074cf8;
  }
  if ((int)uVar3 < 3) {
    if (-1 < (int)uVar3) goto LAB_00074ce0;
  }
  else if (uVar3 == 3) {
LAB_00074ce0:
    sVar8 = (short)DAT_000b2558;
    sVar14 = (short)DAT_000b2554;
    goto LAB_00074cf8;
  }
  sVar14 = 0;
  sVar8 = 0;
LAB_00074cf8:
  if (param_1 == 2) {
    psVar9 = (short *)(mask_attr_global + 0xaa);
    cVar1 = *mask_attr_global;
    psVar4 = (short *)(mask_attr_global + 0x72);
    while( true ) {
      if (cVar1 == '\x01') {
        psVar4[-0x38] = (sVar6 - psVar4[-0x35]) - psVar4[-0x38];
        cVar1 = *(char *)(psVar4 + -0x1d);
      }
      else {
        cVar1 = *(char *)(psVar4 + -0x1d);
      }
      if (cVar1 == '\x01') {
        psVar4[-0x1c] = (sVar7 - psVar4[-0x19]) - psVar4[-0x1c];
        cVar1 = *(char *)(psVar4 + -1);
      }
      else {
        cVar1 = *(char *)(psVar4 + -1);
      }
      if (cVar1 == '\x01') {
        *psVar4 = (sVar8 - psVar4[3]) - *psVar4;
      }
      if (psVar4 + 7 == psVar9) break;
      cVar1 = *(char *)(psVar4 + -0x32);
      psVar4 = psVar4 + 7;
    }
  }
  else if (param_1 == 3) {
    psVar9 = (short *)(mask_attr_global + 0xac);
    cVar1 = *mask_attr_global;
    psVar4 = (short *)(mask_attr_global + 0x74);
    while( true ) {
      if (cVar1 == '\x01') {
        psVar4[-0x38] = (sVar12 - psVar4[-0x37]) - psVar4[-0x38];
        psVar4[-0x39] = (sVar6 - psVar4[-0x36]) - psVar4[-0x39];
        cVar1 = *(char *)(psVar4 + -0x1e);
      }
      else {
        cVar1 = *(char *)(psVar4 + -0x1e);
      }
      if (cVar1 == '\x01') {
        psVar4[-0x1c] = (sVar13 - psVar4[-0x1b]) - psVar4[-0x1c];
        psVar4[-0x1d] = (sVar7 - psVar4[-0x1a]) - psVar4[-0x1d];
        cVar1 = *(char *)(psVar4 + -2);
      }
      else {
        cVar1 = *(char *)(psVar4 + -2);
      }
      if (cVar1 == '\x01') {
        *psVar4 = (sVar14 - psVar4[1]) - *psVar4;
        psVar4[-1] = (sVar8 - psVar4[2]) - psVar4[-1];
      }
      if (psVar9 == psVar4 + 7) break;
      cVar1 = *(char *)(psVar4 + -0x33);
      psVar4 = psVar4 + 7;
    }
  }
  else if (param_1 == 1) {
    iVar5 = 0;
    iVar10 = 0;
    do {
      if (mask_attr_global[iVar5] == '\x01') {
        isp_printf(1,"################# %s, %d: left=%d, top=%d\n","tisp_mscaler_mask_change",0x58f,
                   *(short *)(mask_attr_global + 4),*(short *)(mask_attr_global + 2));
        *(short *)(mask_attr_global + iVar5 + 4) =
             (sVar12 - *(short *)(mask_attr_global + iVar5 + 6)) -
             *(short *)(mask_attr_global + iVar5 + 4);
      }
      pcVar2 = mask_attr_global;
      if (mask_attr_global[iVar10 * 0xe + 0x38] == '\x01') {
        *(short *)(mask_attr_global + iVar10 * 0xe + 0x3c) =
             (sVar13 - *(short *)(mask_attr_global + iVar10 * 0xe + 0x3e)) -
             *(short *)(mask_attr_global + iVar10 * 0xe + 0x3c);
      }
      iVar11 = iVar10 + 1;
      if (pcVar2[iVar10 * 0xe + 0x70] == '\x01') {
        *(short *)(pcVar2 + iVar10 * 0xe + 0x74) =
             (sVar14 - *(short *)(pcVar2 + iVar10 * 0xe + 0x76)) -
             *(short *)(pcVar2 + iVar10 * 0xe + 0x74);
      }
      iVar5 = iVar11 * 0xe;
      iVar10 = iVar11;
    } while (iVar11 != 4);
  }
  return;
}



int
tisp_mscaler_mask_setreg
          (unsigned int param_1,unsigned int param_2,int param_3,int param_4,int param_5,
          int param_6,int param_7,char8 param_8,char8 param_10,
          int param_12,int param_13,int param_14,char8 param_15,
          char8 param_17,int param_19,int param_20,int param_21,
          char8 param_22,char8 param_24,int param_26,int param_27,
          int param_28,char8 param_29,char8 param_31,int param_33,
          int param_34,int param_35,char8 param_36,char8 param_38,
          int param_40,int param_41,int param_42)

{
  bool bVar1;
  bool bVar2;
  int iVar3;
  int iVar4;
  unsigned int uVar5;
  unsigned int uVar6;
  unsigned int uVar7;
  unsigned int unaff_s5;
  char local_res0 [4];
  char local_res4 [4];
  short local_res8;
  short uStackX_a;
  char local_resc;
  char uStackX_d;
  char cStackX_e;
  char uStackX_f;
  unsigned int uVar8;
  
  local_res4 = (char  [4])param_2;
  local_res8 = (short)param_3;
  uStackX_a = (short)((uint)param_3 >> 0x10);
  local_resc = (char)param_4;
  uStackX_d = (char)((uint)param_4 >> 8);
  cStackX_e = (char)((uint)param_4 >> 0x10);
  uStackX_f = (char)((uint)param_4 >> 0x18);
  uVar5 = (uint)(local_res4 + 1) & 3;
  iVar4 = *(int *)(local_res4 + 1 + -uVar5);
  uVar8 = param_1 >> 0x10;
  uVar7 = (uint)(local_res0 + 2) & 3;
  uVar6 = *(unsigned int *)(local_res0 + 2 + -uVar7);
  local_res0 = (char  [4])param_1;
  isp_printf(1,"################# %s, %d: left=%d, top=%d\n","tisp_mscaler_mask_setreg",0x5cf,
             param_2 & 0xffff,uVar8,uVar8);
  if (msca_ch_en == 0xffffffff) {
    msca_ch_en = 0;
  }
  iVar3 = system_reg_read(0x9968);
  bVar2 = iVar3 != 0;
  bVar1 = local_res0[0] != '\x01';
  if (bVar1) {
    system_reg_write(0x9938,0);
    system_reg_write(0x993c,0);
    system_reg_write(0x9940,0);
  }
  else {
    isp_printf(1,"################# %s, %d: left=%d, top=%d\n","tisp_mscaler_mask_setreg",0x5d5,
               param_2 & 0xffff,uVar8);
    system_reg_write(0x9938,(iVar4 << (3 - uVar5) * 8 | unaff_s5 & 0xffffffffU >> (uVar5 + 1) * 8) &
                            -1 << (4 - uVar7) * 8 | uVar6 >> uVar7 * 8);
    system_reg_write(0x993c,local_res8);
    system_yvu_or_yuv(bVar2,0x9940,(uint)CONCAT12(local_resc,uStackX_a));
  }
  uVar5 = (uint)!bVar1;
  if (cStackX_e == '\x01') {
    system_reg_write(0x9944,param_5);
    system_reg_write(0x9948,CONCAT22((short)param_6,param_6._2_2_));
    system_yvu_or_yuv(bVar2,0x994c,param_7);
    uVar5 = 1;
  }
  else {
    system_reg_write(0x9944,0);
    system_reg_write(0x9948,0);
    system_reg_write(0x994c,0);
  }
  if ((char)param_8 == '\x01') {
    uVar5 = 1;
    system_reg_write(0x9950,param_8._2_4_);
    system_reg_write(0x9954,(short)param_10);
    system_yvu_or_yuv(bVar2,0x9958,(uint)param_10._2_3_);
  }
  else {
    system_reg_write(0x9950,0);
    system_reg_write(0x9954,0);
    system_reg_write(0x9958,0);
  }
  if (param_10._6_1_ == '\x01') {
    system_reg_write(0x995c,param_12);
    system_reg_write(0x9960,CONCAT22((short)param_13,param_13._2_2_));
    system_yvu_or_yuv(bVar2,0x9964,param_14);
    uVar5 = 1;
  }
  else {
    system_reg_write(0x995c,0);
    system_reg_write(0x9960,0);
    system_reg_write(0x9964,0);
  }
  iVar4 = system_reg_read(0x9a68);
  bVar1 = iVar4 != 0;
  if ((char)param_15 != '\x01') {
    system_reg_write(0x9a38,0);
    system_reg_write(0x9a3c,0);
    system_reg_write(0x9a40,0);
  }
  else {
    system_reg_write(0x9a38,param_15._2_4_);
    system_reg_write(0x9a3c,(short)param_17);
    system_yvu_or_yuv(bVar1,0x9a40,(uint)param_17._2_3_);
  }
  uVar7 = (uint)((char)param_15 == '\x01');
  if (param_17._6_1_ == '\x01') {
    system_reg_write(0x9a44,param_19);
    system_reg_write(0x9a48,CONCAT22((short)param_20,param_20._2_2_));
    system_yvu_or_yuv(bVar1,0x9a4c,param_21);
    uVar7 = 1;
  }
  else {
    system_reg_write(0x9a44,0);
    system_reg_write(0x9a48,0);
    system_reg_write(0x9a4c,0);
  }
  if ((char)param_22 == '\x01') {
    uVar7 = 1;
    system_reg_write(0x9a50,param_22._2_4_);
    system_reg_write(0x9a54,(short)param_24);
    system_yvu_or_yuv(bVar1,0x9a58,(uint)param_24._2_3_);
  }
  else {
    system_reg_write(0x9a50,0);
    system_reg_write(0x9a54,0);
    system_reg_write(0x9a58,0);
  }
  if (param_24._6_1_ == '\x01') {
    system_reg_write(0x9a5c,param_26);
    system_reg_write(0x9a60,CONCAT22((short)param_27,param_27._2_2_));
    system_yvu_or_yuv(bVar1,0x9a64,param_28);
    uVar7 = 1;
  }
  else {
    system_reg_write(0x9a5c,0);
    system_reg_write(0x9a60,0);
    system_reg_write(0x9a64,0);
  }
  iVar4 = system_reg_read(0x9b68);
  bVar1 = iVar4 != 0;
  if ((char)param_29 != '\x01') {
    system_reg_write(0x9b38,0);
    system_reg_write(0x9b3c,0);
    system_reg_write(0x9b40,0);
  }
  else {
    system_reg_write(0x9b38,param_29._2_4_);
    system_reg_write(0x9b3c,(short)param_31);
    system_yvu_or_yuv(bVar1,0x9b40,(uint)param_31._2_3_);
  }
  uVar6 = (uint)((char)param_29 == '\x01');
  if (param_31._6_1_ == '\x01') {
    system_reg_write(0x9b44,param_33);
    system_reg_write(0x9b48,CONCAT22((short)param_34,param_34._2_2_));
    system_yvu_or_yuv(bVar1,0x9b4c,param_35);
    uVar6 = 1;
  }
  else {
    system_reg_write(0x9b44,0);
    system_reg_write(0x9b48,0);
    system_reg_write(0x9b4c,0);
  }
  if ((char)param_36 == '\x01') {
    uVar6 = 1;
    system_reg_write(0x9b50,param_36._2_4_);
    system_reg_write(0x9b54,(short)param_38);
    system_yvu_or_yuv(bVar1,0x9b58,(uint)param_38._2_3_);
  }
  else {
    system_reg_write(0x9b50,0);
    system_reg_write(0x9b54,0);
    system_reg_write(0x9b58,0);
  }
  if (param_38._6_1_ == '\x01') {
    system_reg_write(0x9b5c,param_40);
    system_reg_write(0x9b60,CONCAT22((short)param_41,param_41._2_2_));
    system_yvu_or_yuv(bVar1,0x9b64,param_42);
    uVar6 = 1;
  }
  else {
    system_reg_write(0x9b5c,0);
    system_reg_write(0x9b60,0);
    system_reg_write(0x9b64,0);
  }
  msca_ch_en = uVar5 << 3 | uVar7 << 4 | uVar6 << 5 | msca_ch_en & 0xffffffc7 | 0xe0000;
  system_reg_write(0x9804);
  return 0;
}



int
tisp_s_mscaler_mask_attr
          (int param_1,int param_2,int param_3,int param_4)

{
  unsigned int uVar1;
  int local_res0;
  int local_res4;
  int local_res8;
  int local_resc;
  char local_b0 [160];
  
  local_res0 = param_1;
  local_res4 = param_2;
  local_res8 = param_3;
  local_resc = param_4;
  if (mask_attr_global == (int *)0x0) {
    mask_attr_global = (int *)private_kmalloc(0xac,0xd0);
  }
  if (mask_attr_global_bak == (void *)0x0) {
    mask_attr_global_bak = (void *)private_kmalloc(0xac,0xd0);
  }
  memset(mask_attr_global,0,0xac);
  memset(mask_attr_global_bak,0,0xac);
  memcpy(mask_attr_global,&local_res0,0xac);
  memcpy(mask_attr_global_bak,&local_res0,0xac);
  if (hvflip_last != 0) {
    tisp_mscaler_mask_change();
  }
  for (uVar1 = 0; uVar1 < 0x9c; uVar1 = uVar1 + 1) {
    local_b0[uVar1] = *(char *)((int)mask_attr_global + uVar1 + 0x10);
  }
  tisp_mscaler_mask_setreg
            (*mask_attr_global,mask_attr_global[1],mask_attr_global[2],mask_attr_global[3]);
  return 0;
}



int tisp_g_mscaler_mask_attr(int param_1)

{
  code *pcVar1;
  
  if (mask_attr_global_bak == 0) {
    pcVar1 = memset;
  }
  else {
    pcVar1 = memcpy;
  }
  (*pcVar1)(param_1,mask_attr_global_bak,0xac);
  return 0;
}



void tisp_s_mscaler_hvflip_mask(unsigned int param_1)

{
  unsigned int uVar1;
  char local_b0 [160];
  
  if (mask_attr_global != (int *)0x0) {
    tisp_mscaler_mask_change(param_1 & 0xff ^ hvflip_last);
    for (uVar1 = 0; uVar1 < 0x9c; uVar1 = uVar1 + 1) {
      local_b0[uVar1] = *(char *)((int)mask_attr_global + uVar1 + 0x10);
    }
    tisp_mscaler_mask_setreg
              (*mask_attr_global,mask_attr_global[1],mask_attr_global[2],mask_attr_global[3]);
  }
  hvflip_last = param_1 & 0xff;
  return;
}



void tisp_s_ev_start(void)

{
  tiziano_ae_s_ev_start();
  return;
}



void tisp_s_awb_start(void)

{
  tiziano_s_awb_start();
  return;
}



void tisp_g_awb_start(void)

{
  tiziano_g_awb_start();
  return;
}



int tisp_s_awb_algo(void)

{
  tiziano_s_wb_algo();
  return 0;
}



void tisp_deinit_free(void)

{
  if (mask_attr_global != 0) {
    private_kfree();
    mask_attr_global = 0;
  }
  if (mask_attr_global_bak != 0) {
    private_kfree();
    mask_attr_global_bak = 0;
  }
  return;
}



int tisp_s_ae_it_max(int param_1)

{
  unsigned int uVar1;
  char local_128 [136];
  int local_a0;
  int local_9c;
  int local_98;
  int local_94;
  char local_90 [12];
  int local_84;
  
  memcpy(&local_a0,&tisp_ae_ctrls,0x98);
  local_84 = param_1;
  for (uVar1 = 0; uVar1 < 0x88; uVar1 = uVar1 + 1) {
    local_128[uVar1] = local_90[uVar1];
  }
  tisp_ae_min_max_set(local_a0,local_9c,local_98,local_94);
  return 0;
}



int tisp_g_ae_it_max(int *param_1)

{
  *param_1 = DAT_000d3e88;
  return 0;
}



int tisp_s_adr_enable(int param_1)

{
  unsigned int uVar1;
  
  uVar1 = system_reg_read(0xc);
  if (param_1 == 1) {
    tiziano_adr_init(sensor_info,DAT_000b25dc);
    uVar1 = uVar1 & 0xffffff7f;
  }
  else {
    uVar1 = uVar1 | 0x80;
    if (param_1 != 0) {
      isp_printf(2,"adr enable error!!! mode is %d\n",param_1);
      return 0xffffffff;
    }
  }
  system_reg_write(0xc,uVar1);
  return 0;
}



int tisp_s_defog_enable(unsigned int param_1)

{
  unsigned int uVar1;
  code *pcVar2;
  int uVar3;
  
  uVar1 = system_reg_read(0xc);
  if (((uVar1 >> 0xb ^ 1) & 1) != param_1) {
    if (param_1 == 1) {
      system_reg_write(0xc,uVar1 & 0xfffff7ff);
      pcVar2 = tiziano_defog_init;
      uVar3 = sensor_info;
      uVar1 = DAT_000b25dc;
    }
    else {
      if (param_1 != 0) {
        isp_printf(2,"defog enable error!!! mode is %d\n",param_1);
        return 0xffffffff;
      }
      uVar1 = uVar1 | 0x800;
      uVar3 = 0xc;
      pcVar2 = system_reg_write;
    }
    (*pcVar2)(uVar3,uVar1);
  }
  return 0;
}



int tisp_set_ae_freeze(int param_1)

{
  unsigned int uVar1;
  char local_128 [136];
  int local_a0;
  int local_9c;
  int local_98;
  int local_94;
  char local_90 [80];
  int local_40;
  
  memset(&local_a0,0,0x98);
  memcpy(&local_a0,&tisp_ae_ctrls,0x98);
  if (param_1 == 1) {
    local_40 = param_1;
  }
  else {
    if (param_1 != 0) {
      isp_printf(2,"ae freeze mode error!!! mode is %d\n",param_1);
      return 0xffffffff;
    }
    local_40 = 0;
  }
  local_a0 = local_40;
  for (uVar1 = 0; uVar1 < 0x88; uVar1 = uVar1 + 1) {
    local_128[uVar1] = local_90[uVar1];
  }
  tisp_ae_manual_set(local_a0,local_9c,local_98,local_94);
  return 0;
}



void tisp_get_antiflicker_step(void)

{
  tisp_ae_get_antiflicker_step();
  return;
}



void tisp_set_ae_attr(int *param_1)

{
  unsigned int uVar1;
  char local_90 [140];
  
  for (uVar1 = 0; uVar1 < 0x88; uVar1 = uVar1 + 1) {
    local_90[uVar1] = *(char *)((int)param_1 + uVar1 + 0x10);
  }
  tisp_ae_manual_set(*param_1,param_1[1],param_1[2],param_1[3]);
  return;
}



void tisp_get_ae_attr(void)

{
  tisp_ae_manual_get();
  return;
}



void tisp_get_ae_state(void)

{
  tisp_ae_state_get();
  return;
}



int tisp_get_blc_attr(unsigned int *param_1)

{
  ushort uVar1;
  unsigned int uVar2;
  ushort auStack_68 [24];
  unsigned int local_38 [4];
  unsigned int local_28;
  unsigned int local_24;
  
  uVar2 = system_reg_read(8);
  uVar2 = uVar2 & 0x1f;
  memcpy(auStack_68,&DAT_0007d8b4,0x30);
  if (0x17 < uVar2) {
    uVar2 = 0;
  }
  uVar1 = auStack_68[uVar2];
  local_38[0] = 0;
  local_38[1] = 0;
  local_38[2] = 0;
  local_38[3] = 0;
  local_28 = 0;
  tisp_g_module_control(&local_24);
  if ((local_24 & 9) == 9) {
    local_38[0] = system_reg_read(0x1060);
    local_38[0] = local_38[0] & 0xfff;
    uVar2 = system_reg_read(0x1064);
    local_38[1] = uVar2 & 0xfff;
    local_38[2] = uVar2 >> 0x10 & 0xfff;
    uVar2 = system_reg_read(0x1068);
    local_38[3] = uVar2 & 0xfff;
    uVar2 = uVar2 >> 0x10;
  }
  else {
    uVar2 = system_reg_read(0x1018);
    local_38[0] = uVar2 & 0xfff;
    local_38[1] = uVar2 >> 0x10 & 0xfff;
    uVar2 = system_reg_read(0x101c);
    local_38[2] = uVar2 & 0xfff;
    local_38[3] = uVar2 >> 0x10 & 0xfff;
    uVar2 = system_reg_read(0x1020);
  }
  local_28 = uVar2 & 0xfff;
  *param_1 = local_38[uVar1 & 7];
  param_1[1] = local_38[uVar1 >> 3 & 7];
  param_1[2] = local_38[uVar1 >> 6 & 7];
  param_1[3] = local_38[uVar1 >> 9 & 7];
  param_1[4] = local_38[uVar1 >> 0xc & 7];
  return 0;
}



int tisp_set_defog_strength(void)

{
  tisp_s_defog_str_internal();
  return 0;
}



int tisp_get_defog_strength(void)

{
  tisp_g_defog_str_internal();
  return 0;
}



int tisp_set_csc_attr(unsigned int *param_1)

{
  unsigned int uVar1;
  
  uVar1 = *param_1;
  if (uVar1 < 4) {
    tisp_set_csc_version(uVar1);
  }
  else if (uVar1 == 4) {
    tisp_set_user_csc(param_1 + 1);
  }
  return 0;
}



int tisp_get_csc_attr(int param_1)

{
  tisp_get_current_csc(param_1,param_1 + 4);
  return 0;
}



void tisp_ae_algo_deinit(void)

{
  tisp_ae_deinit();
  return;
}



void tisp_awb_algo_deinit(void)

{
  tisp_awb_deinit();
  return;
}



int tisp_set_wdr_output_mode(int *param_1)

{
  int iVar1;
  int local_48 [14];
  int local_10 [2];
  
  local_10[0] = 0x38;
  tisp_wdr_param_array_get(0x431,local_48,local_10);
  iVar1 = *param_1;
  if (iVar1 != 1) {
    if (iVar1 == 0) {
      local_48[0] = 8;
      iVar1 = local_48[0];
    }
    else if (iVar1 != 2) {
      isp_printf(1,"The change mode is not supported.\n");
      iVar1 = local_48[0];
    }
  }
  local_48[0] = iVar1;
  tisp_wdr_param_array_set(0x431,local_48,local_10);
  return 0;
}



int tisp_get_wdr_output_mode(int *param_1)

{
  int local_48 [14];
  int local_10 [2];
  
  local_10[0] = 0x38;
  tisp_wdr_param_array_get(0x431,local_48,local_10);
  if (local_48[0] != 2) {
    if (local_48[0] == 8) {
      *param_1 = 0;
      return 0;
    }
    if (local_48[0] != 1) {
      isp_printf(1,"The change mode is not supported.\n");
      return 0;
    }
  }
  *param_1 = local_48[0];
  return 0;
}



int tisp_set_bcsh_fixed_contrast(char *param_1)

{
  tisp_bcsh_set_mjpeg_contrast(*param_1,param_1[1],param_1[2]);
  return 0;
}



int tisp_set_frame_drop(int param_1,int *param_2)

{
  int iVar1;
  int iVar2;
  int uVar3;
  
  if (*(char *)(param_2 + 1) < 0x20) {
    iVar1 = (param_1 + 0x98) * 0x100;
    iVar2 = iVar1 + 0x134;
    if (*param_2 == 0) {
      system_reg_write(iVar1 + 0x130,0);
      system_reg_write(iVar2,1);
      uVar3 = 0;
    }
    else {
      uVar3 = 0;
      system_reg_write();
      system_reg_write(iVar2,param_2[2]);
    }
  }
  else {
    isp_printf(1,"FPS over 31 in the numerator or denominator!!! Setup failed!!!\n");
    uVar3 = 0xffffffff;
  }
  return uVar3;
}



int tisp_get_frame_drop(int param_1,int *param_2)

{
  char uVar1;
  int uVar2;
  int iVar3;
  
  iVar3 = (param_1 + 0x98) * 0x100;
  uVar1 = system_reg_read(iVar3 + 0x130);
  *(char *)(param_2 + 1) = uVar1;
  uVar2 = system_reg_read(iVar3 + 0x134);
  param_2[2] = uVar2;
  *param_2 = 1;
  return 0;
}



void tisp_s_rgb_coefft(void)

{
  tisp_bcsh_s_rgb_coefft();
  return;
}



void tisp_g_rgb_coefft(void)

{
  tisp_bcsh_g_rgb_coefft();
  return;
}



void tisp_lsc_hvflip(void)

{
  tisp_lsc_mirror_flip();
  return;
}



int ispcore_sensor_ops_release_all_sensor(int param_1)

{
  int iVar1;
  code **ppcVar2;
  code *pcVar3;
  int iVar4;
  int *piVar5;
  
  iVar1 = 0;
  piVar5 = (int *)(param_1 + 0x38);
  iVar4 = *piVar5;
  do {
    if (iVar4 != 0) {
      ppcVar2 = *(code ***)(*(int *)(iVar4 + 0xc4) + 0xc);
      if ((ppcVar2 != (code **)0x0) && (pcVar3 = *ppcVar2, pcVar3 != (code *)0x0)) {
        iVar1 = (*pcVar3)();
        if (iVar1 == 0) goto LAB_00076334;
        if (iVar1 != -0x203) {
          return iVar1;
        }
      }
      iVar1 = -0x203;
    }
LAB_00076334:
    piVar5 = piVar5 + 1;
    if (piVar5 == (int *)(param_1 + 0x78)) {
      if (iVar1 == -0x203) {
        iVar1 = 0;
      }
      return iVar1;
    }
    iVar4 = *piVar5;
  } while( true );
}



int ispcore_sensor_ops_ioctl(int param_1,int param_2,int param_3)

{
  int iVar1;
  code *pcVar2;
  int iVar3;
  int *piVar4;
  
  iVar1 = 0;
  piVar4 = (int *)(param_1 + 0x38);
  iVar3 = *piVar4;
  do {
    if (iVar3 != 0) {
      iVar1 = *(int *)(*(int *)(iVar3 + 0xc4) + 0xc);
      if ((iVar1 != 0) && (pcVar2 = *(code **)(iVar1 + 8), pcVar2 != (code *)0x0)) {
        iVar1 = (*pcVar2)(iVar3,param_2,param_3);
        if (iVar1 == 0) goto LAB_000763e4;
        if (iVar1 != -0x203) {
          return iVar1;
        }
      }
      iVar1 = -0x203;
    }
LAB_000763e4:
    piVar4 = piVar4 + 1;
    if (piVar4 == (int *)(param_1 + 0x78)) {
      if (iVar1 == -0x203) {
        iVar1 = 0;
      }
      return iVar1;
    }
    iVar3 = *piVar4;
  } while( true );
}



void ispcore_irq_fs_work(void)

{
  int uVar1;
  int iVar2;
  int *piVar3;
  int iVar4;
  int local_30 [3];
  
  iVar4 = *(int *)(ispcore_sd + 0xd4);
  if (iVar4 != 0) {
    piVar3 = (int *)(iVar4 + 0x180);
    iVar2 = 0;
    uVar1 = 0;
    do {
      if (*piVar3 != 0) {
        switch(iVar2) {
        case 0:
          uVar1 = 0x2000007;
          break;
        case 1:
          uVar1 = 0x2000008;
          break;
        case 2:
          uVar1 = 0x2000009;
          break;
        case 3:
          uVar1 = 0x2000005;
          break;
        case 4:
          uVar1 = 0x2000006;
          break;
        case 5:
          break;
        case 6:
          uVar1 = 0x2000016;
          break;
        default:
          goto LAB_0007651c;
        }
        local_30[0] = piVar3[1];
        if (*(int *)(*(int *)(iVar4 + 0x120) + 0xf0) == 1) {
          ispcore_sensor_ops_ioctl(ispcore_sd,uVar1,local_30);
          *piVar3 = 0;
        }
      }
LAB_0007651c:
      iVar2 = iVar2 + 1;
      piVar3 = piVar3 + 2;
    } while (iVar2 != 7);
  }
  return;
}



int ispcore_link_setup(void)

{
  return 0;
}



void isp_pre_frame_dequeue(void)

{
  int iVar1;
  char auStack_38 [8];
  int local_30;
  int local_2c;
  int local_28;
  int local_24;
  unsigned int local_20;
  char auStack_18 [12];
  
  iVar1 = *(int *)(ispcore_sd + 0xd4);
  private_ktime_set(auStack_18,isp_ch0_pre_dequeue_time / 1000,
                    (isp_ch0_pre_dequeue_time % 1000) * 1000000);
  private_set_current_state(2);
  private_schedule_hrtimeout(auStack_18,1);
  local_24 = 1;
  local_20 = (uint)*(ushort *)(iVar1 + 0x128) << 0x10 |
             *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9888) >> 0x10;
  local_30 = 0;
  local_2c = 0;
  local_28 = 0;
  tx_isp_send_event_to_remote(*(int *)(*(int *)(iVar1 + 0x150) + 0x78),0x3000006,auStack_38);
  return;
}



void isp_ch1_frame_dequeue_delay(void)

{
  int iVar1;
  char auStack_10 [8];
  
  iVar1 = *(int *)(ispcore_sd + 0xd4);
  private_ktime_set(auStack_10,isp_ch1_dequeue_delay_time / 1000,
                    isp_ch1_dequeue_delay_time * 1000000);
  private_set_current_state(2);
  private_schedule_hrtimeout(auStack_10,1);
  tx_isp_send_event_to_remote(*(int *)(*(int *)(iVar1 + 0x150) + 0x13c),0x3000006,ch1_buf);
  return;
}



int ispcore_frame_channel_dqbuf(int param_1,int param_2)

{
  if (param_1 != 0) {
    tx_isp_send_event_to_remote(param_1,0x3000006,param_2);
    return 0;
  }
  return 0;
}



int ispcore_core_ops_ioctl(int param_1,int param_2,int *param_3)

{
  code *pcVar1;
  int iVar2;
  int *puVar3;
  int iVar4;
  int *piVar5;
  
  if (param_2 == 0x1000000) {
    if (param_1 == 0) {
LAB_000767f4:
      iVar4 = -0x13;
      goto LAB_000767f8;
    }
    iVar4 = -0x203;
    if ((**(int **)(param_1 + 0xc4) == 0) ||
       (pcVar1 = *(code **)(**(int **)(param_1 + 0xc4) + 4), pcVar1 == (code *)0x0))
    goto LAB_000767e0;
    puVar3 = (int *)*param_3;
  }
  else {
    if (param_2 != 0x1000001) {
      iVar4 = 0;
      goto LAB_000767e0;
    }
    if (param_1 == 0) goto LAB_000767f4;
    iVar4 = *(int *)(*(int *)(param_1 + 0xc4) + 0xc);
    if (iVar4 == 0) {
      iVar4 = -0x203;
      goto LAB_000767e0;
    }
    pcVar1 = *(code **)(iVar4 + 4);
    puVar3 = param_3;
    if (pcVar1 == (code *)0x0) {
      iVar4 = -0x203;
      goto LAB_000767e0;
    }
  }
  iVar4 = (*pcVar1)(param_1,puVar3);
  if (iVar4 != 0) {
    if (iVar4 != -0x203) {
LAB_000767f8:
      isp_printf(2,"%s %d Failed to ioctl!\n","ispcore_core_ops_ioctl",0x419);
      return iVar4;
    }
    iVar4 = -0x203;
  }
LAB_000767e0:
  piVar5 = (int *)(param_1 + 0x38);
  iVar2 = *piVar5;
  do {
    if (iVar2 != 0) {
      if (param_2 == 0x1000000) {
        iVar4 = -0x203;
        if (**(int **)(iVar2 + 0xc4) != 0) {
          pcVar1 = *(code **)(**(int **)(iVar2 + 0xc4) + 4);
          if (pcVar1 != (code *)0x0) {
            puVar3 = (int *)*param_3;
LAB_00076880:
            iVar4 = (*pcVar1)(iVar2,puVar3);
            goto LAB_0007688c;
          }
          goto LAB_000768a8;
        }
      }
      else if (param_2 == 0x1000001) {
        iVar4 = *(int *)(*(int *)(iVar2 + 0xc4) + 0xc);
        if ((iVar4 != 0) &&
           (pcVar1 = *(code **)(iVar4 + 4), puVar3 = param_3, pcVar1 != (code *)0x0))
        goto LAB_00076880;
      }
      else {
LAB_0007688c:
        if (iVar4 == 0) goto LAB_000768a8;
        if (iVar4 != -0x203) {
          return iVar4;
        }
      }
      iVar4 = -0x203;
    }
LAB_000768a8:
    piVar5 = piVar5 + 1;
    if (piVar5 == (int *)(param_1 + 0x78)) {
      if (iVar4 != -0x203) {
        return iVar4;
      }
      return 0;
    }
    iVar2 = *piVar5;
  } while( true );
}



int isp_fw_process(void)

{
  int iVar1;
  
  while (iVar1 = private_kthread_should_stop(), iVar1 == 0) {
    tisp_fw_process();
  }
  return 0;
}



int ispcore_irq_thread_handle(unsigned int param_1)

{
  int iVar1;
  code *pcVar2;
  int iVar3;
  int uVar4;
  int iVar5;
  int *piVar6;
  int local_30 [3];
  
  iVar5 = 0;
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    iVar5 = *(int *)(param_1 + 0xd4);
  }
  local_30[0] = 0;
  if (((param_1 != 0) && (iVar1 = *(int *)(*(int *)(param_1 + 0xc4) + 0xc), iVar1 != 0)) &&
     (pcVar2 = *(code **)(iVar1 + 8), pcVar2 != (code *)0x0)) {
    (*pcVar2)(param_1,0x2000015,local_30);
  }
  if (iVar5 != 0) {
    piVar6 = (int *)(iVar5 + 0x180);
    iVar1 = 0;
    uVar4 = 0;
    do {
      if (*piVar6 != 0) {
        switch(iVar1) {
        case 1:
          uVar4 = 0x2000008;
          break;
        case 2:
          uVar4 = 0x2000009;
          break;
        case 3:
          uVar4 = 0x2000005;
          break;
        case 4:
          uVar4 = 0x2000006;
          break;
        case 5:
          if (param_1 == 0) {
            *(int *)(iVar5 + 0x1a8) = 0;
          }
          else {
            iVar3 = *(int *)(*(int *)(param_1 + 0xc4) + 0xc);
            if (iVar3 == 0) {
              *(int *)(iVar5 + 0x1a8) = 0;
            }
            else {
              pcVar2 = *(code **)(iVar3 + 8);
              if (pcVar2 != (code *)0x0) {
                (*pcVar2)(param_1,0x2000010,iVar5 + 0x1ac);
              }
              *(int *)(iVar5 + 0x1a8) = 0;
            }
          }
          break;
        case 6:
          uVar4 = 0x2000016;
          break;
        default:
          uVar4 = 0x2000007;
        }
        local_30[0] = piVar6[1];
        if ((iVar1 != 5) && (*(int *)(*(int *)(iVar5 + 0x120) + 0xf0) == 0)) {
          ispcore_sensor_ops_ioctl(param_1,uVar4,local_30);
          *piVar6 = 0;
        }
      }
      iVar1 = iVar1 + 1;
      piVar6 = piVar6 + 2;
    } while (iVar1 != 7);
  }
  return 0;
}



int ispcore_frame_channel_streamoff(unsigned int *param_1)

{
  unsigned int uVar1;
  int iVar2;
  void *__s;
  int iVar3;
  int local_28 [3];
  
  uVar1 = *param_1;
  iVar2 = 0;
  if ((uVar1 != 0) && (uVar1 < 0xfffff001)) {
    iVar2 = *(int *)(uVar1 + 0xd4);
  }
  __s = (void *)param_1[8];
  iVar3 = *(int *)(iVar2 + 0x120);
  local_28[0] = 0;
  if (*(int *)(iVar2 + 0x15c) == 1) {
    if (*(code **)(iVar2 + 0x1cc) != (code *)0x0) {
      (**(code **)(iVar2 + 0x1cc))(*(int *)(iVar2 + 0x1d0),0);
    }
  }
  else if (*(char *)((int)param_1 + 7) == '\x04') {
    __private_spin_lock_irqsave((int)__s + 0x9c,local_28);
    if (*(int *)((int)__s + 0x74) == 4) {
      private_spin_unlock_irqrestore((int)__s + 0x9c,local_28[0]);
      tisp_channel_stop(*(char *)(param_1 + 1));
      *(int *)((int)__s + 0x74) = 3;
      *(char *)((int)param_1 + 7) = 3;
      memset(__s,0,0x70);
      *(int *)(iVar3 + 0x9c) = 0;
      *(int *)(iVar3 + 0xac) = 0;
      *(int *)(iVar2 + 0x17c) = 0;
    }
    else {
      private_spin_unlock_irqrestore();
    }
  }
  return 0;
}



void dump_isp_info_open(int param_1,int param_2)

{
  int uVar1;
  
  uVar1 = PDE_DATA();
  private_single_open_size(param_2,isp_core_debug_show,uVar1,0x2000);
  return;
}



int isp_core_cmd_set(int param_1,int param_2,int param_3)

{
  char cVar1;
  char cVar2;
  char *pcVar3;
  int iVar4;
  char *pcVar5;
  char *pcVar6;
  char cVar7;
  
  pcVar3 = (char *)private_kmalloc(param_3 + 1,0xd0);
  iVar4 = -0xc;
  if (pcVar3 != (char *)0x0) {
    iVar4 = private_copy_from_user(pcVar3,param_2,param_3);
    if (iVar4 == 0) {
      pcVar5 = "get_vb";
      iVar4 = 6;
      pcVar6 = pcVar3;
      while( true ) {
        cVar1 = *pcVar6;
        cVar2 = *pcVar5;
        cVar7 = cVar2;
        if (iVar4 == 0) break;
        iVar4 = iVar4 + -1;
        pcVar6 = pcVar6 + 1;
        cVar7 = cVar1;
        if ((cVar2 != cVar1) || (pcVar5 = pcVar5 + 1, cVar7 = cVar2, cVar1 == '\0')) break;
      }
      if (cVar7 == cVar2) {
        isp_core_debug_type = 1;
        frame_vb_measure = 1;
        private_msleep(200);
      }
      else {
        pcVar5 = "set_ch0_pdq_time";
        iVar4 = 0x10;
        pcVar6 = pcVar3;
        while( true ) {
          cVar1 = *pcVar6;
          cVar2 = *pcVar5;
          cVar7 = cVar2;
          if (iVar4 == 0) break;
          iVar4 = iVar4 + -1;
          pcVar6 = pcVar6 + 1;
          cVar7 = cVar1;
          if ((cVar2 != cVar1) || (pcVar5 = pcVar5 + 1, cVar7 = cVar2, cVar1 == '\0')) break;
        }
        if (cVar7 == cVar2) {
          isp_ch0_pre_dequeue_time = simple_strtoull(pcVar3 + 0x11,0,0);
        }
        else {
          pcVar5 = "set_ch0_pdq_inter";
          iVar4 = 0x11;
          pcVar6 = pcVar3;
          while( true ) {
            cVar1 = *pcVar6;
            cVar2 = *pcVar5;
            cVar7 = cVar2;
            if (iVar4 == 0) break;
            iVar4 = iVar4 + -1;
            pcVar6 = pcVar6 + 1;
            cVar7 = cVar1;
            if ((cVar2 != cVar1) || (pcVar5 = pcVar5 + 1, cVar7 = cVar2, cVar1 == '\0')) break;
          }
          if (cVar7 == cVar2) {
            isp_ch0_pre_dequeue_interrupt_process = simple_strtoull(pcVar3 + 0x12,0,0);
          }
          else {
            pcVar5 = "set_ch0_pdq_vlines";
            iVar4 = 0x12;
            pcVar6 = pcVar3;
            while( true ) {
              cVar1 = *pcVar6;
              cVar2 = *pcVar5;
              cVar7 = cVar2;
              if (iVar4 == 0) break;
              iVar4 = iVar4 + -1;
              pcVar6 = pcVar6 + 1;
              cVar7 = cVar1;
              if ((cVar2 != cVar1) || (pcVar5 = pcVar5 + 1, cVar7 = cVar2, cVar1 == '\0')) break;
            }
            if (cVar7 == cVar2) {
              isp_ch0_pre_dequeue_valid_lines = simple_strtoull(pcVar3 + 0x13,0,0);
            }
          }
        }
      }
      private_kfree(pcVar3);
      iVar4 = param_3;
    }
    else {
      private_kfree(pcVar3);
      iVar4 = -0xe;
    }
  }
  return iVar4;
}



int ispcore_sync_sensor_attr(unsigned int param_1,void *param_2)

{
  int iVar1;
  unsigned int uVar2;
  int local_68;
  int local_64;
  int local_4c;
  int local_48;
  unsigned int local_3c;
  short local_38;
  short local_36;
  short local_34;
  short local_32;
  short local_2c;
  ushort local_2a;
  short local_28;
  short local_26;
  short local_24;
  short local_22;
  short local_20;
  short local_1e;
  short local_1c;
  int local_14;
  
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    uVar2 = *(unsigned int *)(param_1 + 0xd4);
    if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
      if (param_2 != (void *)0x0) {
        memcpy((void *)(uVar2 + 0xec),param_2,0x4c);
        local_68 = *(int *)(uVar2 + 0x124);
        local_3c = *(unsigned int *)(uVar2 + 300);
        local_64 = *(int *)(uVar2 + 0x128);
        iVar1 = *(int *)(uVar2 + 0x120);
        local_4c = *(int *)(iVar1 + 0x94);
        local_48 = *(int *)(iVar1 + 0x98);
        local_2a = *(ushort *)(iVar1 + 0xb2);
        local_38 = *(short *)(iVar1 + 0xa4);
        local_36 = *(short *)(iVar1 + 0xa6);
        local_34 = *(short *)(iVar1 + 0xa8);
        local_32 = *(short *)(iVar1 + 0xaa);
        local_2c = *(short *)(iVar1 + 0xb0);
        local_28 = *(short *)(iVar1 + 0xb4);
        local_26 = *(short *)(iVar1 + 0xb6);
        local_24 = *(short *)(iVar1 + 0xb8);
        local_22 = *(short *)(iVar1 + 0xba);
        *(short *)(iVar1 + 0xbc) =
             (short)((((local_3c & 0xffff) * 1000000) / (local_3c >> 0x10)) / (uint)local_2a);
        iVar1 = *(int *)(uVar2 + 0x120);
        local_20 = *(short *)(iVar1 + 0xbc);
        local_1e = *(short *)(iVar1 + 0xd8);
        local_1c = *(short *)(iVar1 + 0xda);
        local_14 = *(int *)(iVar1 + 0xe0);
        tiziano_sync_sensor_attr(&local_68);
        return 0;
      }
      memset((void *)(uVar2 + 0xec),0,0x4c);
      return 0;
    }
  }
  isp_printf(2,"The parameter is invalid!\n");
  return 0xffffffea;
}



int isp_info_show_isra_0(int param_1)

{
  bool bVar1;
  unsigned int uVar2;
  int iVar3;
  int *__s;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int uVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  int iVar17;
  int iVar18;
  int iVar19;
  int iVar20;
  int iVar21;
  int iVar22;
  int iVar23;
  int iVar24;
  int iVar25;
  int iVar26;
  int iVar27;
  int iVar28;
  int iVar29;
  int iVar30;
  int iVar31;
  int iVar32;
  int iVar33;
  int iVar34;
  int iVar35;
  int iVar36;
  int iVar37;
  unsigned int uVar38;
  char *pcVar39;
  int iVar40;
  int iVar41;
  int *puVar42;
  int iVar43;
  char *pcVar44;
  int local_e8;
  int local_e4;
  int local_e0;
  int local_dc;
  int local_d8;
  int local_d4;
  int local_d0;
  int local_c8;
  int local_c4;
  int local_c0;
  int local_bc;
  short local_7a;
  char auStack_68 [20];
  unsigned int local_54;
  unsigned int local_50;
  int local_4c;
  int local_48;
  int local_3c;
  int local_38;
  unsigned int local_34;
  int local_30 [3];
  
  uVar2 = *(unsigned int *)(param_1 + 0x3c);
  iVar41 = 0;
  if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
    iVar41 = *(int *)(uVar2 + 0xd4);
  }
  local_30[0] = 5000;
  iVar43 = *(int *)(iVar41 + 0x1bc);
  local_34 = 0;
  tisp_g_awb_start(&local_3c);
  iVar3 = private_seq_printf(param_1,"****************** ISP INFO **********************\n");
  if (*(int *)(iVar41 + 0xe8) < 4) {
    iVar41 = private_seq_printf(param_1,"sensor doesn\'t work, please enable sensor\n");
    return iVar3 + iVar41;
  }
  __s = (int *)private_kmalloc(0x1e0,0xd0);
  memset(__s,0,0x1e0);
  iVar40 = -1;
  if (__s != (int *)0x0) {
    iVar40 = tisp_get_antiflicker_step(__s,&local_34);
  }
  tisp_g_ev_attr(&local_e8);
  tisp_g_ae_min(&local_4c);
  tisp_g_wb_attr(auStack_68);
  tisp_g_wb_ct(local_30);
  uVar2 = *(unsigned int *)(iVar41 + 0xf4);
  if (uVar2 != 0x3201) {
    if (uVar2 < 0x3202) {
      if (uVar2 != 0x3102) {
        if (0x3102 < uVar2) {
          if (uVar2 == 0x3109) {
LAB_00077458:
            pcVar44 = "BGGI";
            goto LAB_000774b8;
          }
          if (uVar2 < 0x310a) {
            if (uVar2 == 0x3105) {
LAB_00077428:
              pcVar44 = "GBRI";
              goto LAB_000774b8;
            }
            if (0x3105 < uVar2) {
              if (uVar2 != 0x3107) {
                if (uVar2 < 0x3108) goto LAB_00077434;
                goto LAB_0007744c;
              }
LAB_00077440:
              pcVar44 = "IBRG";
              goto LAB_000774b8;
            }
            if (uVar2 == 0x3103) goto LAB_00077410;
            if (uVar2 == 0x3104) goto LAB_0007741c;
          }
          else {
            if (uVar2 == 0x310d) goto LAB_00077484;
            if (uVar2 < 0x310e) {
              if (uVar2 != 0x310b) {
                if (uVar2 < 0x310c) goto LAB_00077464;
                goto LAB_0007747c;
              }
LAB_00077470:
              pcVar44 = "GBIG";
              goto LAB_000774b8;
            }
            if (uVar2 == 0x310f) {
LAB_000774a0:
              pcVar44 = "IGGB";
              goto LAB_000774b8;
            }
            uVar38 = 0x3200;
            if (uVar2 < 0x310f) goto LAB_00077490;
LAB_00077294:
            if (uVar2 == uVar38) goto LAB_00077404;
          }
          goto LAB_000774a8;
        }
        if (uVar2 != 0x300f) {
          if (uVar2 < 0x3010) {
            if (uVar2 < 0x3009) {
              if ((0x3006 < uVar2) || (uVar2 == 0x3001)) {
                pcVar44 = "BGGR";
                goto LAB_000774b8;
              }
              if (uVar2 == 0x3002) goto LAB_000773f8;
            }
            else {
              if (uVar2 == 0x300a) {
LAB_000773f8:
                pcVar44 = "GRBG";
                goto LAB_000774b8;
              }
              if (uVar2 == 0x300e) goto LAB_000774b4;
            }
LAB_000774a8:
            pcVar44 = "The format of isp input is RGB or YUV422";
            goto LAB_000774b8;
          }
          if (uVar2 == 0x3013) {
LAB_000774b4:
            pcVar44 = "GBRG";
            goto LAB_000774b8;
          }
          if (uVar2 < 0x3014) {
            if (uVar2 == 0x3011) goto LAB_000773f8;
            if (uVar2 < 0x3012) goto LAB_000774b4;
          }
          else if ((uVar2 != 0x3100) && (uVar38 = 0x3014, uVar2 < 0x3101)) goto LAB_00077294;
        }
      }
    }
    else if (uVar2 != 0x3300) {
      if (uVar2 < 0x3301) {
        if (uVar2 == 0x3208) {
LAB_0007744c:
          pcVar44 = "RGGI";
          goto LAB_000774b8;
        }
        if (0x3208 < uVar2) {
          if (uVar2 == 0x320c) {
LAB_0007747c:
            pcVar44 = "GIRG";
            goto LAB_000774b8;
          }
          if (uVar2 < 0x320d) {
            bVar1 = uVar2 < 0x320b;
            if (uVar2 != 0x320a) {
LAB_000773b4:
              if (!bVar1) goto LAB_00077470;
              goto LAB_00077458;
            }
LAB_00077464:
            pcVar44 = "GRIG";
            goto LAB_000774b8;
          }
          if (uVar2 == 0x320e) {
LAB_00077490:
            pcVar44 = "IGGR";
            goto LAB_000774b8;
          }
          uVar38 = 0x320f;
          if (0x320d < uVar2) {
LAB_000773d8:
            if (uVar2 == uVar38) goto LAB_000774a0;
            goto LAB_000774a8;
          }
LAB_00077484:
          pcVar44 = "SGIBG";
          goto LAB_000774b8;
        }
        if (uVar2 == 0x3204) {
LAB_0007741c:
          pcVar44 = "GRBI";
          goto LAB_000774b8;
        }
        if (0x3204 < uVar2) {
          bVar1 = uVar2 < 0x3207;
          if (uVar2 != 0x3206) {
LAB_00077388:
            if (!bVar1) goto LAB_00077440;
            goto LAB_00077428;
          }
LAB_00077434:
          pcVar44 = "IRBG";
          goto LAB_000774b8;
        }
        if (uVar2 != 0x3202) {
          if (uVar2 != 0x3203) goto LAB_000774a8;
LAB_00077410:
          pcVar44 = "BIGR";
          goto LAB_000774b8;
        }
      }
      else {
        if (uVar2 == 0x3308) goto LAB_0007744c;
        if (0x3308 < uVar2) {
          if (uVar2 == 0x330c) goto LAB_0007747c;
          if (uVar2 < 0x330d) {
            bVar1 = uVar2 < 0x330b;
            if (uVar2 != 0x330a) goto LAB_000773b4;
            goto LAB_00077464;
          }
          if (uVar2 == 0x330e) goto LAB_00077490;
          uVar38 = 0x330f;
          if (0x330d < uVar2) goto LAB_000773d8;
          goto LAB_00077484;
        }
        if (uVar2 == 0x3304) goto LAB_0007741c;
        if (0x3304 < uVar2) {
          bVar1 = uVar2 < 0x3307;
          if (uVar2 != 0x3306) goto LAB_00077388;
          goto LAB_00077434;
        }
        if ((uVar2 != 0x3302) && (0x3302 < uVar2)) goto LAB_00077410;
      }
    }
  }
LAB_00077404:
  pcVar44 = "RGGB";
LAB_000774b8:
  iVar4 = private_seq_printf(param_1,"Software Version : %s\n","H20221206a");
  iVar5 = private_seq_printf(param_1,"SENSOR NAME : %s\n",**(int **)(iVar41 + 0x120));
  iVar6 = private_seq_printf(param_1,"SENSOR OUTPUT WIDTH : %d\n",*(int *)(iVar41 + 0xec));
  iVar7 = private_seq_printf(param_1,"SENSOR OUTPUT HEIGHT : %d\n",*(int *)(iVar41 + 0xf0));
  iVar8 = private_seq_printf(param_1,"ISP OUTPUT FPS : %d / %d\n",*(unsigned int *)(iVar41 + 300) >> 0x10,
                             *(unsigned int *)(iVar41 + 300) & 0xffff);
  iVar9 = private_seq_printf(param_1,"SENSOR OUTPUT RAW PATTERN : %s\n",pcVar44);
  uVar10 = tisp_top_read();
  iVar11 = private_seq_printf(param_1,"ISP Top Value : 0x%x\n",uVar10);
  iVar12 = tisp_day_or_night_g_ctrl();
  if (iVar12 == 1) {
    pcVar44 = "Night";
  }
  else {
    pcVar44 = "Day";
  }
  iVar12 = private_seq_printf(param_1,"ISP Runing Mode : %s\n",pcVar44);
  iVar13 = tisp_cust_mode_g_ctrl();
  if (iVar13 == 1) {
    pcVar44 = "Enable";
  }
  else {
    pcVar44 = "Disable";
  }
  iVar13 = private_seq_printf(param_1,"ISP Custom Mode : %s\n",pcVar44);
  if (*(int *)(iVar41 + 0x17c) == 1) {
    pcVar44 = "Enable";
  }
  else {
    pcVar44 = "Disable";
  }
  iVar14 = private_seq_printf(param_1,"ISP WDR Mode : %s\n",pcVar44);
  iVar15 = private_seq_printf(param_1,"SENSOR Integration Time : %d lines\n",local_e8);
  iVar16 = private_seq_printf(param_1,"SENSOR Max Integration Time : %d lines\n",local_7a);
  iVar17 = private_seq_printf(param_1,"SENSOR analog gain : %d\n",local_d8);
  iVar18 = private_seq_printf(param_1,"MAX SENSOR analog gain : %d\n",local_c8);
  iVar19 = private_seq_printf(param_1,"SENSOR digital gain : %d\n",local_c0);
  iVar20 = private_seq_printf(param_1,"MAX SENSOR digital gain : %d\n",local_bc);
  iVar21 = private_seq_printf(param_1,"ISP digital gain : %d\n",local_d4);
  iVar22 = private_seq_printf(param_1,"MAX ISP digital gain : %d\n",local_c4);
  iVar23 = private_seq_printf(param_1,"ISP Tgain DB : %d\n",local_d0);
  iVar24 = private_seq_printf(param_1,"ISP EV value: %d\n",local_e4);
  iVar25 = private_seq_printf(param_1,"ISP EV value log2: %d\n",local_dc);
  iVar26 = private_seq_printf(param_1,"ISP EV value us: %d\n",local_e0);
  iVar27 = private_seq_printf(param_1,"ISP EV min int: %d\n",local_4c);
  iVar28 = private_seq_printf(param_1,"ISP EV min again: %d\n",local_48);
  iVar29 = private_seq_printf(param_1,"ISP WB weighted rgain: %d\n",0x10000 / local_54);
  iVar30 = private_seq_printf(param_1,"ISP WB weighted bgain: %d\n",0x10000 / local_50);
  iVar31 = private_seq_printf(param_1,"ISP WB color temperature: %d\n",local_30[0]);
  iVar32 = private_seq_printf(param_1,"ISP AWB Start rgain %d: bgain %d\n",local_3c,local_38);
  iVar33 = private_seq_printf(param_1,"Saturation : %d\n",*(int *)(iVar43 + 0x4090));
  uVar10 = tisp_get_saturation();
  iVar34 = private_seq_printf(param_1,"Saturation : %d\n",uVar10);
  uVar10 = tisp_get_sharpness();
  iVar35 = private_seq_printf(param_1,"Sharpness : %d\n",uVar10);
  uVar10 = tisp_get_contrast();
  iVar36 = private_seq_printf(param_1,"Contrast : %d\n",uVar10);
  uVar10 = tisp_get_brightness();
  iVar37 = private_seq_printf(param_1,"Brightness : %d\n",uVar10);
  iVar43 = private_seq_printf(param_1,"Antiflicker : %d\n",*(int *)(iVar43 + 0xefc));
  if (*(int *)(iVar41 + 0x170) == 1) {
    pcVar44 = "Enable";
  }
  else {
    pcVar44 = "Disable";
  }
  if (*(int *)(iVar41 + 0x168) == 1) {
    pcVar39 = "Enable";
  }
  else {
    pcVar39 = "Disable";
  }
  iVar41 = private_seq_printf(param_1,"Mirror: %s, Flip: %s\n",pcVar44,pcVar39);
  iVar41 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar11 + iVar12 + iVar13 + iVar14
           + iVar15 + iVar16 + iVar17 + iVar18 + iVar19 + iVar20 + iVar21 + iVar22 + iVar23 + iVar24
           + iVar25 + iVar26 + iVar27 + iVar28 + iVar29 + iVar30 + iVar31 + iVar32 + iVar33 + iVar34
           + iVar35 + iVar36 + iVar37 + iVar43 + iVar41;
  if (iVar40 == 0) {
    iVar3 = private_seq_printf(param_1,"Antiflicker nodes: %d: step : ",local_34 + 1);
    iVar41 = iVar41 + iVar3;
    puVar42 = __s;
    for (uVar2 = 0; uVar2 <= local_34; uVar2 = uVar2 + 1) {
      iVar3 = private_seq_printf(param_1,&_LC66,*puVar42);
      iVar41 = iVar41 + iVar3;
      puVar42 = puVar42 + 1;
    }
    iVar3 = private_seq_printf(param_1,&_LC67);
    iVar41 = iVar41 + iVar3;
  }
  iVar3 = private_seq_printf(param_1,"debug : ch0 done %d,ip done %d,%d,%d,%d,%d,%d,%d\n",
                             isp_ch0_frm_done,isp_ip_frm_done,isp_err,0,0,isp_err3,isp_overflow,
                             isp_breakfrm);
  iVar43 = private_seq_printf(param_1,"debug1 : %d,%d,%d\n",isp_ch0_pre_dequeue_time,
                              isp_ch0_pre_dequeue_interrupt_process,isp_ch0_pre_dequeue_valid_lines)
  ;
  private_kfree(__s);
  return iVar3 + iVar41 + iVar43;
}



int isp_core_debug_show(int param_1)

{
  bool bVar1;
  unsigned int uVar2;
  int iVar3;
  int *__s;
  int iVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  int iVar9;
  int uVar10;
  int iVar11;
  int iVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int iVar16;
  int iVar17;
  int iVar18;
  int iVar19;
  int iVar20;
  int iVar21;
  int iVar22;
  int iVar23;
  int iVar24;
  int iVar25;
  int iVar26;
  int iVar27;
  int iVar28;
  int iVar29;
  int iVar30;
  int iVar31;
  int iVar32;
  int iVar33;
  int iVar34;
  int iVar35;
  int iVar36;
  int iVar37;
  unsigned int uVar38;
  int iVar39;
  char *pcVar40;
  int iVar41;
  int *puVar42;
  int iVar43;
  char *pcVar44;
  int uStack_e8;
  int uStack_e4;
  int uStack_e0;
  int uStack_dc;
  int uStack_d8;
  int uStack_d4;
  int uStack_d0;
  int uStack_c8;
  int uStack_c4;
  int uStack_c0;
  int uStack_bc;
  short uStack_7a;
  char auStack_68 [20];
  unsigned int uStack_54;
  unsigned int uStack_50;
  int uStack_4c;
  int uStack_48;
  int uStack_3c;
  int uStack_38;
  unsigned int uStack_34;
  int auStack_30 [3];
  
  if (isp_core_debug_type == '\x01') {
    isp_core_debug_type = 0;
    if (frame_vb_measure == '\x04') {
      iVar39 = tv_frame_start_next * 1000000 + DAT_000d9d1c;
      iVar39 = private_seq_printf(param_1,"frame_interival:%ld, vb:%ld\n",
                                  (tv_frame_start * -1000000 + iVar39) - DAT_000d9d2c,
                                  (tv_frame_end * -1000000 + iVar39) - DAT_000d9d24);
      return iVar39;
    }
    iVar39 = private_seq_printf(param_1,"vb measure error\n");
    return iVar39;
  }
  uVar2 = *(unsigned int *)(param_1 + 0x3c);
  iVar39 = 0;
  if ((uVar2 != 0) && (uVar2 < 0xfffff001)) {
    iVar39 = *(int *)(uVar2 + 0xd4);
  }
  auStack_30[0] = 5000;
  iVar43 = *(int *)(iVar39 + 0x1bc);
  uStack_34 = 0;
  tisp_g_awb_start(&uStack_3c);
  iVar3 = private_seq_printf(param_1,"****************** ISP INFO **********************\n");
  if (*(int *)(iVar39 + 0xe8) < 4) {
    iVar39 = private_seq_printf(param_1,"sensor doesn\'t work, please enable sensor\n");
    return iVar3 + iVar39;
  }
  __s = (int *)private_kmalloc(0x1e0,0xd0);
  memset(__s,0,0x1e0);
  iVar41 = -1;
  if (__s != (int *)0x0) {
    iVar41 = tisp_get_antiflicker_step(__s,&uStack_34);
  }
  tisp_g_ev_attr(&uStack_e8);
  tisp_g_ae_min(&uStack_4c);
  tisp_g_wb_attr(auStack_68);
  tisp_g_wb_ct(auStack_30);
  uVar2 = *(unsigned int *)(iVar39 + 0xf4);
  if (uVar2 != 0x3201) {
    if (uVar2 < 0x3202) {
      if (uVar2 != 0x3102) {
        if (0x3102 < uVar2) {
          if (uVar2 == 0x3109) {
LAB_00077458:
            pcVar44 = "BGGI";
            goto LAB_000774b8;
          }
          if (uVar2 < 0x310a) {
            if (uVar2 == 0x3105) {
LAB_00077428:
              pcVar44 = "GBRI";
              goto LAB_000774b8;
            }
            if (0x3105 < uVar2) {
              if (uVar2 != 0x3107) {
                if (uVar2 < 0x3108) goto LAB_00077434;
                goto LAB_0007744c;
              }
LAB_00077440:
              pcVar44 = "IBRG";
              goto LAB_000774b8;
            }
            if (uVar2 == 0x3103) goto LAB_00077410;
            if (uVar2 == 0x3104) goto LAB_0007741c;
          }
          else {
            if (uVar2 == 0x310d) goto LAB_00077484;
            if (uVar2 < 0x310e) {
              if (uVar2 != 0x310b) {
                if (uVar2 < 0x310c) goto LAB_00077464;
                goto LAB_0007747c;
              }
LAB_00077470:
              pcVar44 = "GBIG";
              goto LAB_000774b8;
            }
            if (uVar2 == 0x310f) {
LAB_000774a0:
              pcVar44 = "IGGB";
              goto LAB_000774b8;
            }
            uVar38 = 0x3200;
            if (uVar2 < 0x310f) goto LAB_00077490;
LAB_00077294:
            if (uVar2 == uVar38) goto LAB_00077404;
          }
          goto LAB_000774a8;
        }
        if (uVar2 != 0x300f) {
          if (uVar2 < 0x3010) {
            if (uVar2 < 0x3009) {
              if ((0x3006 < uVar2) || (uVar2 == 0x3001)) {
                pcVar44 = "BGGR";
                goto LAB_000774b8;
              }
              if (uVar2 == 0x3002) goto LAB_000773f8;
            }
            else {
              if (uVar2 == 0x300a) {
LAB_000773f8:
                pcVar44 = "GRBG";
                goto LAB_000774b8;
              }
              if (uVar2 == 0x300e) goto LAB_000774b4;
            }
LAB_000774a8:
            pcVar44 = "The format of isp input is RGB or YUV422";
            goto LAB_000774b8;
          }
          if (uVar2 == 0x3013) {
LAB_000774b4:
            pcVar44 = "GBRG";
            goto LAB_000774b8;
          }
          if (uVar2 < 0x3014) {
            if (uVar2 == 0x3011) goto LAB_000773f8;
            if (uVar2 < 0x3012) goto LAB_000774b4;
          }
          else if ((uVar2 != 0x3100) && (uVar38 = 0x3014, uVar2 < 0x3101)) goto LAB_00077294;
        }
      }
    }
    else if (uVar2 != 0x3300) {
      if (uVar2 < 0x3301) {
        if (uVar2 == 0x3208) {
LAB_0007744c:
          pcVar44 = "RGGI";
          goto LAB_000774b8;
        }
        if (0x3208 < uVar2) {
          if (uVar2 == 0x320c) {
LAB_0007747c:
            pcVar44 = "GIRG";
            goto LAB_000774b8;
          }
          if (uVar2 < 0x320d) {
            bVar1 = uVar2 < 0x320b;
            if (uVar2 != 0x320a) {
LAB_000773b4:
              if (!bVar1) goto LAB_00077470;
              goto LAB_00077458;
            }
LAB_00077464:
            pcVar44 = "GRIG";
            goto LAB_000774b8;
          }
          if (uVar2 == 0x320e) {
LAB_00077490:
            pcVar44 = "IGGR";
            goto LAB_000774b8;
          }
          uVar38 = 0x320f;
          if (0x320d < uVar2) {
LAB_000773d8:
            if (uVar2 == uVar38) goto LAB_000774a0;
            goto LAB_000774a8;
          }
LAB_00077484:
          pcVar44 = "SGIBG";
          goto LAB_000774b8;
        }
        if (uVar2 == 0x3204) {
LAB_0007741c:
          pcVar44 = "GRBI";
          goto LAB_000774b8;
        }
        if (0x3204 < uVar2) {
          bVar1 = uVar2 < 0x3207;
          if (uVar2 != 0x3206) {
LAB_00077388:
            if (!bVar1) goto LAB_00077440;
            goto LAB_00077428;
          }
LAB_00077434:
          pcVar44 = "IRBG";
          goto LAB_000774b8;
        }
        if (uVar2 != 0x3202) {
          if (uVar2 != 0x3203) goto LAB_000774a8;
LAB_00077410:
          pcVar44 = "BIGR";
          goto LAB_000774b8;
        }
      }
      else {
        if (uVar2 == 0x3308) goto LAB_0007744c;
        if (0x3308 < uVar2) {
          if (uVar2 == 0x330c) goto LAB_0007747c;
          if (uVar2 < 0x330d) {
            bVar1 = uVar2 < 0x330b;
            if (uVar2 != 0x330a) goto LAB_000773b4;
            goto LAB_00077464;
          }
          if (uVar2 == 0x330e) goto LAB_00077490;
          uVar38 = 0x330f;
          if (0x330d < uVar2) goto LAB_000773d8;
          goto LAB_00077484;
        }
        if (uVar2 == 0x3304) goto LAB_0007741c;
        if (0x3304 < uVar2) {
          bVar1 = uVar2 < 0x3307;
          if (uVar2 != 0x3306) goto LAB_00077388;
          goto LAB_00077434;
        }
        if ((uVar2 != 0x3302) && (0x3302 < uVar2)) goto LAB_00077410;
      }
    }
  }
LAB_00077404:
  pcVar44 = "RGGB";
LAB_000774b8:
  iVar4 = private_seq_printf(param_1,"Software Version : %s\n","H20221206a");
  iVar5 = private_seq_printf(param_1,"SENSOR NAME : %s\n",**(int **)(iVar39 + 0x120));
  iVar6 = private_seq_printf(param_1,"SENSOR OUTPUT WIDTH : %d\n",*(int *)(iVar39 + 0xec));
  iVar7 = private_seq_printf(param_1,"SENSOR OUTPUT HEIGHT : %d\n",*(int *)(iVar39 + 0xf0));
  iVar8 = private_seq_printf(param_1,"ISP OUTPUT FPS : %d / %d\n",*(unsigned int *)(iVar39 + 300) >> 0x10,
                             *(unsigned int *)(iVar39 + 300) & 0xffff);
  iVar9 = private_seq_printf(param_1,"SENSOR OUTPUT RAW PATTERN : %s\n",pcVar44);
  uVar10 = tisp_top_read();
  iVar11 = private_seq_printf(param_1,"ISP Top Value : 0x%x\n",uVar10);
  iVar12 = tisp_day_or_night_g_ctrl();
  if (iVar12 == 1) {
    pcVar44 = "Night";
  }
  else {
    pcVar44 = "Day";
  }
  iVar12 = private_seq_printf(param_1,"ISP Runing Mode : %s\n",pcVar44);
  iVar13 = tisp_cust_mode_g_ctrl();
  if (iVar13 == 1) {
    pcVar44 = "Enable";
  }
  else {
    pcVar44 = "Disable";
  }
  iVar13 = private_seq_printf(param_1,"ISP Custom Mode : %s\n",pcVar44);
  if (*(int *)(iVar39 + 0x17c) == 1) {
    pcVar44 = "Enable";
  }
  else {
    pcVar44 = "Disable";
  }
  iVar14 = private_seq_printf(param_1,"ISP WDR Mode : %s\n",pcVar44);
  iVar15 = private_seq_printf(param_1,"SENSOR Integration Time : %d lines\n",uStack_e8);
  iVar16 = private_seq_printf(param_1,"SENSOR Max Integration Time : %d lines\n",uStack_7a);
  iVar17 = private_seq_printf(param_1,"SENSOR analog gain : %d\n",uStack_d8);
  iVar18 = private_seq_printf(param_1,"MAX SENSOR analog gain : %d\n",uStack_c8);
  iVar19 = private_seq_printf(param_1,"SENSOR digital gain : %d\n",uStack_c0);
  iVar20 = private_seq_printf(param_1,"MAX SENSOR digital gain : %d\n",uStack_bc);
  iVar21 = private_seq_printf(param_1,"ISP digital gain : %d\n",uStack_d4);
  iVar22 = private_seq_printf(param_1,"MAX ISP digital gain : %d\n",uStack_c4);
  iVar23 = private_seq_printf(param_1,"ISP Tgain DB : %d\n",uStack_d0);
  iVar24 = private_seq_printf(param_1,"ISP EV value: %d\n",uStack_e4);
  iVar25 = private_seq_printf(param_1,"ISP EV value log2: %d\n",uStack_dc);
  iVar26 = private_seq_printf(param_1,"ISP EV value us: %d\n",uStack_e0);
  iVar27 = private_seq_printf(param_1,"ISP EV min int: %d\n",uStack_4c);
  iVar28 = private_seq_printf(param_1,"ISP EV min again: %d\n",uStack_48);
  iVar29 = private_seq_printf(param_1,"ISP WB weighted rgain: %d\n",0x10000 / uStack_54);
  iVar30 = private_seq_printf(param_1,"ISP WB weighted bgain: %d\n",0x10000 / uStack_50);
  iVar31 = private_seq_printf(param_1,"ISP WB color temperature: %d\n",auStack_30[0]);
  iVar32 = private_seq_printf(param_1,"ISP AWB Start rgain %d: bgain %d\n",uStack_3c,uStack_38);
  iVar33 = private_seq_printf(param_1,"Saturation : %d\n",*(int *)(iVar43 + 0x4090));
  uVar10 = tisp_get_saturation();
  iVar34 = private_seq_printf(param_1,"Saturation : %d\n",uVar10);
  uVar10 = tisp_get_sharpness();
  iVar35 = private_seq_printf(param_1,"Sharpness : %d\n",uVar10);
  uVar10 = tisp_get_contrast();
  iVar36 = private_seq_printf(param_1,"Contrast : %d\n",uVar10);
  uVar10 = tisp_get_brightness();
  iVar37 = private_seq_printf(param_1,"Brightness : %d\n",uVar10);
  iVar43 = private_seq_printf(param_1,"Antiflicker : %d\n",*(int *)(iVar43 + 0xefc));
  if (*(int *)(iVar39 + 0x170) == 1) {
    pcVar44 = "Enable";
  }
  else {
    pcVar44 = "Disable";
  }
  if (*(int *)(iVar39 + 0x168) == 1) {
    pcVar40 = "Enable";
  }
  else {
    pcVar40 = "Disable";
  }
  iVar39 = private_seq_printf(param_1,"Mirror: %s, Flip: %s\n",pcVar44,pcVar40);
  iVar39 = iVar3 + iVar4 + iVar5 + iVar6 + iVar7 + iVar8 + iVar9 + iVar11 + iVar12 + iVar13 + iVar14
           + iVar15 + iVar16 + iVar17 + iVar18 + iVar19 + iVar20 + iVar21 + iVar22 + iVar23 + iVar24
           + iVar25 + iVar26 + iVar27 + iVar28 + iVar29 + iVar30 + iVar31 + iVar32 + iVar33 + iVar34
           + iVar35 + iVar36 + iVar37 + iVar43 + iVar39;
  if (iVar41 == 0) {
    iVar3 = private_seq_printf(param_1,"Antiflicker nodes: %d: step : ",uStack_34 + 1);
    iVar39 = iVar39 + iVar3;
    puVar42 = __s;
    for (uVar2 = 0; uVar2 <= uStack_34; uVar2 = uVar2 + 1) {
      iVar3 = private_seq_printf(param_1,&_LC66,*puVar42);
      iVar39 = iVar39 + iVar3;
      puVar42 = puVar42 + 1;
    }
    iVar3 = private_seq_printf(param_1,&_LC67);
    iVar39 = iVar39 + iVar3;
  }
  iVar3 = private_seq_printf(param_1,"debug : ch0 done %d,ip done %d,%d,%d,%d,%d,%d,%d\n",
                             isp_ch0_frm_done,isp_ip_frm_done,isp_err,0,0,isp_err3,isp_overflow,
                             isp_breakfrm);
  iVar43 = private_seq_printf(param_1,"debug1 : %d,%d,%d\n",isp_ch0_pre_dequeue_time,
                              isp_ch0_pre_dequeue_interrupt_process,isp_ch0_pre_dequeue_valid_lines)
  ;
  private_kfree(__s);
  return iVar3 + iVar39 + iVar43;
}



int ispcore_pad_event_handle(unsigned int *param_1,int param_2,void *param_3)

{
  int uVar1;
  int iVar2;
  unsigned int uVar3;
  code *pcVar4;
  unsigned int uVar5;
  int iVar6;
  unsigned int uVar7;
  int *piVar8;
  void *pvVar9;
  int unaff_gp;
  unsigned int local_58;
  int local_54;
  int local_50;
  unsigned int local_4c;
  int local_48;
  int local_44;
  int local_40;
  int local_3c;
  unsigned int local_38;
  int local_34;
  int local_30;
  int local_2c;
  int local_28;
  
  if (*(char *)((int)param_1 + 5) == '\0') {
    return 0;
  }
  switch(param_2) {
  case 0x3000001:
    pvVar9 = (void *)param_1[8];
    if (param_3 == (void *)0x0) {
      return 0;
    }
    if (pvVar9 != (void *)0x0) {
      if (*(int *)(*(int *)((int)pvVar9 + 0x7c) + 0x15c) != 1) {
        memcpy(param_3,pvVar9,0x70);
        return 0;
      }
      *(int *)((int)param_3 + 4) = *(int *)((int)pvVar9 + 4);
      *(int *)((int)param_3 + 8) = *(int *)((int)pvVar9 + 8);
      *(int *)((int)param_3 + 0xc) = 0x32314752;
      iVar2 = *(int *)((int)pvVar9 + 4);
      iVar6 = *(int *)((int)pvVar9 + 8);
      *(char *)((int)param_3 + 0x34) = 0;
      *(char *)((int)param_3 + 0x48) = 0;
      *(int *)((int)param_3 + 0x18) = iVar2 * iVar6 * 2;
      return 0;
    }
    return 0;
  case 0x3000002:
    if (param_1 == (unsigned int *)0x0) {
      return 0xffffffea;
    }
    if ((unsigned int *)0xfffff000 < param_1) {
      return 0xffffffea;
    }
    uVar3 = *param_1;
    if (uVar3 == 0) {
      return 0xffffffea;
    }
    if (0xfffff000 < uVar3) {
      return 0xffffffea;
    }
    uVar7 = *(unsigned int *)(uVar3 + 0xd4);
    if (uVar7 == 0) {
      return 0xffffffea;
    }
    if (0xfffff000 < uVar7) {
      return 0xffffffea;
    }
    pvVar9 = (void *)param_1[8];
    piVar8 = (int *)(uVar3 + 0x38);
    if (*(int *)(uVar7 + 0x15c) == 1) {
      memset((void *)(uVar7 + 0x1c0),0,0x18);
      *(unsigned int **)(uVar7 + 0x1d4) = param_1;
      *(code **)(uVar7 + 0x1c4) = ispcore_frame_channel_dqbuf;
      iVar2 = *piVar8;
      while (((((iVar2 == 0 || (**(int **)(iVar2 + 0xc4) == 0)) ||
               (pcVar4 = *(code **)(**(int **)(iVar2 + 0xc4) + 0x1c), pcVar4 == (code *)0x0)) ||
              ((iVar2 = (*pcVar4)(iVar2,0x3000009,(void *)(uVar7 + 0x1c0)), iVar2 == 0 ||
               (iVar2 == -0x203)))) && (piVar8 = piVar8 + 1, (int *)(uVar3 + 0x78) != piVar8))) {
        iVar2 = *piVar8;
      }
    }
    else {
      iVar2 = *piVar8;
      while( true ) {
        if ((((iVar2 != 0) && (**(int **)(iVar2 + 0xc4) != 0)) &&
            (pcVar4 = *(code **)(**(int **)(iVar2 + 0xc4) + 0x1c), pcVar4 != (code *)0x0)) &&
           ((iVar2 = (*pcVar4)(iVar2,0x3000009,0), iVar2 != 0 && (iVar2 != -0x203)))) {
          iVar2 = *(int *)((int)pvVar9 + 0x7c);
          goto LAB_0007805c;
        }
        piVar8 = piVar8 + 1;
        if ((int *)(uVar3 + 0x78) == piVar8) break;
        iVar2 = *piVar8;
      }
      iVar2 = *(int *)((int)pvVar9 + 0x7c);
LAB_0007805c:
      for (uVar3 = *(unsigned int *)(iVar2 + 0x148); iVar6 = *(int *)((int)param_3 + 0xc),
          uVar3 <= *(unsigned int *)(iVar2 + 0x14c); uVar3 = uVar3 + 1) {
        if (iVar6 == *(int *)(&DAT_000b1f1c + uVar3 * 0x2c)) {
          uVar5 = (uint)(*(int *)((int)param_3 + 4) * *(int *)(&DAT_000b1f20 + uVar3 * 0x2c)) >> 3;
          *(unsigned int *)((int)param_3 + 0x14) = uVar5;
          uVar7 = *(unsigned int *)((int)param_3 + 8);
          if ((iVar6 == 0x3132564e) || (iVar6 == 0x3231564e)) {
            uVar7 = uVar7 + 0xf & 0xfffffff0;
          }
          *(unsigned int *)((int)param_3 + 0x18) = uVar7 * uVar5;
          *(unsigned int *)((int)pvVar9 + 0xbc) =
               (*(unsigned int *)(&DAT_000b1f20 + uVar3 * 0x2c) >> 3) * *(int *)((int)param_3 + 4);
          *(char **)((int)param_3 + 0x20) = isp_output_fmt + uVar3 * 0x2c;
          goto LAB_000780fc;
        }
      }
      isp_printf(2,"%s[%d] unfound the pixelformat = %d\n","ispcore_frame_channel_s_fmt",0x33e,iVar6
                );
LAB_000780fc:
      memset(&local_58,0,0x34);
      local_38 = (uint)*(char *)((int)param_3 + 0x5c);
      local_34 = *(int *)((int)param_3 + 100);
      local_30 = *(int *)((int)param_3 + 0x60);
      local_2c = *(int *)((int)param_3 + 0x68);
      local_28 = *(int *)((int)param_3 + 0x6c);
      local_58 = (uint)*(char *)((int)param_3 + 0x48);
      local_54 = *(int *)((int)param_3 + 0x4c);
      local_50 = *(int *)((int)param_3 + 0x50);
      local_4c = (uint)*(char *)((int)param_3 + 0x34);
      local_48 = *(int *)((int)param_3 + 0x3c);
      local_44 = *(int *)((int)param_3 + 0x38);
      local_40 = *(int *)((int)param_3 + 0x40);
      local_3c = *(int *)((int)param_3 + 0x44);
      iVar2 = tisp_channel_attr_set(*(char *)(param_1 + 1),&local_58);
      if (iVar2 == 0) {
        memcpy(pvVar9,param_3,0x70);
      }
      else {
        isp_printf(2,"%s:%d:tiziano set channel attr is error!!!\n","ispcore_frame_channel_set_fmt",
                   0x3bc);
      }
    }
    break;
  case 0x3000003:
    iVar2 = 0;
    if ((param_1 != (unsigned int *)0x0) && (param_1 < (unsigned int *)0xfffff001)) {
      uVar3 = *param_1;
      if ((uVar3 != 0) && (uVar3 < 0xfffff001)) {
        iVar2 = *(int *)(uVar3 + 0xd4);
      }
    }
    local_58 = 0;
    uVar3 = param_1[8];
    if (*(int *)(iVar2 + 0x15c) != 1) {
      if (*(char *)((int)param_1 + 7) != '\x03') {
        return 0;
      }
      iVar2 = uVar3 + 0x9c;
      __private_spin_lock_irqsave(iVar2,&local_58);
      if (*(int *)(uVar3 + 0x74) == 4) {
        arch_local_irq_restore(local_58);
        *(int *)(unaff_gp + 0x14) = *(int *)(unaff_gp + 0x14) + -1;
        if ((*(unsigned int *)(unaff_gp + 8) >> 2 & 1) == 0) {
          return 0;
        }
        preempt_schedule();
        return 0;
      }
      tisp_channel_start(*(char *)(param_1 + 1));
      *(int *)(uVar3 + 0x74) = 4;
      *(char *)((int)param_1 + 7) = 4;
LAB_00077fac:
      private_spin_unlock_irqrestore(iVar2,local_58);
      return 0;
    }
    pcVar4 = *(code **)(iVar2 + 0x1cc);
    param_3 = (void *)0x1;
    goto joined_r0x00077f50;
  case 0x3000004:
    uVar1 = ispcore_frame_channel_streamoff();
    return uVar1;
  case 0x3000005:
    if ((param_1 == (unsigned int *)0x0) || ((unsigned int *)0xfffff000 < param_1)) {
      uVar3 = 0;
      iVar2 = 0;
    }
    else {
      uVar3 = *param_1;
      iVar2 = 0;
      if ((uVar3 != 0) && (uVar3 < 0xfffff001)) {
        iVar2 = *(int *)(uVar3 + 0xd4);
      }
    }
    local_58 = 0;
    if (*(int *)(iVar2 + 0x15c) == 1) {
      if (*(code **)(iVar2 + 0x1c0) != (code *)0x0) {
        (**(code **)(iVar2 + 0x1c0))(*(int *)(iVar2 + 0x1d0),param_3);
        return 0;
      }
      return 0;
    }
    if ((param_1[5] & 0x20) != 0) {
      return 0;
    }
    uVar7 = param_1[8];
    if ((param_3 != (void *)0x0) && (uVar7 != 0)) {
      *(char *)((int)param_3 + -0x1c) = 4;
      __private_spin_lock_irqsave(uVar7 + 0x9c,&local_58);
      if (*(int *)(uVar7 + 0xc) == 0x3231564e) {
        iVar2 = *(int *)(uVar7 + 8);
        iVar6 = *(int *)(uVar7 + 4);
        *(char *)((int)param_3 + -0x1c) = 5;
        *(int *)((int)param_3 + -0x18) = *(int *)((int)param_3 + -0x18) + 1;
        *(unsigned int *)((int)param_3 + 0xc) =
             (iVar2 + 0xfU & 0xfffffff0) * iVar6 + *(int *)((int)param_3 + 8);
        *(int *)(*(int *)(uVar3 + 0xb8) + *(int *)(uVar7 + 0x70) * 0x100 + 0x996c) =
             *(int *)((int)param_3 + 8);
        *(int *)(*(int *)(uVar3 + 0xb8) + *(int *)(uVar7 + 0x70) * 0x100 + 0x9984) =
             *(int *)((int)param_3 + 0xc);
        private_spin_unlock_irqrestore(uVar7 + 0x9c,local_58);
        return 0;
      }
      isp_printf(2,"error: %s, %d, not support this format\n","ispcore_frame_channel_qbuf",0x2b1);
      return 0xffffffff;
    }
    isp_printf(2,"error: %s,%d, buf = %p, chan = %p\n","ispcore_frame_channel_qbuf",0x2c0,param_3,
               uVar7);
    break;
  case 0x3000007:
    iVar2 = 0;
    if ((param_1 != (unsigned int *)0x0) && (param_1 < (unsigned int *)0xfffff001)) {
      uVar3 = *param_1;
      if ((uVar3 != 0) && (uVar3 < 0xfffff001)) {
        iVar2 = *(int *)(uVar3 + 0xd4);
      }
    }
    local_58 = 0;
    if (*(int *)(iVar2 + 0x15c) != 1) {
      if ((param_1[5] & 0x20) != 0) {
        return 0;
      }
      iVar2 = param_1[8] + 0x9c;
      if (param_1[8] == 0) {
        return 0;
      }
      __private_spin_lock_irqsave(iVar2,&local_58);
      tisp_channel_fifo_clear(*(char *)(param_1 + 1));
      goto LAB_00077fac;
    }
    pcVar4 = *(code **)(iVar2 + 0x1c8);
joined_r0x00077f50:
    if (pcVar4 != (code *)0x0) {
      local_58 = 0;
      (*pcVar4)(*(int *)(iVar2 + 0x1d0),param_3);
    }
  }
  return 0;
}



int ispcore_activate_module(unsigned int param_1)

{
  int uVar1;
  int iVar2;
  code **ppcVar3;
  code *pcVar4;
  unsigned int uVar5;
  int *puVar6;
  unsigned int *puVar7;
  unsigned int uVar8;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar5 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if (((uVar5 != 0) && (uVar5 < 0xfffff001)) && (uVar1 = 0, *(int *)(uVar5 + 0xe8) == 1)) {
      puVar6 = *(int **)(param_1 + 0xbc);
      for (uVar8 = 0; uVar8 < *(unsigned int *)(param_1 + 0xc0); uVar8 = uVar8 + 1) {
        iVar2 = private_clk_get_rate(*puVar6);
        if (iVar2 != 0xffff) {
          private_clk_set_rate(*puVar6,isp_clk);
        }
        private_clk_enable(*puVar6);
        puVar6 = puVar6 + 1;
      }
      for (uVar8 = 0; uVar8 < *(unsigned int *)(uVar5 + 0x154); uVar8 = uVar8 + 1) {
        iVar2 = uVar8 * 0xc4 + *(int *)(uVar5 + 0x150);
        if (*(int *)(iVar2 + 0x74) != 1) {
          isp_printf(2,"The state of channel%d is invalid when be activated!\n");
          return 0xffffffff;
        }
        *(int *)(iVar2 + 0x74) = 2;
      }
      (**(code **)(*(int *)(uVar5 + 0x1bc) + 0x40cc))(*(int *)(uVar5 + 0x1bc),0x4000000,0);
      puVar7 = (unsigned int *)(uVar5 + 0x38);
      uVar8 = *puVar7;
      while ((((uVar8 == 0 || (0xfffff000 < uVar8)) ||
              ((ppcVar3 = *(code ***)(*(int *)(uVar8 + 0xc4) + 0x10), ppcVar3 == (code **)0x0 ||
               ((pcVar4 = *ppcVar3, pcVar4 == (code *)0x0 || (iVar2 = (*pcVar4)(uVar8), iVar2 == 0))
               )))) || (iVar2 == -0x203))) {
        puVar7 = puVar7 + 1;
        if (puVar7 == (unsigned int *)(uVar5 + 0x78)) goto LAB_00078440;
        uVar8 = *puVar7;
      }
      isp_printf(2,"Failed to activate %s\n",*(int *)(uVar8 + 8));
LAB_00078440:
      *(int *)(uVar5 + 0xe8) = 2;
      uVar1 = 0;
    }
  }
  return uVar1;
}



void dump_msca_regs(void)

{
  return;
}



int system_reg_write(int param_1,int param_2)

{
  *(int *)(*(int *)(ispcore_sd + 0xb8) + param_1) = param_2;
  return 0;
}



int system_reg_read(int param_1)

{
  return *(int *)(*(int *)(ispcore_sd + 0xb8) + param_1);
}



void exception_handle(void)

{
  unsigned int uVar1;
  code *extraout_v1;
  code *pcVar2;
  unsigned int extraout_v1_00;
  code *UNRECOVERED_JUMPTABLE;
  ulonglong uVar3;
  
  uVar1 = system_reg_read(0x24);
  UNRECOVERED_JUMPTABLE = system_reg_write;
  system_reg_write(0x24,uVar1 | 1);
  (*UNRECOVERED_JUMPTABLE)(0xe0000,4);
  pcVar2 = extraout_v1;
  do {
    uVar3 = (*pcVar2)(0x28);
    pcVar2 = (code *)(uVar3 >> 0x20);
  } while ((uVar3 & 1) == 0);
  uVar1 = (*pcVar2)(0x20);
  (*UNRECOVERED_JUMPTABLE)(0x20,uVar1 | 4);
  (*UNRECOVERED_JUMPTABLE)(0x20,extraout_v1_00 & 0xfffffffb);
  (*UNRECOVERED_JUMPTABLE)(0x800,1);
                    // WARNING: Could not recover jumptable at 0x00078548. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)(0xe0000,1);
  return;
}



void tx_isp_enable_irq(int param_1)

{
  int iVar1;
  int local_18 [3];
  
  iVar1 = param_1 + 0x80;
  local_18[0] = 0;
  __private_spin_lock_irqsave(iVar1,local_18);
  if (*(code **)(param_1 + 0x84) != (code *)0x0) {
    (**(code **)(param_1 + 0x84))(iVar1,local_18[0]);
  }
  private_spin_unlock_irqrestore(iVar1,local_18[0]);
  return;
}



void tx_isp_disable_irq(int param_1)

{
  int iVar1;
  int local_18 [3];
  
  iVar1 = param_1 + 0x80;
  local_18[0] = 0;
  __private_spin_lock_irqsave(iVar1,local_18);
  if (*(int *)(param_1 + 0x84) != 0) {
    (**(code **)(param_1 + 0x88))(iVar1,local_18[0]);
  }
  private_spin_unlock_irqrestore(iVar1,local_18[0]);
  return;
}



int ispcore_video_s_stream(int param_1,int param_2)

{
  int uVar1;
  code **ppcVar2;
  code *pcVar3;
  int iVar4;
  int iVar5;
  int iVar6;
  int *piVar7;
  int local_28 [2];
  
  iVar5 = *(int *)(param_1 + 0xd4);
  iVar6 = iVar5 + 0xdc;
  local_28[0] = 0;
  __private_spin_lock_irqsave(iVar6,local_28);
  if (*(int *)(iVar5 + 0xe8) < 3) {
    isp_printf(2,"%s[%d] the device hasn\'t been inited!\n","ispcore_video_s_stream",0x47a);
    private_spin_unlock_irqrestore(iVar6,local_28[0]);
    return -1;
  }
  private_spin_unlock_irqrestore(iVar6,local_28[0]);
  *(int *)(iVar5 + 0x164) = 0;
  *(int *)(iVar5 + 0x168) = 0;
  *(int *)(iVar5 + 0x170) = 0;
  *(int *)(iVar5 + 0x160) = 0;
  if (param_2 == 0) {
    if (*(int *)(iVar5 + 0xe8) != 4) goto LAB_00078700;
    iVar4 = 0;
    iVar6 = *(int *)(iVar5 + 0x150);
    while( true ) {
      iVar6 = iVar6 + iVar4;
      iVar4 = iVar4 + 0xc4;
      if (*(int *)(iVar6 + 0x74) == 4) {
        ispcore_frame_channel_streamoff(*(int *)(iVar6 + 0x78));
      }
      if (iVar4 == 0x24c) break;
      iVar6 = *(int *)(iVar5 + 0x150);
    }
    uVar1 = 3;
  }
  else {
    if (*(int *)(iVar5 + 0xe8) != 3) goto LAB_00078700;
    uVar1 = 4;
  }
  *(int *)(iVar5 + 0xe8) = uVar1;
LAB_00078700:
  piVar7 = (int *)(param_1 + 0x38);
  iVar6 = 0;
  do {
    iVar4 = *piVar7;
    if (iVar4 != 0) {
      ppcVar2 = *(code ***)(*(int *)(iVar4 + 0xc4) + 4);
      if (ppcVar2 == (code **)0x0) {
        iVar6 = -0x203;
      }
      else {
        pcVar3 = *ppcVar2;
        if (pcVar3 == (code *)0x0) {
          iVar6 = -0x203;
        }
        else {
          iVar6 = (*pcVar3)(iVar4,param_2);
          if (iVar6 != 0) {
            if (iVar6 != -0x203) {
              iVar5 = *(int *)(iVar5 + 0x15c);
              goto LAB_000787b4;
            }
            iVar6 = -0x203;
          }
        }
      }
    }
    piVar7 = piVar7 + 1;
  } while ((int *)(param_1 + 0x78) != piVar7);
  iVar5 = *(int *)(iVar5 + 0x15c);
LAB_000787b4:
  if ((iVar5 == 1) || (param_2 == 0)) {
    *(int *)(*(int *)(param_1 + 0xb8) + 0xb0) = 0;
    pcVar3 = tx_isp_disable_irq;
  }
  else {
    *(int *)(*(int *)(param_1 + 0xb8) + 0xb0) = 0xffffffff;
    pcVar3 = tx_isp_enable_irq;
  }
  (*pcVar3)(param_1);
  if (iVar6 == -0x203) {
    iVar6 = 0;
  }
  return iVar6;
}



int ispcore_core_ops_init(unsigned int param_1,int param_2)

{
  char cVar1;
  ushort uVar2;
  ushort uVar3;
  bool bVar4;
  int iVar5;
  int iVar6;
  char *pcVar7;
  unsigned int uVar8;
  char *pcVar9;
  unsigned int uVar10;
  unsigned int uVar11;
  int uVar12;
  int local_78;
  int local_74;
  int local_70;
  char local_6c [16];
  int local_5c;
  int local_58;
  int local_54;
  int local_50;
  unsigned int local_4c;
  short local_48;
  short local_46;
  short local_44;
  short local_42;
  int local_40;
  short local_3c;
  ushort local_3a;
  short local_38;
  short local_36;
  short local_34;
  short local_32;
  short local_30;
  short local_2e;
  short local_2c;
  int local_28;
  int local_24;
  int local_20;
  int local_1c;
  int local_18 [2];
  
  uVar11 = 0;
  if ((param_1 != 0) && (param_1 < 0xfffff001)) {
    uVar11 = *(unsigned int *)(param_1 + 0xd4);
  }
  local_18[0] = 0;
  if (uVar11 == 0) {
    return 0xffffffea;
  }
  if (0xfffff000 < uVar11) {
    return 0xffffffea;
  }
  if (*(int *)(uVar11 + 0xe8) == 1) {
    return 0;
  }
  if (param_2 == 0) {
    if (*(int *)(uVar11 + 0xe8) == 4) {
      ispcore_video_s_stream(param_1,0);
      iVar5 = *(int *)(uVar11 + 0xe8);
    }
    else {
      iVar5 = *(int *)(uVar11 + 0xe8);
    }
    if (iVar5 == 3) {
      private_kthread_stop(*(int *)(uVar11 + 0x1b8));
      *(int *)(uVar11 + 0xe8) = 2;
    }
    tisp_deinit();
    memset((void *)(*(int *)(uVar11 + 0x1bc) + 4),0,0x40a4);
    memset((void *)(uVar11 + 0x1d8),0,0x40);
    return 0;
  }
  memset(&local_78,0,0x60);
  iVar5 = private_reset_tx_isp_module(0);
  if (iVar5 != 0) {
    isp_printf(2,"Failed to reset %s\n",*(int *)(param_1 + 8));
    return 0xffffffea;
  }
  iVar5 = uVar11 + 0xdc;
  __private_spin_lock_irqsave(iVar5,local_18);
  if (*(int *)(uVar11 + 0xe8) != 2) {
    private_spin_unlock_irqrestore(iVar5);
    isp_printf(2,"Can\'t init ispcore when its state is %d \n!",*(int *)(uVar11 + 0xe8));
    return 0xffffffff;
  }
  private_spin_unlock_irqrestore(iVar5,local_18[0]);
  if ((*(unsigned int *)(uVar11 + 0xec) < 0x1001) && (*(unsigned int *)(uVar11 + 0xf0) < 0x1001)) {
    *(short *)(uVar11 + 0x140) = (short)*(unsigned int *)(uVar11 + 0xec);
    *(short *)(uVar11 + 0x142) = (short)*(unsigned int *)(uVar11 + 0xf0);
    if (*(int *)(uVar11 + 0xe8) != 4) {
      iVar5 = *(int *)(uVar11 + 0x14c) * 0x2c;
      uVar10 = 0;
      while (uVar10 < *(unsigned int *)(uVar11 + 0x154)) {
        iVar6 = uVar10 * 0xc4 + *(int *)(uVar11 + 0x150);
        uVar10 = uVar10 + 1;
        if (*(int *)(iVar6 + 0x74) != 0) {
          uVar2 = *(ushort *)(uVar11 + 0x140);
          *(unsigned int *)(iVar6 + 4) = (uint)uVar2;
          uVar3 = *(ushort *)(uVar11 + 0x142);
          *(unsigned int *)(iVar6 + 8) = (uint)uVar3;
          *(int *)(iVar6 + 0xc) = *(int *)(&DAT_000b1f1c + iVar5);
          uVar8 = (uint)uVar2 * *(int *)(&DAT_000b1f20 + iVar5) >> 3;
          *(unsigned int *)(iVar6 + 0x14) = uVar8;
          *(unsigned int *)(iVar6 + 0x18) = uVar3 * uVar8;
        }
      }
    }
    uVar10 = *(unsigned int *)(uVar11 + 0xf4);
  }
  else {
    isp_printf(2,"Sensor outputs bigger resolution than that ISP device can\'t deal with!\n");
    uVar10 = *(unsigned int *)(uVar11 + 0xf4);
  }
  if (uVar10 == 0x310f) {
LAB_00078d58:
    local_70 = 0x13;
  }
  else {
    if (uVar10 < 0x3110) {
      if (uVar10 == 0x3013) {
        local_70 = 3;
        goto LAB_00078d84;
      }
      if (uVar10 < 0x3014) {
        if (uVar10 == 0x300b) {
LAB_00078cdc:
          local_70 = 1;
        }
        else {
          if (0x300b < uVar10) {
            if (uVar10 == 0x300f) {
              local_70 = 0;
            }
            else if (uVar10 < 0x3010) {
              local_70 = 3;
              if (uVar10 == 0x300d) {
                local_70 = 0;
              }
            }
            else if (uVar10 == 0x3011) {
              local_70 = 2;
            }
            else {
              local_70 = 3;
              if (0x3011 < uVar10) {
                local_70 = 0;
              }
            }
            goto LAB_00078d84;
          }
          if (uVar10 < 0x3009) {
            if ((0x3002 < uVar10) || (uVar10 == 0x3001)) goto LAB_00078cdc;
            if (uVar10 < 0x3002) {
              if (uVar10 == 0x2011) {
                local_70 = 0x14;
                goto LAB_00078d84;
              }
              goto LAB_00078d60;
            }
          }
          local_70 = 2;
        }
        goto LAB_00078d84;
      }
      if (uVar10 == 0x3106) {
        local_70 = 10;
        goto LAB_00078d84;
      }
      if (uVar10 < 0x3107) {
        if (uVar10 == 0x3102) goto LAB_00078d10;
        if (0x3102 < uVar10) {
          if (uVar10 == 0x3104) {
            local_70 = 8;
          }
          else if (uVar10 < 0x3105) {
            local_70 = 7;
          }
          else {
            local_70 = 9;
          }
          goto LAB_00078d84;
        }
        if (uVar10 == 0x3100) {
          local_70 = 4;
          goto LAB_00078d84;
        }
        if (0x3100 < uVar10) {
          local_70 = 5;
          goto LAB_00078d84;
        }
        if (uVar10 == 0x3014) {
          local_70 = 0;
          goto LAB_00078d84;
        }
      }
      else {
        if (uVar10 == 0x310a) {
          local_70 = 0xe;
          goto LAB_00078d84;
        }
        if (uVar10 < 0x310b) {
          if (uVar10 == 0x3108) {
            local_70 = 0xc;
          }
          else if (uVar10 < 0x3109) {
            local_70 = 0xb;
          }
          else {
            local_70 = 0xd;
          }
          goto LAB_00078d84;
        }
        if (uVar10 == 0x310c) {
LAB_00078d40:
          local_70 = 0x10;
          goto LAB_00078d84;
        }
        if (uVar10 < 0x310c) goto LAB_00078d38;
        if (uVar10 == 0x310d) goto LAB_00078d48;
        if (uVar10 == 0x310e) {
          local_70 = 0x12;
          goto LAB_00078d84;
        }
      }
    }
    else {
      if (uVar10 == 0x320f) goto LAB_00078d58;
      if (uVar10 < 0x3210) {
        if (uVar10 == 0x3207) {
LAB_00078d28:
          local_70 = 0xb;
          goto LAB_00078d84;
        }
        if (0x3207 < uVar10) {
          if (uVar10 == 0x320b) {
LAB_00078d38:
            local_70 = 0xf;
            goto LAB_00078d84;
          }
          if (0x320b < uVar10) {
            if (uVar10 == 0x320d) {
              local_70 = 0x11;
            }
            else if (uVar10 < 0x320e) {
              local_70 = 0x10;
            }
            else {
              local_70 = 0x12;
            }
            goto LAB_00078d84;
          }
          if (uVar10 == 0x3209) {
            local_70 = 0xd;
            goto LAB_00078d84;
          }
          bVar4 = uVar10 < 0x320a;
LAB_00078ca4:
          if (bVar4) {
            local_70 = 0xc;
          }
          else {
            local_70 = 0xe;
          }
          goto LAB_00078d84;
        }
        if (uVar10 == 0x3203) {
LAB_00078d18:
          local_70 = 7;
          goto LAB_00078d84;
        }
        if (0x3203 < uVar10) {
          if (uVar10 == 0x3205) {
            local_70 = 9;
            goto LAB_00078d84;
          }
          bVar4 = uVar10 < 0x3206;
LAB_00078c74:
          if (bVar4) {
            local_70 = 8;
          }
          else {
            local_70 = 10;
          }
          goto LAB_00078d84;
        }
        if (uVar10 == 0x3201) {
LAB_00078d08:
          local_70 = 5;
          goto LAB_00078d84;
        }
        uVar8 = 0x3200;
        if (0x3201 < uVar10) {
LAB_00078d10:
          local_70 = 6;
          goto LAB_00078d84;
        }
      }
      else {
        if (uVar10 == 0x3307) goto LAB_00078d28;
        if (0x3307 < uVar10) {
          if (uVar10 == 0x330b) goto LAB_00078d38;
          if (0x330b < uVar10) {
            if (uVar10 == 0x330d) {
LAB_00078d48:
              local_70 = 0x11;
              goto LAB_00078d84;
            }
            if (uVar10 < 0x330d) goto LAB_00078d40;
            if (uVar10 == 0x330e) {
              local_70 = 0x12;
              goto LAB_00078d84;
            }
            if (uVar10 == 0x330f) {
              local_70 = 0x13;
              goto LAB_00078d84;
            }
            goto LAB_00078d60;
          }
          if (uVar10 == 0x3309) {
            local_70 = 0xd;
            goto LAB_00078d84;
          }
          bVar4 = uVar10 < 0x330a;
          goto LAB_00078ca4;
        }
        if (uVar10 == 0x3303) goto LAB_00078d18;
        if (0x3303 < uVar10) {
          if (uVar10 == 0x3305) {
            local_70 = 9;
            goto LAB_00078d84;
          }
          bVar4 = uVar10 < 0x3306;
          goto LAB_00078c74;
        }
        if (uVar10 == 0x3301) goto LAB_00078d08;
        uVar8 = 0x3300;
        if (0x3301 < uVar10) goto LAB_00078d10;
      }
      if (uVar10 == uVar8) {
        local_70 = 4;
        goto LAB_00078d84;
      }
    }
LAB_00078d60:
    isp_printf(2,"%s[%d] the format(0x%08x) of input couldn\'t be handled!\n",
               "ispcore_core_ops_init",0x56e,uVar10);
  }
LAB_00078d84:
  local_78 = *(int *)(uVar11 + 0x124);
  pcVar9 = local_6c;
  local_74 = *(int *)(uVar11 + 0x128);
  pcVar7 = **(char ***)(uVar11 + 0x120);
  do {
    cVar1 = *pcVar7;
    pcVar7 = pcVar7 + 1;
    *pcVar9 = cVar1;
    pcVar9 = pcVar9 + 1;
  } while (cVar1 != '\0');
  iVar5 = *(int *)(uVar11 + 0x120);
  local_4c = *(unsigned int *)(uVar11 + 300);
  local_5c = *(int *)(iVar5 + 0x94);
  local_3a = *(ushort *)(iVar5 + 0xb2);
  local_58 = *(int *)(iVar5 + 0x98);
  local_54 = *(int *)(iVar5 + 0x9c);
  local_20 = *(int *)(iVar5 + 0xe4);
  local_50 = *(int *)(iVar5 + 0xa0);
  local_48 = *(short *)(iVar5 + 0xa4);
  local_2e = *(short *)(iVar5 + 0xd8);
  local_2c = *(short *)(iVar5 + 0xda);
  local_46 = *(short *)(iVar5 + 0xa6);
  local_44 = *(short *)(iVar5 + 0xa8);
  local_42 = *(short *)(iVar5 + 0xaa);
  local_40 = *(int *)(iVar5 + 0xac);
  local_28 = *(int *)(iVar5 + 0xdc);
  local_3c = *(short *)(iVar5 + 0xb0);
  local_38 = *(short *)(iVar5 + 0xb4);
  local_36 = *(short *)(iVar5 + 0xb6);
  local_34 = *(short *)(iVar5 + 0xb8);
  local_32 = *(short *)(iVar5 + 0xba);
  local_24 = *(int *)(iVar5 + 0xe0);
  *(short *)(iVar5 + 0xbc) =
       (short)((((local_4c & 0xffff) * 1000000) / (local_4c >> 0x10)) / (uint)local_3a);
  local_30 = *(short *)(*(int *)(uVar11 + 0x120) + 0xbc);
  local_1c = *(int *)(uVar11 + 0x17c);
  tisp_init(&local_78,uVar11 + 0x1d8);
  uVar10 = private_kthread_run(isp_fw_process,0,"isp_fw_process");
  *(unsigned int *)(uVar11 + 0x1b8) = uVar10;
  if ((uVar10 == 0) || (0xfffff000 < uVar10)) {
    isp_printf(2,"%s[%d] kthread_run was failed!\n","ispcore_core_ops_init",0x5a6);
    uVar12 = 0xffffffea;
  }
  else {
    *(int *)(uVar11 + 0xe8) = 3;
    uVar12 = 0;
  }
  return uVar12;
}



int ispcore_slake_module(unsigned int param_1)

{
  int uVar1;
  unsigned int uVar2;
  code *pcVar3;
  unsigned int uVar4;
  int iVar5;
  int *puVar6;
  unsigned int *puVar7;
  
  uVar1 = 0xffffffea;
  if (param_1 != 0) {
    if (0xfffff000 < param_1) {
      return uVar1;
    }
    uVar4 = *(unsigned int *)(param_1 + 0xd4);
    uVar1 = 0xffffffea;
    if ((uVar4 != 0) && (uVar4 < 0xfffff001)) {
      if (*(int *)(uVar4 + 0xe8) != 1) {
        if (2 < *(int *)(uVar4 + 0xe8)) {
          isp_printf(0,"%s,%d: \n","ispcore_slake_module",0x667);
          ispcore_core_ops_init(param_1,0);
        }
        for (uVar2 = 0; uVar2 < *(unsigned int *)(uVar4 + 0x154); uVar2 = uVar2 + 1) {
          *(int *)(uVar2 * 0xc4 + *(int *)(uVar4 + 0x150) + 0x74) = 1;
        }
        (**(code **)(*(int *)(uVar4 + 0x1bc) + 0x40cc))(*(int *)(uVar4 + 0x1bc),0x4000001,0);
        *(int *)(uVar4 + 0xe8) = 1;
        puVar7 = (unsigned int *)(uVar4 + 0x38);
        uVar2 = *puVar7;
        while( true ) {
          if ((((uVar2 != 0) && (uVar2 < 0xfffff001)) &&
              (iVar5 = *(int *)(*(int *)(uVar2 + 0xc4) + 0x10), iVar5 != 0)) &&
             (((pcVar3 = *(code **)(iVar5 + 4), pcVar3 != (code *)0x0 &&
               (iVar5 = (*pcVar3)(uVar2), iVar5 != 0)) && (iVar5 != -0x203)))) {
            isp_printf(2,"Failed to slake %s\n",*(int *)(uVar2 + 8));
            iVar5 = *(int *)(param_1 + 0xc0);
            goto LAB_00079128;
          }
          puVar7 = puVar7 + 1;
          if ((unsigned int *)(uVar4 + 0x78) == puVar7) break;
          uVar2 = *puVar7;
        }
        iVar5 = *(int *)(param_1 + 0xc0);
LAB_00079128:
        puVar6 = (int *)(*(int *)(param_1 + 0xbc) + iVar5 * 4);
        while( true ) {
          iVar5 = iVar5 + -1;
          puVar6 = puVar6 + -1;
          if (iVar5 < 0) break;
          private_clk_disable(*puVar6);
        }
      }
      uVar1 = 0;
    }
  }
  return uVar1;
}



int tx_isp_core_probe(int param_1)

{
  void *__s;
  int uVar1;
  int iVar2;
  void *__s_00;
  void *pvVar3;
  int iVar4;
  unsigned int uVar5;
  
  __s = (void *)private_kmalloc(0x218,0xd0);
  if (__s == (void *)0x0) {
    isp_printf(2,"Failed to allocate sensor device\n");
    uVar1 = 0xfffffff4;
  }
  else {
    memset(__s,0,0x218);
    iVar4 = *(int *)(param_1 + 0x58);
    iVar2 = tx_isp_subdev_init(param_1,__s,core_subdev_ops);
    if (iVar2 == 0) {
      private_spin_lock_init((int)__s + 0xdc);
      private_raw_mutex_init((int)__s + 0xdc,"&core_dev->mlock",0x10000);
      uVar1 = *(int *)(param_1 + 0x58);
      *(unsigned int *)((int)__s + 0x154) = (uint)*(ushort *)((int)__s + 200);
      *(int *)((int)__s + 0x138) = uVar1;
      __s_00 = (void *)private_kmalloc((uint)*(ushort *)((int)__s + 200) * 0xc4,0xd0);
      if (__s_00 == (void *)0x0) {
        isp_printf(2,"Failed to allocate sensor device\n");
        isp_printf(2,"Failed to init output channels!\n");
      }
      else {
        memset(__s_00,0,(uint)*(ushort *)((int)__s + 200) * 0xc4);
        pvVar3 = __s_00;
        for (uVar5 = 0; iVar2 = uVar5 * 0x24, uVar5 < *(unsigned int *)((int)__s + 0x154); uVar5 = uVar5 + 1
            ) {
          *(unsigned int *)((int)pvVar3 + 0x70) = uVar5;
          *(int *)((int)pvVar3 + 0x78) = *(int *)((int)__s + 0xcc) + iVar2;
          if (*(char *)(*(int *)((int)__s + 0xcc) + iVar2 + 5) == '\0') {
            *(int *)((int)pvVar3 + 0x74) = 0;
          }
          else {
            if (uVar5 == 0) {
              *(int *)((int)pvVar3 + 0x80) = 0xa40;
              *(int *)((int)pvVar3 + 0x84) = 0x800;
              *(char *)((int)pvVar3 + 0x90) = 1;
              *(char *)((int)pvVar3 + 0x91) = 0;
LAB_00079390:
              *(int *)((int)pvVar3 + 0x88) = 0x80;
            }
            else {
              if (uVar5 == 1) {
                *(int *)((int)pvVar3 + 0x80) = 0x780;
                *(int *)((int)pvVar3 + 0x84) = 0x438;
                *(char *)((int)pvVar3 + 0x90) = 1;
                *(char *)((int)pvVar3 + 0x91) = 1;
                goto LAB_00079390;
              }
              *(int *)((int)pvVar3 + 0x88) = 0x80;
            }
            *(int *)((int)pvVar3 + 0x8c) = 0x80;
            *(int *)((int)pvVar3 + 0x74) = 1;
            private_spin_lock_init((int)pvVar3 + 0x9c);
            *(void **)((int)pvVar3 + 0x7c) = __s;
            *(code **)(*(int *)((int)__s + 0xcc) + iVar2 + 0x1c) = ispcore_pad_event_handle;
            *(void **)(*(int *)((int)__s + 0xcc) + iVar2 + 0x20) = pvVar3;
          }
          pvVar3 = (void *)((int)pvVar3 + 0xc4);
        }
        *(void **)((int)__s + 0x150) = __s_00;
        iVar2 = isp_core_tuning_init(__s);
        *(int *)((int)__s + 0x1bc) = iVar2;
        if (iVar2 != 0) {
          *(int *)((int)__s + 0xe8) = 1;
          private_platform_set_drvdata(param_1,__s);
          *(void **)((int)__s + 0xd4) = __s;
          *(int *)((int)__s + 0x30) = *(int *)(*(int *)((int)__s + 0x1bc) + 0x40c8);
          *(char **)((int)__s + 0x34) = isp_info_proc_fops;
          ispcore_sd = __s;
          sensor_early_init(__s);
          iVar2 = get_isp_clk();
          if (iVar2 == 0) {
            iVar2 = isp_clk;
          }
          isp_clk = iVar2;
          return 0;
        }
        isp_printf(2,"Failed to init tuning module!\n");
        if (1 < *(int *)((int)__s + 0xe8)) {
          ispcore_slake_module(__s);
        }
        private_kfree(*(int *)((int)__s + 0x150));
        *(int *)((int)__s + 0x158) = 1;
        *(int *)((int)__s + 0x150) = 0;
      }
      tx_isp_subdev_deinit(__s);
      uVar1 = 0xffffffea;
    }
    else {
      isp_printf(2,"Failed to init isp module(%d.%d)\n",*(char *)(iVar4 + 2),
                 *(char *)(iVar4 + 3));
      uVar1 = 0xfffffff4;
    }
    private_kfree(__s);
  }
  return uVar1;
}



int system_irq_func_set(int param_1,int param_2)

{
  (&irq_func_cb)[param_1] = param_2;
  return 0;
}



int mbus_to_bayer_write(int param_1)

{
  int uVar1;
  
  switch(param_1) {
  case 0x3001:
  case 0x3003:
  case 0x3004:
  case 0x3005:
  case 0x3006:
  case 0x3007:
  case 0x3008:
  case 0x300b:
    uVar1 = 1;
    break;
  case 0x3002:
  case 0x3009:
  case 0x300a:
  case 0x3011:
    uVar1 = 2;
    break;
  case 0x300c:
  case 0x300e:
  case 0x3010:
  case 0x3013:
    uVar1 = 3;
    break;
  case 0x300d:
  case 0x300f:
  case 0x3012:
  case 0x3014:
    uVar1 = 0;
    break;
  default:
    isp_printf(2,"%s[%d] the format(0x%08x) of input couldn\'t be handled!\n","mbus_to_bayer_write",
               0x153,param_1);
    return 0;
  }
  system_reg_write(8,uVar1);
  return 0;
}



int ispcore_interrupt_service_routine(int param_1)

{
  unsigned int uVar1;
  int iVar2;
  int iVar3;
  int uVar4;
  int iVar5;
  unsigned int uVar6;
  code **ppcVar7;
  unsigned int uVar8;
  char auStack_40 [8];
  int local_38;
  int local_34;
  int local_30;
  int local_2c;
  unsigned int local_28;
  
  iVar5 = *(int *)(param_1 + 0xd4);
  uVar6 = *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0xb4);
  *(unsigned int *)(*(int *)(param_1 + 0xb8) + 0xb8) = uVar6;
  if ((uVar6 & 0x3f8) == 0) {
    iVar3 = *(int *)(iVar5 + 0x15c);
  }
  else {
    isp_printf(1,"ispcore: irq-status 0x%08x, err is 0x%x,0x%x,084c is 0x%x\n",uVar6,uVar6 & 0x3f8,
               0x3f8,*(int *)(*(int *)(param_1 + 0xb8) + 0x84c));
    isp_err = isp_err + 1;
    iVar3 = *(int *)(iVar5 + 0x15c);
  }
  if (iVar3 == 1) {
    return 1;
  }
  if ((uVar6 & 0x1000) != 0) {
    private_schedule_work(fs_work);
  }
  if ((uVar6 & 0x200) != 0) {
    if (*(int *)(iVar5 + 0x17c) != 0) {
      exception_handle();
    }
    isp_overflow = isp_overflow + 1;
  }
  if ((uVar6 & 0x100) != 0) {
    if (*(int *)(iVar5 + 0x17c) != 0) {
      exception_handle();
    }
    isp_breakfrm = isp_breakfrm + 1;
  }
  if ((uVar6 & 0x1000) != 0) {
    if (frame_vb_measure == '\x01') {
      private_do_gettimeofday(&tv_frame_start);
      frame_vb_measure = '\x02';
    }
    if (frame_vb_measure == '\x03') {
      private_do_gettimeofday(&tv_frame_start_next);
      frame_vb_measure = '\x04';
    }
    if (isp_ch0_pre_dequeue_time != 0) {
      private_schedule_work(pre_frame_dequeue);
    }
  }
  if ((uVar6 & 0x2000) != 0) {
    isp_ip_frm_done = isp_ip_frm_done + 1;
  }
  if ((uVar6 & 1) == 0) goto LAB_000799e4;
  isp_ch0_frm_done = isp_ch0_frm_done + 1;
  iVar3 = *(int *)(iVar5 + 0x150);
  if (frame_vb_measure == '\x02') {
    private_do_gettimeofday(&tv_frame_end);
    frame_vb_measure = '\x03';
  }
  iVar2 = *(int *)(param_1 + 0xb8);
  while ((*(unsigned int *)(iVar2 + 0x997c) & 1) == 0) {
    local_38 = *(int *)(iVar2 + 0x9974);
    local_34 = *(int *)(iVar2 + 0x998c);
    local_30 = *(int *)(iVar2 + 0x9990);
    local_2c = 0;
    local_28 = *(int *)(iVar5 + 0x128) << 0x10 |
               *(unsigned int *)(*(int *)(ispcore_sd + 0xb8) + 0x9888) >> 0x10;
    tx_isp_send_event_to_remote(*(int *)(iVar3 + 0x78),0x3000006,auStack_40);
    iVar2 = *(int *)(param_1 + 0xb8);
  }
  iVar3 = *(int *)(iVar5 + 0x1bc);
  if (iVar3 != 0) {
    (**(code **)(iVar3 + 0x40cc))(iVar3,0x4000002,0);
  }
  if (csc_switch == 1) {
    if (*(int *)(*(int *)(iVar5 + 0x1bc) + 0x40a4) == 0) {
      system_reg_write(0x6030,0xff00ff00);
    }
    csc_switch = 0;
    iVar3 = *(int *)(iVar5 + 0x178);
  }
  else {
    iVar3 = *(int *)(iVar5 + 0x178);
  }
  if (iVar3 == 1) {
    isp_day_night_switch_drop_frame_cnt = isp_day_night_switch_drop_frame_num;
    DAT_000d9c65 = isp_day_night_switch_drop_frame_num;
    DAT_000d9c66 = isp_day_night_switch_drop_frame_num;
    isp_day_night_switch_drop_frame_cnt_pdq_interrupt = isp_day_night_switch_drop_frame_num;
    if (*(int *)(*(int *)(iVar5 + 0x1bc) + 0x40a4) == 1) {
      system_reg_write(0x6030,0xff008080);
      iVar3 = *(int *)(iVar5 + 0x1bc);
    }
    else {
      iVar3 = *(int *)(iVar5 + 0x1bc);
    }
    if (iVar3 != 0) {
      (**(code **)(iVar3 + 0x40cc))(iVar3,0x4000003,0);
    }
    *(int *)(iVar5 + 0x178) = 0;
    csc_switch = 1;
LAB_00079988:
    iVar3 = *(int *)(iVar5 + 0x134);
  }
  else {
    if (iVar3 == 2) {
      uVar4 = 0xff00ff00;
LAB_00079974:
      system_reg_write(0x6030,uVar4);
      *(int *)(iVar5 + 0x178) = 0;
      goto LAB_00079988;
    }
    if (iVar3 == 3) {
      uVar4 = 0xff008080;
      goto LAB_00079974;
    }
    iVar3 = *(int *)(iVar5 + 0x134);
  }
  if ((iVar3 == 1) && (*(int *)(iVar5 + 0x11c) == 1)) {
    mbus_to_bayer_write(*(int *)(iVar5 + 0xf4));
    *(int *)(iVar5 + 0x11c) = 0;
  }
  if (first_into == 1) {
    tisp_top_sel(1);
    first_into = 0;
  }
LAB_000799e4:
  if ((uVar6 & 2) != 0) {
    iVar2 = *(int *)(iVar5 + 0x150);
    iVar3 = *(int *)(param_1 + 0xb8);
    while ((*(unsigned int *)(iVar3 + 0x9a7c) & 1) == 0) {
      local_38 = *(int *)(iVar3 + 0x9a74);
      local_34 = *(int *)(iVar3 + 0x9a8c);
      local_30 = *(int *)(iVar3 + 0x9a90);
      local_28 = 0;
      local_2c = 0;
      if (isp_ch1_dequeue_delay_time == 0) {
        tx_isp_send_event_to_remote(*(int *)(iVar2 + 0x13c),0x3000006,auStack_40);
        iVar3 = *(int *)(param_1 + 0xb8);
      }
      else {
        memcpy(ch1_buf,auStack_40,0x1c);
        private_schedule_work(ch1_frame_dequeue_delay);
        iVar3 = *(int *)(param_1 + 0xb8);
      }
    }
  }
  if ((uVar6 & 4) != 0) {
    iVar3 = *(int *)(iVar5 + 0x150);
    iVar5 = *(int *)(param_1 + 0xb8);
    while ((*(unsigned int *)(iVar5 + 0x9b7c) & 1) == 0) {
      local_38 = *(int *)(iVar5 + 0x9b74);
      local_34 = *(int *)(iVar5 + 0x9b8c);
      local_30 = *(int *)(iVar5 + 0x9b90);
      local_28 = 0;
      local_2c = 0;
      tx_isp_send_event_to_remote(*(int *)(iVar3 + 0x200),0x3000006,auStack_40);
      iVar5 = *(int *)(param_1 + 0xb8);
    }
  }
  ppcVar7 = (code **)&irq_func_cb;
  uVar8 = 0;
  iVar5 = 1;
  do {
    uVar1 = uVar8 & 0x1f;
    uVar8 = uVar8 + 1;
    if ((((1 << uVar1 & uVar6) != 0) && (*ppcVar7 != (code *)0x0)) &&
       (iVar3 = (**ppcVar7)(), iVar3 != 1)) {
      iVar5 = iVar3;
    }
    ppcVar7 = ppcVar7 + 1;
  } while (uVar8 != 0x20);
  return iVar5;
}



int tx_isp_vic_remove(int param_1)

{
  unsigned int uVar1;
  int uVar2;
  
  uVar1 = private_platform_get_drvdata();
  uVar2 = 0;
  if (uVar1 != 0) {
    if (uVar1 < 0xfffff001) {
      uVar2 = *(int *)(uVar1 + 0xd4);
    }
    else {
      uVar1 = 0;
    }
  }
  private_platform_set_drvdata(param_1,0);
  tx_isp_subdev_deinit(uVar1);
  private_kfree(uVar2);
  return 0;
}



int tx_isp_vin_remove(int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  
  uVar1 = private_platform_get_drvdata();
  uVar2 = 0;
  if ((uVar1 != 0) && (uVar2 = uVar1, 0xfffff000 < uVar1)) {
    uVar1 = 0;
    uVar2 = uVar1;
  }
  private_platform_set_drvdata(param_1,0);
  tx_isp_subdev_deinit(uVar2);
  private_kfree(uVar1);
  return 0;
}



int tx_isp_csi_remove(int param_1)

{
  unsigned int uVar1;
  unsigned int uVar2;
  int iVar3;
  int *piVar4;
  
  uVar1 = private_platform_get_drvdata();
  uVar2 = 0;
  if ((uVar1 != 0) && (uVar2 = uVar1, 0xfffff000 < uVar1)) {
    uVar2 = 0;
    uVar1 = uVar2;
  }
  piVar4 = *(int **)(uVar2 + 0x138);
  *(unsigned int *)(*(int *)(uVar2 + 0xb8) + 0x10) = *(unsigned int *)(*(int *)(uVar2 + 0xb8) + 0x10) & 0xfffffffe;
  *(unsigned int *)(*(int *)(uVar2 + 0xb8) + 0x10) = *(unsigned int *)(*(int *)(uVar2 + 0xb8) + 0x10) | 1;
  private_platform_set_drvdata(param_1,0);
  private_iounmap(*(int *)(uVar2 + 0x13c));
  iVar3 = *piVar4;
  private_release_mem_region(iVar3,(piVar4[1] + 1) - iVar3);
  tx_isp_subdev_deinit(uVar1);
  private_kfree(uVar2);
  return 0;
}



int tx_isp_fs_remove(void)

{
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  
  iVar1 = private_platform_get_drvdata();
  iVar4 = *(int *)(iVar1 + 0xd4);
  iVar2 = *(int *)(iVar4 + 0xe0);
  for (iVar3 = 0; iVar3 < iVar2; iVar3 = iVar3 + 1) {
    tx_isp_frame_chan_deinit(iVar3 * 0x2ec + *(int *)(iVar4 + 0xdc));
    iVar2 = *(int *)(iVar4 + 0xe0);
  }
  if (*(int *)(iVar4 + 0xdc) != 0) {
    private_kfree();
  }
  tx_isp_subdev_deinit(iVar1);
  private_kfree(iVar4);
  return 0;
}



int tx_isp_remove(int param_1)

{
  int iVar1;
  
  iVar1 = private_platform_get_drvdata();
  private_misc_deregister(iVar1 + 0xc);
  private_proc_remove(*(int *)(iVar1 + 0x11c));
  tx_isp_unregister_platforms(iVar1 + 0x84);
  private_platform_set_drvdata(param_1,0);
  private_kfree(iVar1);
  return 0;
}



int tx_isp_core_remove(void)

{
  int iVar1;
  int iVar2;
  
  iVar1 = private_platform_get_drvdata();
  iVar2 = *(int *)(iVar1 + 0xd4);
  if (*(int *)(iVar2 + 0x1bc) != 0) {
    isp_core_tuning_deinit();
    *(int *)(iVar2 + 0x1bc) = 0;
  }
  if (1 < *(int *)(iVar2 + 0xe8)) {
    ispcore_slake_module(iVar2);
  }
  private_kfree(*(int *)(iVar2 + 0x150));
  *(int *)(iVar2 + 0x158) = 1;
  *(int *)(iVar2 + 0x150) = 0;
  tx_isp_subdev_deinit(iVar1);
  tisp_deinit();
  private_kfree(iVar2);
  return 0;
}


